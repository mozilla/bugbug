{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "jorendorff@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-11-06T01:12:35Z", "type_id": 4, "creation_date": "2015-11-03T21:33:54Z", "id": 1285681, "setter": "jwalden+bmo@mit.edu"}], "content_type": "text/plain", "id": 8682730}, {"creator": "jorendorff@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-11-04T22:21:29Z", "type_id": 4, "creation_date": "2015-11-03T21:34:32Z", "id": 1285682, "setter": "jwalden+bmo@mit.edu"}], "content_type": "text/plain", "id": 8682731}, {"creator": "jorendorff@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-11-06T01:56:04Z", "type_id": 4, "creation_date": "2015-11-03T21:35:06Z", "id": 1285685, "setter": "jwalden+bmo@mit.edu"}], "content_type": "text/plain", "id": 8682732}, {"creator": "jorendorff@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8687279}], "classification": "Components", "creator": "jorendorff@mozilla.com", "cc": ["jwalden+bmo@mit.edu"], "depends_on": [], "creation_time": "2015-11-02T16:01:05Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Another round of Reflect.parse tune-ups", "id": 1220702, "assigned_to_detail": {"email": "jorendorff@mozilla.com", "id": 281791, "name": "jorendorff@mozilla.com", "real_name": "Jason Orendorff [:jorendorff]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "jorendorff@mozilla.com", "comment_count": 10, "comments": [{"text": "In reviving <https://github.com/jorendorff/reflect-stringify>, I have found a bunch of minor bugs in Reflect.parse, mostly places where we return identical JSON for two programs that do not behave the same.", "author": "jorendorff@mozilla.com", "id": 10894594, "time": "2015-11-02T16:01:05Z"}, {"text": "Created attachment 8682730\nPart 1: Replace callback() and newNode() with variadic templates. What could go wrong?", "author": "jorendorff@mozilla.com", "id": 10899807, "time": "2015-11-03T21:33:54Z"}, {"text": "Created attachment 8682731\nPart 2: Fix the .method property of certain FunctionDeclaration nodes", "author": "jorendorff@mozilla.com", "id": 10899811, "time": "2015-11-03T21:34:32Z"}, {"text": "Created attachment 8682732\nPart 3: Distinguish ES6 generators from legacy generators in Reflect.parse() output", "author": "jorendorff@mozilla.com", "id": 10899815, "time": "2015-11-03T21:35:06Z"}, {"text": "That's it for now. Not so shabby!", "author": "jorendorff@mozilla.com", "id": 10899818, "time": "2015-11-03T21:35:49Z"}, {"text": "Comment on attachment 8682730\nPart 1: Replace callback() and newNode() with variadic templates. What could go wrong?\n\nReview of attachment 8682730:\n-----------------------------------------------------------------\n\n::: js/src/builtin/ReflectParse.cpp\n@@ +301,5 @@\n> +    bool callbackHelper(HandleValue fun, Value* begin, Value* p, TokenPos* pos,\n> +                        MutableHandleValue dst)\n> +    {\n> +        // The end of the implementation of callback(). All arguments except\n> +        // loc have already been stored in the half-open range `begin..p`.\n\n\"in the range [begin, p).\"\n\nI will be shocked (shocked, I say) if hazard builds can divine their way through this enough to recognize there are no hazards here.\n\n@@ +320,5 @@\n> +                        HandleValue head, Arguments&&... tail)\n> +    {\n> +        // Recursive loop to store the arguments in the array. This eventually\n> +        // bottoms out in a call to the non-template callbackHelper() above.\n> +        *p++ = head;\n\nIt really feels to me like there's a way to do this without recursion, that would be clearer.  I don't really like recursion for what are basically purely-iterative things, as this is.  I think this alternative works, but its clarity is...unclear:\n\n  auto ignored { (*p++ = Forward<Arguments>(tail))... };\n  (void) ignored;\n\n(Expanding a pack into a braced initializer list *does* evaluate in left-to-right order, interestingly enough -- C++11 [dcl.init.list]p4.)\n\n@@ +384,5 @@\n> +        // call below passes two fewer arguments than we received, as we omit\n> +        // `name` and `value`. This eventually bottoms out in a call to the\n> +        // non-template newNodeHelper() above.\n> +        return defineProperty(obj, name, value)\n> +               && newNodeHelper(obj, Forward<Arguments>(rest)...);\n\n&& at end of previous line.  Tho, I'd also sort of go for |if (!defineProperty(...)) / return false;| too.\n\n@@ +392,5 @@\n> +    // or more properties passed in as arguments. The signature is really more\n> +    // like:\n> +    //\n> +    //     bool newNode(ASTType type, TokenPos* pos,\n> +    //                  {const char *name0, HandleValue value0,}...\n\ns/const char */const char* / here, and above.\n\nFeh, so many of these C strings are already in CommonPropertyNames, or could be added, to avoid all this atomization work.  Another bug.\n\n@@ +628,2 @@\n>  {\n>      MOZ_ASSERT(type > AST_ERROR && type < AST_LIMIT);\n\nMOZ_ASSERT(AST_ERROR < type && type < AST_LIMIT) for readability, IMO.", "author": "jwalden+bmo@mit.edu", "id": 10908959, "time": "2015-11-06T01:12:35Z"}, {"text": "Created attachment 8687279\nPart 1: Replace callback() and newNode() with variadic templates. What could go wrong?", "author": "jorendorff@mozilla.com", "id": 10931103, "time": "2015-11-13T17:27:17Z"}, {"text": "The attached patch should be more obviously GC-correct. I'll also attempt using `...` instead of recursion; don't have time at the moment.", "author": "jorendorff@mozilla.com", "id": 10931110, "time": "2015-11-13T17:28:42Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/5580050d54bdb1d447929f27e2c4b817f7b3fe69\nBug 1220702 - Part 1: Replace callback() and newNode() with variadic templates. What could go wrong? r=Waldo.\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/a0d07644f5696d31ca8137f8060451197621013e\nBug 1220702 - Part 2: Fix the .method property of certain FunctionDeclaration nodes. r=Waldo.\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/603f88cf0a06d0fe8fbabab5ea8c99f922b9d214\nBug 1220702 - Part 3: Distinguish ES6 generators from legacy generators in Reflect.parse() output. r=Waldo.", "author": "jorendorff@mozilla.com", "id": 10939320, "time": "2015-11-17T13:24:04Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/5580050d54bd\nhttps://hg.mozilla.org/mozilla-central/rev/a0d07644f569\nhttps://hg.mozilla.org/mozilla-central/rev/603f88cf0a06", "author": "kwierso@gmail.com", "id": 10941085, "time": "2015-11-17T21:12:32Z"}], "cf_last_resolved": "2015-11-17T21:12:32Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2015-11-17T21:12:32Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript Engine", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla45", "cf_status_firefox44": "---", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "jorendorff@mozilla.com", "id": 281791, "name": "jorendorff@mozilla.com", "real_name": "Jason Orendorff [:jorendorff]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "jwalden+bmo@mit.edu", "id": 83595, "name": "jwalden+bmo@mit.edu", "real_name": "Jeff Walden [:Waldo]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8682730, "added": "review?(jwalden+bmo@mit.edu)"}, {"removed": "", "field_name": "cc", "added": "jwalden+bmo@mit.edu"}], "who": "jorendorff@mozilla.com", "when": "2015-11-03T21:33:54Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "jorendorff@mozilla.com"}], "who": "jorendorff@mozilla.com", "when": "2015-11-03T21:33:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8682731, "added": "review?(jwalden+bmo@mit.edu)"}], "who": "jorendorff@mozilla.com", "when": "2015-11-03T21:34:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8682732, "added": "review?(jwalden+bmo@mit.edu)"}], "who": "jorendorff@mozilla.com", "when": "2015-11-03T21:35:06Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwalden+bmo@mit.edu)", "attachment_id": 8682731, "added": "review+"}], "who": "jwalden+bmo@mit.edu", "when": "2015-11-04T22:21:29Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwalden+bmo@mit.edu)", "attachment_id": 8682730, "added": "review+"}], "who": "jwalden+bmo@mit.edu", "when": "2015-11-06T01:12:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwalden+bmo@mit.edu)", "attachment_id": 8682732, "added": "review+"}], "who": "jwalden+bmo@mit.edu", "when": "2015-11-06T01:56:04Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla45"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-11-17 13:12:32"}, {"removed": "affected", "field_name": "cf_status_firefox45", "added": "fixed"}], "who": "kwierso@gmail.com", "when": "2015-11-17T21:12:32Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}