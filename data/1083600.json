{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "bhackett1024@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-10-21T23:41:20Z", "type_id": 4, "creation_date": "2014-10-16T02:27:26Z", "id": 1006293, "setter": "sphink@gmail.com"}, {"status": "+", "name": "review", "modification_date": "2014-10-27T15:39:09Z", "type_id": 4, "creation_date": "2014-10-16T02:27:26Z", "id": 1006294, "setter": "nmatsakis@mozilla.com"}], "content_type": "text/plain", "id": 8505903}], "classification": "Components", "creator": "bhackett1024@gmail.com", "cc": ["j_schulte@outlook.com", "matafagafo@yahoo.com", "nmatsakis@mozilla.com", "sphink@gmail.com"], "depends_on": [1069688, 1091725, 1109610], "creation_time": "2014-10-16T02:27:26Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "x86", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Use inline data for small transparent typed objects", "id": 1083600, "assigned_to_detail": {"email": "bhackett1024@gmail.com", "id": 346231, "name": "bhackett1024@gmail.com", "real_name": "Brian Hackett (:bhackett)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "bhackett1024@gmail.com", "comment_count": 6, "comments": [{"text": "Created attachment 8505903\npatch\n\nSince bug 1069688 we now support opaque typed objects with inline data.  It would be nice to do the same thing for transparent typed objects too --- even if opaque objects are made the default and are most commonly used, there will still be cases where we create transparent objects and it would be nice if these didn't have a big performance regression attached to them.\n\nThe attached patch allows small transparent typed objects to be created with inline data.  All the complexity here is in allowing these objects to have array buffers constructed for them, which is done using a weak map.  This makes neutering checks more complicated so I just stopped doing them in jitcode entirely, using a new TI object flag to indicate whether any buffers with sized typed object views have been neutered.", "author": "bhackett1024@gmail.com", "id": 9453982, "time": "2014-10-16T02:27:26Z"}, {"text": "Oh, ignore the dom/webidl change, that was accidental (leftover in my tree from testing bug 1073842).", "author": "bhackett1024@gmail.com", "id": 9461808, "time": "2014-10-17T13:29:04Z"}, {"text": "Comment on attachment 8505903\npatch\n\nReview of attachment 8505903:\n-----------------------------------------------------------------\n\nCan you also augment the documentation in ABO.h above the ArrayBufferObject class declaration to mention the possibility of foreign storage?\n\n::: js/src/builtin/TypedObject.cpp\n@@ +2513,5 @@\n> +        typedef HashMap<JSObject *, JSObject *> UnbarrieredMap;\n> +        UnbarrieredMap *unbarrieredMap = reinterpret_cast<UnbarrieredMap *>(baseHashMap);\n> +\n> +        typedef gc::HashKeyRef<UnbarrieredMap, JSObject *> Ref;\n> +        cx->runtime()->gc.storeBuffer.putGeneric(Ref(unbarrieredMap, obj));\n\nBleh. I have a somewhat better thing to use for this, but it mostly stuffs things under the rug. Not for this patch, anyway.\n\n::: js/src/builtin/TypedObject.h\n@@ +73,5 @@\n> + * OutlineTypedObject: Typed objects whose data is owned by another object,\n> + *   which can be either an array buffer or an inline typed object. Outline\n> + *   typed objects may be attached or unattached. An unattached typed object\n> + *   has no memory associated with it. When first created, objects are always\n> + *   attached, but they can become unattached if their buffer is neutered.\n\nThe part about the shape is stale.\n\nThe distinction between \"data\" and \"memory\" is unclear here. I think you separated them so that an object could have no memory, but still say that its data is stored in another object. But when reading this, I immediately wondered what the difference between data and memory was.\n\nMaybe: an OutlineTypedObject is one whose data, when attached, is stored in either an array buffer or an InlineTypedObject. And then maybe describe how to detect neutering (detachment?) for OutlineTypedObjects and InlineTypedObjects? The last sentence here is good.\n\n@@ +800,5 @@\n> +    static InlineTypedObject *create(JSContext *cx, HandleTypeDescr descr);\n> +};\n> +\n> +// Class for a transparent typed object with inline data, which may have a\n> +// lazily allocated array buffer stored in its shape.\n\nStale comment.\n\n@@ +1080,5 @@\n> +    // Keys in this map are InlineTransparentTypedObjects and values are\n> +    // ArrayBufferObjects, but we don't enforce this in the type system due to\n> +    // the extra marking code goop that requires.\n> +    typedef WeakMap<PreBarrieredObject, RelocatablePtrObject> Map;\n> +    Map map;\n\nI'm kind of thinking that we should make a \n\n  WeakMap< PreBarriered<T>, RelocatablePtr<U> >\n\nspecialization that defines an asUnbarriered() that returns a WeakMap<T, U>\n\n::: js/src/gc/Nursery.cpp\n@@ +396,3 @@\n>          // Figure out the size of this object, from the prototype's TypeDescr.\n>          // The objects we are traversing here are all tenured, so we don't need\n>          // to check forwarding pointers.\n\nCan that be asserted? (If somebody wanted to change that in the future, this would be a good place to get an assert.)\n\n::: js/src/jit/IonBuilder.cpp\n@@ +9282,5 @@\n>  \n> +    // The typed object cannot be neutered.\n> +    types::TypeObjectKey *globalType = types::TypeObjectKey::get(&script()->global());\n> +    if (globalType->hasFlags(constraints(), types::OBJECT_FLAG_SIZED_OBJECT_NEUTERED))\n> +        return true;\n\nHow about:\n\n// A sized typed object in this compartment has been neutered, so we require full neuter checks that we do not JIT.\n\nor if you want to stick closer to your original\n\n// The typed object cannot be neutered by setting its length to zero, so we may require a slow path.\n\nOr something. The current comment is too brief for my limited brain to grasp.\n\n::: js/src/jscompartment.cpp\n@@ +56,5 @@\n>      regExps(runtime_),\n>      globalWriteBarriered(false),\n>      propertyTree(thisForCtor()),\n>      selfHostingScriptSource(nullptr),\n> +    lazyBuffers(nullptr),\n\nAt the very least, this should be lazyArrayBuffers.\n\n::: js/src/jscompartment.h\n@@ +113,5 @@\n>  \n>  namespace js {\n>  class AutoDebugModeInvalidation;\n>  class DebugScopes;\n> +class LazyBufferTable;\n\nI keep pondering it, and I'm still not sure about this name. Laziness is important, but I don't know if it's the most relevant thing to call out. And \"buffer\" doesn't necessarily imply \"array buffer\".\n\nHm... how about LazyArrayBuffers? Or ExternalArrayBuffers?\n\n@@ +282,3 @@\n>      js::InnerViewTable innerViews;\n>  \n> +    // Map from typed objects to array buffers lazily created for them.\n\n// Map from inline typed objects to array buffers lazily created for them, which will point to the typed objects' inline memory.\n\n::: js/src/jsinfer.h\n@@ +485,5 @@\n>      /*\n> +     * For a global object, whether any array buffers in this compartment with\n> +     * sized typed object views have been neutered.\n> +     */\n> +    OBJECT_FLAG_SIZED_OBJECT_NEUTERED = 0x00400000,\n\nThis setup is subtle enough that I'd like a mention of why this is tracked (ie, the length check is inadequate.)\n\n::: js/src/vm/ArrayBufferObject.cpp\n@@ +314,5 @@\n> +    // accesses such views needs to be deoptimized so that neuter checks are\n> +    // performed.\n> +    if (buffer->hasSizedObjectViews()) {\n> +        // Make sure the object's type has been instantiated, so the flag\n> +        // change is reflected in type information.\n\nMaybe something like:\n\n// When neutering a buffer with sized typed object views, any jitcode that\n// accesses such views needs to be deoptimized so that neuter checks are\n// performed. This is done by setting a compartment-wide\n// OBJECT_FLAG_SIZED_OBJECT_NEUTERED flag.\n\n...then...\n\n// Make sure the global object's type has been instantiated so the flag change will be observed.\n\nOr something. On first reading, I found the above comment totally cryptic.\n\n@@ +332,5 @@\n> +    if (buffer->firstView()) {\n> +        if (buffer->firstView()->is<InlineTransparentTypedObject>()) {\n> +            // The buffer points to inline data in its first view, so to keep\n> +            // this pointer alive we don't clear out the first view.\n> +            MOZ_ASSERT(buffer->viewListIncomplete());\n\nThis feels magical and brittle. Is it just as good to say\n\nif (buffer->firstView()) {\n  if (buffer->isDataOwnedByFirstView()) {\n    MOZ_ASSERT(buffer->firstView()->is<InlineTransparentTypedObject>());\n  } else {\n    ...\n  }\n}\n\n?\n\n@@ +810,5 @@\n> +ArrayBufferObject::trace(JSTracer *trc, JSObject *obj)\n> +{\n> +    // If this buffer is associated with an inline transparent typed object,\n> +    // fix up the data pointer if the typed object was moved.\n> +    ArrayBufferObject &buf = obj->as<ArrayBufferObject>();\n\nI think isDataOwnedByFirstView() would read better.\n\n::: js/src/vm/ArrayBufferObject.h\n@@ +112,5 @@\n>      enum BufferKind {\n>          PLAIN_BUFFER        =   0, // malloced or inline data\n>          ASMJS_BUFFER        = 0x1,\n>          MAPPED_BUFFER       = 0x2,\n>          KIND_MASK           = ASMJS_BUFFER | MAPPED_BUFFER\n\nThis is going to have to be rebased past luke's changes now.\n\n@@ +135,5 @@\n> +        // missing views will be sized typed objects.\n> +        VIEW_LIST_INCOMPLETE = 0x10,\n> +\n> +        // Views of this buffer might include sized typed objects.\n> +        SIZED_OBJECT_VIEWS  = 0x20\n\nHow about:\n\n// This ArrayBuffer points to data stored inline in its firstView(). The list of views will be missing any sized typed objects based on the owning view. This flag is used for assertions and to prevent asm.js from using such buffers.\nFIRST_VIEW_OWNS_DATA = 0x...,\n\n// Views of this buffer might include sized typed objects. This flag is used to decide whether checking length==0 is adequate for an is-detached check. If any object with this flag is neutered, then the whole compartment is marked as requiring full neuter checks.\nSIZED_OBJECT_VIEWS = 0x...,\n\nI tried to come up with a general name for the flag, but ended up deciding that it was easier to understand with the specific example of sized typed objects. It's unfortunate that a reader would have to know about typed objects, and sized vs unsized, and transparent vs opaque, and inline vs outline data, in order to understand what this flag means and why it's here. \"May have views that would require looking at the buffer to detect neutering\" is hard to condense into a FLAG_NAME.", "author": "sphink@gmail.com", "id": 9481586, "time": "2014-10-21T23:41:20Z"}, {"text": "Comment on attachment 8505903\npatch\n\nReview of attachment 8505903:\n-----------------------------------------------------------------\n\nSorry again for the delay. I second most everything sfink wrote: in every case where I got confused, I found that reading his review comments made it all make sense.\n\nTwo things that may be missing are:\n\n1. a comment in ArrayBufferObject.h explaining the overall ownership strategy: it didn't seem to be written down in a central place. \n2. a comment (perhaps in the text in TypedObject.h) explaining the jit barrier strategy\n\nIt's tough to comment some of these things centrally, I suppose, since they seem to spread across several modules.\n\n::: dom/webidl/Node.webidl\n@@ -25,5 @@\n>    const unsigned short DOCUMENT_NODE = 9;\n>    const unsigned short DOCUMENT_TYPE_NODE = 10;\n>    const unsigned short DOCUMENT_FRAGMENT_NODE = 11;\n>    const unsigned short NOTATION_NODE = 12; // historical\n> -  [Constant]\n\n(I don't actually know anything about webidl or what is going on here.)\n\n::: js/src/builtin/TypedObject.cpp\n@@ +2355,5 @@\n>  {\n>  #ifdef DEBUG\n> +    // Compute offset of private data based on OutlineTransparentTypedObject;\n> +    // both OpaqueOutlineTypedObject and OutlineTransparentTypedObject have the\n> +    // same number of slots, so no problem there.\n\nCan we assert this?\n\n::: js/src/jit/IonBuilder.cpp\n@@ +7231,5 @@\n> +        // If we are not loading the length from the object itself, only\n> +        // optimize if the array buffer can't have been neutered.\n> +        types::TypeObjectKey *globalType = types::TypeObjectKey::get(&script()->global());\n> +        if (globalType->hasFlags(constraints(), types::OBJECT_FLAG_SIZED_OBJECT_NEUTERED))\n> +            return false;\n\nI was never crazy about the \"canBeNeutered\" logic. This compromise (no opt for neutering) makes sense at the moment. I imagine we may want to improve this case later.\n\n@@ +9282,5 @@\n>  \n> +    // The typed object cannot be neutered.\n> +    types::TypeObjectKey *globalType = types::TypeObjectKey::get(&script()->global());\n> +    if (globalType->hasFlags(constraints(), types::OBJECT_FLAG_SIZED_OBJECT_NEUTERED))\n> +        return true;\n\nAgreed, the \"cannot\" in this comment sounds very final, when in fact this is just a current limitation on what we choose to jit.", "author": "nmatsakis@mozilla.com", "id": 9505225, "time": "2014-10-27T15:39:09Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/4ec33eddc6fc", "author": "bhackett1024@gmail.com", "id": 9519077, "time": "2014-10-29T18:15:26Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/4ec33eddc6fc", "author": "cbook@mozilla.com", "id": 9523549, "time": "2014-10-30T13:52:14Z"}], "cf_last_resolved": "2014-10-30T13:52:14Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2014-12-10T17:33:39Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1058340], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript Engine", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla36", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "bhackett1024@gmail.com", "id": 346231, "name": "bhackett1024@gmail.com", "real_name": "Brian Hackett (:bhackett)"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "j_schulte@outlook.com", "id": 496992, "name": "j_schulte@outlook.com", "real_name": "Johannes Schulte [:jschulte]"}, {"email": "matafagafo@yahoo.com", "id": 60457, "name": "matafagafo@yahoo.com", "real_name": "Fernando Hartmann"}, {"email": "nmatsakis@mozilla.com", "id": 427103, "name": "nmatsakis@mozilla.com", "real_name": "Niko Matsakis [:nmatsakis]"}, {"email": "sphink@gmail.com", "id": 359004, "name": "sphink@gmail.com", "real_name": "Steve Fink [:sfink] [:s:]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8505903, "added": "review?(sphink@gmail.com), review?(nmatsakis@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "nmatsakis@mozilla.com, sphink@gmail.com"}], "who": "bhackett1024@gmail.com", "when": "2014-10-16T02:27:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "matafagafo@yahoo.com"}], "who": "matafagafo@yahoo.com", "when": "2014-10-16T12:29:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(sphink@gmail.com)", "attachment_id": 8505903, "added": "review+"}], "who": "sphink@gmail.com", "when": "2014-10-21T23:41:20Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nmatsakis@mozilla.com)", "attachment_id": 8505903, "added": "review+"}], "who": "nmatsakis@mozilla.com", "when": "2014-10-27T15:39:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "j_schulte@outlook.com"}], "who": "j_schulte@outlook.com", "when": "2014-10-30T13:33:10Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "bhackett1024@gmail.com"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla36"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2014-10-30 06:52:14"}], "who": "cbook@mozilla.com", "when": "2014-10-30T13:52:14Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1091725"}], "who": "bhackett1024@gmail.com", "when": "2014-10-30T17:12:37Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1109610"}], "who": "nth10sd@gmail.com", "when": "2014-12-10T17:33:39Z"}], "resolution": "FIXED", "op_sys": "Mac OS X", "cf_fx_points": "---", "cf_blocking_fennec": "---"}