{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "emilio@crisal.io", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "bobbyholley@gmail.com", "id": 313730, "name": "bobbyholley@gmail.com", "real_name": "Bobby Holley (On Leave Until June 11th)"}, {"email": "bzbarsky@mit.edu", "id": 20209, "name": "bzbarsky@mit.edu", "real_name": "Boris Zbarsky [:bz] (Vacation Jun 16-24) (no decent commit message means r-)"}, {"email": "cam@mcc.id.au", "id": 54040, "name": "cam@mcc.id.au", "real_name": "Cameron McCormack (:heycam)"}, {"email": "mreavy@mozilla.com", "id": 74434, "name": "mreavy@mozilla.com", "real_name": "Maire Reavy [:mreavy] Plz needinfo?"}], "cf_last_resolved": "2018-05-30T22:19:15Z", "attachments": [{"creator": "emilio@crisal.io", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-30T07:16:35Z", "type_id": 4, "creation_date": "2018-05-10T16:46:04Z", "id": 1755346, "setter": "cam@mcc.id.au"}], "content_type": "text/x-review-board-request", "id": 8974752}], "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 44, "comments": [{"text": "I don't get the difference between it and IS_IN_NATIVE_ANONYMOUS_SUBTREE.\n\nIt only has two places where that flag is set, and one is very patchy for JS-created NAC.\n\nWe always set this flag on all the subtree of NAC, so it should be equivalent to IsInNativeAnonymousSubtree for those except for the weird canvas case, but arguably the line at:\n\n  https://searchfox.org/mozilla-central/source/layout/base/nsCSSFrameConstructor.cpp#4193\n\nShould be moved inside the not-canvas condition.\n\nAnyway. So the remaining differences are callers to SetIsNativeAnonymousRoot() which don't set the NODE_IS_ANONYMOUS_CONTENT flag. I think that's only editor's manual NAC, which should be fine to change I think.\n\nAm I missing something?", "author": "emilio@crisal.io", "id": 13266233, "time": "2018-05-09T18:25:43Z"}, {"text": "Hmm, I guess this is not true for generated content image elements, unfortunately...\n\nLooks like this setup still ought to be cleaned up. It looks to me that if we have any element under the ::-moz pseudo-elements those wouldn't inherit as expected (they'd inherit from the originating element instead).\n\nCam, wdyt about doing the weird \"inherit from the closest non-NAC ancestor\" only for pseudo-elements, and remove this bit, using IsInNativeAnonymousSubtree() instead pretty everywhere else?", "author": "emilio@crisal.io", "id": 13266269, "time": "2018-05-09T18:41:58Z"}, {"text": "pretty much*", "author": "emilio@crisal.io", "id": 13266280, "time": "2018-05-09T18:45:05Z"}, {"text": "Let me give that a try...", "author": "emilio@crisal.io", "id": 13266290, "time": "2018-05-09T18:48:13Z"}, {"text": "I'm on PTO, but we added this recently because they weren't equivalent. You should be able to dig up the reasoning in the bug, or ask bz. I think cam wasn't involved.", "author": "bobbyholley@gmail.com", "id": 13267797, "time": "2018-05-10T10:26:57Z"}, {"text": "Hmm... Yeah, I think the case where it may not be equivalent is when NAC loads XBL bindings and what not... I _think_ my proposal in comment 1 could avoid the problems this caused. But let me check.", "author": "emilio@crisal.io", "id": 13267932, "time": "2018-05-10T12:19:58Z"}, {"text": "Yeah, I believe one case was xbl generated content in nac subtrees. That has the subtree bit set but not the self bit, since we don't want the nac style inheritance rules to apply there.", "author": "bobbyholley@gmail.com", "id": 13267974, "time": "2018-05-10T12:43:56Z"}, {"text": "(In reply to Bobby Holley (On Leave Until June 11th) from comment #6)\n> Yeah, I believe one case was xbl generated content in nac subtrees. That has\n> the subtree bit set but not the self bit, since we don't want the nac style\n> inheritance rules to apply there.\n\nI think that's fixable inheriting from the closest anonymous root parent, instead of the closest non-anonymous ancestor. Trying that atm.", "author": "emilio@crisal.io", "id": 13267998, "time": "2018-05-10T12:53:18Z"}, {"text": "(In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #7)\n> (In reply to Bobby Holley (On Leave Until June 11th) from comment #6)\n> > Yeah, I believe one case was xbl generated content in nac subtrees. That has\n> > the subtree bit set but not the self bit, since we don't want the nac style\n> > inheritance rules to apply there.\n> \n> I think that's fixable inheriting from the closest anonymous root parent,\n> instead of the closest non-anonymous ancestor. Trying that atm.\n\nBut we want non-root xbl content to inheritance from the flattened tree parent. I don't see how we can preserve that without differentiating \"being in a nac subtree\" from \"is nac itself\".", "author": "bobbyholley@gmail.com", "id": 13268063, "time": "2018-05-10T13:29:14Z"}, {"text": "(In reply to Bobby Holley (On Leave Until June 11th) from comment #8)\n> (In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #7)\n> > (In reply to Bobby Holley (On Leave Until June 11th) from comment #6)\n> > > Yeah, I believe one case was xbl generated content in nac subtrees. That has\n> > > the subtree bit set but not the self bit, since we don't want the nac style\n> > > inheritance rules to apply there.\n> > \n> > I think that's fixable inheriting from the closest anonymous root parent,\n> > instead of the closest non-anonymous ancestor. Trying that atm.\n> \n> But we want non-root xbl content to inheritance from the flattened tree\n> parent. I don't see how we can preserve that without differentiating \"being\n> in a nac subtree\" from \"is nac itself\".\n\nI plan to apply the new rule only to pseudo-elements (which is the only place where it matters and it's observable). Can you think of any reason where that wouldn't work?\n\nHere's the try run fwiw: https://treeherder.mozilla.org/#/jobs?repo=try&revision=00921e97b5d92459d9e8430c660c1b8d6d26cf87", "author": "emilio@crisal.io", "id": 13268091, "time": "2018-05-10T13:37:36Z"}, {"text": "(In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #9)\n> (In reply to Bobby Holley (On Leave Until June 11th) from comment #8)\n> > (In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #7)\n> > > (In reply to Bobby Holley (On Leave Until June 11th) from comment #6)\n> > > > Yeah, I believe one case was xbl generated content in nac subtrees. That has\n> > > > the subtree bit set but not the self bit, since we don't want the nac style\n> > > > inheritance rules to apply there.\n> > > \n> > > I think that's fixable inheriting from the closest anonymous root parent,\n> > > instead of the closest non-anonymous ancestor. Trying that atm.\n> > \n> > But we want non-root xbl content to inheritance from the flattened tree\n> > parent. I don't see how we can preserve that without differentiating \"being\n> > in a nac subtree\" from \"is nac itself\".\n> \n> I plan to apply the new rule only to pseudo-elements (which is the only\n> place where it matters and it's observable). Can you think of any reason\n> where that wouldn't work?\n\nIf somebody happens to use a pseudo element in a nac xbl binding?\n> \n> Here's the try run fwiw:\n> https://treeherder.mozilla.org/#/\n> jobs?repo=try&revision=00921e97b5d92459d9e8430c660c1b8d6d26cf87\n\nI don't expect our test suite to catch something like this. And whether or now we currently have anything in the product that exercises this behivor, we designed this setup (recently) to make sense and do the right thing in the edge cases. So unless there's a compelling architectural reason this needs to change beyond general simplification, I don't see why we should make the setup less sane.\n\nNote that my opinion here would change if we got to a world where we could assert that everything is nac subtrees was itself nac. But we're not there yet.", "author": "bobbyholley@gmail.com", "id": 13268194, "time": "2018-05-10T14:09:15Z"}, {"text": "(In reply to Bobby Holley (On Leave Until June 11th) from comment #10)\n> > I plan to apply the new rule only to pseudo-elements (which is the only\n> > place where it matters and it's observable). Can you think of any reason\n> > where that wouldn't work?\n> \n> If somebody happens to use a pseudo element in a nac xbl binding?\n\nPseudo-elements need to be NAC themselves, even js-created ones. So they would do the right thing. Indeed, this happens already, with the <input type=\"range\">s in the videocontrols bindings, for example.\n\n::before and ::after also do the right thing, since they're NAC roots themselves, and thus they inherit from its parent.\n\n> I don't expect our test suite to catch something like this. And whether or\n> now we currently have anything in the product that exercises this behivor,\n> we designed this setup (recently) to make sense and do the right thing in\n> the edge cases. So unless there's a compelling architectural reason this\n> needs to change beyond general simplification, I don't see why we should\n> make the setup less sane.\n\nSo, I'm not sure I get that. How does the current behavior make sense if we start stashing other NAC elements inside pseudo-elements, for example?\n\nAlso, how is the setup I'm proposing less sane in edge cases than the current setup?\n\n> Note that my opinion here would change if we got to a world where we could\n> assert that everything is nac subtrees was itself nac. But we're not there\n> yet.\n\nI agree that'd be the extra-nice thing to do :)", "author": "emilio@crisal.io", "id": 13268250, "time": "2018-05-10T14:28:33Z"}, {"text": "Also, fwiw, our test-suit does definitely catch this if you get it wrong. A previous attempt of mine with the wrong parent style for the ::-moz-range-track pseudos does definitely complain:\n\n  https://treeherder.mozilla.org/#/jobs?repo=try&revision=4f33c53d3538617cec8f8e970c056366327dc332\n\nAnyway, https://treeherder.mozilla.org/#/jobs?repo=try&revision=72ceebb7a603f235debc031c6217aebaa111134d is the last attempt with a small fix for the first-line bits.", "author": "emilio@crisal.io", "id": 13268260, "time": "2018-05-10T14:34:53Z"}, {"text": "Created attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nInstead of inheriting from the closest non-NAC ancestor, we inherit from the\nclosest native anonymous root's parent, only if we're a pseudo-element.\n\nThat prevents the two issues that caused this flag to be created:\n\n * Following weird NAC inheritance rules in XBL bindings bound to NAC.\n\n   - This is no longer a problem since we only apply the rule only if we're\n     a pseudo-element, and all pseudo-elements hold from NAC.\n\n * Inheriting from the wrong thing if we're a nested NAC subtree.\n\n   - We no longer look past our NAC subtree.\n\nReview commit: https://reviewboard.mozilla.org/r/243140/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/243140/", "author": "emilio@crisal.io", "id": 13268664, "time": "2018-05-10T16:37:19Z"}, {"text": "(In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #11)\n> (In reply to Bobby Holley (On Leave Until June 11th) from comment #10)\n> > > I plan to apply the new rule only to pseudo-elements (which is the only\n> > > place where it matters and it's observable). Can you think of any reason\n> > > where that wouldn't work?\n> > \n> > If somebody happens to use a pseudo element in a nac xbl binding?\n> \n> Pseudo-elements need to be NAC themselves, even js-created ones. So they\n> would do the right thing. Indeed, this happens already, with the <input\n> type=\"range\">s in the videocontrols bindings, for example.\n\nActually this is kind-of not true, that is, JS-created NAC are not anonymous roots by default. But that means that we're already following this nasty inheritance rules in <video> since bug 1318542, because of the ::cue bits (see part 3 of that bug).\n\nThis setup makes it work correctly and allows removing that hack.", "author": "emilio@crisal.io", "id": 13268698, "time": "2018-05-10T16:45:06Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nr?cam too since he is more familiar with the JS-created pseudo setup.", "author": "emilio@crisal.io", "id": 13268702, "time": "2018-05-10T16:46:04Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/243140/diff/1-2/", "author": "emilio@crisal.io", "id": 13268751, "time": "2018-05-10T16:51:17Z"}, {"text": "(In reply to Bobby Holley (On Leave Until June 11th) from comment #4)\n> I'm on PTO, but we added this recently because they weren't equivalent. You\n> should be able to dig up the reasoning in the bug, or ask bz. I think cam\n> wasn't involved.\n\nWhich bug was this?", "author": "cam@mcc.id.au", "id": 13277680, "time": "2018-05-15T02:48:10Z"}, {"text": "(In reply to Cameron McCormack (:heycam) from comment #17)\n> (In reply to Bobby Holley (On Leave Until June 11th) from comment #4)\n> > I'm on PTO, but we added this recently because they weren't equivalent. You\n> > should be able to dig up the reasoning in the bug, or ask bz. I think cam\n> > wasn't involved.\n> \n> Which bug was this?\n\nThis was bug 1331322.", "author": "emilio@crisal.io", "id": 13277877, "time": "2018-05-15T06:47:07Z"}, {"text": "OK, I just read through that bug while trying to page this stuff in again...\n\nJust so I'm absolutely clear, can you summarize exactly what the current behavior is for all cases (regular NAC, editor-created manual NAC, element-backed pseudo NAC such as ::before or ::placeholder, pseudo NAC within NAC created for an XBL binding), and what the new behaviour is with the patch?\n\nAlso, I'm pretty sure that you've written this patch because of the content:url() work you're doing at the moment, so can you also explain how that influences your patch here?", "author": "cam@mcc.id.au", "id": 13283726, "time": "2018-05-17T07:58:39Z"}, {"text": "(In reply to Cameron McCormack (:heycam) from comment #19)\n> Just so I'm absolutely clear, can you summarize exactly what the current\n> behavior is for all cases (regular NAC, editor-created manual NAC,\n> element-backed pseudo NAC such as ::before or ::placeholder, pseudo NAC\n> within NAC created for an XBL binding), and what the new behaviour is with\n> the patch?\n\nSo, right now:\n\n (1) For regular NAC, we set the NODE_IS_ANONYMOUS bit in nsCSSFrameConstructor, which means that all regular NAC inherits from the originating element instead of its parent right now. This patch changes it to inherit regularly, except for pseudos.\n (2) For editor-created NAC, we don't set that bit, so they inherit from their normal parent (though I believe editor only creates one level of NAC, so it should not be an issue). My patch wouldn't change this in any case.\n (3) For element-backed pseudo NAC, that falls into (1) right now. With this patch they would still inherit from the originating element as the only special case.\n (4) For XBL inside NAC, we don't set the NODE_IS_ANONYMOUS bit there, so regular inheritance rules apply. Except when we have a JS-created pseudo, in which case we go up the tree and do set the bit from BindToTree, which causes the behavior to switch. That happens right now when you insert ::cue into the tree, and I think that's the main broken bit why this patch is worth landing (apart from regular cleanup).\n (5) For pseudo NAC created inside XBL, (e.g., something in an XBL binding for NAC doing ::before / ::after stuff), they inherit from the originating element, because we don't set the NODE_IS_ANONYMOUS bits in the XBL content (except when we do, see above). My patch keeps that working by looking at the NAC subtree's root parent, instead of just at the closest non-NAC ancestor.\n (6) For JS-created NAC (::cue), we do set the NODE_IS_ANONYMOUS bit on it and all its ancestors. That's pretty broken.\n\n> Also, I'm pretty sure that you've written this patch because of the\n> content:url() work you're doing at the moment, so can you also explain how\n> that influences your patch here?\n\nIt doesn't influence it in any way, I was just going through how generated content worked, and tried to make sense of why the setup was like it is, and failed initially, then realized that this setup could be simplified / improved / was broken for ::cue and such.", "author": "emilio@crisal.io", "id": 13283771, "time": "2018-05-17T08:20:08Z"}, {"text": "(Assuming you mean NODE_IS_NATIVE_ANONYMOUS here.)\n\n(In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #20)\n>  (1) For regular NAC, we set the NODE_IS_ANONYMOUS bit in\n> nsCSSFrameConstructor, which means that all regular NAC inherits from the\n> originating element instead of its parent right now. This patch changes it\n> to inherit regularly, except for pseudos.\n\nOK.  I think I prefer this, even though it's not what was settled on in bug 1331322.  To me it makes a lot more sense to inherit \"normally\", except for when we need to inherit from a particular ancestor, which at the moment is just pseudo-elements and which currently is always the originating element.  It means we don't need to perform contortions if we want to create NAC subtrees that is more than just one element high and where we want to rely on style inheritance in that subtreee.\n\n>  (2) For editor-created NAC, we don't set that bit, so they inherit from\n> their normal parent (though I believe editor only creates one level of NAC,\n> so it should not be an issue). My patch wouldn't change this in any case.\n>  (3) For element-backed pseudo NAC, that falls into (1) right now. With this\n> patch they would still inherit from the originating element as the only\n> special case.\n>  (4) For XBL inside NAC, we don't set the NODE_IS_ANONYMOUS bit there, so\n> regular inheritance rules apply. Except when we have a JS-created pseudo, in\n> which case we go up the tree and do set the bit from BindToTree, which\n> causes the behavior to switch. That happens right now when you insert ::cue\n> into the tree, and I think that's the main broken bit why this patch is\n> worth landing (apart from regular cleanup).\n>  (5) For pseudo NAC created inside XBL, (e.g., something in an XBL binding\n> for NAC doing ::before / ::after stuff), they inherit from the originating\n> element, because we don't set the NODE_IS_ANONYMOUS bits in the XBL content\n> (except when we do, see above). My patch keeps that working by looking at\n> the NAC subtree's root parent, instead of just at the closest non-NAC\n> ancestor.\n\nWhere the originating element here is the element created by the XBL binding, not the element that has the binding, right?\n\nIf that's the case, wouldn't it make a ::placeholder for an <input type=number> inherit from the <input> in the binding's anonymous content rather than the <input type=number>?  Or is that treated differently from ::before / ::after?\n\n>  (6) For JS-created NAC (::cue), we do set the NODE_IS_ANONYMOUS bit on it\n> and all its ancestors. That's pretty broken.\n\nDoes your patch have any effect on ::cue?  The behaviour we should have, but I'm not sure we do, is that ::cue inherits from the <video>.  It might have been that the hack resulting in bug 1460454 needed the incorrect inherit-from-parent behavior, but if we can somehow resolve that issue too, that would be nice.\n\nWhere does this bit setting happen, incidentally?", "author": "cam@mcc.id.au", "id": 13292304, "time": "2018-05-21T01:18:28Z"}, {"text": "(In reply to Cameron McCormack (:heycam) from comment #21)\n> (Assuming you mean NODE_IS_NATIVE_ANONYMOUS here.)\n> \n> (In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #20)\n> >  (1) For regular NAC, we set the NODE_IS_ANONYMOUS bit in\n> > nsCSSFrameConstructor, which means that all regular NAC inherits from the\n> > originating element instead of its parent right now. This patch changes it\n> > to inherit regularly, except for pseudos.\n> \n> OK.  I think I prefer this, even though it's not what was settled on in bug\n> 1331322.  To me it makes a lot more sense to inherit \"normally\", except for\n> when we need to inherit from a particular ancestor, which at the moment is\n> just pseudo-elements and which currently is always the originating element. \n> It means we don't need to perform contortions if we want to create NAC\n> subtrees that is more than just one element high and where we want to rely\n> on style inheritance in that subtreee.\n> \n> >  (2) For editor-created NAC, we don't set that bit, so they inherit from\n> > their normal parent (though I believe editor only creates one level of NAC,\n> > so it should not be an issue). My patch wouldn't change this in any case.\n> >  (3) For element-backed pseudo NAC, that falls into (1) right now. With this\n> > patch they would still inherit from the originating element as the only\n> > special case.\n> >  (4) For XBL inside NAC, we don't set the NODE_IS_ANONYMOUS bit there, so\n> > regular inheritance rules apply. Except when we have a JS-created pseudo, in\n> > which case we go up the tree and do set the bit from BindToTree, which\n> > causes the behavior to switch. That happens right now when you insert ::cue\n> > into the tree, and I think that's the main broken bit why this patch is\n> > worth landing (apart from regular cleanup).\n> >  (5) For pseudo NAC created inside XBL, (e.g., something in an XBL binding\n> > for NAC doing ::before / ::after stuff), they inherit from the originating\n> > element, because we don't set the NODE_IS_ANONYMOUS bits in the XBL content\n> > (except when we do, see above). My patch keeps that working by looking at\n> > the NAC subtree's root parent, instead of just at the closest non-NAC\n> > ancestor.\n> \n> Where the originating element here is the element created by the XBL\n> binding, not the element that has the binding, right?\n\nNo, it's the element that has the binding, since elements created by XBL anon content aren't native anonymous content, just regular anon content.\n\n> If that's the case, wouldn't it make a ::placeholder for an <input\n> type=number> inherit from the <input> in the binding's anonymous content\n> rather than the <input type=number>?  Or is that treated differently from\n> ::before / ::after?\n\nThere's no XBL anon content involved in <input type=\"number\"> whatsoever.\n\nHowever, now you mention it, <input type=\"number\">s pseudos are really the pseudos of the inner <input> that the number control frame creates... My patch would break that indeed, making them inherit / match against the anonymous input, and thus not match document rules... sigh, tests are lacking for this.\n\nI special-cased this, given if buttons or other elements created by the combobox control frame ever end up having other pseudos, the current behavior would be bizarre / unexpected, I'd say. I think we should make nsNumberControlFrame inherit from nsTextControlFrame instead of just creating an anonymous <input>. I'll file a followup to see whether it's doable.\n\n> >  (6) For JS-created NAC (::cue), we do set the NODE_IS_ANONYMOUS bit on it\n> > and all its ancestors. That's pretty broken.\n> \n> Does your patch have any effect on ::cue?  The behaviour we should have, but\n> I'm not sure we do, is that ::cue inherits from the <video>.  It might have\n> been that the hack resulting in bug 1460454 needed the incorrect\n> inherit-from-parent behavior, but if we can somehow resolve that issue too,\n> that would be nice.\n\nThis is the behavior we have now, but in the process we alter the inheritance behavior of all the parent chain in:\n\n  https://searchfox.org/mozilla-central/rev/0e80033a10ca4f9940c083a33d175c99ab3568e5/dom/base/Element.cpp#1783\n\nMy patch would preserve that behavior, without that hack.", "author": "emilio@crisal.io", "id": 13293825, "time": "2018-05-21T11:44:16Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/243140/diff/2-3/", "author": "emilio@crisal.io", "id": 13293827, "time": "2018-05-21T11:44:56Z"}, {"text": "Oh, apparently we did have a test for that, which my patch somehow didn't regress when I originally wrote that patch[1], but started regressing after bug 1461299. There's something really fishy here, I'll take a closer look.\n\n[1]: https://treeherder.mozilla.org/#/jobs?repo=try&revision=72ceebb7a603f235debc031c6217aebaa111134d", "author": "emilio@crisal.io", "id": 13294212, "time": "2018-05-21T14:53:13Z"}, {"text": "(In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #24)\n> Oh, apparently we did have a test for that, which my patch somehow didn't\n> regress when I originally wrote that patch[1], but started regressing after\n> bug 1461299.\n\n(that bug number range doesn't even make sense I think...)", "author": "emilio@crisal.io", "id": 13294227, "time": "2018-05-21T14:59:25Z"}, {"text": "Ok, I built the revision from my try run and it definitely breaks input[type=\"number\"]::placeholder, which makes me a bit more comfortable with the current patch...", "author": "emilio@crisal.io", "id": 13294677, "time": "2018-05-21T17:56:04Z"}, {"text": "(In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #22)\n> > >  (5) For pseudo NAC created inside XBL, (e.g., something in an XBL binding\n> > > for NAC doing ::before / ::after stuff), they inherit from the originating\n> > > element, because we don't set the NODE_IS_ANONYMOUS bits in the XBL content\n> > > (except when we do, see above). My patch keeps that working by looking at\n> > > the NAC subtree's root parent, instead of just at the closest non-NAC\n> > > ancestor.\n> > \n> > Where the originating element here is the element created by the XBL\n> > binding, not the element that has the binding, right?\n> \n> No, it's the element that has the binding, since elements created by XBL\n> anon content aren't native anonymous content, just regular anon content.\n\nI'm confused then.  If we have:\n\n  <something>  (which has an XBL binding)\n    |\n    +-- <div>  (root of the binding's anonymous content)\n          |\n          +-- <_moz_generated_content_before>  (::before for the <div>)\n\nisn't the <div> the NAC subtree root parent, and isn't that indeed what we want the ::before to inherit from?\n\n> > If that's the case, wouldn't it make a ::placeholder for an <input\n> > type=number> inherit from the <input> in the binding's anonymous content\n> > rather than the <input type=number>?  Or is that treated differently from\n> > ::before / ::after?\n> \n> There's no XBL anon content involved in <input type=\"number\"> whatsoever.\n\nMy mistake, I was confusing <input type=\"number\"> with how a XUL <textbox type=\"number\"> is implemented.\n\nI'm not even sure if ::placeholder works on <textbox type=\"number\"> -- does it?  And where does it inherit from?\n\n> However, now you mention it, <input type=\"number\">s pseudos are really the\n> pseudos of the inner <input> that the number control frame creates... My\n> patch would break that indeed, making them inherit / match against the\n> anonymous input, and thus not match document rules... sigh, tests are\n> lacking for this.\n> \n> I special-cased this, given if buttons or other elements created by the\n> combobox control frame ever end up having other pseudos, the current\n> behavior would be bizarre / unexpected, I'd say. I think we should make\n> nsNumberControlFrame inherit from nsTextControlFrame instead of just\n> creating an anonymous <input>. I'll file a followup to see whether it's\n> doable.\n\nIs <input type=\"number\"> the only thing that creates NAC and wants to basically export the NAC's pseudo-element as its own like this?  If it's a reasonable thing to do, and maybe other NAC implementations of things would want to do it too (are there any XBL-implemented elements that will become NAC as part of de-XBL-ification that might affected?), it might be better to use a flag somewhere to indicate this rather than hard coding it for ::-moz-number.\n\nI know it shouldn't be visible to the author, but I feel a bit uncomfortable having this special case for all pseudo-elements of ::-moz-number rather than just for ::placeholder.  Maybe I'm over thinking this, but it seems like the <input type=\"number\"> implementation should explicitly opt in to this originating element fixup just for the exported pseudo-elements it wants to support.\n\nWDYT?", "author": "cam@mcc.id.au", "id": 13295693, "time": "2018-05-22T05:32:11Z"}, {"text": "IIRC, our motivation for doing the special nac inheritance unconditionally and not just for pseudo elements is that we didn't want there to be an unexpected change in inheritance behavior when somebody decided to make a piece of nac addressable via a pseudo. Number inputs are one example of a nac subtree where lots of stuff is addressable via pseudos for internal reasons, but we could certainly end up with other similar things.", "author": "bobbyholley@gmail.com", "id": 13295768, "time": "2018-05-22T06:54:04Z"}, {"text": "(In reply to Cameron McCormack (:heycam) from comment #27)\n> (In reply to Emilio Cobos \u00c1lvarez [:emilio] from comment #22)\n> > > >  (5) For pseudo NAC created inside XBL, (e.g., something in an XBL binding\n> > > > for NAC doing ::before / ::after stuff), they inherit from the originating\n> > > > element, because we don't set the NODE_IS_ANONYMOUS bits in the XBL content\n> > > > (except when we do, see above). My patch keeps that working by looking at\n> > > > the NAC subtree's root parent, instead of just at the closest non-NAC\n> > > > ancestor.\n> > > \n> > > Where the originating element here is the element created by the XBL\n> > > binding, not the element that has the binding, right?\n> > \n> > No, it's the element that has the binding, since elements created by XBL\n> > anon content aren't native anonymous content, just regular anon content.\n> \n> I'm confused then.  If we have:\n> \n>   <something>  (which has an XBL binding)\n>     |\n>     +-- <div>  (root of the binding's anonymous content)\n>           |\n>           +-- <_moz_generated_content_before>  (::before for the <div>)\n> \n> isn't the <div> the NAC subtree root parent, and isn't that indeed what we\n> want the ::before to inherit from?\n\nYes, sorry, I misread and was thinking about JS-pseudos in XBL. The <_moz_generated_content_before> is the NAC root, so the <div> is the generated element.\n\n> > > If that's the case, wouldn't it make a ::placeholder for an <input\n> > > type=number> inherit from the <input> in the binding's anonymous content\n> > > rather than the <input type=number>?  Or is that treated differently from\n> > > ::before / ::after?\n> > \n> > There's no XBL anon content involved in <input type=\"number\"> whatsoever.\n> \n> My mistake, I was confusing <input type=\"number\"> with how a XUL <textbox\n> type=\"number\"> is implemented.\n> \n> I'm not even sure if ::placeholder works on <textbox type=\"number\"> -- does\n> it?  And where does it inherit from?\n\nDoubt so.\n\n> > However, now you mention it, <input type=\"number\">s pseudos are really the\n> > pseudos of the inner <input> that the number control frame creates... My\n> > patch would break that indeed, making them inherit / match against the\n> > anonymous input, and thus not match document rules... sigh, tests are\n> > lacking for this.\n> > \n> > I special-cased this, given if buttons or other elements created by the\n> > combobox control frame ever end up having other pseudos, the current\n> > behavior would be bizarre / unexpected, I'd say. I think we should make\n> > nsNumberControlFrame inherit from nsTextControlFrame instead of just\n> > creating an anonymous <input>. I'll file a followup to see whether it's\n> > doable.\n> \n> Is <input type=\"number\"> the only thing that creates NAC and wants to\n> basically export the NAC's pseudo-element as its own like this?  If it's a\n> reasonable thing to do, and maybe other NAC implementations of things would\n> want to do it too (are there any XBL-implemented elements that will become\n> NAC as part of de-XBL-ification that might affected?), it might be better to\n> use a flag somewhere to indicate this rather than hard coding it for\n> ::-moz-number.\n\nYes, ::-moz-number-text is the only thing affected for now... I'd rather not make it a flag unless needed, but I don't care much either way :)\n\n> I know it shouldn't be visible to the author, but I feel a bit uncomfortable\n> having this special case for all pseudo-elements of ::-moz-number rather\n> than just for ::placeholder.  Maybe I'm over thinking this, but it seems\n> like the <input type=\"number\"> implementation should explicitly opt in to\n> this originating element fixup just for the exported pseudo-elements it\n> wants to support.\n\nPerhaps! But again I'd rather not make it overgeneric unless there's a use case for it...\n\n(In reply to Bobby Holley (On Leave Until June 11th) from comment #28)\n> IIRC, our motivation for doing the special nac inheritance unconditionally\n> and not just for pseudo elements is that we didn't want there to be an\n> unexpected change in inheritance behavior when somebody decided to make a\n> piece of nac addressable via a pseudo. Number inputs are one example of a\n> nac subtree where lots of stuff is addressable via pseudos for internal\n> reasons, but we could certainly end up with other similar things.\n\nThat makes sense... I wonder how much the inheritance behavior matters in practice btw, I'm pretty sure other browsers don't have such a weird setup for inheritance, and they only mungle the originating element.\n\nIs this something we could consider to change? (splitting originating element vs. element we're inheriting from?). That would remove this issue altogether.", "author": "emilio@crisal.io", "id": 13295867, "time": "2018-05-22T08:07:44Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nhttps://reviewboard.mozilla.org/r/243140/#review251910\n\nI don't think you need review from me here if Cameron is reviewing...", "author": "bzbarsky@mit.edu", "id": 13297302, "time": "2018-05-22T17:39:57Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/243140/diff/3-4/", "author": "emilio@crisal.io", "id": 13297395, "time": "2018-05-22T18:12:34Z"}, {"text": "We decided to go ahead with this for now, since the weird inheritance already has the potential to break some stuff like the ComputedStyle::HasTextDecorationLines() optimizations that are done in layout.\n\nOn the long run we may want to remove support for this weird inheritance, but that requires at least to merge nsNumberControlFrame and nsTextControlFrame, which may be non-trivial...", "author": "emilio@crisal.io", "id": 13299756, "time": "2018-05-23T15:16:02Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nhttps://reviewboard.mozilla.org/r/243140/#review253204\n\n::: commit-message-7bdd0:1\n(Diff revision 4)\n> +Bug 1460382: Remove NODE_IS_NATIVE_ANONYMOUS. r?heycam\n> +\n> +Instead of inheriting from the closest non-NAC ancestor, we inherit from the\n> +closest native anonymous root's parent, only if we're a pseudo-element.\n\nMentioning the removal of the node flag kind of buries the lede here, which is that we are changing how NAC element inheritance works.  So how about saying that in the first line, then in the detailed part of the commit message say that this allows us to remove the node flag.\n\nI suggest a slight tweak to this wording here too for clarity, so maybe:\n\n\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents. r?heycam\n\nCurrently, NAC always inherits from the closest non-NAC ancestor element,\nregardless of whether it is for an element-backed pseudo or not.  This patch\nchanges the inheritance so that for element-backed pseudos, we inherit from\nthe closest native anonymous root's parent, and for other NAC we inherit\nfrom the parent.\n\nThis prevents the following two issues and allows us to remove the\nNODE_IS_NATIVE_ANONYMOUS flag:\n\n...\n\n::: commit-message-7bdd0:8\n(Diff revision 4)\n> +Instead of inheriting from the closest non-NAC ancestor, we inherit from the\n> +closest native anonymous root's parent, only if we're a pseudo-element.\n> +\n> +That prevents the two issues that caused this flag to be created:\n> +\n> + * Following weird NAC inheritance rules in XBL bindings bound to NAC.\n\nCan you go into more detail about what the weird NAC inheritance rules are here?\n\n::: commit-message-7bdd0:10\n(Diff revision 4)\n> +\n> +That prevents the two issues that caused this flag to be created:\n> +\n> + * Following weird NAC inheritance rules in XBL bindings bound to NAC.\n> +\n> +   - This is no longer a problem since we only apply the rule only if we're\n\nOne too many \"only\"s.\n\n::: commit-message-7bdd0:11\n(Diff revision 4)\n> +That prevents the two issues that caused this flag to be created:\n> +\n> + * Following weird NAC inheritance rules in XBL bindings bound to NAC.\n> +\n> +   - This is no longer a problem since we only apply the rule only if we're\n> +     a pseudo-element, and all pseudo-elements hold from NAC.\n\nI don't know what \"hold from NAC\" means.  Reword?\n\n::: commit-message-7bdd0:16\n(Diff revision 4)\n> +     a pseudo-element, and all pseudo-elements hold from NAC.\n> +\n> + * Inheriting from the wrong thing if we're a nested NAC subtree.\n> +\n> +   - We no longer look past our NAC subtree.\n> +\n\nYou should mention the hard coded special case for <input type=\"number\">.\n\n::: layout/generic/nsFrame.cpp\n(Diff revision 4)\n> -  // We need to take special care not to disrupt the style inheritance of frames\n> -  // whose content is NAC but who implement a pseudo (like an anonymous\n> -  // box, or a non-NAC-backed pseudo like ::first-line) that does not match the\n> -  // one that the NAC implements, if any.\n\nIs this part of the comment still relevant?  We still have the check on the element's pseudo type.\n\n::: layout/generic/nsFrame.cpp:9806\n(Diff revision 4)\n> -  Element* element =\n> +    Element* element =\n> -    content && content->IsElement() ? content->AsElement() : nullptr;\n> -  if (element && element->IsNativeAnonymous() && !element->IsNativeScrollbarContent() &&\n> +      aFrame->GetContent()->IsElement()\n> +        ? aFrame->GetContent()->AsElement() : nullptr;\n\nWondering why we don't have a GetAsElement() method...\n\n::: layout/style/res/forms.css\n(Diff revision 4)\n> -  text-decoration-color: inherit;\n> -  text-decoration-style: inherit;\n\nI guess these were unnecessary since bug 1039488, and would have been better in a separate commit (or bug).\n\n::: layout/style/res/forms.css:1059\n(Diff revision 4)\n>    /* This pseudo-element is also an 'input' element (nested inside and\n>     * distinct from the <input type=number> element) so we need to prevent the\n>     * explicit setting of 'text-align' by the general CSS rule for 'input'\n>     * above. We want to inherit its value from its <input type=number>\n>     * ancestor, not have that general CSS rule reset it.\n>     */\n>    text-align: inherit;\n> +  text-decoration: inherit;\n\nIs it true that the general input rule earlier in this file will match the ::-moz-number-text <input> here?  If so, why do we need text-decoration:inherit repeated here?  If not, why do we need text-align:inherit?\n\n::: layout/style/res/forms.css:1068\n(Diff revision 4)\n>     * ancestor, not have that general CSS rule reset it.\n>     */\n>    text-align: inherit;\n> +  text-decoration: inherit;\n> +  ime-mode: inherit;\n> +  resize: inherit;\n\nI don't think resize has any effect on an <input> element, only on <textarea>s.  So I don't think we need this.\n\n::: servo/components/style/gecko/wrapper.rs:569\n(Diff revision 4)\n>      }\n>  }\n>  \n>  impl<'le> GeckoElement<'le> {\n>      #[inline]\n> +    fn closest_anon_subtree_root_parent(self) -> Option<Self> {\n\nGeckoElement is Copy, but for consistency with the other functions defined here let's make this function take &self.\n\n::: servo/components/style/gecko/wrapper.rs:1333\n(Diff revision 4)\n>      #[inline]\n>      fn is_native_anonymous(&self) -> bool {\n> -        use gecko_bindings::structs::NODE_IS_NATIVE_ANONYMOUS;\n> +        self.is_in_native_anonymous_subtree()\n> -        self.flags() & (NODE_IS_NATIVE_ANONYMOUS as u32) != 0\n>      }\n\nI think we should remove this function and have the callers use is_in_native_anonymous_subtree() instead, so that it doesn't look like there are still two separate concepts.", "author": "cam@mcc.id.au", "id": 13368406, "time": "2018-05-28T04:38:10Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nhttps://reviewboard.mozilla.org/r/243140/#review253204\n\n> Mentioning the removal of the node flag kind of buries the lede here, which is that we are changing how NAC element inheritance works.  So how about saying that in the first line, then in the detailed part of the commit message say that this allows us to remove the node flag.\n> \n> I suggest a slight tweak to this wording here too for clarity, so maybe:\n> \n> \n> Bug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents. r?heycam\n> \n> Currently, NAC always inherits from the closest non-NAC ancestor element,\n> regardless of whether it is for an element-backed pseudo or not.  This patch\n> changes the inheritance so that for element-backed pseudos, we inherit from\n> the closest native anonymous root's parent, and for other NAC we inherit\n> from the parent.\n> \n> This prevents the following two issues and allows us to remove the\n> NODE_IS_NATIVE_ANONYMOUS flag:\n> \n> ...\n\nMuch nicer :)\n\n> Is it true that the general input rule earlier in this file will match the ::-moz-number-text <input> here?  If so, why do we need text-decoration:inherit repeated here?  If not, why do we need text-align:inherit?\n\nNo, it will match the anon div, which, unless the `<input>` explicitly inherits it, won't be affected otherwise, that's why we explicitly need to inherit it here.\n\n> I don't think resize has any effect on an <input> element, only on <textarea>s.  So I don't think we need this.\n\nTrue, will remove.", "author": "emilio@crisal.io", "id": 13369072, "time": "2018-05-28T13:31:15Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nhttps://reviewboard.mozilla.org/r/243140/#review253308\n\n::: layout/style/res/forms.css:1059\n(Diff revision 4)\n>    /* This pseudo-element is also an 'input' element (nested inside and\n>     * distinct from the <input type=number> element) so we need to prevent the\n>     * explicit setting of 'text-align' by the general CSS rule for 'input'\n>     * above. We want to inherit its value from its <input type=number>\n>     * ancestor, not have that general CSS rule reset it.\n>     */\n>    text-align: inherit;\n> +  text-decoration: inherit;\n\nNo, the general input rule matches the `.preview-div`, not the `<input>`, so we still need this.\n\n::: layout/style/res/forms.css:1068\n(Diff revision 4)\n>     * ancestor, not have that general CSS rule reset it.\n>     */\n>    text-align: inherit;\n> +  text-decoration: inherit;\n> +  ime-mode: inherit;\n> +  resize: inherit;\n\nAh alright, will remove.", "author": "emilio@crisal.io", "id": 13369074, "time": "2018-05-28T13:31:35Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/243140/diff/4-5/", "author": "emilio@crisal.io", "id": 13369075, "time": "2018-05-28T13:32:40Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nhttps://reviewboard.mozilla.org/r/243140/#review253926\n\n::: layout/style/res/forms.css:1059\n(Diff revision 4)\n>    /* This pseudo-element is also an 'input' element (nested inside and\n>     * distinct from the <input type=number> element) so we need to prevent the\n>     * explicit setting of 'text-align' by the general CSS rule for 'input'\n>     * above. We want to inherit its value from its <input type=number>\n>     * ancestor, not have that general CSS rule reset it.\n>     */\n>    text-align: inherit;\n> +  text-decoration: inherit;\n\nThanks, I see I was mistakenly looking at the `input > .anonymous-div` rule rather than the `input` rule when thinking about the `text-decoration` declaration there.", "author": "cam@mcc.id.au", "id": 13373523, "time": "2018-05-30T07:15:13Z"}, {"text": "Comment on attachment 8974752\nBug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents.\n\nhttps://reviewboard.mozilla.org/r/243140/#review253928", "author": "cam@mcc.id.au", "id": 13373525, "time": "2018-05-30T07:16:35Z"}, {"text": "Pushed by ecoal95@gmail.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/bbb045179d4f\nMake element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents. r=heycam", "author": "pulsebot@bots.tld", "id": 13373632, "time": "2018-05-30T08:15:14Z"}, {"text": "Created web-platform-tests PR https://github.com/web-platform-tests/wpt/pull/11242 for changes under testing/web-platform/tests", "author": "wptsync@mozilla.bugs", "id": 13373645, "time": "2018-05-30T08:25:26Z"}, {"text": "Upstream web-platform-tests status checks passed, PR will merge once commit reaches central.", "author": "wptsync@mozilla.bugs", "id": 13373691, "time": "2018-05-30T08:47:40Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/bbb045179d4f", "author": "aiakab@mozilla.com", "id": 13375947, "time": "2018-05-30T22:19:15Z"}, {"text": "Upstream PR merged", "author": "wptsync@mozilla.bugs", "id": 13379147, "time": "2018-05-31T23:40:56Z"}], "id": 1460382, "priority": "P3", "cc": ["bobbyholley@gmail.com", "bzbarsky@mit.edu", "cam@mcc.id.au", "mreavy@mozilla.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1463511"], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [], "qa_contact": "", "creation_time": "2018-05-09T18:25:43Z", "cf_status_firefox_esr52": "---", "component": "CSS Parsing and Computation", "assigned_to_detail": {"email": "emilio@crisal.io", "id": 546716, "name": "emilio@crisal.io", "real_name": "Emilio Cobos \u00c1lvarez [:emilio]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "mozilla62", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "emilio@crisal.io", "id": 546716, "name": "emilio@crisal.io", "real_name": "Emilio Cobos \u00c1lvarez [:emilio]"}, "whiteboard": "", "mentors": [], "summary": "NODE_IS_NATIVE_ANONYMOUS looks redundant to me", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-31T23:40:56Z", "assigned_to": "emilio@crisal.io", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "bobbyholley@gmail.com"}], "who": "emilio@crisal.io", "when": "2018-05-09T18:25:53Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(cam@mcc.id.au)"}], "who": "emilio@crisal.io", "when": "2018-05-09T18:41:58Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "emilio@crisal.io"}], "who": "emilio@crisal.io", "when": "2018-05-09T18:48:13Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P3"}, {"removed": "", "field_name": "cc", "added": "mreavy@mozilla.com"}], "who": "mreavy@mozilla.com", "when": "2018-05-10T04:28:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8974752, "added": "review?(bzbarsky@mit.edu)"}], "who": "emilio@crisal.io", "when": "2018-05-10T16:37:19Z"}, {"changes": [{"removed": "needinfo?(cam@mcc.id.au)", "field_name": "flagtypes.name", "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8974752, "added": "review?(cam@mcc.id.au)"}], "who": "emilio@crisal.io", "when": "2018-05-10T16:46:04Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(emilio@crisal.io)"}], "who": "cam@mcc.id.au", "when": "2018-05-17T07:58:39Z"}, {"changes": [{"removed": "needinfo?(emilio@crisal.io)", "field_name": "flagtypes.name", "added": ""}], "who": "emilio@crisal.io", "when": "2018-05-17T08:20:08Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(emilio@crisal.io)"}], "who": "cam@mcc.id.au", "when": "2018-05-21T01:18:28Z"}, {"changes": [{"removed": "needinfo?(emilio@crisal.io)", "field_name": "flagtypes.name", "added": ""}], "who": "emilio@crisal.io", "when": "2018-05-21T11:44:16Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(emilio@crisal.io)"}], "who": "cam@mcc.id.au", "when": "2018-05-22T05:32:11Z"}, {"changes": [{"removed": "needinfo?(emilio@crisal.io)", "field_name": "flagtypes.name", "added": ""}], "who": "emilio@crisal.io", "when": "2018-05-22T08:07:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bzbarsky@mit.edu)", "attachment_id": 8974752, "added": ""}], "who": "bzbarsky@mit.edu", "when": "2018-05-22T17:39:57Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1463511"}], "who": "emilio@crisal.io", "when": "2018-05-22T17:55:59Z"}, {"changes": [{"field_name": "attachments.description", "removed": "Bug 1460382: Remove NODE_IS_NATIVE_ANONYMOUS.", "attachment_id": 8974752, "added": "Bug 1460382: Make element-backed pseudos inherit from NAC subtree roots and other NAC inherit from their parents."}], "who": "emilio@crisal.io", "when": "2018-05-28T13:32:40Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(cam@mcc.id.au)", "attachment_id": 8974752, "added": "review+"}], "who": "cam@mcc.id.au", "when": "2018-05-30T07:16:35Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla62"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-30 22:19:15"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "aiakab@mozilla.com", "when": "2018-05-30T22:19:15Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}