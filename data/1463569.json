{"cf_tracking_thunderbird_esr52": "---", "status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "continuation@gmail.com", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "ajones@mozilla.com", "id": 443088, "name": "ajones@mozilla.com", "real_name": "Anthony Jones (:kentuckyfriedtakahe, :k17e)"}, {"email": "aklotz@mozilla.com", "id": 454100, "name": "aklotz@mozilla.com", "real_name": "Aaron Klotz [:aklotz]"}, {"email": "bzbarsky@mit.edu", "id": 20209, "name": "bzbarsky@mit.edu", "real_name": "Boris Zbarsky [:bz] (Vacation Jun 16-24) (no decent commit message means r-)"}, {"email": "erahm@mozilla.com", "id": 496127, "name": "erahm@mozilla.com", "real_name": "Eric Rahm [:erahm] (please no mozreview requests)"}, {"email": "felipc@gmail.com", "id": 208747, "name": "felipc@gmail.com", "real_name": ":Felipe Gomes (needinfo me!)"}, {"email": "florian@queze.net", "id": 149052, "name": "florian@queze.net", "real_name": "Florian Qu\u00e8ze [:florian]"}, {"email": "gandalf@aviary.pl", "id": 41270, "name": "gandalf@aviary.pl", "real_name": "Zibi Braniecki [:gandalf][:zibi]"}, {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, {"email": "mayankleoboy1@gmail.com", "id": 440227, "name": "mayankleoboy1@gmail.com", "real_name": "Mayank Bansal"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "nika@thelayzells.com", "id": 534482, "name": "nika@thelayzells.com", "real_name": ":Nika Layzell"}, {"email": "tcampbell@mozilla.com", "id": 586681, "name": "tcampbell@mozilla.com", "real_name": "Ted Campbell [:tcampbell]"}, {"email": "Tobias.Marty@gmx.de", "id": 572549, "name": "Tobias.Marty@gmx.de", "real_name": "TMart"}], "cf_last_resolved": null, "attachments": [{"creator": "continuation@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "application/pdf", "id": 8979747}, {"creator": "continuation@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "application/pdf", "id": 8979749}, {"creator": "continuation@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8980746}, {"creator": "continuation@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/plain", "id": 8980751}, {"creator": "continuation@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/plain", "id": 8981681}], "votes": 1, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 9, "comments": [{"text": "I'm looking at some scripts to analyze GC logs to try to figure out where our chrome JS memory usage is going. This bug is mostly about sharing my intermediate results so other people can look at them. I don't know what the right component is.", "author": "continuation@gmail.com", "id": 13297861, "time": "2018-05-22T20:59:57Z"}, {"text": "The script I have right now is part of my heap graph repository. The script is g/dom_tree.py. It loads in a GC log (which can be generated by clicking on \"save concise\" in about:memory), and then it computes a dominator tree for all JS objects in memory. (The entry points to the graph are the roots, which includes gray roots. It would be more accurate if it included the CC graph and also took into account CC roots.)\n\nRight now, the script filters out the nodes that dominate the most other nodes, and outputs a .dot file, which can be passed to graphviz to get a PDF.", "author": "continuation@gmail.com", "id": 13297882, "time": "2018-05-22T21:06:01Z"}, {"text": "Created attachment 8979747\nExample output\n\nHere's an example of what the output looks like. I've filtered out all shapes from the graph (skipShape is true in the script), and also all objects that dominate less than 40 objects (\"domLimit\" in the script).\n\nThe number after the descriptor for an object is the number of object it dominates, either immediately or transitively. If no number is present that means that all of the children are displayed in the graph, so you can add them up to see what the total is for the node.\n\nFor instance, \"ContentProcessMessageManager 1095\" means that the content process message manager is holding alive about a thousand objects, which is not too surprising.\n\nAn entry like \"NSVO LoginManagerContent.jsm 60\" roughly means that the local variables for the script LoginManagerContent.jsm dominate 60 other objects. (This is a hack that just looks at the __URI__ property on the NSVO.)\n\nAn entry like \"script PdfStreamConverter.jsm:860 67\" means that the script at line 860 in that JSM dominates 67 objects in the graph.\n\nNodes that are hex values in the graph give the address of a JS object. This isn't useful for somebody just looking at the graph, but if you have the GC edges files, you can look up the object and try to figure out where it is coming from. For instance, \"0x7f6c2c9096a0 173\" looks like it is the Printing object declared in the browser-content.js script, declared here:\n  https://searchfox.org/mozilla-central/rev/eb51d734a8c06ac5973291be9bcc74ed4e999bca/toolkit/content/browser-content.js#493", "author": "continuation@gmail.com", "id": 13297912, "time": "2018-05-22T21:21:50Z"}, {"text": "Created attachment 8979749\nthreshold 500, shapes included\n\nThis is what it looks like if you hide everything that dominates less than 500 nodes and include shapes. Snakes, snakes everywhere! On the up side, increasing the threshold like this lets you see what the nodes are that dominate the most other nodes (self hosting global, message manager stuff, some window global, a backstage pass, 3 different document prototypes, \"WebExtensionPolicy\", and browser-content.js.", "author": "continuation@gmail.com", "id": 13297948, "time": "2018-05-22T21:36:22Z"}, {"text": "Also, keep in mind that these logs are for the entire content process, so they included content memory. The only page I have loaded is example.com, so it should be minimal. (I also have the new tab page disabled, because that adds a ton of memory usage, but should not be relevant with process-per-domain.)", "author": "continuation@gmail.com", "id": 13297955, "time": "2018-05-22T21:37:56Z"}, {"text": "Created attachment 8980746\nExperimental code to report the memory size of things with DumpJSHeap.\n\nI basically copied over the JS GC thing reporting code into the DumpJSHeap code, so each object gets its size logged. It differs a little from the reporting code because all of the memory attributable to that object is combined, whereas with the reporting code it will get split up. (This is getting very close to what the UbiNode stuff does, I believe.)\n\nI also updated my dom_tree.py analysis scipt to take this into account, so it will report the total size of all entrained objects. (I also made it so that the output for the dot format is no longer a hard coded path, and made the default output text, because the graphs are so simple.)", "author": "continuation@gmail.com", "id": 13364953, "time": "2018-05-25T19:49:12Z"}, {"text": "Created attachment 8980751\nsample text output\n\nHere's some sample output, with a threshold set to 1000 bytes. This is my attempt at ASCII art:\n\n| Function AndroidAppender (1560 bytes)\n|-- 0x7facfef8f700 (1432 bytes)\n|---- 0x7facfef8f720 (1056 bytes)\n\nNote that the size is cumulative, so the 1560 bytes for AndroidAppender (Android?!?!) includes the 1432 bytes for the object 0x7facfef8f700.", "author": "continuation@gmail.com", "id": 13364969, "time": "2018-05-25T19:55:17Z"}, {"text": "I added a new option --script-split. First, it tries to figure out if each object is associated with a script file (like content.js) or not. There are only two cases for this right now. First, a script object has a script URL, so it uses that. Second, an NSVO for a JSM (basically a special kind of scope object we use for JSMs) has the __URL__ property set to the URL of the script, so it uses that.\n\nOnce that is done, if there are objects from exactly one script file, it associates that entire dominator tree with that script file. If there are objects from more than one script file, it labels them as \"multiple scripts\". An example of this is the ContentFrameMessageManager. If there are not objects from any script, it labels them as \"no script found\". An example of this is the window global. It is possible that in some of these cases we could do a better job of guessing the script.\n\nHere's an example of the output of for a script (with some redundant lines elided with [...]):\n\nExtensionUtils.jsm (30136 bytes)\n------------------------------\n| script ExtensionUtils.jsm:436 (2344 bytes)\n\n| NSVO ExtensionUtils.jsm (2240 bytes)\n\n| script ExtensionUtils.jsm:379 (1920 bytes)\n|-- Function promiseObserved/< (1168 bytes)\n|---- script ExtensionUtils.jsm:380 (1000 bytes)\n\netc.\n\nThis means that the total retained size of dominator trees associated with ExtensionUtils.jsm was 30kb.", "author": "continuation@gmail.com", "id": 13372963, "time": "2018-05-29T23:49:21Z"}, {"text": "Created attachment 8981681\nsample split-by-script text output\n\nThis is with an m-c from today, so it includes Felipe's various patches (such as bug 1462673) to load things more lazily.", "author": "continuation@gmail.com", "id": 13372970, "time": "2018-05-29T23:51:28Z"}], "id": 1463569, "priority": "P3", "cc": ["ajones@mozilla.com", "aklotz@mozilla.com", "bzbarsky@mit.edu", "erahm@mozilla.com", "felipc@gmail.com", "florian@queze.net", "gandalf@aviary.pl", "kmaglione+bmo@mozilla.com", "mayankleoboy1@gmail.com", "mcastelluccio@mozilla.com", "nfroyd@mozilla.com", "nika@thelayzells.com", "tcampbell@mozilla.com", "Tobias.Marty@gmx.de"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1436250], "qa_contact": "", "creation_time": "2018-05-22T20:59:57Z", "cf_status_firefox_esr52": "---", "component": "JavaScript Engine", "assigned_to_detail": {"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "https://github.com/amccreight/heapgraph/blob/master/g/dom_tree.py", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, "whiteboard": "", "mentors": [], "summary": "Tooling for investigating content process chrome JS memory usage", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-04T12:55:27Z", "assigned_to": "continuation@gmail.com", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "Tobias.Marty@gmx.de"}], "who": "Tobias.Marty@gmx.de", "when": "2018-05-22T21:01:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}], "who": "nfroyd@mozilla.com", "when": "2018-05-22T21:01:43Z"}, {"changes": [{"removed": "", "field_name": "url", "added": "https://github.com/amccreight/heapgraph/blob/master/g/dom_tree.py"}], "who": "continuation@gmail.com", "when": "2018-05-22T21:06:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "aklotz@mozilla.com"}], "who": "aklotz@mozilla.com", "when": "2018-05-22T21:12:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2018-05-22T21:12:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "felipc@gmail.com"}], "who": "felipc@gmail.com", "when": "2018-05-24T20:37:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gandalf@aviary.pl"}], "who": "gandalf@aviary.pl", "when": "2018-05-25T23:55:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mayankleoboy1@gmail.com"}], "who": "mayankleoboy1@gmail.com", "when": "2018-05-26T06:18:15Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "continuation@gmail.com"}], "who": "continuation@gmail.com", "when": "2018-05-29T23:50:25Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P3"}], "who": "nicolas.b.pierron@mozilla.com", "when": "2018-05-30T15:50:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "florian@queze.net"}], "who": "florian@queze.net", "when": "2018-06-04T12:55:27Z"}], "resolution": "", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}