{"cf_tracking_thunderbird_esr52": "---", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "jorge@mozilla.com", "mentors_detail": [], "depends_on": [1460600], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cf_status_firefox57": "wontfix", "cc_detail": [{"email": "andy+bugzilla@mckay.pub", "id": 397635, "name": "andy+bugzilla@mckay.pub", "real_name": "Andy McKay"}, {"email": "aswan@mozilla.com", "id": 561655, "name": "aswan@mozilla.com", "real_name": "Andrew Swan [:aswan] (on PTO until 6/25)"}, {"email": "cosmin.badescu@softvision.ro", "id": 557772, "name": "cosmin.badescu@softvision.ro", "real_name": "CosminB"}, {"email": "gandalf@aviary.pl", "id": 41270, "name": "gandalf@aviary.pl", "real_name": "Zibi Braniecki [:gandalf][:zibi]"}, {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, {"email": "l10n@mozilla.com", "id": 215498, "name": "l10n@mozilla.com", "real_name": "Axel Hecht [:Pike]"}, {"email": "masayuki@d-toybox.com", "id": 34283, "name": "masayuki@d-toybox.com", "real_name": "Masayuki Nakano [:masayuki] (JST, +0900)"}, {"email": "mstanke@mozilla.cz", "id": 402548, "name": "mstanke@mozilla.cz", "real_name": "Michal Stanke (Mozilla.cz) [:MikkCZ][:mstanke] (use needinfo)"}, {"email": "VYV03354@nifty.ne.jp", "id": 5842, "name": "VYV03354@nifty.ne.jp", "real_name": "Masatoshi Kimura [:emk]"}], "cf_last_resolved": "2018-04-27T10:08:18Z", "attachments": [{"creator": "kmaglione+bmo@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-26T20:44:13Z", "type_id": 4, "creation_date": "2018-04-26T01:37:00Z", "id": 1749186, "setter": "aswan@mozilla.com"}, {"status": "+", "name": "review", "modification_date": "2018-04-26T01:57:01Z", "type_id": 4, "creation_date": "2018-04-26T01:37:00Z", "id": 1749187, "setter": "gandalf@aviary.pl"}], "content_type": "text/x-review-board-request", "id": 8971095}, {"creator": "kmaglione+bmo@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-26T07:33:58Z", "type_id": 4, "creation_date": "2018-04-26T04:41:17Z", "id": 1749212, "setter": "masayuki@d-toybox.com"}], "content_type": "text/x-review-board-request", "id": 8971099}, {"creator": "kmaglione+bmo@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-26T17:03:09Z", "type_id": 4, "creation_date": "2018-04-26T03:10:25Z", "id": 1749197, "setter": "aswan@mozilla.com"}, {"status": "+", "name": "review", "modification_date": "2018-04-26T06:59:41Z", "type_id": 4, "creation_date": "2018-04-26T03:10:25Z", "id": 1749198, "setter": "masayuki@d-toybox.com"}], "content_type": "text/x-review-board-request", "id": 8971100}], "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 40, "comments": [{"text": "In order to move away from legacy packaging and legacy manifests, we should follow the lead of bug 1395363 and also move dictionaries to WebExtensions packaging.\n\nDictionaries are much simpler. They just have the manifest and a `dictionaries` folder with two dictionary files (`en-US.aff` and `en-US.dic` would be their names for US English).\n\nThey don't have a chrome.manifest or other manifest flags, so we just need something in the new manifest that identifies them as dictionaries. It could just be a `dictionary` flag, or if we want to be consistent with language packs it could be a `dictionary_id` that corresponds to the locale code.\n\nMost dictionaries on AMO can be found here, if examples are needed:\nhttps://addons.mozilla.org/firefox/language-tools/\n\nThe corresponding issue for AMO support is here:\nhttps://github.com/mozilla/addons-server/issues/6739", "author": "jorge@mozilla.com", "id": 12774514, "time": "2017-10-19T19:42:38Z"}, {"text": "Thoughts:\n\nWould we want to support multi-dictionary packages? \nWould we want to make sure that in the future we can put dictionaries in langpacks?", "author": "gandalf@aviary.pl", "id": 12774540, "time": "2017-10-19T19:51:03Z"}, {"text": "> Would we want to support multi-dictionary packages? \n\nWe don't support those now, right? Assuming that, I think it's best to keep them separate. That way they can be handled independently on AMO and the Add-ons Manager. We moved away from multi-XPI installers because they were too rare and wasteful to maintain.\n\n> Would we want to make sure that in the future we can put dictionaries in langpacks?\n\nI think those should also be separate for the same reasons.", "author": "jorge@mozilla.com", "id": 12774676, "time": "2017-10-19T20:41:02Z"}, {"text": "I'm not advocating for changing how we package, but I think we should design the manifest.json structure so that we can be more flexible in the future without having to alter the schema", "author": "gandalf@aviary.pl", "id": 12774708, "time": "2017-10-19T20:51:16Z"}, {"text": "From a quick glance, it looks like the naming of the files and having them in a directory is a constraint of mozISpellCheckingEngine.  I propose that we use all the regular shared manifest properties (name, version, author, etc) and add a new property \"dictionary_dir\" (the underscore convention is already used throughout manifest.json...) that specifies where (inside the xpi) the \"langcode.eff\" and \"langcode.dic\" files are.\n\n(In reply to Zibi Braniecki [:gandalf][:zibi] from comment #1)\n> Would we want to support multi-dictionary packages? \n\nIt looks like this might \"just work\" if you put files for two different languages into the dictionaries directory?\n\n> Would we want to make sure that in the future we can put dictionaries in\n> langpacks?\n\nI think this format would naturally support that.  For now an xpi would be invalid if it includes both \"langpack_id\" and \"dictionary_dir\" properties, but that could be changed later.  I think the biggest challenge if we want to do that would be with the UX -- we have separate categories in about:addons for Dictionaries and Language Packs.  If I have something that has both and I disable it in one of those categories, that would also disable it in the other category which is not obvious or intuitive.  We could group them together in about:addons but that would be a chunk of front-end work.  Anyway, that's all for some time in the future, not right now...", "author": "aswan@mozilla.com", "id": 12822704, "time": "2017-11-07T00:53:40Z"}, {"text": "That sounds good to me!\n\n> It looks like this might \"just work\" if you put files for two different languages into the dictionaries directory?\n\nIn that case, would there be any manifest.json field with the list of language codes for which the dictionaries are bundled in the package?", "author": "gandalf@aviary.pl", "id": 12822710, "time": "2017-11-07T00:58:51Z"}, {"text": "(In reply to Zibi Braniecki [:gandalf][:zibi] from comment #5)\n> > It looks like this might \"just work\" if you put files for two different languages into the dictionaries directory?\n> \n> In that case, would there be any manifest.json field with the list of\n> language codes for which the dictionaries are bundled in the package?\n\nThat does seem like a useful thing to have, for organizing on AMO if nothing else, but I'm not sure what we would actually do with that information when installing a dictionary.  It looks like mozISpellCheckingEngine already derives the language code from the basename of the .aff and .dic files when scanning the provided directory [1].  If we put it into a manifest property too then its just something we have to keep in sync between the add-ons manager and mozISpellCheckingEngine :(\n\n[1] http://searchfox.org/mozilla-central/rev/7e090b227f7a0ec44d4ded604823d48823158c51/extensions/spellcheck/hunspell/glue/mozHunspell.cpp#446-469", "author": "aswan@mozilla.com", "id": 12822754, "time": "2017-11-07T01:18:25Z"}, {"text": "*** Bug 1452330 has been marked as a duplicate of this bug. ***", "author": "aswan@mozilla.com", "id": 13190792, "time": "2018-04-09T03:31:11Z"}, {"text": "I'd rather we list the languages and the dictionary files that belong to them explicitly in the manifest, even if only so that we don't have to do directory scans to load them. If that requires changing mozISpellCheckEngine, so be it.", "author": "kmaglione+bmo@mozilla.com", "id": 13190795, "time": "2018-04-09T03:47:09Z"}, {"text": "Created attachment 8971095\nBug 1410214: Implement support for WebExtension-style dictionary add-ons.\n\nReview commit: https://reviewboard.mozilla.org/r/239888/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/239888/", "author": "kmaglione+bmo@mozilla.com", "id": 13234225, "time": "2018-04-26T01:37:00Z"}, {"text": "Comment on attachment 8971095\nBug 1410214: Implement support for WebExtension-style dictionary add-ons.\n\nhttps://reviewboard.mozilla.org/r/239888/#review245568\n\nLooks great! Thanks Kris!\n\nA few things I'd like to see in the followups:\n\n - unpacking adds to complexity. Would be nice to get spellchecking to be able to handle packaged extensions\n - langpack+dictionaries combo. Now that both langpacks and dictionaries are webextensions and can handle multiple locales, it would be nice to finalize it by ability to get both in one.", "author": "gandalf@aviary.pl", "id": 13234237, "time": "2018-04-26T01:57:01Z"}, {"text": "Created attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nReview commit: https://reviewboard.mozilla.org/r/239892/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/239892/", "author": "kmaglione+bmo@mozilla.com", "id": 13234290, "time": "2018-04-26T03:10:25Z"}, {"text": "Created attachment 8971100\nBug 1410214: Part 3 - Support packed WebExtension dictionaries.\n\nReview commit: https://reviewboard.mozilla.org/r/239894/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/239894/", "author": "kmaglione+bmo@mozilla.com", "id": 13234291, "time": "2018-04-26T03:10:25Z"}, {"text": "Comment on attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/239892/diff/1-2/", "author": "kmaglione+bmo@mozilla.com", "id": 13234332, "time": "2018-04-26T04:41:17Z"}, {"text": "Comment on attachment 8971100\nBug 1410214: Part 3 - Support packed WebExtension dictionaries.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/239894/diff/1-2/", "author": "kmaglione+bmo@mozilla.com", "id": 13234333, "time": "2018-04-26T04:41:17Z"}, {"text": "Comment on attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nhttps://reviewboard.mozilla.org/r/239892/#review245600\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.h:1\n(Diff revision 2)\n> +#ifndef mozHunspellFileMgr_h\n\nWhy don't you add license block here?\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.h:11\n(Diff revision 2)\n> +#include \"mozilla/Result.h\"\n> +#include \"mozilla/ResultExtensions.h\"\n> +#include \"nsIInputStream.h\"\n> +#include \"nsReadLine.h\"\n> +\n> +class FileMgr final\n\nHmm, I don't like this name and namespace, but we need to keep this for existing code of Hunspell, sigh.\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.h:14\n(Diff revision 2)\n> +#include \"nsReadLine.h\"\n> +\n> +class FileMgr final\n> +{\n> +public:\n> +  FileMgr(const char* filename, const char* key = nullptr);\n\nnit: use \"a\" prefix for arguments and please explain what the arguments mean with comment.\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.h:17\n(Diff revision 2)\n> +  bool getline(std::string&);\n> +  int getlinenum() const { return mLineNum; }\n\nSigh, those method names are different from out coding styles, but they need to be so...\n\nAnyway, could you add explanation what they do?\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.cpp:1\n(Diff revision 2)\n> +#include \"mozHunspellFileMgr.h\"\n\nWhy don't you add license block here?\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.cpp:13\n(Diff revision 2)\n> +\n> +using namespace mozilla;\n> +\n> +FileMgr::FileMgr(const char* filename, const char* key)\n> +{\n> +  Unused << NS_WARN_IF(Open(nsDependentCString(filename)).isErr());\n\nDon't use NS_WARN_IF() as this style. Please use NS_WARNING_ASSERTION() instead. E.g.,\n\nDebugOnly<Result<Ok, nsresult>> ret = Open(...);\nNS_WARNING_ASSERTION(!ret.IsErr(),\n  \"...\");\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.cpp:17\n(Diff revision 2)\n> +FileMgr::Open(const nsACString& aPath)\n> +{\n> +  nsCOMPtr<nsIURI> uri;\n\nShouldn't we check if current context is enough safe for reading a local file?\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.cpp:41\n(Diff revision 2)\n> +FileMgr::ReadLine()\n> +{\n> +  if (!mStream) {\n\nShouldn't we need to do security check?\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.cpp:47\n(Diff revision 2)\n> +{\n> +  if (!mStream) {\n> +    return Err(NS_ERROR_NOT_INITIALIZED);\n> +  }\n> +\n> +  nsCString line;\n\nI'm not sure if this can be nsAutoCString. If not, how about to make ReadLine() take an out argument? Although, I don't know if usual length of each line is less than 64 characters.\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.cpp:61\n(Diff revision 2)\n> +  auto res = ReadLine();\n> +  if (res.isErr()) {\n> +    return false;\n> +  }\n> +\n> +  nsCString line = res.unwrap();\n> +  result.assign(line.BeginReading(), line.Length());\n\nIf we use nsAutoCString here and each line is enough short for nsAutoCString, we don't need to allocate memory space in the heap. That must make this faster.", "author": "masayuki@d-toybox.com", "id": 13234543, "time": "2018-04-26T06:53:45Z"}, {"text": "Comment on attachment 8971100\nBug 1410214: Part 3 - Support packed WebExtension dictionaries.\n\nhttps://reviewboard.mozilla.org/r/239894/#review245608\n\nAssuming that this won't break dictionary files in unicode path.\n\n::: extensions/spellcheck/hunspell/glue/mozHunspell.h:70\n(Diff revision 2)\n> +#include \"nsIURI.h\"\n>  #include \"nsIObserver.h\"\n\nFor keeping A-Z order, nsIURI.h should be below nsIObserver.h.\n\n::: extensions/spellcheck/hunspell/glue/mozHunspell.cpp:77\n(Diff revision 2)\n>  #include \"mozInlineSpellChecker.h\"\n>  #include \"mozilla/Services.h\"\n>  #include <stdlib.h>\n>  #include \"nsIPrefService.h\"\n>  #include \"nsIPrefBranch.h\"\n> +#include \"nsNetUtil.h\"\n\nHmm, but this file's includes are messy...\n\n::: extensions/spellcheck/hunspell/glue/mozHunspell.cpp:168\n(Diff revision 2)\n> -#ifdef XP_WIN\n> +  nsresult rv = affFile->GetSpec(affFileName);\n> -  nsAutoString affFileNameU;\n> -  nsresult rv = affFile->GetPath(affFileNameU);\n>    NS_ENSURE_SUCCESS(rv, rv);\n\nHmm, I hope that nsIURI supports unicode file path completely.", "author": "masayuki@d-toybox.com", "id": 13234548, "time": "2018-04-26T06:59:41Z"}, {"text": "Comment on attachment 8971100\nBug 1410214: Part 3 - Support packed WebExtension dictionaries.\n\nKimura-san, if you think that using nsIURI is not enough for handling dictionaries in unicode path, mark this as r-.", "author": "masayuki@d-toybox.com", "id": 13234550, "time": "2018-04-26T07:01:35Z"}, {"text": "Comment on attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nhttps://reviewboard.mozilla.org/r/239892/#review245600\n\n> Shouldn't we check if current context is enough safe for reading a local file?\n\nI can't think of any checks that would be necessary.\n\n> Shouldn't we need to do security check?\n\nNo. Open2() does security checks, but these are system principal loads, anyway.", "author": "kmaglione+bmo@mozilla.com", "id": 13234562, "time": "2018-04-26T07:04:17Z"}, {"text": "(In reply to Masayuki Nakano [:masayuki] (JST, +0900) from comment #16)\n> Assuming that this won't break dictionary files in unicode path.\n\nIt won't. If there are dictionary files with files we can't read using file: or jar: URIs, then we won't be able to load most of the profile or omni jar, anyway. But I really want to get rid of loading dictionaries from plain files altogether. They should really all be loaded from omni.ja or extension XPIs.", "author": "kmaglione+bmo@mozilla.com", "id": 13234567, "time": "2018-04-26T07:06:40Z"}, {"text": "Comment on attachment 8971095\nBug 1410214: Implement support for WebExtension-style dictionary add-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/239888/diff/1-2/", "author": "kmaglione+bmo@mozilla.com", "id": 13234577, "time": "2018-04-26T07:15:58Z"}, {"text": "Comment on attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/239892/diff/2-3/", "author": "kmaglione+bmo@mozilla.com", "id": 13234578, "time": "2018-04-26T07:15:58Z"}, {"text": "Comment on attachment 8971100\nBug 1410214: Part 3 - Support packed WebExtension dictionaries.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/239894/diff/2-3/", "author": "kmaglione+bmo@mozilla.com", "id": 13234579, "time": "2018-04-26T07:15:58Z"}, {"text": "Comment on attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nhttps://reviewboard.mozilla.org/r/239892/#review245620\n\nOkay, thanks!", "author": "masayuki@d-toybox.com", "id": 13234603, "time": "2018-04-26T07:33:58Z"}, {"text": "Comment on attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nhttps://reviewboard.mozilla.org/r/239892/#review245700\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.cpp:31\n(Diff revision 3)\n> +  nsCOMPtr<nsIURI> uri;\n> +\n> +  nsresult rv = NS_NewURI(getter_AddRefs(uri), aPath);\n> +  if (NS_FAILED(rv)) {\n> +    nsCOMPtr<nsIFile> file;\n> +    MOZ_TRY(NS_NewNativeLocalFile(aPath, false, getter_AddRefs(file)));\n\nHow can this work with Unicode paths on Windows?", "author": "VYV03354@nifty.ne.jp", "id": 13234920, "time": "2018-04-26T10:22:25Z"}, {"text": "(In reply to Kris Maglione [:kmag] (long backlog; ping on IRC if you're blocked) from comment #19)\n> (In reply to Masayuki Nakano [:masayuki] (JST, +0900) from comment #16)\n> > Assuming that this won't break dictionary files in unicode path.\n> \n> It won't. If there are dictionary files with files we can't read using file:\n> or jar: URIs, then we won't be able to load most of the profile or omni jar,\n> anyway. But I really want to get rid of loading dictionaries from plain\n> files altogether. They should really all be loaded from omni.ja or extension\n> XPIs.\n\nMost other loads from profile or omni jar deal with Unicode paths correctly. Even if some of them do not, we should fix them instead of introducing yet another breakage.", "author": "VYV03354@nifty.ne.jp", "id": 13234928, "time": "2018-04-26T10:24:27Z"}, {"text": "Please add an automated test to make sure that Unicode paths will not break dictionaries.", "author": "VYV03354@nifty.ne.jp", "id": 13234934, "time": "2018-04-26T10:28:34Z"}, {"text": "Comment on attachment 8971095\nBug 1410214: Implement support for WebExtension-style dictionary add-ons.\n\nhttps://reviewboard.mozilla.org/r/239888/#review245840\n\nThis is a nit but the only thing I don't like about this is the `.dic` path in the manifest from which `.aff` is quietly derived.  How about just including the path with no extension and derive both files from that?\n\n::: extensions/spellcheck/idl/mozISpellCheckingEngine.idl:96\n(Diff revision 2)\n> +   */\n> +  void addDictionary(in AString lang, in nsIFile dir);\n> +\n> +  /**\n> +   * Remove a dictionary with the given language code and path. If the path does\n> +   * not match that of the current entry with the given languate code, it is not\n\ntypo\n\n::: toolkit/components/extensions/Extension.jsm:66\n(Diff revision 2)\n>    this, \"processScript\",\n>    () => Cc[\"@mozilla.org/webextensions/extension-process-script;1\"]\n>            .getService().wrappedJSObject);\n>  \n>  XPCOMUtils.defineLazyGetter(\n> +  this, \"OSPath\", () => {\n\nPlease add a comment explaining that this is about manipulating paths that appear in the manifest which always use / as a separator, so directly importing the Unix backend is deliberate.\n\n::: toolkit/components/extensions/Extension.jsm:732\n(Diff revision 2)\n>  \n>  \n>        this.startupData = {chromeEntries, langpackId, l10nRegistrySources, languages};\n> +    } else if (this.type == \"dictionary\") {\n> +      let dictionaries = {};\n> +      for (let [lang, path] of Object.entries(manifest.dictionaries)) {\n\nI don't know that much about locale codes, is the regexp in the manifest sufficient to validate them or is there additional validation that could/should happen here?\n\n::: toolkit/components/extensions/Extension.jsm:1889\n(Diff revision 2)\n> +      // Make sure that any dictionary we provided is no longer used.\n> +      if (spellCheck.dictionary in this.dictionaries) {\n> +        spellCheck.dictionary = spellCheck.dictionary;\n> +      }\n\nI don't understand this", "author": "aswan@mozilla.com", "id": 13235978, "time": "2018-04-26T16:42:51Z"}, {"text": "Comment on attachment 8971100\nBug 1410214: Part 3 - Support packed WebExtension dictionaries.\n\nhttps://reviewboard.mozilla.org/r/239894/#review245854", "author": "aswan@mozilla.com", "id": 13236043, "time": "2018-04-26T17:03:09Z"}, {"text": "Comment on attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nhttps://reviewboard.mozilla.org/r/239892/#review245700\n\n> How can this work with Unicode paths on Windows?\n\nI don't know if it works with Unicode paths on Windows, but it doesn't matter, because we don't actually use it. After part 3, we always load dictionaries using URLs.", "author": "kmaglione+bmo@mozilla.com", "id": 13236440, "time": "2018-04-26T19:25:15Z"}, {"text": "(In reply to Masatoshi Kimura [:emk] from comment #25)\n> (In reply to Kris Maglione [:kmag] (long backlog; ping on IRC if you're\n> blocked) from comment #19)\n> > (In reply to Masayuki Nakano [:masayuki] (JST, +0900) from comment #16)\n> > > Assuming that this won't break dictionary files in unicode path.\n> > \n> > It won't. If there are dictionary files with files we can't read using file:\n> > or jar: URIs, then we won't be able to load most of the profile or omni jar,\n> > anyway. But I really want to get rid of loading dictionaries from plain\n> > files altogether. They should really all be loaded from omni.ja or extension\n> > XPIs.\n> \n> Most other loads from profile or omni jar deal with Unicode paths correctly.\n> Even if some of them do not, we should fix them instead of introducing yet\n> another breakage.\n\nMy point here is that most of what we load from the profile or omni jar use file: or jar: URLs the same way we do here. If they work there, they work here. If they don't work there, we have bigger problems.", "author": "kmaglione+bmo@mozilla.com", "id": 13236451, "time": "2018-04-26T19:28:15Z"}, {"text": "Comment on attachment 8971095\nBug 1410214: Implement support for WebExtension-style dictionary add-ons.\n\nhttps://reviewboard.mozilla.org/r/239888/#review245840\n\n> I don't know that much about locale codes, is the regexp in the manifest sufficient to validate them or is there additional validation that could/should happen here?\n\nThe schema does the same validation for these properties as it does for langpack add-ons, so it's probably good enough. The dictionary service doesn't actually care much what the dictionaries are called, and in old-style dictionary add-ons, they could be named... pretty much anything.\n\n> I don't understand this\n\nSetting the dictionary property causes hunspell to reload the dictionary with that name. If the current dictionary was provided by the extension, we need to force it to reload at this point so that we either fall back to a builtin dictionary or to no dictionary at all.", "author": "kmaglione+bmo@mozilla.com", "id": 13236492, "time": "2018-04-26T19:50:24Z"}, {"text": "Comment on attachment 8971095\nBug 1410214: Implement support for WebExtension-style dictionary add-ons.\n\nhttps://reviewboard.mozilla.org/r/239888/#review245840\n\n> Setting the dictionary property causes hunspell to reload the dictionary with that name. If the current dictionary was provided by the extension, we need to force it to reload at this point so that we either fall back to a builtin dictionary or to no dictionary at all.\n\nI see, can you add a comment explaining that the setter has that side effect then?", "author": "aswan@mozilla.com", "id": 13236598, "time": "2018-04-26T20:32:01Z"}, {"text": "Comment on attachment 8971095\nBug 1410214: Implement support for WebExtension-style dictionary add-ons.\n\nhttps://reviewboard.mozilla.org/r/239888/#review245948", "author": "aswan@mozilla.com", "id": 13236648, "time": "2018-04-26T20:44:13Z"}, {"text": "Comment on attachment 8971099\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs.\n\nhttps://reviewboard.mozilla.org/r/239892/#review245958\n\n::: extensions/spellcheck/hunspell/glue/mozHunspellFileMgr.cpp:31\n(Diff revision 3)\n> +  nsCOMPtr<nsIURI> uri;\n> +\n> +  nsresult rv = NS_NewURI(getter_AddRefs(uri), aPath);\n> +  if (NS_FAILED(rv)) {\n> +    nsCOMPtr<nsIFile> file;\n> +    MOZ_TRY(NS_NewNativeLocalFile(aPath, false, getter_AddRefs(file)));\n\nWhy is this necessary if it is never used? Please remove it because it blocks bug 1420827.", "author": "VYV03354@nifty.ne.jp", "id": 13236779, "time": "2018-04-26T21:23:36Z"}, {"text": "(In reply to Masatoshi Kimura [:emk] from comment #34)\n> Why is this necessary if it is never used? Please remove it because it\n> blocks bug 1420827.\n\nIt was necessary as a stepping stone between parts 2 and 3. After that, I left it for compatibility with the stock Hunspell API, which deals with native paths. But that's not really necessary, so I can remove it in part 3 if you prefer.", "author": "kmaglione+bmo@mozilla.com", "id": 13236802, "time": "2018-04-26T21:33:16Z"}, {"text": "(In reply to Kris Maglione [:kmag] (long backlog; ping on IRC if you're blocked) from comment #35)\n> It was necessary as a stepping stone between parts 2 and 3. After that, I\n> left it for compatibility with the stock Hunspell API, which deals with\n> native paths. But that's not really necessary, so I can remove it in part 3\n> if you prefer.\n\nOK, please remove it in part 3.", "author": "VYV03354@nifty.ne.jp", "id": 13236931, "time": "2018-04-26T22:03:28Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/2f1e8f0e6b5316f9119a7111100af50c4b7025af\nBug 1410214: Part 1 - Implement support for WebExtension-style dictionary add-ons. r=aswan,gandalf\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/3dd497b3e3f15b06e3e786d00addcd5ef85b97cb\nBug 1410214: Part 2 - Add a stub Hunspell FileMgr that allows it to read URLs. r=masayuki\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/30448613bb72e41e386baf2e5e88cabd5ff720a8\nBug 1410214: Part 3 - Support packed WebExtension dictionaries. r=aswan,masayuki", "author": "kmaglione+bmo@mozilla.com", "id": 13237314, "time": "2018-04-27T02:18:23Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/2f1e8f0e6b53\nhttps://hg.mozilla.org/mozilla-central/rev/3dd497b3e3f1\nhttps://hg.mozilla.org/mozilla-central/rev/30448613bb72", "author": "csabou@mozilla.com", "id": 13237784, "time": "2018-04-27T10:08:18Z"}, {"text": "Is manual testing required on this bug? If yes, please provide some STR and the proper extension(if required) or set the \u201cqe-verify -\u201c flag.\n\nThanks!", "author": "cosmin.badescu@softvision.ro", "id": 13270554, "time": "2018-05-11T12:18:18Z"}], "id": 1410214, "priority": "P5", "cc": ["andy+bugzilla@mckay.pub", "aswan@mozilla.com", "cosmin.badescu@softvision.ro", "gandalf@aviary.pl", "kmaglione+bmo@mozilla.com", "l10n@mozilla.com", "masayuki@d-toybox.com", "mstanke@mozilla.cz", "VYV03354@nifty.ne.jp"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1420827"], "cf_tracking_thunderbird_esr60": "---", "status": "RESOLVED", "product": "Toolkit", "cf_fx_iteration": "---", "blocks": [857456, 1457321], "qa_contact": "", "creation_time": "2017-10-19T19:42:38Z", "cf_status_firefox_esr52": "---", "component": "Add-ons Manager", "assigned_to_detail": {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "fixed", "cf_status_firefox60": "---", "target_milestone": "mozilla61", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "enhancement", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "jorge@mozilla.com", "id": 189742, "name": "jorge@mozilla.com", "real_name": "Jorge Villalobos [:jorgev]"}, "whiteboard": "", "mentors": [], "summary": "Implement support for WebExtensions Dictionaries", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [{"requestee": "kmaglione+bmo@mozilla.com", "status": "?", "name": "needinfo", "modification_date": "2018-05-11T12:18:18Z", "type_id": 800, "creation_date": "2018-05-11T12:18:18Z", "id": 1755692, "setter": "cosmin.badescu@softvision.ro"}], "last_change_time": "2018-05-11T12:18:18Z", "assigned_to": "kmaglione+bmo@mozilla.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "l10n@mozilla.com"}], "who": "gandalf@aviary.pl", "when": "2017-10-19T20:47:45Z"}, {"changes": [{"removed": "---", "field_name": "cf_status_firefox57", "added": "wontfix"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-10-20T17:36:26Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P5"}, {"removed": "normal", "field_name": "severity", "added": "enhancement"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-10-25T22:28:15Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "isaacschemm@gmail.com"}], "who": "isaacschemm@gmail.com", "when": "2017-11-07T17:58:20Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mstanke@mozilla.cz"}], "who": "mstanke@mozilla.cz", "when": "2018-02-01T10:58:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kmaglione+bmo@mozilla.com"}], "who": "aswan@mozilla.com", "when": "2018-04-09T03:31:11Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "857456"}], "who": "aswan@mozilla.com", "when": "2018-04-24T23:17:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971095, "added": "review?(aswan@mozilla.com), review?(gandalf@aviary.pl)"}, {"removed": "", "field_name": "cc", "added": "aswan@mozilla.com"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-04-26T01:37:00Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "kmaglione+bmo@mozilla.com"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-04-26T01:37:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gandalf@aviary.pl)", "attachment_id": 8971095, "added": "review+"}], "who": "gandalf@aviary.pl", "when": "2018-04-26T01:57:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971100, "added": "review?(aswan@mozilla.com), review?(gandalf@aviary.pl)"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-04-26T03:10:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971099, "added": "review?(masayuki@d-toybox.com)"}, {"field_name": "flagtypes.name", "removed": "review?(gandalf@aviary.pl)", "attachment_id": 8971100, "added": "review?(masayuki@d-toybox.com)"}, {"removed": "", "field_name": "cc", "added": "masayuki@d-toybox.com"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-04-26T04:41:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(masayuki@d-toybox.com)", "attachment_id": 8971099, "added": "review-"}], "who": "masayuki@d-toybox.com", "when": "2018-04-26T06:53:45Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(masayuki@d-toybox.com)", "attachment_id": 8971100, "added": "review+"}], "who": "masayuki@d-toybox.com", "when": "2018-04-26T06:59:41Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "VYV03354@nifty.ne.jp"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971100, "added": "review?(VYV03354@nifty.ne.jp)"}], "who": "masayuki@d-toybox.com", "when": "2018-04-26T07:01:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review-", "attachment_id": 8971099, "added": "review?(masayuki@d-toybox.com)"}, {"field_name": "flagtypes.name", "removed": "review?(VYV03354@nifty.ne.jp)", "attachment_id": 8971100, "added": ""}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-04-26T07:15:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(masayuki@d-toybox.com)", "attachment_id": 8971099, "added": "review+"}], "who": "masayuki@d-toybox.com", "when": "2018-04-26T07:33:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971099, "added": "review-"}], "who": "VYV03354@nifty.ne.jp", "when": "2018-04-26T10:22:25Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1420827"}], "who": "VYV03354@nifty.ne.jp", "when": "2018-04-26T10:26:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8971100, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-04-26T17:03:09Z"}, {"changes": [{"removed": "isaacschemm@gmail.com", "field_name": "cc", "added": ""}], "who": "isaacschemm@gmail.com", "when": "2018-04-26T18:48:06Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8971095, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-04-26T20:44:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review-", "attachment_id": 8971099, "added": ""}], "who": "VYV03354@nifty.ne.jp", "when": "2018-04-26T21:23:36Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1457321"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-04-26T22:21:42Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-04-27 10:08:18"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "csabou@mozilla.com", "when": "2018-04-27T10:08:18Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1460600"}], "who": "jan.steffens@gmail.com", "when": "2018-05-10T14:00:07Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cosmin.badescu@softvision.ro"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(kmaglione+bmo@mozilla.com)"}], "who": "cosmin.badescu@softvision.ro", "when": "2018-05-11T12:18:18Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}