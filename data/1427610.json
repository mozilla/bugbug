{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "till@tillschneidereit.net", "mentors_detail": [], "depends_on": [1461751], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox59": "wontfix", "keywords": ["dev-doc-needed"], "cc_detail": [{"email": "andrebargull@googlemail.com", "id": 339940, "name": "andrebargull@googlemail.com", "real_name": "Andr\u00e9 Bargull [:anba]"}, {"email": "bbouvier@mozilla.com", "id": 468907, "name": "bbouvier@mozilla.com", "real_name": "Benjamin Bouvier [:bbouvier]"}, {"email": "bkelly@mozilla.com", "id": 465500, "name": "bkelly@mozilla.com", "real_name": "Ben Kelly [:bkelly]"}, {"email": "d@domenic.me", "id": 308714, "name": "d@domenic.me", "real_name": "Domenic Denicola"}, {"email": "evilpies@gmail.com", "id": 393835, "name": "evilpies@gmail.com", "real_name": "Tom Schuster [:evilpie]"}, {"email": "fscholz@mozilla.com", "id": 374863, "name": "fscholz@mozilla.com", "real_name": "Florian Scholz [:fscholz] (MDN)"}, {"email": "jcoppeard@mozilla.com", "id": 443194, "name": "jcoppeard@mozilla.com", "real_name": "Jon Coppeard (:jonco)"}, {"email": "jdemooij@mozilla.com", "id": 375297, "name": "jdemooij@mozilla.com", "real_name": "Jan de Mooij [:jandem]"}, {"email": "jorendorff@mozilla.com", "id": 281791, "name": "jorendorff@mozilla.com", "real_name": "Jason Orendorff [:jorendorff]"}, {"email": "justin@fagnani.com", "id": 615181, "name": "justin@fagnani.com", "real_name": "Justin Fagnani"}, {"email": "kazz@asamuzak.jp", "id": 469653, "name": "kazz@asamuzak.jp", "real_name": "Kazumasa Hasegawa (Kazz)"}, {"email": "lclark@mozilla.com", "id": 544230, "name": "lclark@mozilla.com", "real_name": "Lin Clark [:linclark]"}, {"email": "S.N.Maijers@gmail.com", "id": 604449, "name": "S.N.Maijers@gmail.com", "real_name": "Sander Maijers"}, {"email": "tobias.buschor@shwups.ch", "id": 585207, "name": "tobias.buschor@shwups.ch", "real_name": ""}], "cf_last_resolved": "2018-05-23T22:13:05Z", "attachments": [{"creator": "jcoppeard@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-21T17:40:31Z", "type_id": 4, "creation_date": "2018-05-16T15:09:47Z", "id": 1757558, "setter": "jorendorff@mozilla.com"}], "content_type": "text/plain", "id": 8976171}, {"creator": "jcoppeard@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-17T19:35:57Z", "type_id": 4, "creation_date": "2018-05-17T15:52:08Z", "id": 1758250, "setter": "andrebargull@googlemail.com"}], "content_type": "text/plain", "id": 8976589}, {"creator": "jcoppeard@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-18T07:55:00Z", "type_id": 4, "creation_date": "2018-05-17T17:15:47Z", "id": 1758333, "setter": "jdemooij@mozilla.com"}], "content_type": "text/plain", "id": 8976652}, {"creator": "jcoppeard@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8976656}, {"creator": "jcoppeard@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-18T12:29:12Z", "type_id": 4, "creation_date": "2018-05-18T11:41:41Z", "id": 1758746, "setter": "andrebargull@googlemail.com"}], "content_type": "text/plain", "id": 8976937}, {"creator": "jcoppeard@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-18T14:44:50Z", "type_id": 4, "creation_date": "2018-05-18T12:55:22Z", "id": 1758777, "setter": "bkelly@mozilla.com"}], "content_type": "text/plain", "id": 8976957}], "votes": 2, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 23, "comments": [{"text": "The import.meta proposal is at stage 3, and shipping in stable Chrome since Chrome 64. We should aim to ship this when we ship modules on stable at all.", "author": "till@tillschneidereit.net", "id": 12940347, "time": "2018-01-02T15:53:41Z"}, {"text": "Jon, are you planning to have this ship as part of our initial ES6 modules implementation? The spec is definitely stable enough for us to ship it to release, and it'd be a valuable feature to have from the get-go.", "author": "till@tillschneidereit.net", "id": 13028330, "time": "2018-02-08T18:31:57Z"}, {"text": "(In reply to Till Schneidereit [:till] PTO February 6 - 16 from comment #1)\nI wasn't planning on shipping this as part of the initial implementation, but I'd like to work on it straight after.  Do you think it's worth making this block the initial implementation?", "author": "jcoppeard@mozilla.com", "id": 13028535, "time": "2018-02-08T19:17:01Z"}, {"text": "I agree that this doesn't have to block initial implementation. Which is a good thing, given that you've since flipped the switch to let modules ride the trains :)\n\nGiven that the contents of import.meta are implementation defined, one reason for getting this in sooner rather than later is to ensure that there are multiple implementations and hence a reason to coordinate what goes into import.meta. I don't know what the Chrome team's plans around this are, but we should ensure that we have a dialog with them about this.", "author": "till@tillschneidereit.net", "id": 13053946, "time": "2018-02-20T11:29:37Z"}, {"text": "Any updates on when this might be ship wrt basic module support?\n\nOn the Polymer project we're about to publish 3.0 using native modules that rely on dynamic import() and import.meta.url. In our tools we'd like to just say that module support includes dynamic import() and import.meta.url to reduce the build permutations we have to support. So far Chrome and Safari Technology Preview support both.", "author": "justin@fagnani.com", "id": 13170303, "time": "2018-03-31T03:37:18Z"}, {"text": "We are going to ship modules, without dynamic import() and import.meta. Jon can probably comment on when we plan on implementing those features.", "author": "evilpies@gmail.com", "id": 13176176, "time": "2018-04-03T13:04:19Z"}, {"text": "FWIW we have tests at http://w3c-test.org/html/semantics/scripting-1/the-script-element/module/import-meta/import-meta-url.html ready to go.", "author": "d@domenic.me", "id": 13268805, "time": "2018-05-10T17:01:44Z"}, {"text": "Created attachment 8976171\nbug1427610-1-parse-import-meta\n\nPatch to implement parsing of |import.meta|.\n\nCurrently there is no state in the parser to say whether we were parsing for the script goal or the module goal (we currently only need to know whether we are at the top level of a module), so this adds that state and propagates it through full parsing of lazy scripts.\n\nMostly import.meta is handled similarly to new.target.\n\nOne complication was the statement processing where an 'import' keyword can be the start of an import declaration or an import.meta expression.  I added importDeclarationOrImportMeta() methods to handle this.  I'm not sure if this is the best way to do it though.", "author": "jcoppeard@mozilla.com", "id": 13281658, "time": "2018-05-16T15:09:47Z"}, {"text": "Created attachment 8976589\nbug1427610-2-implement-import-meta-shell\n\nImplement import.meta in the JS shell.  This adds a slot to module objects to hold the meta object.  We get the module associated with a script by walking the scope chain.  There is a single hook for the embedding to perform the role of both the HostGetImportMetaProperties and HostFinalizeImportMeta operations.", "author": "jcoppeard@mozilla.com", "id": 13284789, "time": "2018-05-17T15:52:08Z"}, {"text": "Created attachment 8976652\nbug1427610-3-jit-support\n\nJIT support.  If we baseline compile a script that uses import.meta we create the meta object at that time for the sake of simplicity.  For Ion we assume that this has been done by baseine.", "author": "jcoppeard@mozilla.com", "id": 13285098, "time": "2018-05-17T17:15:47Z"}, {"text": "Created attachment 8976656\nbug1427610-4-script-loader\n\nSet up module metadata hook to implmement import.meta for modules in the browser.  This just defines the 'url' property.\n\nHTML spec is here: https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties", "author": "jcoppeard@mozilla.com", "id": 13285125, "time": "2018-05-17T17:22:44Z"}, {"text": "Comment on attachment 8976589\nbug1427610-2-implement-import-meta-shell\n\nReview of attachment 8976589:\n-----------------------------------------------------------------\n\nLGTM!\n\n::: js/src/builtin/ModuleObject.cpp\n@@ +1645,5 @@\n> +\n> +JSObject*\n> +js::GetOrCreateModuleMetaObject(JSContext* cx, HandleObject moduleArg)\n> +{\n> +    RootedModuleObject module(cx, &moduleArg->as<ModuleObject>());\n\n`Handle<ModuleObject*> module = moduleArg.as<ModuleObject>();` so we don't need to root it twice.\n\n@@ +1651,5 @@\n> +    JSObject* obj = module->metaObject();\n> +    if (obj)\n> +        return obj;\n> +\n> +    obj = cx->runtime()->moduleMetaObjectHook(cx, module);\n\nThis is a bit more permissive than the spec proposal, because it also allows the embedding to return an exotic object (i.e. not a js::PlainObject). This is probably not an issue as long as it isn't misused by the embedder.\n\n(If we create the object here and then pass it to the embedding, we could ensure that the object is always in the tenured heap, because maybe it's preferable to have a tenured object when baking it into the jit-code. Please double-check this with jandem for Part 3!)\n\nThe spec proposal also requires that this hook never returns an abrupt completion. I don't think we can (b/c of OOM) and should have these requirements in our implementation, so handling the case when |obj| is nullptr here seems correct to me.\n\n::: js/src/builtin/ModuleObject.h\n@@ +253,5 @@\n>          EnvironmentSlot,\n>          NamespaceSlot,\n>          StatusSlot,\n>          EvaluationErrorSlot,\n> +        MetaObjectSlot,\n\nThe last slot before regressing bug 1420412! :-)\n\n::: js/src/jit-test/tests/modules/import-meta.js\n@@ +1,4 @@\n> +// |jit-test| module\n> +\n> +// import.meta is an object.\n> +assertEq(typeof import.meta, \"object\");\n\nMaybe additionally `assertEq(import.meta !== null, true);`, because |typeof null === \"object\"|.\n\n@@ +24,5 @@\n> +let otherImportMeta = getOtherMetaObject();\n> +assertEq(otherImportMeta.url.endsWith(\"exportImportMeta.js\"), true);\n> +\n> +// By default the import.meta object will be extensible, and its properties will\n> +// be writable, configurable, and enumerable.\n\nMaybe add an explicit test for this?\n\n```\nassertEq(Object.isExtensible(import.meta), true);\n\nvar desc = Object.getOwnPropertyDescriptor(import.meta, \"url\");\nassertEq(desc.writable, true);\nassertEq(desc.enumerable, true);\nassertEq(desc.configurable, true);\nassertEq(desc.value, import.meta.url);\n```\n\n\nAnd also add a test for the prototype?\n```\nassertEq(Object.getPrototypeOf(import.meta), null);\n```\n\n@@ +34,5 @@\n> +assertEq(import.meta.newProp, 42);\n> +\n> +let found = new Set();\n> +for (let p in import.meta)\n> +    found.add(p);\n\nBetter: `let found = new Set(Reflect.ownKeys(import.meta));`\n\nThat way symbols and non-enumerable properties are included, too.\n\n@@ +45,5 @@\n> +delete import.meta.newProp;\n> +\n> +found = new Set();\n> +for (let p in import.meta)\n> +    found.add(p);\n\nAlso here: `let found = new Set(Reflect.ownKeys(import.meta));`\n\n::: js/src/shell/js.cpp\n@@ +4312,5 @@\n>  \n> +static JSObject*\n> +ShellModuleMetaObjectHook(JSContext* cx, HandleObject module)\n> +{\n> +    RootedObject obj(cx, JS_NewPlainObject(cx));\n\n|JS_NewObjectWithGivenProto(cx, nullptr, nullptr)| to match the default prototype in the spec proposal (\"Set importMeta to ObjectCreate(null).\").\n\n@@ +4318,5 @@\n> +        return nullptr;\n> +\n> +    // For the shell, just use the script's filename as the base URL.\n> +    RootedScript script(cx, module->as<ModuleObject>().script());\n> +    const char* filename = script->scriptSource()->filename();\n\nIs |filename| guaranteed to be non-null here? For example when the module is manually constructed using the shell test-API?\n\n@@ +4323,5 @@\n> +    RootedString url(cx, NewStringCopyZ<CanGC>(cx, filename));\n> +    if (!url)\n> +        return nullptr;\n> +\n> +    JS_DefineProperty(cx, obj, \"url\", url, JSPROP_ENUMERATE);\n\nif (!JS_DefineProperty(...))\n    return nullptr;\n\nto handle possible OOM.\n\n::: js/src/vm/EnvironmentObject.h\n@@ +1169,1 @@\n>  ModuleEnvironmentObject* GetModuleEnvironmentForScript(JSScript* script);\n\nNit: Blank line between both functions.\n\n::: js/src/vm/Interpreter.cpp\n@@ +4213,5 @@\n>  END_CASE(JSOP_NEWTARGET)\n>  \n> +CASE(JSOP_IMPORTMETA)\n> +{\n> +    ReservedRooted<JSObject*> module(&rootObject0, GetModuleObjectForScript(script));\n\nAdd `MOZ_ASSERT(module);` because GetOrCreateModuleMetaObject(...) expects a non-null argument, but GetModuleObjectForScript(...) has an explicit `return nullptr;`?\n\n@@ +4214,5 @@\n>  \n> +CASE(JSOP_IMPORTMETA)\n> +{\n> +    ReservedRooted<JSObject*> module(&rootObject0, GetModuleObjectForScript(script));\n> +    JSObject* metaObject = GetOrCreateModuleMetaObject(cx, module);\n\nIs it possible to use `module.as<ModuleObject>()` here and then change GetOrCreateModuleMetaObject to only accept `Handle<ModuleObject*>` for better type safety? Or are they some restrictions because of reserved rooted?\n\n::: js/src/vm/Opcodes.h\n@@ +2348,5 @@\n> +    /*\n> +     * Push \"import.meta\"\n> +     *\n> +     *   Category: Variables and Scopes\n> +     *   Type: Arguments\n\nHmm, I don't think \"Arguments\" is correct to reuse here. Maybe just add a new \"Type: Module\"?", "author": "andrebargull@googlemail.com", "id": 13285448, "time": "2018-05-17T19:35:57Z"}, {"text": "Comment on attachment 8976652\nbug1427610-3-jit-support\n\nReview of attachment 8976652:\n-----------------------------------------------------------------\n\nNice.", "author": "jdemooij@mozilla.com", "id": 13286484, "time": "2018-05-18T07:55:00Z"}, {"text": "Created attachment 8976937\nbug1427610-2-implement-import-meta-shell\n\nThanks for all the comments!\n\nI changed the hook so that object is created first and then passed in, which is a bit safer as you touched on in your comments.\n\n> Is |filename| guaranteed to be non-null here? For example when the module is manually constructed using the shell test-API?\n\nYes, this ends up being \"<string>\" in that case, but I added an assert.\n\n> Is it possible to use `module.as<ModuleObject>()` here and then change GetOrCreateModuleMetaObject to only accept `Handle<ModuleObject*>` for better type safety? Or are they some restrictions because of reserved rooted?\n\nThis didn't work because of |module| being a reserved rooted.\n\nOther comments addressed.", "author": "jcoppeard@mozilla.com", "id": 13286988, "time": "2018-05-18T11:41:41Z"}, {"text": "Comment on attachment 8976937\nbug1427610-2-implement-import-meta-shell\n\nReview of attachment 8976937:\n-----------------------------------------------------------------\n\nThanks, still looks good!\n\n::: js/src/builtin/ModuleObject.cpp\n@@ +1649,5 @@\n> +    HandleModuleObject module = moduleArg.as<ModuleObject>();\n> +    if (JSObject* obj = module->metaObject())\n> +        return obj;\n> +\n> +    RootedObject metaObject(cx, JS_NewObjectWithGivenProto(cx, nullptr, nullptr));\n\nNit: Now that we're allocating the object in the js-engine, we should directly call |NewObjectWithGivenProto<PlainObject>(cx, nullptr);| instead of going through JSAPI.\n\n::: js/src/vm/Runtime.h\n@@ +941,5 @@\n>      js::MainThreadData<JS::ModuleResolveHook> moduleResolveHook;\n>  \n> +    // A hook that implements the abstract operations\n> +    // HostGetImportMetaProperties and HostFinalizeImportMeta.\n> +    js::MainThreadData<JS::ModuleMetadataHook> moduleMetadataHook;\n\nDo we need to explicitly initialize the field in the constructor? Asking because I just saw that |moduleResolveHook| is explicitly initialized here <https://searchfox.org/mozilla-central/rev/da499aac682d0bbda5829327b60a865cbc491611/js/src/vm/Runtime.cpp#178>.", "author": "andrebargull@googlemail.com", "id": 13287070, "time": "2018-05-18T12:29:12Z"}, {"text": "Created attachment 8976957\nbug1427610-4-script-loader\n\nUpdated patch following review feedback above.  Sorry for the churn.", "author": "jcoppeard@mozilla.com", "id": 13287129, "time": "2018-05-18T12:55:22Z"}, {"text": "Comment on attachment 8976957\nbug1427610-4-script-loader\n\nReview of attachment 8976957:\n-----------------------------------------------------------------\n\n::: dom/script/ScriptLoader.cpp\n@@ +809,5 @@\n> +                       JS::Handle<JSObject*> aMetaObject)\n> +{\n> +  JS::Value value = JS::GetModuleHostDefinedField(aModule);\n> +  auto script = static_cast<ModuleScript*>(value.toPrivate());\n> +  MOZ_ASSERT(script->ModuleRecord() == aModule);\n\nCan you make this a MOZ_DIAGNOSTIC_ASSERT() since its a cheap comparison?\n\nAlso, would it be worth MOZ_DIAGNOSTIC_ASSERT'ing that aModule is not nullptr.\n\n@@ +812,5 @@\n> +  auto script = static_cast<ModuleScript*>(value.toPrivate());\n> +  MOZ_ASSERT(script->ModuleRecord() == aModule);\n> +\n> +  nsAutoCString url;\n> +  script->BaseURL()->GetAsciiSpec(url);\n\nI think you need to check for BaseURL() being nullptr since its a cycle collected member.  It can get unlinked while the ModuleScript is still alive.\n\nAs a side note, is there any impact to GC/CC from storing the ModuleScript in the metadata hook mechanism?  That seems to be defined in another patch and I'm not sure how that impact the lifecycle.\n\nAlso, if we are going to assume GetAsciiSpec() is infallible, then please wrap the call in MOZ_ALWAYS_SUCCEEDS() to assert that in debug builds.", "author": "bkelly@mozilla.com", "id": 13287380, "time": "2018-05-18T14:44:50Z"}, {"text": "Comment on attachment 8976171\nbug1427610-1-parse-import-meta\n\nReview of attachment 8976171:\n-----------------------------------------------------------------\n\n::: js/src/frontend/Parser.cpp\n@@ +8726,5 @@\n>              return null();\n>          lhs = handler.newSuperBase(thisName, pos());\n>          if (!lhs)\n>              return null();\n> +\n\nStyle nit: no blank line here.", "author": "jorendorff@mozilla.com", "id": 13294632, "time": "2018-05-21T17:40:31Z"}, {"text": "(In reply to Ben Kelly [:bkelly] from comment #16)\n> As a side note, is there any impact to GC/CC from storing the ModuleScript\n> in the metadata hook mechanism?  That seems to be defined in another patch\n> and I'm not sure how that impact the lifecycle.\n\nThe ModuleScript has a pointer to the JS ModuleObject which acts as a strong reference and keeps the ModuleObject alive as long as the ModuleScript is live.  The ModuleObject has a pointer back to the ModuleScript set with SetModuleHostDefinedField() which acts like a weak pointer and doesn't keep the ModuleScript alive (we don't increment its ref count when this is set).  When the ModuleScript is unlinked we clear this back pointer.  So this doesn't influence the lifetime of the ModuleScript.\n\nI'll add a diagnostic assert that the back pointer is set.  It's not possible to still be running scripts after the ScriptLoader has died, right?", "author": "jcoppeard@mozilla.com", "id": 13295921, "time": "2018-05-22T08:39:05Z"}, {"text": "(In reply to Jon Coppeard (:jonco) from comment #18)\n> I'll add a diagnostic assert that the back pointer is set.\n\nOn second thoughts, I'll play it safe and report an error if this is not set.", "author": "jcoppeard@mozilla.com", "id": 13298725, "time": "2018-05-23T08:09:00Z"}, {"text": "Pushed by jcoppeard@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/277bd9cf9edc\nImplement import.meta in the JS frontent r=jorendorff\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/a506ea1db794\nImplement import.meta in the JS shell r=anba\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/847453f52aab\nSupport import.meta in the JITs r=jandem\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/9a5e8a990f0a\nImplement import.meta in the browser r=bkelly", "author": "pulsebot@bots.tld", "id": 13298807, "time": "2018-05-23T08:53:56Z"}, {"text": "Created web-platform-tests PR https://github.com/w3c/web-platform-tests/pull/11117 for changes under testing/web-platform/tests", "author": "wptsync@mozilla.bugs", "id": 13298854, "time": "2018-05-23T09:18:53Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/277bd9cf9edc\nhttps://hg.mozilla.org/mozilla-central/rev/a506ea1db794\nhttps://hg.mozilla.org/mozilla-central/rev/847453f52aab\nhttps://hg.mozilla.org/mozilla-central/rev/9a5e8a990f0a", "author": "apavel@mozilla.com", "id": 13300913, "time": "2018-05-23T22:13:05Z"}], "id": 1427610, "priority": "P3", "cc": ["andrebargull@googlemail.com", "bbouvier@mozilla.com", "bkelly@mozilla.com", "d@domenic.me", "evilpies@gmail.com", "fscholz@mozilla.com", "jcoppeard@mozilla.com", "jdemooij@mozilla.com", "jorendorff@mozilla.com", "justin@fagnani.com", "kazz@asamuzak.jp", "lclark@mozilla.com", "S.N.Maijers@gmail.com", "tobias.buschor@shwups.ch"], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [568953, 1435811], "qa_contact": "", "creation_time": "2018-01-02T15:53:41Z", "cf_status_firefox_esr52": "---", "component": "JavaScript Engine", "assigned_to_detail": {"email": "jcoppeard@mozilla.com", "id": 443194, "name": "jcoppeard@mozilla.com", "real_name": "Jon Coppeard (:jonco)"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "wontfix", "cf_status_firefox60": "wontfix", "target_milestone": "mozilla62", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "https://github.com/tc39/proposal-import-meta", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "till@tillschneidereit.net", "id": 292831, "name": "till@tillschneidereit.net", "real_name": "Till Schneidereit [:till]"}, "whiteboard": "", "mentors": [], "summary": "Implement import.meta", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-10T01:39:01Z", "assigned_to": "jcoppeard@mozilla.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "keywords", "added": "dev-doc-needed"}, {"removed": "", "field_name": "cc", "added": "fscholz@mozilla.com"}], "who": "fscholz@mozilla.com", "when": "2018-01-02T17:09:55Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "568953"}], "who": "jcoppeard@mozilla.com", "when": "2018-01-03T10:21:38Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P3"}], "who": "nicolas.b.pierron@mozilla.com", "when": "2018-01-10T14:32:02Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "S.N.Maijers@gmail.com"}], "who": "S.N.Maijers@gmail.com", "when": "2018-01-19T13:16:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kazz@asamuzak.jp"}], "who": "kazz@asamuzak.jp", "when": "2018-01-19T23:50:45Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1435811"}], "who": "till@tillschneidereit.net", "when": "2018-02-05T19:13:28Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jcoppeard@mozilla.com)"}], "who": "till@tillschneidereit.net", "when": "2018-02-08T18:31:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "lclark@mozilla.com"}], "who": "lclark@mozilla.com", "when": "2018-02-08T18:35:28Z"}, {"changes": [{"removed": "needinfo?(jcoppeard@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jcoppeard@mozilla.com", "when": "2018-02-08T19:17:01Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(till@tillschneidereit.net)"}], "who": "jcoppeard@mozilla.com", "when": "2018-02-13T11:21:16Z"}, {"changes": [{"removed": "needinfo?(till@tillschneidereit.net)", "field_name": "flagtypes.name", "added": ""}], "who": "till@tillschneidereit.net", "when": "2018-02-20T11:29:37Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bbouvier@mozilla.com"}], "who": "bbouvier@mozilla.com", "when": "2018-02-20T14:47:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tobias.buschor@shwups.ch"}], "who": "tobias.buschor@shwups.ch", "when": "2018-03-01T10:30:36Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "justin@fagnani.com"}], "who": "justin@fagnani.com", "when": "2018-03-31T03:37:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "S.N.Maijers@structure.systems"}], "who": "S.N.Maijers@structure.systems", "when": "2018-03-31T16:28:05Z"}, {"changes": [{"removed": "S.N.Maijers@structure.systems", "field_name": "cc", "added": ""}], "who": "S.N.Maijers@structure.systems", "when": "2018-03-31T16:28:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "evilpies@gmail.com"}], "who": "evilpies@gmail.com", "when": "2018-04-03T13:04:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "d@domenic.me"}], "who": "d@domenic.me", "when": "2018-05-10T16:59:55Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1461751"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "jcoppeard@mozilla.com"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-15T17:57:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jorendorff@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8976171, "added": "review?(jorendorff@mozilla.com)"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-16T15:09:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "andrebargull@googlemail.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8976589, "added": "review?(andrebargull@googlemail.com)"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-17T15:52:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jdemooij@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8976652, "added": "review?(jdemooij@mozilla.com)"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-17T17:15:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bkelly@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8976656, "added": "review?(bkelly@mozilla.com)"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-17T17:22:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(andrebargull@googlemail.com)", "attachment_id": 8976589, "added": "review+"}], "who": "andrebargull@googlemail.com", "when": "2018-05-17T19:35:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jdemooij@mozilla.com)", "attachment_id": 8976652, "added": "review+"}], "who": "jdemooij@mozilla.com", "when": "2018-05-18T07:55:00Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8976589, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8976656, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bkelly@mozilla.com)", "attachment_id": 8976656, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8976937, "added": "review?(andrebargull@googlemail.com)"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-18T11:41:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(andrebargull@googlemail.com)", "attachment_id": 8976937, "added": "review+"}], "who": "andrebargull@googlemail.com", "when": "2018-05-18T12:29:12Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8976957, "added": "review?(bkelly@mozilla.com)"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-18T12:55:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bkelly@mozilla.com)", "attachment_id": 8976957, "added": "review+"}], "who": "bkelly@mozilla.com", "when": "2018-05-18T14:44:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jorendorff@mozilla.com)", "attachment_id": 8976171, "added": "review+"}], "who": "jorendorff@mozilla.com", "when": "2018-05-21T17:40:31Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla62"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-23 22:13:05"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "apavel@mozilla.com", "when": "2018-05-23T22:13:05Z"}, {"changes": [{"removed": "affected", "field_name": "cf_status_firefox59", "added": "wontfix"}, {"removed": "---", "field_name": "cf_status_firefox60", "added": "wontfix"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "wontfix"}], "who": "ryanvm@gmail.com", "when": "2018-06-10T01:39:01Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}