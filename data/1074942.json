{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "terrence.d.cole@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-10-16T13:53:44Z", "type_id": 4, "creation_date": "2014-10-13T21:41:35Z", "id": 1003579, "setter": "bhackett1024@gmail.com"}], "content_type": "text/plain", "id": 8504311}, {"creator": "terrence.d.cole@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8504321}, {"creator": "terrence.d.cole@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-10-16T14:03:50Z", "type_id": 4, "creation_date": "2014-10-13T22:28:36Z", "id": 1003610, "setter": "bhackett1024@gmail.com"}], "content_type": "text/plain", "id": 8504337}], "classification": "Components", "creator": "terrence.d.cole@gmail.com", "cc": ["bhackett1024@gmail.com", "jcoppeard@mozilla.com", "sphink@gmail.com", "terrence.d.cole@gmail.com"], "depends_on": [], "creation_time": "2014-09-30T16:00:54Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Split up the GC helper thread into separate and independent HelperThread tasks", "id": 1074942, "assigned_to_detail": {"email": "terrence.d.cole@gmail.com", "id": 231770, "name": "terrence.d.cole@gmail.com", "real_name": "Terrence Cole [:terrence]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "terrence.d.cole@gmail.com", "comment_count": 11, "comments": [{"text": "The state management going on in GCHelperThread is gnarly because it used to be our only thread and it needed to handle 3 different tasks. Now that we have a good work-stealing threading implementation, we can easily split it up into 3 separate tasks and manage them independently, totally eliminating the gnarly state machine.", "author": "terrence.d.cole@gmail.com", "id": 9381341, "time": "2014-09-30T16:00:54Z"}, {"text": "Created attachment 8504311\n1_split_out_bg_alloc-v0.diff\n\nAs it says on the tin: makes bg alloc a GCParallelTask. The only new mechanism here is cancellation -- I've done this in a generic way because I think it will be handy in other cases later and doesn't add any overhead when not used.\n\nhttps://tbpl.mozilla.org/?tree=Try&rev=7d9544b939ca", "author": "terrence.d.cole@gmail.com", "id": 9440673, "time": "2014-10-13T21:41:35Z"}, {"text": "Created attachment 8504321\n2_lockless_background_alloc-v0.diff\n\nIt turns out we don't actually need to take the GC lock in the loop. It makes wantBackgroundAlloc racy, but we don't really care about that: worst case we get a few too few or too many chunks. More relevantly, with Bug 1074961 done, we can pass in direct const-refs to the values we're reading off-thread and unfriend it from the GCRuntime entirely -- the amount of damage we can do with this setup is now strictly bounded.", "author": "terrence.d.cole@gmail.com", "id": 9440735, "time": "2014-10-13T21:59:04Z"}, {"text": "Created attachment 8504337\n2_lockless_background_alloc-v1.diff\n\nFix some bustage in steal and builds on non-linux platforms.", "author": "terrence.d.cole@gmail.com", "id": 9440868, "time": "2014-10-13T22:28:36Z"}, {"text": "I missed DEBUG guards around an isLocked usage:\nhttps://tbpl.mozilla.org/?tree=Try&rev=4173bb6be587", "author": "terrence.d.cole@gmail.com", "id": 9446378, "time": "2014-10-14T21:14:42Z"}, {"text": "Oh, ffs:\nhttps://tbpl.mozilla.org/?tree=Try&rev=5359d4cf18da", "author": "terrence.d.cole@gmail.com", "id": 9450803, "time": "2014-10-15T16:26:15Z"}, {"text": "Comment on attachment 8504311\n1_split_out_bg_alloc-v0.diff\n\nReview of attachment 8504311:\n-----------------------------------------------------------------\n\n::: js/src/jsgc.cpp\n@@ +3057,1 @@\n>      }\n\nyou can remove the {} now\n\n@@ +3160,5 @@\n> +    AutoTraceLog logAllocation(logger, TraceLogger::GCAllocation);\n> +\n> +    AutoLockGC lock(runtime);\n> +    while (!cancel_ && runtime->gc.wantBackgroundAllocation())\n> +    {\n\nformatting\n\n::: js/src/jsgc.h\n@@ +1103,5 @@\n>    public:\n>      void runFromHelperThread();\n> +\n> +  private:\n> +    static bool outOfLineHelperThreadIsLocked();\n\nI think it would be better to put the isRunning() implementation in HelperThreads.cpp so you can avoid this method.", "author": "bhackett1024@gmail.com", "id": 9456079, "time": "2014-10-16T13:53:44Z"}, {"text": "Comment on attachment 8504337\n2_lockless_background_alloc-v1.diff\n\nReview of attachment 8504337:\n-----------------------------------------------------------------\n\n::: js/src/gc/GCRuntime.h\n@@ +47,3 @@\n>  \n>      const bool enabled_;\n> +    const size_t &emptyCount_;\n\nComment that these sizes are read from without a lock held during wantBackgroundAllocation(), and can race.  I think it would be better too if these were const size_t*, to make it more obvious where the racy reads are happening.\n\n@@ +53,5 @@\n> +\n> +    // If the heap has fewer chunks than this, we'll skip background\n> +    // allocation to save memory when heap utilization is low.\n> +    const static size_t MinChunksForBackgroundAlloc = 4;\n> +    bool canBackgroundAllocate() const {\n\nThis method is only called by wantBackgroundAllocation(), so this logic should be folded in there so that only one method accesses the racy fields.", "author": "bhackett1024@gmail.com", "id": 9456119, "time": "2014-10-16T14:03:50Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/682b11c70169\n\nNote that the failures in the try run appear to all be from part2, which is not landing here (or probably ever).\nhttps://tbpl.mozilla.org/?tree=Try&rev=5359d4cf18da", "author": "terrence.d.cole@gmail.com", "id": 9507496, "time": "2014-10-27T21:57:53Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/682b11c70169", "author": "cbook@mozilla.com", "id": 9511083, "time": "2014-10-28T15:02:01Z"}, {"text": "Comment on attachment 8504337\n2_lockless_background_alloc-v1.diff\n\nIt's a neat idea, but I don't think it's worth the complexity, given that it's not really causing any problems right now.", "author": "terrence.d.cole@gmail.com", "id": 9511661, "time": "2014-10-28T16:28:06Z"}], "cf_last_resolved": "2014-10-28T15:02:01Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2014-10-28T16:28:06Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1008341], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript: GC", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla36", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "terrence.d.cole@gmail.com", "id": 231770, "name": "terrence.d.cole@gmail.com", "real_name": "Terrence Cole [:terrence]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bhackett1024@gmail.com", "id": 346231, "name": "bhackett1024@gmail.com", "real_name": "Brian Hackett (:bhackett)"}, {"email": "jcoppeard@mozilla.com", "id": 443194, "name": "jcoppeard@mozilla.com", "real_name": "Jon Coppeard (:jonco) (PTO until 13th March)"}, {"email": "sphink@gmail.com", "id": 359004, "name": "sphink@gmail.com", "real_name": "Steve Fink [:sfink] [:s:]"}, {"email": "terrence.d.cole@gmail.com", "id": 231770, "name": "terrence.d.cole@gmail.com", "real_name": "Terrence Cole [:terrence]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8504311, "added": "review?(bhackett1024@gmail.com)"}, {"removed": "", "field_name": "cc", "added": "bhackett1024@gmail.com"}], "who": "terrence.d.cole@gmail.com", "when": "2014-10-13T21:41:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8504321, "added": "review?(bhackett1024@gmail.com)"}], "who": "terrence.d.cole@gmail.com", "when": "2014-10-13T21:59:04Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8504321, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bhackett1024@gmail.com)", "attachment_id": 8504321, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8504337, "added": "review?(bhackett1024@gmail.com)"}], "who": "terrence.d.cole@gmail.com", "when": "2014-10-13T22:28:36Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "terrence@mozilla.com"}], "who": "terrence.d.cole@gmail.com", "when": "2014-10-14T21:14:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bhackett1024@gmail.com)", "attachment_id": 8504311, "added": "review+"}], "who": "bhackett1024@gmail.com", "when": "2014-10-16T13:53:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bhackett1024@gmail.com)", "attachment_id": 8504337, "added": "review+"}], "who": "bhackett1024@gmail.com", "when": "2014-10-16T14:03:50Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla36"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2014-10-28 08:02:01"}], "who": "cbook@mozilla.com", "when": "2014-10-28T15:02:01Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8504337, "added": "1"}], "who": "terrence.d.cole@gmail.com", "when": "2014-10-28T16:28:06Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}