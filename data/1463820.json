{"status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "classification": "Client Software", "creator": "bgrinstead@mozilla.com", "cc": ["bzbarsky@mit.edu", "dao+bmo@mozilla.com", "emilio@crisal.io", "gijskruitbosch+bugs@gmail.com", "jaws@mozilla.com", "MattN+bmo@mozilla.com", "paolo.mozmail@amadzone.org", "timdream@gmail.com"], "depends_on": [1461793], "creation_time": "2018-05-23T17:57:21Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "summary": "Create a test build that ports all XBL <resource> sheets to UA styles to measure UI breakage", "cf_last_resolved": null, "attachments": [{"creator": "bgrinstead@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8980024}, {"creator": "bgrinstead@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8980444}], "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 19, "comments": [{"text": "As we've been discussing in Bug 1457907, there are various things in the UI that can break that happen when porting XBL styles to UA styles.\n\nI'd like to measure how much work it would be to deal with that so we can balance cost vs making a platform change to support a new cascade (see https://bugzilla.mozilla.org/show_bug.cgi?id=1457907#c23).\n\nSo the idea is to make a patch that migrates every `<resources><stylesheet /></resources>` in toolkit/content/widgets into components.css. We can then check talos, mochitests, and visual issues.\n\nWe could also make a version that moves them into global.css (as a document style), although I expect there will be much more breakage in that case.", "author": "bgrinstead@mozilla.com", "id": 13300175, "time": "2018-05-23T17:57:21Z"}, {"text": "Created attachment 8980024\nBug 1463820 - Migrate all tookit/content/widget <resources> to UA styles\n\nReview commit: https://reviewboard.mozilla.org/r/246196/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/246196/", "author": "bgrinstead@mozilla.com", "id": 13300181, "time": "2018-05-23T17:58:41Z"}, {"text": "Comment on attachment 8980024\nBug 1463820 - Migrate all tookit/content/widget <resources> to UA styles\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/246196/diff/1-2/", "author": "bgrinstead@mozilla.com", "id": 13300216, "time": "2018-05-23T18:10:04Z"}, {"text": "Would you agree that porting the stylesheets to Shadow DOM would be a better solution for encapsulation and therefore maintainability in the long term? I think reduced scoping is a major feature of `<resources><stylesheet /></resources>` that isn't worth losing for a short-term gain.", "author": "MattN+bmo@mozilla.com", "id": 13300233, "time": "2018-05-23T18:16:40Z"}, {"text": "(In reply to Matthew N. [:MattN] (PM if requests are blocking you) from comment #3)\n> Would you agree that porting the stylesheets to Shadow DOM would be a better\n> solution for encapsulation and therefore maintainability in the long term? I\n> think reduced scoping is a major feature of `<resources><stylesheet\n> /></resources>` that isn't worth losing for a short-term gain.\n\nShadow DOM doesn't allow you to 'reach in' to the anon content with CSS, does it? We use that all over the place for XBL (breaking encapsulation), and moving away from it would require some pretty major rewriting AFAICT, since consumers could only customize the shadow styles through attributes or CSS variables defined on the host element.\n\nWhat would satisfy both cases (keeping encapsulation while not requiring rewrites) would be scoped stylesheets using normal DOM under the CE. But AIUI that's been removed from the platform, and there's not really interest to re-add it (https://bugzilla.mozilla.org/show_bug.cgi?id=1457907#c25).\n\nI'll be curious to see how much breakage there is with this patch. We've already been moving some individual scoped sheets to global sheets without many issues. For the most part these sheets don't seem to use overly generic selectors - although there are  some cases where they do.", "author": "bgrinstead@mozilla.com", "id": 13300325, "time": "2018-05-23T18:53:55Z"}, {"text": "Also, I expect there will be some cases where the document-level styling of anon content is low enough and/or we want to take advantage of other SD features such that switching directly to SD will make sense.", "author": "bgrinstead@mozilla.com", "id": 13300327, "time": "2018-05-23T18:54:22Z"}, {"text": "(In reply to Brian Grinstead [:bgrins] from comment #4)\n> (In reply to Matthew N. [:MattN] (PM if requests are blocking you) from\n> comment #3)\n> > Would you agree that porting the stylesheets to Shadow DOM would be a better\n> > solution for encapsulation and therefore maintainability in the long term? I\n> > think reduced scoping is a major feature of `<resources><stylesheet\n> > /></resources>` that isn't worth losing for a short-term gain.\n> \n> Shadow DOM doesn't allow you to 'reach in' to the anon content with CSS,\n> does it? We use that all over the place for XBL (breaking encapsulation),\n> and moving away from it would require some pretty major rewriting AFAICT,\n> since consumers could only customize the shadow styles through attributes or\n> CSS variables defined on the host element.\n\nThere have been multiple proposals (and even implementations in other browsers) to support such a thing like we allow with child selectors and XBL anonymous content. From some Google searches it seemed like Mozilla wasn't against supporting such a thing. Since we're already talking about new/non-standard APIs in bug 1457907, I don't see why we shouldn't includes a way to reach in as a potential option.\n\nIIRC some of the cases where we reach into anonymous content now is simply to override the \"toolkit\" style because someone didn't want to change/break other toolkit apps\u2026 that's no longer something we're worrying about so IMO the right thing to do is to merge the browser/ overrides into the toolkit widget.\n\nI guess I'm not really convinced that major rewriting would be necessary, at least not so much so to go with this blunt approach. Has someone individually evaluated many of the components affected by this to reach this conclusion? I'm be interested in seeing notes on that.\n\n> What would satisfy both cases (keeping encapsulation while not requiring\n> rewrites) would be scoped stylesheets using normal DOM under the CE. But\n> AIUI that's been removed from the platform, and there's not really interest\n> to re-add it (https://bugzilla.mozilla.org/show_bug.cgi?id=1457907#c25).\n\nThat proposal doesn't address the issue of rules not intending to modify anonymous/shadow content leaking into it\u2026 the encapsulation helps in both directions: preventing styles from coming in and leaking out. \n\n> I'll be curious to see how much breakage there is with this patch. We've\n> already been moving some individual scoped sheets to global sheets without\n> many issues. For the most part these sheets don't seem to use overly generic\n> selectors - although there are  some cases where they do.\n\nThe ones I've seen you move so far have been trivial which is why I didn't complain about them, even though I think the move was a step backwards in maintainability.", "author": "MattN+bmo@mozilla.com", "id": 13300708, "time": "2018-05-23T21:04:53Z"}, {"text": "Created attachment 8980444\nBug 1463820 - Alternate version that loads as document sheets\n\nReview commit: https://reviewboard.mozilla.org/r/246612/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/246612/", "author": "bgrinstead@mozilla.com", "id": 13362369, "time": "2018-05-24T22:38:19Z"}, {"text": "Comment on attachment 8980024\nBug 1463820 - Migrate all tookit/content/widget <resources> to UA styles\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/246196/diff/2-3/", "author": "bgrinstead@mozilla.com", "id": 13362370, "time": "2018-05-24T22:38:19Z"}, {"text": "- Try push for original version (UA styles): https://treeherder.mozilla.org/#/jobs?repo=try&revision=c8562fad4eaf8a5aa92f211d1c106f7865fcf2dc\n- Talos comparison for original version (nothing noticeable): https://treeherder.mozilla.org/perf.html#/compare?originalProject=try&originalRevision=0c0d8c15d5472da496a242df865b140be0251049&newProject=try&newRevision=c8562fad4eaf8a5aa92f211d1c106f7865fcf2dc&framework=1&showOnlyImportant=1\n\n- Try push for alternate version (document styles): https://treeherder.mozilla.org/#/jobs?repo=try&revision=0d9b13ee6c9e9107c4b4d0048dc30cbf2adc45a3\n- Talos comparison for alternate version (pretty bad): https://treeherder.mozilla.org/perf.html#/compare?originalProject=try&originalRevision=0c0d8c15d5472da496a242df865b140be0251049&newProject=try&newRevision=0d9b13ee6c9e9107c4b4d0048dc30cbf2adc45a3&framework=1&showOnlyImportant=1", "author": "bgrinstead@mozilla.com", "id": 13362402, "time": "2018-05-24T22:58:23Z"}, {"text": "That's really interesting! It may be worth trying to migrate only half of the bindings to see if the regression is cut in half, or if there is one specific stylesheet that introduces a problem.\n\nThere is also a way to create profiles for the builds, not sure if it can help here:\n\nhttps://wiki.mozilla.org/Buildbot/Talos/Profiling\n\nAs far as styling goes, both builds look pretty good, there are only minor issues as far as I can see.", "author": "paolo.mozmail@amadzone.org", "id": 13363668, "time": "2018-05-25T12:40:07Z"}, {"text": "(In reply to :Paolo Amadini from comment #10)\n> That's really interesting! It may be worth trying to migrate only half of\n> the bindings to see if the regression is cut in half, or if there is one\n> specific stylesheet that introduces a problem.\n\nThe way global.css and components.css get loaded are quite different (with the latter being handled in nsLayoutStylesheetCache). It's been on my todo list to measure any impact we'd get by moving global.css into the cache - I guess this would be an excuse to do that.", "author": "bgrinstead@mozilla.com", "id": 13364357, "time": "2018-05-25T16:44:24Z"}, {"text": "(In reply to Matthew N. [:MattN] (PM if requests are blocking you) from comment #3)\n> Would you agree that porting the stylesheets to Shadow DOM would be a better\n> solution for encapsulation and therefore maintainability in the long term?\n\nActually, I don't think porting the XUL widgets stylesheets to Shadow DOM would improve maintainability in the long term. It may even have the opposite effect.\n\nTo frame the discussion, our main milestone is to create a set of Custom Elements that serve the purpose of replacing the obsolete XBL bindings. If we were designing a library of widgets for web content to be used in an uncontrolled environment, then scoping may bring some benefits. However, this is definitely out of scope for us, since the scope of stylesheets would be the least of our problems, as we would have to spend much more time in redesigning the API of each widget to make it sane, and this would multiply our already year-long project by a factor of two or more.\n\nGiven this, for our Custom Elements we can safely assume a controlled environment, with legacy add-ons gone and even Mozilla-authored bootstrapped add-ons being replaced by WebExtensions experiments.\n\nI took a look at the XBL stylesheets affected by this change, and the vast majority of rules are already scoped:\n  - by specifying the tag name, or\n  - by class name, where the class is generally prefixed with the tag name, or in general uniquely named.\n\nThe same type of rules are also found in \"global.css\", which is not loaded at the level of the individual widget. This works just as well as the XBL stylesheets, so the approach is already proven. This file also contains generic rules like \"plain\" that are designed to apply to multiple elements, and are unscoped by intent, so are less relevant to this case.\n\nIn our main browser window, most of the styles are also conrolled by \"browser.css\". The styles defined here are also not scoped. At the moment, if I understand correctly, they are also at a different CSS cascade level than both \"global.css\" and XBL stylesheets.\n\nIt is this variety of combinations, together with the inherent complexity of CSS specificity, that makes it difficult for people to predict the effects of any change made on the browser CSS. Of course, these effects can always be tested with developer tools, and regressions can be prevented with tooling like MozScreenshots, but this doesn't take away the time lost with making a \"bad prediction\" to begin with.\n\nFor example, if I look up a CSS rule with a global text search, and the file a rule is located in makes no difference as to the cascade level, I can use much more ordinary web programming knowledge to make the predictions.\n\nI think this is a key element of \"maintainability\", in other words it reduces the time it takes for someone to successfully make changes to the code. I posit that by reducing the number of cascade levels and reducing forms of encapsulation that are not apparent from the contents of the file, we improve maintainability.\n\nI'm saying this from personal experience working on the XBL removal project - even for someone like me who has been around for years, it still takes a while to ramp up among all these special cases. Those who deal every day with browser and toolkit style modifications have all of this complex information already in their heads, so the difference may not be as apparent, but by reducing the amount of information needed we can lower the barrier to contribution and go faster, both for volunteers and for staff.\n\nFinally, reducing the combinations by moving everything to be scoped seems quite far away from the current state. Given the controlled environment, I think moving everything to be unscoped and instead controlled at the rule level is a better move.\n\nUnsurprisingly, the try build that does this looks strikingly good, with a few minor glitches, even when using document styles.\n\nThere is a longer Nightly cycle upcoming. If we can stabilize on this browser architecture, we can figure out the most obvious regressions and then land the patch at the beginning of the cycle, having quite some time to catch any regressions that we didn't notice initially. I'd prefer figuring out the performance regressions with the document styles and going for that approach, rather than UA styles, for the reasons stated earlier. Fixing those regression will also be much simpler with the simplified cascade rules, not having to deal with bugs like the \"!important\" in the UA stylesheets overriding everything else.", "author": "paolo.mozmail@amadzone.org", "id": 13390580, "time": "2018-06-06T10:45:21Z"}, {"text": "Also, Emilio had some reservations about preserving the current XBL cascade level in bug 1457907 comment 28, again driven by the need for maintainability of the platform code. Without this cascade level, we'll have to deal with unpredictable regressions anyways during the XBL removal project. I think that by doing a bulk migration to document styles we'll save time overall to our team and others, and finish the XBL removal sooner.", "author": "paolo.mozmail@amadzone.org", "id": 13390596, "time": "2018-06-06T10:55:52Z"}, {"text": "There's a lot of relation between this, bug 1457907, and bug 1458426 (with the latter two bugs being related to fallout of converting sheets to UA styles).\n\nI still think the lowest cost for migration on the frontend side would be adding a new cascade level after UA and before document as Emilio outlines in https://bugzilla.mozilla.org/show_bug.cgi?id=1457907#c23. But that has two main drawbacks:\n1) It's a lot of churn on the platform side\n2) It's a new non-standard thing, albeit more simple than the current non-standard thing we do with XBL sheets.\n\nLong term, at least for unscoped rules, I agree document styles would be ideal since we could avoid those two bugs (1457907 and 1458426), and others like it. If we were to do that, it's likely we'd be addressing CSS regressions for the entire next cycle, so we'd want to commit to having bandwidth to do so, both on the team doing XBL replacement and from likely reviewers on the frontend team. Doing so would smooth over the rest of the work in the XBL project (frontload the cost of the CSS migration so that the cost of migrating individual bindings is lower). We'd have to spend time now looking into what's going on with the performance issues now though if we want that to even be a possibility.", "author": "bgrinstead@mozilla.com", "id": 13396647, "time": "2018-06-08T16:52:44Z"}, {"text": "(In reply to :Paolo Amadini from comment #12)\n> The same type of rules are also found in \"global.css\", which is not loaded\n> at the level of the individual widget. This works just as well as the XBL\n> stylesheets, so the approach is already proven. This file also contains\n> generic rules like \"plain\" that are designed to apply to multiple elements,\n> and are unscoped by intent, so are less relevant to this case.\n> \n> In our main browser window, most of the styles are also conrolled by\n> \"browser.css\". The styles defined here are also not scoped. At the moment,\n> if I understand correctly, they are also at a different CSS cascade level\n> than both \"global.css\" and XBL stylesheets.\n\nHere's the current situation:\n\nglobal.css and browser.css are at the same cascade level: they are both loaded as author sheets and not scoped:\n- browser.css is loaded in browser.xul as `<?xml-stylesheet href=\"chrome://browser/skin/\" type=\"text/css\"?>`: https://searchfox.org/mozilla-central/rev/c621276fbdd9591f52009042d959b9e19b66d49f/browser/base/content/browser.xul#19\n- which in turn loads global.css as `@import url(\"chrome://global/skin/\");` https://searchfox.org/mozilla-central/rev/c621276fbdd9591f52009042d959b9e19b66d49f/browser/themes/windows/browser.css#5\n\nXBL sheets have their own cascade (after UA but before author) and are scoped.\n\nxul.css and components.css (where we have been porting some XBL sheets) are both loaded at the UA cascade and not scoped.", "author": "bgrinstead@mozilla.com", "id": 13397086, "time": "2018-06-08T19:55:14Z"}, {"text": "I think we're talking past each other as you're talking about UA vs. document in some places which isn't relevant for switching from <resource> stylesheets to a shadow DOM stylesheet as I'm suggesting. The more relevant part is how often we need to override the encapsulated styles from the outside (e.g. using a child selector to go into the anonymous content) and that is what I was hoping for an analysis of.\n\n(In reply to :Paolo Amadini from comment #12)\n> To frame the discussion, our main milestone is to create a set of Custom\n> Elements that serve the purpose of replacing the obsolete XBL bindings. If\n> we were designing a library of widgets for web content to be used in an\n> uncontrolled environment, then scoping may bring some benefits. However,\n> this is definitely out of scope for us, since the scope of stylesheets would\n> be the least of our problems, as we would have to spend much more time in\n> redesigning the API of each widget to make it sane, and this would multiply\n> our already year-long project by a factor of two or more.\n\nI really don't see how this makes sense\u2026 if the XBL binding you're replacing uses <content> then continuing to us anonymous/shadow content for the same contents should be easier for porting. I don't know why you're talking about changing APIs as I never suggested that.\n\n> Given this, for our Custom Elements we can safely assume a controlled\n> environment, with legacy add-ons gone and even Mozilla-authored bootstrapped\n> add-ons being replaced by WebExtensions experiments.\n\nRight, but we still have layering and separation of responsibilities: toolkit => browser => my browser UI feature, and yes I was suggesting we try to flatten some of toolkit with browser while we're porting.\n\n> I took a look at the XBL stylesheets affected by this change, and the vast\n> majority of rules are already scoped:\n>   - by specifying the tag name, or\n>   - by class name, where the class is generally prefixed with the tag name,\n> or in general uniquely named.\n\nOK, but how will we handle the exceptions? And what burden do they cause?\n\n> The same type of rules are also found in \"global.css\", which is not loaded\n> at the level of the individual widget. This works just as well as the XBL\n> stylesheets, so the approach is already proven. This file also contains\n> generic rules like \"plain\" that are designed to apply to multiple elements,\n> and are unscoped by intent, so are less relevant to this case.\n\nbtw. the usefulness of the separation between global.css vs. xul.css is not clear to me.\n\n> In our main browser window, most of the styles are also conrolled by\n> \"browser.css\". The styles defined here are also not scoped. At the moment,\n> if I understand correctly, they are also at a different CSS cascade level\n> than both \"global.css\" and XBL stylesheets.\n\nI'm not sure that \"most of the styles\" is telling me much, more useful would be knowing how many of the stylesheets need to be override by browser.css (ideally understanding whether the override was *actually* needed) i.e. what problems would occur if the resource stylesheets were inside a shadow DOM. I suspect some of the resource stylesheets are not getting overridden by browser.css and so using shadow DOM means that developers working on that widget/component won't need to worry about looking at stylesheets outside of their own while styling the shadow children \n\n> It is this variety of combinations, together with the inherent complexity of\n> CSS specificity, that makes it difficult for people to predict the effects\n> of any change made on the browser CSS. Of course, these effects can always\n> be tested with developer tools, and regressions can be prevented with\n> tooling like MozScreenshots, but this doesn't take away the time lost with\n> making a \"bad prediction\" to begin with.\n\nI don't understand this argument\u2026 contents of the anonymous content ideally (and often) aren't styled by browser.css from what I can recall. For some cases where it's needed, CSS variables could be used.\n\n> For example, if I look up a CSS rule with a global text search, and the file\n> a rule is located in makes no difference as to the cascade level, I can use\n> much more ordinary web programming knowledge to make the predictions.\n\nI wouldn't even have to search if I can just look at the stylesheet(s) that are part of my shadow DOM. That's the ideal state IMO.\n\n> I think this is a key element of \"maintainability\", in other words it\n> reduces the time it takes for someone to successfully make changes to the\n> code. I posit that by reducing the number of cascade levels\n\nRight.\n\n> and reducing\n> forms of encapsulation that are not apparent from the contents of the file,\n> we improve maintainability.\n\nI'm not sure why you're talking about this since I'm talking about encapsulation that is apparent from the contents of the file as the stylesheet reference would be in the shadow DOM.\n\n> \u2026\n> Finally, reducing the combinations by moving everything to be scoped seems\n> quite far away from the current state.\n\nI'm not suggesting changing everything to be scoped, this bug is about maintaining existing scoping where it makes sense.\n\n> Given the controlled environment, I\n> think moving everything to be unscoped and instead controlled at the rule\n> level is a better move.\n\nThis would be going against the trend in web development, and I think it's clear that there is value in encapsulation. Making all rules unscoped is going to be a maintenance nightmare and a significant regression. We'd need a significant investment in tooling like mozscreenshots to detect accidental changes if every CSS change has the potential to change totally unrelated UI. Sure we can enforce encapsulation my class naming prefixes but why place that burden on everyone when proper tools (shadow DOM) exist for the job.\n\nI still would like to see more concrete notes or diffs of the issues with converting the anonymous content stylesheets to shadow DOM stylesheets so we can have a more concrete discussion about the issues.", "author": "MattN+bmo@mozilla.com", "id": 13397128, "time": "2018-06-08T20:18:10Z"}, {"text": "(In reply to Matthew N. [:MattN] (PM if requests are blocking you) from comment #16)\n> > It is this variety of combinations, together with the inherent complexity of\n> > CSS specificity, that makes it difficult for people to predict the effects\n> > of any change made on the browser CSS. Of course, these effects can always\n> > be tested with developer tools, and regressions can be prevented with\n> > tooling like MozScreenshots, but this doesn't take away the time lost with\n> > making a \"bad prediction\" to begin with.\n> \n> I don't understand this argument\u2026 contents of the anonymous content ideally\n> (and often) aren't styled by browser.css from what I can recall. For some\n> cases where it's needed, CSS variables could be used.\n>\n> > Given the controlled environment, I\n> > think moving everything to be unscoped and instead controlled at the rule\n> > level is a better move.\n> \n> This would be going against the trend in web development, and I think it's\n> clear that there is value in encapsulation. Making all rules unscoped is\n> going to be a maintenance nightmare and a significant regression. We'd need\n> a significant investment in tooling like mozscreenshots to detect accidental\n> changes if every CSS change has the potential to change totally unrelated\n> UI. Sure we can enforce encapsulation my class naming prefixes but why place\n> that burden on everyone when proper tools (shadow DOM) exist for the job.\n> \n> I still would like to see more concrete notes or diffs of the issues with\n> converting the anonymous content stylesheets to shadow DOM stylesheets so we\n> can have a more concrete discussion about the issues.\n\nSo this won't be a very exhaustive list since it's a super simple example that doesn't even have it's own <resources> sheet (so no possible browser<->toolkit collapsing) but FWIW I did attempt to switch the <dropmarker> to use Shadow DOM in a patch.\n\nSo rather than constructing DOM beneath the CE in the connectedCallback at https://searchfox.org/mozilla-central/rev/c621276fbdd9591f52009042d959b9e19b66d49f/toolkit/content/widgets/general.js#39, I would create a Shadow DOM in the constructor. I do prefer using SD in this case as it takes away the weird check we have to do to see if it's already been connected.\n\nFor styling, we would only have to worry about rules that touch `.dropmarker-icon` (the only child node): https://searchfox.org/mozilla-central/search?q=dropmarker-icon&path=. All the CSS references are document-level sheets that dig into XBL anon content with descendant selector. The styles that get set from outside the anon content are: `list-style-image`, `width`, `height`, `-moz-context-properties`, `fill`. `pointer-events` gets set in xul.css, but that's applied to all dropmarkers so could be migrated into a scoped SD sheet.\n\nMy feeling was that hoisting up everything we override to a CSS variable is clumsy - even with this small list of properties it felt wrong to add variables for `-moz-context-properties` and `fill`. Originally I had only seen list-style-image, width, and height and it seemed pretty reasonable to have something like `--dropmarker-image`, `--dropmarker-width`, and `--dropmarker-height`. I guess we would use need to use fallback properties like `none` / `auto` to handle the case where those variables were undefined on the host, but that's doable. And, maybe `-moz-context-properties: fill; fill: currentColor;` from https://searchfox.org/mozilla-central/rev/c621276fbdd9591f52009042d959b9e19b66d49f/toolkit/themes/shared/popupnotification.inc.css#123 would be safe to just go ahead unconditionally set in a dropmarker sheet loaded by the Shadow DOM  so we wouldn't need variables? I didn't spend more time on it because we aren't quite ready to use SD in chrome anyway (bug 1465592).", "author": "bgrinstead@mozilla.com", "id": 13397178, "time": "2018-06-08T20:42:33Z"}, {"text": "(In reply to Brian Grinstead [:bgrins] from comment #17)\n> (In reply to Matthew N. [:MattN] (PM if requests are blocking you) from\n> comment #16)\n> > > It is this variety of combinations, together with the inherent complexity of\n> > > CSS specificity, that makes it difficult for people to predict the effects\n> > > of any change made on the browser CSS. Of course, these effects can always\n> > > be tested with developer tools, and regressions can be prevented with\n> > > tooling like MozScreenshots, but this doesn't take away the time lost with\n> > > making a \"bad prediction\" to begin with.\n> > \n> > I don't understand this argument\u2026 contents of the anonymous content ideally\n> > (and often) aren't styled by browser.css from what I can recall. For some\n> > cases where it's needed, CSS variables could be used.\n> >\n> > > Given the controlled environment, I\n> > > think moving everything to be unscoped and instead controlled at the rule\n> > > level is a better move.\n> > \n> > This would be going against the trend in web development, and I think it's\n> > clear that there is value in encapsulation. Making all rules unscoped is\n> > going to be a maintenance nightmare and a significant regression. We'd need\n> > a significant investment in tooling like mozscreenshots to detect accidental\n> > changes if every CSS change has the potential to change totally unrelated\n> > UI. Sure we can enforce encapsulation my class naming prefixes but why place\n> > that burden on everyone when proper tools (shadow DOM) exist for the job.\n> > \n> > I still would like to see more concrete notes or diffs of the issues with\n> > converting the anonymous content stylesheets to shadow DOM stylesheets so we\n> > can have a more concrete discussion about the issues.\n> \n> So this won't be a very exhaustive list since it's a super simple example\n> that doesn't even have it's own <resources> sheet (so no possible\n> browser<->toolkit collapsing) but FWIW I did attempt to switch the\n> <dropmarker> to use Shadow DOM in a patch.\n> \n> So rather than constructing DOM beneath the CE in the connectedCallback at\n> https://searchfox.org/mozilla-central/rev/\n> c621276fbdd9591f52009042d959b9e19b66d49f/toolkit/content/widgets/general.\n> js#39, I would create a Shadow DOM in the constructor. I do prefer using SD\n> in this case as it takes away the weird check we have to do to see if it's\n> already been connected.\n> \n> For styling, we would only have to worry about rules that touch\n> `.dropmarker-icon` (the only child node):\n> https://searchfox.org/mozilla-central/search?q=dropmarker-icon&path=. All\n> the CSS references are document-level sheets that dig into XBL anon content\n> with descendant selector. The styles that get set from outside the anon\n> content are: `list-style-image`, `width`, `height`,\n> `-moz-context-properties`, `fill`. `pointer-events` gets set in xul.css, but\n> that's applied to all dropmarkers so could be migrated into a scoped SD\n> sheet.\n> \n> My feeling was that hoisting up everything we override to a CSS variable is\n> clumsy - even with this small list of properties it felt wrong to add\n> variables for `-moz-context-properties` and `fill`. Originally I had only\n> seen list-style-image, width, and height and it seemed pretty reasonable to\n> have something like `--dropmarker-image`, `--dropmarker-width`, and\n> `--dropmarker-height`. I guess we would use need to use fallback properties\n> like `none` / `auto` to handle the case where those variables were undefined\n> on the host, but that's doable.\n\nWe wouldn't need CSS variables for width/height because we can simply use: the \"inherit\" property value for them. The width and height properties would be set on the dropmarker itself then instead of reaching across the shadow DOM boundary. I tested that it currently works in Chrome and Firefox from ShadowDOM in HTML documents: https://jsbin.com/wefejususe/1/edit?html,js,output\n\n> And, maybe `-moz-context-properties: fill;\n> fill: currentColor;` from\n> https://searchfox.org/mozilla-central/rev/\n> c621276fbdd9591f52009042d959b9e19b66d49f/toolkit/themes/shared/\n> popupnotification.inc.css#123 would be safe to just go ahead unconditionally\n> set in a dropmarker sheet loaded by the Shadow DOM  so we wouldn't need\n> variables? \n\nYes, definitely.\n\nSo you'd only need one variable for the image and that seems really nice IMO.", "author": "MattN+bmo@mozilla.com", "id": 13397441, "time": "2018-06-08T22:56:30Z"}], "id": 1463820, "priority": "P5", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox62": "---", "cf_platform_rel": "---", "product": "Firefox", "cf_status_firefox_esr52": "---", "blocks": [1397874, 1457907], "qa_contact": "", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1458426"], "cf_fx_iteration": "---", "component": "Theme", "votes": 1, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "is_cc_accessible": true, "cf_rank": null, "groups": [], "url": "", "creator_detail": {"email": "bgrinstead@mozilla.com", "id": 476442, "name": "bgrinstead@mozilla.com", "real_name": "Brian Grinstead [:bgrins]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bzbarsky@mit.edu", "id": 20209, "name": "bzbarsky@mit.edu", "real_name": "Boris Zbarsky [:bz] (Vacation Jun 16-24) (no decent commit message means r-)"}, {"email": "dao+bmo@mozilla.com", "id": 219124, "name": "dao+bmo@mozilla.com", "real_name": "D\u00e3o Gottwald [::dao]"}, {"email": "emilio@crisal.io", "id": 546716, "name": "emilio@crisal.io", "real_name": "Emilio Cobos \u00c1lvarez [:emilio]"}, {"email": "gijskruitbosch+bugs@gmail.com", "id": 159069, "name": "gijskruitbosch+bugs@gmail.com", "real_name": ":Gijs (he/him)"}, {"email": "jaws@mozilla.com", "id": 409754, "name": "jaws@mozilla.com", "real_name": "Jared Wein [:jaws] (please needinfo? me)"}, {"email": "MattN+bmo@mozilla.com", "id": 305228, "name": "MattN+bmo@mozilla.com", "real_name": "Matthew N. [:MattN] (PM if requests are blocking you)"}, {"email": "paolo.mozmail@amadzone.org", "id": 332229, "name": "paolo.mozmail@amadzone.org", "real_name": ":Paolo Amadini"}, {"email": "timdream@gmail.com", "id": 185001, "name": "timdream@gmail.com", "real_name": "Tim Guan-tin Chien [:timdream] (please needinfo)"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-08T22:56:30Z", "cf_status_firefox_esr60": "---", "assigned_to": "nobody@mozilla.org", "is_open": true, "resolution": "", "op_sys": "Unspecified", "cf_fx_points": "---", "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "MattN+bmo@mozilla.com"}], "who": "MattN+bmo@mozilla.com", "when": "2018-05-23T18:16:40Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P5"}], "who": "dao+bmo@mozilla.com", "when": "2018-05-24T08:32:03Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dao+bmo@mozilla.com"}], "who": "dao+bmo@mozilla.com", "when": "2018-05-24T08:32:10Z"}, {"changes": [{"field_name": "attachments.description", "removed": "Bug 1463820 - Migate all tookit/content/widget <resources> to UA styles", "attachment_id": 8980024, "added": "Bug 1463820 - Migrate all tookit/content/widget <resources> to UA styles"}], "who": "bgrinstead@mozilla.com", "when": "2018-05-24T22:38:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "timdream@gmail.com"}], "who": "timdream@gmail.com", "when": "2018-05-30T16:17:49Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1461793"}], "who": "paolo.mozmail@amadzone.org", "when": "2018-06-06T09:42:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jaws@mozilla.com"}, {"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1458426"}], "who": "bgrinstead@mozilla.com", "when": "2018-06-08T16:52:44Z"}]}