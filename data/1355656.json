{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "botond@mozilla.com", "mentors_detail": [{"email": "botond@mozilla.com", "id": 474533, "name": "botond@mozilla.com", "real_name": "Botond Ballo [:botond]"}], "depends_on": [1180799], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "keywords": [], "cc_detail": [{"email": "bugmail@mozilla.staktrace.com", "id": 426788, "name": "bugmail@mozilla.staktrace.com", "real_name": "Kartikaya Gupta (email:kats@mozilla.com)"}, {"email": "diorahman@rockybars.com", "id": 525440, "name": "diorahman@rockybars.com", "real_name": "Dhi Aurrahman"}, {"email": "olucafont6@yahoo.com", "id": 578314, "name": "olucafont6@yahoo.com", "real_name": "Gregory Moore [:gmoore]"}, {"email": "yuj25@uni.coventry.ac.uk", "id": 603575, "name": "yuj25@uni.coventry.ac.uk", "real_name": "Jaewoongyu"}], "cf_last_resolved": "2018-06-06T17:10:49Z", "attachments": [{"creator": "jlogandavison@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2018-04-24T17:00:59Z", "type_id": 607, "creation_date": "2018-04-24T17:00:59Z", "id": 1748367, "setter": "botond@mozilla.com"}], "content_type": "text/plain", "id": 8970038}, {"creator": "jlogandavison@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8971826}, {"creator": "jlogandavison@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2018-05-04T17:03:36Z", "type_id": 607, "creation_date": "2018-05-04T17:03:36Z", "id": 1752848, "setter": "botond@mozilla.com"}], "content_type": "text/plain", "id": 8973030}, {"creator": "jlogandavison@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2018-06-01T20:36:06Z", "type_id": 607, "creation_date": "2018-06-01T20:36:06Z", "id": 1764843, "setter": "botond@mozilla.com"}], "content_type": "text/plain", "id": 8982059}, {"creator": "jlogandavison@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2018-06-04T12:36:02Z", "type_id": 607, "creation_date": "2018-06-04T12:36:02Z", "id": 1765313, "setter": "botond@mozilla.com"}], "content_type": "text/plain", "id": 8982828}, {"creator": "jlogandavison@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-06-05T15:01:15Z", "type_id": 4, "creation_date": "2018-06-05T11:55:53Z", "id": 1765894, "setter": "botond@mozilla.com"}], "content_type": "text/plain", "id": 8983370}], "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 53, "comments": [{"text": "In bug 1180799, we implemented momentum scrolling after a two-fingered pan, on pages where zooming is not allowed.\n\nAs a follow-up, we would like to write some gtests for this feature.\n\nI think the tests we'd like to have are:\n\n  (1) On a page where zooming is allowed, check that we do NOT\n      get momentum scrolling after a two-fingered pan.\n\n  (2) On a page where zooming is not allowed, check that we get\n      momentum scrolling after a two-fingered pan:\n\n       (a) in the case where the two fingers are lifted at the\n           same time\n\n       (b) in the case where the two fingers are lifted at\n           different times\n\n(1) can just be a new assertion in an existing test in TestPinching.cpp [1]. (2a) and (2b) should be new tests, also in TestPinching.cpp.\n\n[1] http://searchfox.org/mozilla-central/source/gfx/layers/apz/test/gtest/TestPinching.cpp", "author": "botond@mozilla.com", "id": 12227193, "time": "2017-04-12T00:12:28Z"}, {"text": "An additional scenario for which it would be good to write a test is the one that regressed in bug 1355944 (see bug 1180799 comment 38 for a diagnosis that helps pin down the STR for that regression).", "author": "botond@mozilla.com", "id": 12241002, "time": "2017-04-17T19:09:34Z"}, {"text": "I would like to work on this bug if it is possible. Thank you.", "author": "yuj25@uni.coventry.ac.uk", "id": 12909674, "time": "2017-12-08T21:46:01Z"}, {"text": "(In reply to Jaewoongyu from comment #2)\n> I would like to work on this bug if it is possible. Thank you.\n\nGreat, thanks for your interest!\n\nThe first thing to do is to build the Firefox codebase locally, as described here:\n\nhttps://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Simple_Firefox_build\n\nLet me know once you've done that and I'll post some further guidance.", "author": "botond@mozilla.com", "id": 12910164, "time": "2017-12-08T23:03:02Z"}, {"text": "I built the Firefox codebase locally as described", "author": "yuj25@uni.coventry.ac.uk", "id": 12910422, "time": "2017-12-09T02:04:29Z"}, {"text": "Great! I'm assigning the bug to you.\n\nThe next step is to make the modifications to TestPinching.cpp described in comment 0, and then test them by running the new / modified test cases.\n\nThe tests in that file use the GTest (Google Test) test framework. See [1] for documentation on how to run test cases. There's also a link there to Google's own documentation for the GTest framework which goes into more detail.\n\nYou may also want to review bug 1180799 to get a better understanding of the functionality we want to test. There's a fair amount of technical discussion in that bug; don't worry if you don't follow it all, as a lot of it pertains to the implementation of the functionality, which doesn't really matter for writing the test.\n\nLet me know if you have any questions or run into any issues! I'm happy to provide further help / guidance as needed.\n\n[1] https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/GTest", "author": "botond@mozilla.com", "id": 12910461, "time": "2017-12-09T02:20:44Z"}, {"text": "Should I do gtest it before I create a patch file?", "author": "yuj25@uni.coventry.ac.uk", "id": 12913748, "time": "2017-12-11T10:11:04Z"}, {"text": "I mean that after I have some modifications based on comment 0.", "author": "yuj25@uni.coventry.ac.uk", "id": 12913750, "time": "2017-12-11T10:13:15Z"}, {"text": "Yes, please check that the new / modified tests pass before uploading the patch. Thanks!", "author": "botond@mozilla.com", "id": 12914513, "time": "2017-12-11T23:52:52Z"}, {"text": "So, basically what test should I do? there are three tests which are Running test, Debugging a gtest unit Test, Writing a gtest unit test", "author": "yuj25@uni.coventry.ac.uk", "id": 12914537, "time": "2017-12-12T00:26:59Z"}, {"text": "As you can see in comment 0, there are three tasks here, numbered (1), (2a) and (2b) in that comment.\n\nLet's start with (1). That involves modifying an existing test.\n\n  - Pick a test from TestPinching.cpp that involves a page where \n    zooming is allowed. Any test that calls the MakeApzcZoomable() \n    function should do.\n\n  - Modify the test to check that momentum scrolling has not\n    occurred. Figuring out how to do that requires thinking a bit\n    about how momentum scrolling works; this is why I suggested\n    reviewing bug 1180799 first. Give it a try, if you're not\n    getting anywhere I can give you a hint.\n\n  - Run the modified test to check that it still passes.\n\nThat's probably a good time to post your modifications for review. We can do parts (2a) and (2b) later.\n\nDebugging the test is only necessary if you're getting an unexpected result (e.g. the test is failing when you're expecting it to pass) and you need to figure out why.", "author": "botond@mozilla.com", "id": 12914552, "time": "2017-12-12T00:52:37Z"}, {"text": "I get a little bit confused, so basically when I implement gtest, should I do it within the Firefox build environment?", "author": "yuj25@uni.coventry.ac.uk", "id": 12915852, "time": "2017-12-13T01:01:02Z"}, {"text": "(In reply to Jaewoongyu from comment #11)\n> I get a little bit confused, so basically when I implement gtest, should I\n> do it within the Firefox build environment?\n\nYou do need to build before you can test your modifications. So you would:\n\n  - make modifications to TestPinching.cpp\n\n  - run \"./mach build binaries\" to build the modified test code\n\n  - run \"./mach gtest <testname>\" to run your modified test, substituting\n    \"<testname>\" with the name of the test you want to run (an example \n    might be \"APZCPinchTester.Pinch_DefaultGestures_NoTouchAction\")\n\nLet me know if that answers your question.", "author": "botond@mozilla.com", "id": 12915970, "time": "2017-12-13T04:59:58Z"}, {"text": "So I need to build it within the Firefox build environment right?", "author": "yuj25@uni.coventry.ac.uk", "id": 12918185, "time": "2017-12-14T13:09:13Z"}, {"text": "I have been trying many times to modify, but I am still struggling. Where do you use this code?", "author": "yuj25@uni.coventry.ac.uk", "id": 12918201, "time": "2017-12-14T13:21:16Z"}, {"text": "(In reply to Jaewoongyu from comment #13)\n> So I need to build it within the Firefox build environment right?\n\nYou run the commands mentioned in comment 12 in the same directory where you ran './mach build' to build Firefox originally (the source directory), if that's what you mean.", "author": "botond@mozilla.com", "id": 12918402, "time": "2017-12-14T15:54:03Z"}, {"text": "(In reply to Jaewoongyu from comment #14)\n> I have been trying many times to modify, but I am still struggling.\n\nI've been thinking some more about what I wrote earlier:\n\n(In reply to Botond Ballo [:botond] from comment #10)\n>   - Pick a test from TestPinching.cpp that involves a page where \n>     zooming is allowed. Any test that calls the MakeApzcZoomable() \n>     function should do.\n\nI don't think that any test that calls MakeApzcZoomable() is suitable for this purpose. Most of the tests in TestPinching.cpp generate pinch gestures intended to trigger zooming (the distance between the fingers changes but the focus point does not), but we want a test that generates pinch gestures intended to trigger two-finger panning (the distance between the fingers stays the same but the focus point changes).\n\nWe appear to have two such tests, Panning_TwoFinger_ZoomDisabled and Pinch_TwoFinger_APZZoom_Disabled_Bug1354185, and in both of them, zooming is disabled.\n\nSo, we do actually need to write a new test for this case, rather than modifying an existing test.\n\nLet's start with something simple: let's make a new test, similar to Panning_TwoFinger_ZoomDisabled, where zooming is allowed. We can call it Panning_TwoFinger_ZoomEnabled. The only difference from Panning_TwoFinger_ZoomDisabled should be that instead of calling MakeApzcUnzoomable(), we call MakeApzcZoomable().\n\nLet's start with that. We can then worry about checking that momentum scrolling doesn't happen, as the next step.", "author": "botond@mozilla.com", "id": 12918512, "time": "2017-12-14T16:36:16Z"}, {"text": " I do not think it will be able to run without the class files and header files used here. Can you upload all the files?", "author": "yuj25@uni.coventry.ac.uk", "id": 12918578, "time": "2017-12-14T17:02:10Z"}, {"text": "(In reply to Jaewoongyu from comment #17)\n>  I do not think it will be able to run without the class files and header\n> files used here. Can you upload all the files?\n\nAll the necessary files are in the source directory that you checked out when doing your initial build (comment 3).\n\nWhat files do you think you're missing?", "author": "botond@mozilla.com", "id": 12918619, "time": "2017-12-14T17:13:01Z"}, {"text": "Hi Jaewoongyu, are you still working on this?", "author": "botond@mozilla.com", "id": 13009463, "time": "2018-01-31T20:41:25Z"}, {"text": "I'm going to unassign this bug and make it available for someone else who may be interested to take it on.\n\nJaewoongyu, if you're still working on this, or would like to, feel free to say so and I'll assign it back to you if no one else has taken it.", "author": "botond@mozilla.com", "id": 13042994, "time": "2018-02-14T22:06:37Z"}, {"text": "Hi Botond,\n\nFor detecting the momentum scrolling, should we *expect* the `APZCTreeManager::DispatchFling()` to be called? Thanks!", "author": "diorahman@rockybars.com", "id": 13100886, "time": "2018-03-04T01:40:58Z"}, {"text": "(In reply to Dhi Aurrahman from comment #21)\n> For detecting the momentum scrolling, should we *expect* the\n> `APZCTreeManager::DispatchFling()` to be called? Thanks!\n\nGood question! We do expect APZCTreeManager::DispatchFling() to be called if momentum scrolling is triggered.\n\nIf you mean using EXPECT_CALL to detect whether or not DispatchFling() has been called, I don't think we can do that, because we don't have a mock object for APZCTreeManager the way we do for GeckoContentController.\n\nAn alternative method for detecting whether momentum scrolling has been triggered might be to check the state of the AsyncPanZoomController after the pinch gesture has been processed; methods like TestAsyncPanZoomController::AssertStateIsFling() [1] may be helpful.\n\n[1] https://searchfox.org/mozilla-central/rev/d2b4b40901c15614fad2fa34718eea428774306e/gfx/layers/apz/test/gtest/APZTestCommon.h#263", "author": "botond@mozilla.com", "id": 13101872, "time": "2018-03-05T01:14:15Z"}, {"text": "Thanks (In reply to Botond Ballo [:botond] from comment #22)\n> (In reply to Dhi Aurrahman from comment #21)\n> > For detecting the momentum scrolling, should we *expect* the\n> > `APZCTreeManager::DispatchFling()` to be called? Thanks!\n> \n> Good question! We do expect APZCTreeManager::DispatchFling() to be called if\n> momentum scrolling is triggered.\n> \n> If you mean using EXPECT_CALL to detect whether or not DispatchFling() has\n> been called, I don't think we can do that, because we don't have a mock\n> object for APZCTreeManager the way we do for GeckoContentController.\n> \n> An alternative method for detecting whether momentum scrolling has been\n> triggered might be to check the state of the AsyncPanZoomController after\n> the pinch gesture has been processed; methods like\n> TestAsyncPanZoomController::AssertStateIsFling() [1] may be helpful.\n> \n> [1]\n> https://searchfox.org/mozilla-central/rev/\n> d2b4b40901c15614fad2fa34718eea428774306e/gfx/layers/apz/test/gtest/\n> APZTestCommon.h#263\n\nThanks for the hint, yes, I tried that yesterday. However, I guess I need to be sure about: `the pinch gesture has been processed`, since blindly calling checking the `TestAsyncPanZoomController::mState` after `PinchWithPinchInput(...)` gives me `PINCHING`. Digging...", "author": "diorahman@rockybars.com", "id": 13102943, "time": "2018-03-05T02:57:51Z"}, {"text": "Hi Botond,\n\nI'm sorry if it is actually obvious, I couldn't find a way to make sure the event is processed. I guessed it is mcc related but apparently it is not. Would you give me another hint? Thanks!", "author": "diorahman@rockybars.com", "id": 13102982, "time": "2018-03-05T03:48:26Z"}, {"text": "(In reply to Dhi Aurrahman from comment #23)\n> However, I guess I need to\n> be sure about: `the pinch gesture has been processed`, since blindly calling\n> checking the `TestAsyncPanZoomController::mState` after\n> `PinchWithPinchInput(...)` gives me `PINCHING`.\n\nYou're right; there is a complication that I forgot about.\n\nFirst, copying some background information from bug 1180799 comment 26:\n\n> To give a bit of background here: what happens in production code is the OS\n> sends us touch events, we run them through a gesture detector to see if the\n> touch events represent a pinch gesture, and if so we synthesize \"pinch\n> gesture events\" which we then handle (e.g. in OnScaleBegin()/OnScaleEnd()).\n> \n> The test suite, however, can also just create and send pinch gesture events\n> directly\n\nThe test suite can trigger the pinch gesture handling code in two ways:\n\n  - PinchWithTouchInput(), which creates touch events that represent\n    a pinch gesture. These go to the gesture detector and are turned\n    into pinch gesture events.\n\n  - PinchWithPinchInput(), which creates the pinch gesture events\n    directly.\n\nIn bug 1180799, we only hooked up the momentum scrolling for pinch gesture events that are created from touch events (for simplicity, and because this is what happens in production).\n\nThat means that tests that use PinchWithPinchInput() will not trigger the momentum scrolling code.\n\n(That the state is still PINCHING after calling PinchWithPinchInput(), rather than NOTHING which is what you would expect if the gesture has been processed and momentum scrolling has not been triggered, is a bug. I filed bug 1443231 for that.)\n\nSo, for the tests in this bug, we need to use PinchWithTouchInput(), rather than PinchWithPinchInput().\n\nNote also the following discussion from bug 1180799 comment 28 which is relevant:\n\n> > Is it possible to use PinchWithTouchInput() directly for the behavior we\n> > want? It seems like it just does a horizontal pinch, and both fingers move\n> > at the same rate so the focus point will remain constant. Would we need to\n> > modify the function or create a similar function? Also,\n> > PinchWithTouchInput() seems to release the two fingers at the same time, so\n> > it seems like we would need to have the ability to change that as well.\n> \n> Good point, we'd need to either make some changes to PinchWithTouchInput(),\n> or just send the touch events (similar how to how PinchWithTouchInput() does\n> it, but with our desired modifications) in our test body directly.", "author": "botond@mozilla.com", "id": 13105785, "time": "2018-03-05T19:06:08Z"}, {"text": "Hi Dhi, could you clarify whether you are interested in taking this bug?\n\nI ask because if not, I have another contributor who may be interested in working on it.", "author": "botond@mozilla.com", "id": 13147123, "time": "2018-03-21T22:21:53Z"}, {"text": "Hi Botond, please go ahead assign it to another contributor. Sorry for not telling it clearly before.", "author": "diorahman@rockybars.com", "id": 13147138, "time": "2018-03-21T22:32:54Z"}, {"text": "Created attachment 8970038\npatch.diff\n\nHi, I've had a crack at this. This is a preliminary patch w.out the required tests, just some per-requisite work.\n\nI've opted to slightly refactor \"PinchWithTouchInput\" to allow for different starting/ending focus points. I've overloaded the original method signature so as to not break any existing tests that rely on \"PinchWithTouchInput\".\n\n(We'll probably still need to implement the more advanced gestures directly in the body of the 2nd and 3rd test cases, but I felt this would be a nice addition to the existing test utilities)\n\nI'm having trouble actually triggering a fling gesture with this implementation however. Even in a test where the apzc is set to unzoomable which if I understand correctly SHOULD allow for fling gestures on two finger pan.\n\nWith the 4 input events in PinchWithTouchInput (Start -> Move -> Move -> End), I'm seeing the following state transition: (Touching -> Panning -> Panning -> Nothing)\n\nI also can't seem to pan in the y-axis at all, so perhaps my implementation is buggy. Is there anything obvious that you can see is missing here?", "author": "jlogandavison@gmail.com", "id": 13224295, "time": "2018-04-22T22:07:18Z"}, {"text": "Comment on attachment 8970038\npatch.diff\n\nReview of attachment 8970038:\n-----------------------------------------------------------------\n\nThanks for working on this! I'll assign the bug to you.\n\nThis patch so far looks good.\n\n(In reply to jlogandavison from comment #28)\n> I've opted to slightly refactor \"PinchWithTouchInput\" to allow for different\n> starting/ending focus points. I've overloaded the original method signature\n> so as to not break any existing tests that rely on \"PinchWithTouchInput\".\n> \n> (We'll probably still need to implement the more advanced gestures directly\n> in the body of the 2nd and 3rd test cases, but I felt this would be a nice\n> addition to the existing test utilities)\n\nSounds good.\n\n> I'm having trouble actually triggering a fling gesture with this\n> implementation however. Even in a test where the apzc is set to unzoomable\n> which if I understand correctly SHOULD allow for fling gestures on two\n> finger pan.\n> \n> With the 4 input events in PinchWithTouchInput (Start -> Move -> Move ->\n> End), I'm seeing the following state transition: (Touching -> Panning ->\n> Panning -> Nothing)\n> \n> I also can't seem to pan in the y-axis at all, so perhaps my implementation\n> is buggy. Is there anything obvious that you can see is missing here?\n\nIt would be easier for me to answer these questions if you also posted the portion of the new test that you have written so far, that is exhibiting the behaviour you are describing.", "author": "botond@mozilla.com", "id": 13230152, "time": "2018-04-24T17:00:59Z"}, {"text": "Created attachment 8971826\npatch.diff\n\nYes, apologies. This would have been much clearer had I shown the code that was calling to PinchWithTouchInput.\n\nI've added an example test case including assertions.", "author": "jlogandavison@gmail.com", "id": 13240103, "time": "2018-04-28T21:21:40Z"}, {"text": "Comment on attachment 8971826\npatch.diff\n\nReview of attachment 8971826:\n-----------------------------------------------------------------\n\nAh, I see what the problem is: in order for PinchWithTouchInput() to work, the gesture detector which converts the touch events into pinch gesture events needs to be enabled. This requires an additional setup step. We have a fixture called APZCPinchGestureDetectorTester that handles this; the test should use that fixture rather than APZCPinchTester.", "author": "botond@mozilla.com", "id": 13240157, "time": "2018-04-28T22:53:04Z"}, {"text": "There is actually one other problem: I broke momentum scrolling in the case where the two fingers are lifted at the same time, in bug 1443231 :(\n\n(See, this is why we need tests. In the absence of tests, the functionality will break over time.)\n\nI filed bug 1457743 and posted a fix there. You can apply my fix locally to unblock you from working on this.", "author": "botond@mozilla.com", "id": 13240175, "time": "2018-04-28T23:33:17Z"}, {"text": "Finally, there's a third issue: the momentum scrolling codepath is conditioned on some calculations related to velocity (the speed at which the page is moving at the time the fingers are released). In order for the code to be able to calculate the velocity correctly, the synthesized events need to have timestamps assigned to them. Right now, PinchWithTouchInput() is giving each of them a timestamp of zero, which doesn't work.\n\nHave a look at how Pan(), the utility function for generating a one-finger pan gesture [1], assigns timestamps to the events it synthesizes. We'll need to do something similar in PinchWithTouchInput(). \n\n[1] https://searchfox.org/mozilla-central/rev/12af4303ffd384bc2406b67f54ba68d8264d72c8/gfx/layers/apz/test/gtest/APZTestCommon.h#445", "author": "botond@mozilla.com", "id": 13240200, "time": "2018-04-29T00:22:24Z"}, {"text": "Created attachment 8973030\npatch.diff\n\nOk, quick status update.\n\nI've implemented the changes you suggested and it works! The example test now successfully triggers a FLING state.\n\nIn order to get a pointer to the content controller in |PinchWithTouchInput| (for the purposes of calling |mcc->Time()| and |mcc->AdvanceBy()|) I added a |getContentController()| method to the MockAPZC. \n\nIn this patch I've gone with an alternative approach. I've moved the implementation for |PinchWithTouchInput()| inside |APZCTesterBase| alongside |Pan()|, |Tap()|, and |DoubleTap()|. This way |PinchWithTouchInput()| can access the |mcc| member of |APZCTesterBase|.\n\nThis is a bit of a bold refactoring, however it doesn't actually break any existing calls to |PinchWithTouchInput()| because all calls are from within subclasses of |APZCTesterBase|.\n\nThere are a couple wrinkles though. Firstly, the name |PinchWithTouchInput()| is now kind of inconsistent when placed next to its counterparts |Pan|, |Tap|, etc.\n\nSecondly the compiler is complaining that it cannot find the method |CreateSingleTouchData()| (note that I've commented out the offending lines in this patch), which is a bit of a head scratcher because other methods from |InputUtils.h| are used throughout |APZCTesterBase|.\n\nIf you run the tests currently an exception is thrown when |PinchWithTouchInput()| is called. This is because of the missing lines that I've commented out. Any insight on how to resolve these compiler errors?", "author": "jlogandavison@gmail.com", "id": 13253273, "time": "2018-05-03T20:42:17Z"}, {"text": "Regardless of what we decide to do about the issue above, I'm now in a position be able to implement the test cases.\n\nI noticed that the |Pan()| method had an optional argument to pass a |PanOptions| enum. This option modifies the behavior of the pan gesture. For example [1]:\n\n> if (!(aOptions & PanOptions::KeepFingerDown)) {\n>     status = TouchUp(aTarget, aTouchEnd, mcc->Time());\n> } else {\n>     status = nsEventStatus_eIgnore;\n> }\n\nAllows you to specify that the finger should not be lifted at the end of the gesture.\n\nWhat are your thoughts on a similar |PinchOptions| so that we can specify which fingers should be lifted at the end of the pinch gesture? This would be useful for test case 2b.\n\n[1]: https://searchfox.org/mozilla-central/rev/c0d81882c7941c4ff13a50603e37095cdab0d1ea/gfx/layers/apz/test/gtest/APZTestCommon.h#517", "author": "jlogandavison@gmail.com", "id": 13253292, "time": "2018-05-03T20:51:37Z"}, {"text": "(In reply to jlogandavison from comment #34)\n> In this patch I've gone with an alternative approach. I've moved the\n> implementation for |PinchWithTouchInput()| inside |APZCTesterBase| alongside\n> |Pan()|, |Tap()|, and |DoubleTap()|. This way |PinchWithTouchInput()| can\n> access the |mcc| member of |APZCTesterBase|.\n\nI like this approach!\n\n> There are a couple wrinkles though. Firstly, the name\n> |PinchWithTouchInput()| is now kind of inconsistent when placed next to its\n> counterparts |Pan|, |Tap|, etc.\n\nI think that's fine. Normally we'd just call the function Pinch(), but since there are two ways to pinch, we disambiguate by having PinchWithTouchInput() and PinchWithPinchInput().\n\n> Secondly the compiler is complaining that it cannot find the method\n> |CreateSingleTouchData()| (note that I've commented out the offending lines\n> in this patch), which is a bit of a head scratcher because other methods\n> from |InputUtils.h| are used throughout |APZCTesterBase|.\n\nInputUtils.h includes APZTestCommon.h, not the other way around, so code in APZTestCommon.h is seen by the compiler before code in InputUtils.h. CreateSingleTouchData() is defined in InputUtils.h, and we are trying to call it from APZTestCommon.h\n\nThe reason this is not an issue for certain other functions like TouchDown(), is that the calls to those in APZTestCommon.h are inside function templates, and the arguments are dependent (on the type of the InputReceiver template parameter), and name lookup for function calls with dependent arguments is deferred until the point when the template is instantiated. The instantiation happens later (in the .cpp files that define the tests), by which time InputUtils.h has been seen.\n\nA reasonable solution would be to move the CreateSingleTouchData() function to APZTestCommon.h.\n\n(In reply to jlogandavison from comment #35)\n> I noticed that the |Pan()| method had an optional argument to pass a\n> |PanOptions| enum. This option modifies the behavior of the pan gesture. For\n> example [1]:\n> \n> > if (!(aOptions & PanOptions::KeepFingerDown)) {\n> >     status = TouchUp(aTarget, aTouchEnd, mcc->Time());\n> > } else {\n> >     status = nsEventStatus_eIgnore;\n> > }\n> \n> Allows you to specify that the finger should not be lifted at the end of the\n> gesture.\n> \n> What are your thoughts on a similar |PinchOptions| so that we can specify\n> which fingers should be lifted at the end of the pinch gesture? This would\n> be useful for test case 2b.\n\nSounds good!", "author": "botond@mozilla.com", "id": 13255150, "time": "2018-05-04T16:55:48Z"}, {"text": "Comment on attachment 8973030\npatch.diff\n\nReview of attachment 8973030:\n-----------------------------------------------------------------\n\nLooks good so far!\n\n::: gfx/layers/apz/test/gtest/TestPinching.cpp\n@@ +281,5 @@\n> +  uint64_t blockId = 0;\n> +  PinchWithTouchInput(apzc, ScreenIntPoint(100, 200), ScreenIntPoint(100, 100),\n> +      1, touchInputId, nullptr, nullptr, &blockId);\n> +\n> +  // Expect to be in a flining state\n\ntypo: flinging", "author": "botond@mozilla.com", "id": 13255170, "time": "2018-05-04T17:03:36Z"}, {"text": "Hi jlogandavison, how are things going here? Anything else I can help with?", "author": "botond@mozilla.com", "id": 13369463, "time": "2018-05-28T17:29:00Z"}, {"text": "Created attachment 8982059\npatch.diff\n\nHi Botond, my apologies for not putting this together earlier.\n\nI've added the optional PinchOptions argument to PinchWithTouchInput as discussed. It works as a bit mask allowing you to specify which fingers to lift at the end of the gesture. The default is to lift both fingers.\n\nI've written the three test cases (1, 2a, and 2b) that were discussed. 1 and 2a pass as expected. But 2b currently leaves the APZC in a FLING state when we are expecting NOTHING state. This might be due to my implementation. I'm using PinchWithTouchInput (with PinchOptions to specify that only one finger is lifted) followed by a call to Pan.\n\nHowever I have noticed that a two-then-one finger pan gesture *does* appear to trigger a FLING state on the version of Firefox on my phone [1]. Are you able to reproduce this behavior?\n\n[1]: Firefox nightly 62.0a1 (2018-05-09)", "author": "jlogandavison@gmail.com", "id": 13376045, "time": "2018-05-30T22:38:28Z"}, {"text": "(In reply to jlogandavison from comment #39)\n> I've written the three test cases (1, 2a, and 2b) that were discussed. 1 and\n> 2a pass as expected. But 2b currently leaves the APZC in a FLING state when\n> we are expecting NOTHING state. This might be due to my implementation. I'm\n> using PinchWithTouchInput (with PinchOptions to specify that only one finger\n> is lifted) followed by a call to Pan.\n> \n> However I have noticed that a two-then-one finger pan gesture *does* appear\n> to trigger a FLING state on the version of Firefox on my phone [1]. Are you\n> able to reproduce this behavior?\n\nSo this is actually expected: if you've transitioned to a one-finger pan gesture, then it doesn't matter whether that used to be a two-finger gesture before or not, it always flings.\n\nThe scenario I had in mind for (2b) was where you release one finger, do not move the second finger (at least, not enough to trigger a pan gesture), and then release the second finger. The intention is to test the scenario where you intend to release both fingers, but the touchscreen hardware is sufficiently sensitive that it picks up a small difference in time between the two fingers lifting, and reports them as two separate events.\n\nIn terms of how to express this in the test, we could do a PinchWithTouchInput(LiftFinger1) call followed by a separate touch-end event for the second finger. (Or, if you prefer, you can add a LiftFingersSeparately flag to PinchWithTouchInput and have it send to the second touch-end.)", "author": "botond@mozilla.com", "id": 13381351, "time": "2018-06-01T20:34:42Z"}, {"text": "Comment on attachment 8982059\npatch.diff\n\nReview of attachment 8982059:\n-----------------------------------------------------------------\n\nLooks good, besides the issue with the (2b) testcase which I discussed.", "author": "botond@mozilla.com", "id": 13381354, "time": "2018-06-01T20:36:06Z"}, {"text": "Created attachment 8982828\npatch.diff\n\n(In reply to Botond Ballo [:botond] from comment #40) \n> The scenario I had in mind for (2b) was where you release one finger, do not\n> move the second finger (at least, not enough to trigger a pan gesture), and\n> then release the second finger.\n\nAah, that makes a lot more sense. I've updated the test case for 2b.", "author": "jlogandavison@gmail.com", "id": 13382257, "time": "2018-06-02T15:35:40Z"}, {"text": "Comment on attachment 8982828\npatch.diff\n\nReview of attachment 8982828:\n-----------------------------------------------------------------\n\n::: gfx/layers/apz/test/gtest/TestPinching.cpp\n@@ +315,5 @@\n> +      1, touchInputId, nullptr, nullptr, &blockId, PinchOptions::LiftFinger1);\n> +\n> +  // Lift second finger after a pause\n> +  mcc->AdvanceBy(TimeDuration::FromMilliseconds(50));\n> +  TouchUp(apzc, ScreenIntPoint(100, 100), mcc->Time());\n\nThanks, this is almost what we want! Just one thing: PinchWithTouchInput() when called with touchInputId=0 generates two touches with ids of 0 and 1. LiftFinger1 causes the touch with id=0 to be lifted.\n\nTouchUp() is hardcoded to generate a touch-up for id=0, so the events we are generating are saying we are lifting the same finger twice, which does not reflect a real scenario.\n\nThis is easy to fix: if we change the PinchWithTouchInput() call to use LiftFinger2 instead, it's going to lift the touch with id=1, and then the TouchUp() will be correct to lift id=0.\n\n(The other alternative is to add an argument to TouchUp() specifying which touch id to use.)", "author": "botond@mozilla.com", "id": 13384985, "time": "2018-06-04T12:36:02Z"}, {"text": "Created attachment 8983370\npatch.diff\n\n(In reply to Botond Ballo [:botond] from comment #43)\n> TouchUp() is hardcoded to generate a touch-up for id=0, so the events we are\n> generating are saying we are lifting the same finger twice, which does not\n> reflect a real scenario.\n\nOops, nice catch. I didn't think to check the implementation of |TouchUp()|. Fixed by using the LiftFinger2 option.", "author": "jlogandavison@gmail.com", "id": 13387720, "time": "2018-06-05T11:55:53Z"}, {"text": "Comment on attachment 8983370\npatch.diff\n\nReview of attachment 8983370:\n-----------------------------------------------------------------\n\nLooks good, thanks!", "author": "botond@mozilla.com", "id": 13388228, "time": "2018-06-05T15:01:15Z"}, {"text": "Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=f5245470a32d525e6969e2126396571a0d19f532", "author": "botond@mozilla.com", "id": 13388240, "time": "2018-06-05T15:05:30Z"}, {"text": "(In reply to Botond Ballo [:botond] from comment #46)\n> Try push:\n> https://treeherder.mozilla.org/#/\n> jobs?repo=try&revision=f5245470a32d525e6969e2126396571a0d19f532\n\nSorry, that has tests that are failing due to an unrelated patch I had applied as well. Let's Try that again with just your patch:\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=fa55d99edb10e296850b89159bc9be1320368019", "author": "botond@mozilla.com", "id": 13389152, "time": "2018-06-05T20:32:53Z"}, {"text": "Pushed by bballo@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/21861ee0ddb8\nImplement test cases for two finger fling gestures. r=botond", "author": "pulsebot@bots.tld", "id": 13390791, "time": "2018-06-06T12:32:07Z"}, {"text": "The updated try push looks good, so I went ahead and landed. Thanks!\n\nI updated the first line of the commit message to include the bug number and the reviewer, as per convention:\n\n  Bug 1355656 - Implement test cases for two finger fling gestures. r=botond\n\nIn the future, feel free to add these yourself :)", "author": "botond@mozilla.com", "id": 13390808, "time": "2018-06-06T12:41:12Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/21861ee0ddb8", "author": "btara@mozilla.com", "id": 13391621, "time": "2018-06-06T17:10:49Z"}, {"text": "(In reply to Botond Ballo [:botond] from comment #49)\n> The updated try push looks good, so I went ahead and landed. Thanks!\n\nAwesome! Thank you very much for your help with this.\n\n> I updated the first line of the commit message to include the bug number and\n> the reviewer, as per convention:\n> \n>   Bug 1355656 - Implement test cases for two finger fling gestures. r=botond\n> \n> In the future, feel free to add these yourself :)\n\nI'll keep this in mind for next time, thanks.\n\n----\n\nWith regards to \"next time\", Bug 1451461 appears to be still available. If that's the case then I'm happy to jump onto it. I'll need to do a bit of investigation and formulate my thoughts about a good solution for that one.\n\nIn the mean time, if you have any outstanding bugs that you feel would be suitable then I'm all ears!", "author": "jlogandavison@gmail.com", "id": 13391781, "time": "2018-06-06T18:09:34Z"}, {"text": "(In reply to jlogandavison from comment #51)\n> With regards to \"next time\", Bug 1451461 appears to be still available. If\n> that's the case then I'm happy to jump onto it. I'll need to do a bit of\n> investigation and formulate my thoughts about a good solution for that one.\n\nGreat, please go ahead!\n\n> In the mean time, if you have any outstanding bugs that you feel would be\n> suitable then I'm all ears!\n\nBug 1451461 is the only mentored bug I have open at the moment, apart from bug 1282245 which is more of a larger, open-ended project (and for which the plan has gotten out of date due to newer developments, though it could be resurrected). New mentored bugs get filed from time to time, so if you check back after bug 1451461 is fixed, there may be more by that time.\n\nIf you'd like to cast your net a bit wider, this site has a list of all mentored bugs in the codebase:\n\nhttps://www.joshmatthews.net/bugsahoy/?cpp=1", "author": "botond@mozilla.com", "id": 13391868, "time": "2018-06-06T18:54:57Z"}], "id": 1355656, "priority": "P3", "cc": ["bugmail@mozilla.staktrace.com", "diorahman@rockybars.com", "olucafont6@yahoo.com", "yuj25@uni.coventry.ac.uk"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [], "qa_contact": "", "creation_time": "2017-04-12T00:12:28Z", "cf_status_firefox_esr52": "---", "component": "Panning and Zooming", "assigned_to_detail": {"email": "jlogandavison@gmail.com", "id": 603311, "name": "jlogandavison@gmail.com", "real_name": ""}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "mozilla62", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "botond@mozilla.com", "id": 474533, "name": "botond@mozilla.com", "real_name": "Botond Ballo [:botond]"}, "whiteboard": "[gfx-noted] [lang=c++]", "mentors": ["botond@mozilla.com"], "summary": "Write gtests for momentum scrolling after a two-fingered pan", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-06T18:54:57Z", "assigned_to": "jlogandavison@gmail.com", "is_open": false, "history": [{"changes": [{"removed": "--", "field_name": "priority", "added": "P3"}, {"removed": "", "field_name": "cc", "added": "bugmail@mozilla.staktrace.com"}], "who": "bugmail@mozilla.staktrace.com", "when": "2017-04-12T19:01:07Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "yuj25@uni.coventry.ac.uk"}], "who": "yuj25@uni.coventry.ac.uk", "when": "2017-12-08T21:46:01Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "yuj25@uni.coventry.ac.uk"}], "who": "botond@mozilla.com", "when": "2017-12-09T02:20:44Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(yuj25@uni.coventry.ac.uk)"}], "who": "botond@mozilla.com", "when": "2018-01-31T20:41:25Z"}, {"changes": [{"removed": "yuj25@uni.coventry.ac.uk", "field_name": "assigned_to", "added": "nobody@mozilla.org"}, {"removed": "needinfo?(yuj25@uni.coventry.ac.uk)", "field_name": "flagtypes.name", "added": ""}], "who": "botond@mozilla.com", "when": "2018-02-14T22:06:37Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "diorahman@rockybars.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(botond@mozilla.com)"}], "who": "diorahman@rockybars.com", "when": "2018-03-04T01:40:58Z"}, {"changes": [{"removed": "needinfo?(botond@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "botond@mozilla.com", "when": "2018-03-05T01:14:15Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(botond@mozilla.com)"}], "who": "diorahman@rockybars.com", "when": "2018-03-05T03:48:26Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1180799"}, {"removed": "needinfo?(botond@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "botond@mozilla.com", "when": "2018-03-05T18:20:12Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(diorahman@rockybars.com)"}], "who": "botond@mozilla.com", "when": "2018-03-21T22:21:53Z"}, {"changes": [{"removed": "needinfo?(diorahman@rockybars.com)", "field_name": "flagtypes.name", "added": ""}], "who": "diorahman@rockybars.com", "when": "2018-03-21T22:32:54Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8970038, "added": "review?(botond@mozilla.com)"}], "who": "jlogandavison@gmail.com", "when": "2018-04-22T22:07:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(botond@mozilla.com)", "attachment_id": 8970038, "added": "feedback+"}], "who": "botond@mozilla.com", "when": "2018-04-24T17:00:59Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "jlogandavison@gmail.com"}], "who": "botond@mozilla.com", "when": "2018-04-24T17:01:29Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8970038, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971826, "added": "review?(botond@mozilla.com)"}], "who": "jlogandavison@gmail.com", "when": "2018-04-28T21:21:40Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(botond@mozilla.com)", "attachment_id": 8971826, "added": ""}], "who": "botond@mozilla.com", "when": "2018-04-28T22:53:04Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8971826, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8973030, "added": "review?(botond@mozilla.com)"}], "who": "jlogandavison@gmail.com", "when": "2018-05-03T20:42:17Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(botond@mozilla.com)"}], "who": "jlogandavison@gmail.com", "when": "2018-05-03T20:51:37Z"}, {"changes": [{"removed": "needinfo?(botond@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "botond@mozilla.com", "when": "2018-05-04T16:55:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(botond@mozilla.com)", "attachment_id": 8973030, "added": "feedback+"}], "who": "botond@mozilla.com", "when": "2018-05-04T17:03:36Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8973030, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8982059, "added": "review?(botond@mozilla.com)"}], "who": "jlogandavison@gmail.com", "when": "2018-05-30T22:38:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(botond@mozilla.com)", "attachment_id": 8982059, "added": "feedback+"}], "who": "botond@mozilla.com", "when": "2018-06-01T20:36:06Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8982059, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8982828, "added": "review?(botond@mozilla.com)"}], "who": "jlogandavison@gmail.com", "when": "2018-06-02T15:35:40Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(botond@mozilla.com)", "attachment_id": 8982828, "added": "feedback+"}], "who": "botond@mozilla.com", "when": "2018-06-04T12:36:02Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8982828, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8983370, "added": "review?(botond@mozilla.com)"}], "who": "jlogandavison@gmail.com", "when": "2018-06-05T11:55:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(botond@mozilla.com)", "attachment_id": 8983370, "added": "review+"}], "who": "botond@mozilla.com", "when": "2018-06-05T15:01:15Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla62"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-06-06 17:10:49"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "btara@mozilla.com", "when": "2018-06-06T17:10:49Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(botond@mozilla.com)"}], "who": "jlogandavison@gmail.com", "when": "2018-06-06T18:09:34Z"}, {"changes": [{"removed": "needinfo?(botond@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "botond@mozilla.com", "when": "2018-06-06T18:54:57Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}