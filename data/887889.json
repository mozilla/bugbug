{"status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "mak77@bonardo.net", "mentors_detail": [], "depends_on": [886907], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_status_firefox61": "fixed", "cf_tracking_firefox_relnote": "---", "keywords": ["main-thread-io"], "cc_detail": [{"email": "adw@mozilla.com", "id": 334927, "name": "adw@mozilla.com", "real_name": "Drew Willcoxon :adw"}, {"email": "bug-husbandry-bot@mozilla.bugs", "id": 601546, "name": "bug-husbandry-bot@mozilla.bugs", "real_name": "Firefox Product Integrity Bug Husbandry Bot (contact :emceeaich)"}, {"email": "dothayer@mozilla.com", "id": 582499, "name": "dothayer@mozilla.com", "real_name": "Doug Thayer [:dthayer] (PTO on June 4)"}, {"email": "ehsan@mozilla.com", "id": 251051, "name": "ehsan@mozilla.com", "real_name": ":Ehsan Akhgari"}, {"email": "florian@queze.net", "id": 149052, "name": "florian@queze.net", "real_name": "Florian Qu\u00e8ze [:florian]"}, {"email": "gijskruitbosch+bugs@gmail.com", "id": 159069, "name": "gijskruitbosch+bugs@gmail.com", "real_name": ":Gijs (he/him)"}, {"email": "kit@mozilla.com", "id": 506322, "name": "kit@mozilla.com", "real_name": "Lina Cambridge (she/her) [:lina, :kitcambridge]"}, {"email": "mak77@bonardo.net", "id": 240353, "name": "mak77@bonardo.net", "real_name": "Marco Bonardo [::mak]"}, {"email": "masayuki@d-toybox.com", "id": 34283, "name": "masayuki@d-toybox.com", "real_name": "Masayuki Nakano [:masayuki] (JST, +0900)"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "mconley@mozilla.com", "id": 403756, "name": "mconley@mozilla.com", "real_name": "Mike Conley (:mconley) (:\u2699\ufe0f) (Catching up on needinfos / reviews)"}, {"email": "Tobias.Marty@gmx.de", "id": 572549, "name": "Tobias.Marty@gmx.de", "real_name": "TMart"}], "cf_last_resolved": "2018-04-27T10:07:21Z", "attachments": [{"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-23T10:49:16Z", "type_id": 748, "creation_date": "2018-03-21T18:32:57Z", "id": 1732820, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8958233}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-23T11:11:10Z", "type_id": 748, "creation_date": "2018-03-21T18:32:57Z", "id": 1732821, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8958234}, {"creator": "dothayer@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8958235}, {"creator": "dothayer@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-23T19:55:47Z", "type_id": 748, "creation_date": "2018-03-23T03:33:32Z", "id": 1733783, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8961629}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-26T17:46:26Z", "type_id": 748, "creation_date": "2018-03-26T17:10:33Z", "id": 1734896, "setter": "florian@queze.net"}], "content_type": "text/x-review-board-request", "id": 8962417}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-04T16:39:41Z", "type_id": 748, "creation_date": "2018-04-02T18:50:00Z", "id": 1738102, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8964376}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-04T16:11:21Z", "type_id": 748, "creation_date": "2018-04-02T18:50:00Z", "id": 1738103, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8964377}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-25T20:37:31Z", "type_id": 748, "creation_date": "2018-04-20T16:51:32Z", "id": 1747025, "setter": "ehsan@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8969710}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-23T15:41:50Z", "type_id": 748, "creation_date": "2018-04-20T16:51:32Z", "id": 1747026, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8969711}], "votes": 2, "classification": "Client Software", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 75, "comments": [{"text": "if possible we should move ContentPrefs to the async only connection, this bug is to track the needed work", "author": "mak77@bonardo.net", "id": 7581821, "time": "2013-06-27T17:32:04Z"}, {"text": "or use Sqlite.jsm", "author": "mak77@bonardo.net", "id": 10135529, "time": "2015-04-09T10:36:11Z"}, {"text": "Here is a newer profile of content pref initialization now that bug 886907 is fixed: https://perfht.ml/2v7AA7n", "author": "florian@queze.net", "id": 12578213, "time": "2017-08-18T11:33:16Z"}, {"text": "Marking this as P2 since it's sync IO and I think it should be doable in a reasonable time frame, looking at the code. Marco, is there any surprising difficulty here that I'm missing? I can't see what if anything depends on this being synchronous.", "author": "dothayer@mozilla.com", "id": 13061672, "time": "2018-02-22T17:10:52Z"}, {"text": "We removed the old ContentPrefs service that had a synchronous API, and replaced it with an async API, thus I don't expect surprising difficulties. But as bug 888784 teached us, it may not be trivial as it looks.\nThe added difficulty is that some of this code is not very modern (no promises, lots of callbacks). Doing some first cleanup passes to modernize the code may help.", "author": "mak77@bonardo.net", "id": 13062275, "time": "2018-02-22T20:10:10Z"}, {"text": "Resetting priority to what it was (team switching to whiteboard priority system.)", "author": "dothayer@mozilla.com", "id": 13065516, "time": "2018-02-23T22:46:48Z"}, {"text": "Created attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nSome notes:\n\n- We delay initializing the connection until we see a\n  sessionstore-windows-restored notification. This is to get the\n  browser_startup test passing, which failed because we were\n  loading Sqlite.jsm before handling user events. It seems to me\n  that this might be excessive? Interested in thoughts as to\n  whether we should keep that or not.\n- I kept the xpcom-shutdown observer around even though it's not\n  doing much and it could be satisfied by doing a little more work\n  in the Sqlite.shutdown blocker. I wasn't sure which to use since\n  it seems like the Sqlite.shutdown blocker is intended to be\n  used to cleanup connection-related things. Thoughts on this are\n  welcome.\n\nReview commit: https://reviewboard.mozilla.org/r/227160/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/227160/", "author": "dothayer@mozilla.com", "id": 13123448, "time": "2018-03-12T21:58:15Z"}, {"text": "Created attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nI converted the cps2 tests to use async/await, since it was easier\nfor me to debug the breakages introduced by my changes that way.\nThere are a few differences hidden in there, though - most notable\nis that I also modified the direct db access in the tests to use\nthe Sqlite.jsm wrapper. This was to avoid reaching into the\nconnections internals in order to get the underlying connection.\n\nReview commit: https://reviewboard.mozilla.org/r/227178/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/227178/", "author": "dothayer@mozilla.com", "id": 13123449, "time": "2018-03-12T21:58:15Z"}, {"text": "Created attachment 8958235\nBug 887889 - Fix temporary leak in Sqlite.jsm transactions\n\nI was getting shutdown leaks when I started wrapping statements\nin transactions. After a bit of debugging I found that we were\nholding onto things due to the setTimeout race. Just clearing it\nresolved the issue for me.\n\nReview commit: https://reviewboard.mozilla.org/r/227180/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/227180/", "author": "dothayer@mozilla.com", "id": 13123450, "time": "2018-03-12T21:58:15Z"}, {"text": "Hey Marco, sorry to add to your work, but let me know if there's anyone else who I can offload these review requests to if you're swamped!", "author": "dothayer@mozilla.com", "id": 13123456, "time": "2018-03-12T22:00:27Z"}, {"text": "Comment on attachment 8958235\nBug 887889 - Fix temporary leak in Sqlite.jsm transactions\n\nhttps://reviewboard.mozilla.org/r/227180/#review232988\n\nThis got bitrotted by bug 1442353.", "author": "florian@queze.net", "id": 13123557, "time": "2018-03-12T22:32:08Z"}, {"text": "Comment on attachment 8958235\nBug 887889 - Fix temporary leak in Sqlite.jsm transactions\n\nhttps://reviewboard.mozilla.org/r/227180/#review234112\n\n::: toolkit/modules/Sqlite.jsm:631\n(Diff revision 1)\n>  \n>            return result;\n>          } finally {\n>            this._hasInProgressTransaction = false;\n> +          // Ensure we don't hold onto anything for too long by keeping the timeout alive\n> +          clearTimeout(timeoutHandle);\n\nI'm not sure this is correct after bug 1442353, because now a timer can cover multiple transactions, and thus it should probably not be cleared when one transaction is done.\n\nWe could maybe do this clearTimeout when the connection is closing?", "author": "mak77@bonardo.net", "id": 13133184, "time": "2018-03-16T11:00:25Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nhttps://reviewboard.mozilla.org/r/227160/#review234130\n\nit's not trivial to review this with these many changes, and because the original code is not particularly clean. It's likely this may take a few rounds.\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:12\n(Diff revision 1)\n>  ChromeUtils.import(\"resource://gre/modules/ContentPrefUtils.jsm\");\n>  ChromeUtils.import(\"resource://gre/modules/ContentPrefStore.jsm\");\n> +ChromeUtils.defineModuleGetter(this, \"OS\",\n> +                               \"resource://gre/modules/osfile.jsm\");\n> +ChromeUtils.defineModuleGetter(this, \"FileUtils\",\n> +                               \"resource://gre/modules/FileUtils.jsm\");\n\nThis doesn't appear to be used?\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:109\n(Diff revision 1)\n> +    if (this._connPromise) {\n> +      return this._connPromise;\n> +    }\n> +\n> +    // Don't use sessionstore-windows-restored from xpcshell, since it\n> +    // won't fire.\n\nI'm not sure I get the whole picture around sessionstore-windows-restore, shouldn't the connection (and Sqlite.jsm) be initialized lazily when the first API in need of it is invoked?\nSince all the APIs are async, it should be possible to wait for the connection.\n\nImo, if this causes us to initialize Sqlite.jsm earlier, then we should either:\n1. figure out which consumer is doing that and whether can can avoid that on its side\n2. store somewhere that we can't use the service yet, and make the connection getter throw\n\nClearly 1 is the preferred path, since it doesn't make much sense to have a service that sometimes works, sometimes doesn't.\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:169\n(Diff revision 1)\n>              cbHandleResult(callback, new ContentPref(pbGroup, pbName, pbVal));\n>            }\n>          }\n>          cbHandleCompletion(callback, reason);\n>        },\n> -      onError: function onError(nsresult) {\n> +      onError: (nsresult) => {\n\nIf you rerwite these, please be consistent with the style of a single argument in this file, either it takes parenthesis or it doesn't.\n\nIn any case, shorthands (like \"onError(nsresult) {\") would even be shorter\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:799\n(Diff revision 1)\n>      let gotRow = false;\n> -    this._dbConnection.executeAsync(stmts, stmts.length, {\n> -      handleResult: function handleResult(results) {\n> +    let { onRow, onError } = callbacks;\n> +    await conn.executeTransaction(async () => {\n> +      for (let {sql, params} of stmts) {\n>          try {\n> -          let row = null;\n> +          await conn.execute(sql, params, row => {\n\ncould likely use executeCached if the sql doesn't contain a LIKE. Maybe the _stmt helper could add a .cachable property to each object and we could check that here?\n\nFwiw, most of this indirection is due to the old API being worst than Sqlite.jsm, if we should rewrite it today likely it would be quite different...\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:979\n(Diff revision 1)\n> +        done = true;\n> +      });\n> +      Services.tm.spinEventLoopUntil(() => done);\n> +      if (error) {\n> +        throw error;\n> +      }\n\nto avoid spinning, you could also send another notification to the observer service, and have the test wait for it after sending \"test:db\".\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:1078\n(Diff revision 1)\n> -          this._dbMigrate(dbConnection, version, this._dbVersion);\n> -        } catch (ex) {\n> -          Cu.reportError(\"error migrating DB: \" + ex + \"; backing up and recreating\");\n> -          dbConnection = this._dbBackUpAndRecreate(dbFile, dbConnection);\n> -        }\n> +      conn = await Sqlite.openConnection({ path });\n> +      Sqlite.shutdown.addBlocker(\n> +        \"Closing ContentPrefService2 connection.\",\n> +        () => conn.close());\n> +    } catch (e) {\n> +      Cu.reportError(e);\n\nyou should be able to check e.status == Cr.NS_ERROR_FILE_CORRUPTED; to check for corruption and replace the db. in the other cases we should probably just bailout and not try to replace the db.\nSee https://hg.mozilla.org/mozilla-central/rev/8f3552d61627", "author": "mak77@bonardo.net", "id": 13133325, "time": "2018-03-16T12:25:42Z"}, {"text": "Comment on attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nhttps://reviewboard.mozilla.org/r/227178/#review234144\n\nI love all of this, modern code!\n\n::: toolkit/components/contentprefs/tests/unit_cps2/head.js:18\n(Diff revision 1)\n> -function runAsyncTests(tests, dontResetBefore = false) {\n> -  do_test_pending();\n> -\n>    cps = Cc[\"@mozilla.org/content-pref/service;1\"].\n>          getService(Ci.nsIContentPrefService2);\n> +})();\n\nnot sure what's the point of creating an init() function and calling it immediately, rather than just invoking do_get_profile() and setting cps...\n\n::: toolkit/components/contentprefs/tests/unit_cps2/test_observers.js:13\n(Diff revision 1)\n> -  var allTests = [];\n> -  for (var i = 0; i < tests.length; i++) {\n> -    // Generate two wrappers of each test function that invoke the original test with an\n> -    // appropriate privacy context.\n> -    /* eslint-disable no-eval */\n> -    var pub = eval(\"var f = function* \" + tests[i].name + \"() { yield tests[\" + i + \"](privateLoadContext); }; f\");\n> +  await reset();\n> +});\n> +\n> +function raceWithTimeout(promise) {\n> +  return Promise.race([promise, new Promise(resolve => {\n> +    do_timeout(50, () => resolve(null));\n\nThis timeout is very short, I/O is unpredictable, especially in automation... I'm also not sure why we need this timeout when before it didn't exist.\nDid you add tests that some observers are not wrongly invoked, or is this a behavioral change?\nUsually when we use timeouts with I/O we don't use anything smaller than 1 second or 2.", "author": "mak77@bonardo.net", "id": 13133343, "time": "2018-03-16T12:44:42Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nhttps://reviewboard.mozilla.org/r/227160/#review234130\n\n> If you rerwite these, please be consistent with the style of a single argument in this file, either it takes parenthesis or it doesn't.\n> \n> In any case, shorthands (like \"onError(nsresult) {\") would even be shorter\n\nWoops on the parenthesis, but regarding the lambdas, I settled on that convention not for brevity but because a number of these callbacks reference `this`, which I stopped binding at the call site since that seemed like a slightly unexpected practice. Not all of them do but I just wanted to be consistent.", "author": "dothayer@mozilla.com", "id": 13136769, "time": "2018-03-18T22:01:17Z"}, {"text": "ok, my fault cause I didn't notice those bind()", "author": "mak77@bonardo.net", "id": 13136798, "time": "2018-03-18T22:33:01Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nhttps://reviewboard.mozilla.org/r/227160/#review234130\n\n> I'm not sure I get the whole picture around sessionstore-windows-restore, shouldn't the connection (and Sqlite.jsm) be initialized lazily when the first API in need of it is invoked?\n> Since all the APIs are async, it should be possible to wait for the connection.\n> \n> Imo, if this causes us to initialize Sqlite.jsm earlier, then we should either:\n> 1. figure out which consumer is doing that and whether can can avoid that on its side\n> 2. store somewhere that we can't use the service yet, and make the connection getter throw\n> \n> Clearly 1 is the preferred path, since it doesn't make much sense to have a service that sometimes works, sometimes doesn't.\n\nIt's browser-fullZoom.js, starting from here: https://searchfox.org/mozilla-central/rev/3abf6fa7e2a6d9a7bfb88796141b0f012e68c2db/browser/base/content/browser-fullZoom.js#214\n\nThe comment above that line doesn't seem to make all that much since anymore, since it's not avoiding a cps roundtrip. I couldn't sort out a better way to delay that than just delaying retrieving the connection inside CPS2. It seems like we do need to eventually read and apply the global value, and it seems like the logic to delay it would amount to roughly the same thing just moved inside browser-fullZoom.js, no?", "author": "dothayer@mozilla.com", "id": 13140208, "time": "2018-03-19T17:33:50Z"}, {"text": "(In reply to Doug Thayer [:dthayer] from comment #16)\n> It seems like we do need to eventually read and apply the global\n> value, and it seems like the logic to delay it would amount to roughly the\n> same thing just moved inside browser-fullZoom.js, no?\n\nProbably yes, in any case it seems better to delay the consumer code rather than adding a hack inside the service to artificially delay handling the first call to it.\nThe reason is that it's the consumer that must have a clear definition of when it is being initialized and when it needs to do work. ContentPrefs is just a service used to store and return data.\n\nDrew originally worked on the first CPS rewrite and may be of help for the call, and florian is working on startup perf and eventually may be of help to find a better spot for full zoom init.", "author": "mak77@bonardo.net", "id": 13140637, "time": "2018-03-19T19:44:20Z"}, {"text": "Looking deeper at it, I'm not sure why we need to get a zoom level at all for about:blank. Looking at the history but it's looking to me like this might be a bug.", "author": "dothayer@mozilla.com", "id": 13140683, "time": "2018-03-19T19:55:56Z"}, {"text": "(In reply to Doug Thayer [:dthayer] from comment #18)\n> Looking deeper at it, I'm not sure why we need to get a zoom level at all\n> for about:blank. Looking at the history but it's looking to me like this\n> might be a bug.\n\nYes. Content prefs should be on a principal basis, I think? We should just avoid storing or fetching preferences for null principals (as they'll never re-occur anyway). about:blank should have a null principal or, when opened by a website, the codebase principal for that website.", "author": "gijskruitbosch+bugs@gmail.com", "id": 13142517, "time": "2018-03-20T14:02:55Z"}, {"text": "Comment on attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nhttps://reviewboard.mozilla.org/r/227178/#review234144\n\n> This timeout is very short, I/O is unpredictable, especially in automation... I'm also not sure why we need this timeout when before it didn't exist.\n> Did you add tests that some observers are not wrongly invoked, or is this a behavioral change?\n> Usually when we use timeouts with I/O we don't use anything smaller than 1 second or 2.\n\nThe old code relied on the fact that continuations are called synchronously when calling next(). Async/await doesn't really have a way to make up for this. The consuming code looked like this:\n\n    // yield - continuation will be called in the onDone callback, but before observers are notified\n    yield cps.removeByDomain(\"bogus\", context, makeCallback());\n    // We've got our continuation - execution inside cps2 is waiting on us to call yield again before notifying observers\n    let args = yield on(\"Removed\", [\"foo\", null, \"bar\"]);\n    // The on(...) function will listen to observer notifications, and do roughly: executeSoon(() => next()).\n    // Since we can rely on observers being called synchronously after we yield, we know that args will\n    // now be in the final state, which in our case should be empty (we should have received no notifications)\n    observerArgsOK(args.foo, []);\n    observerArgsOK(args.null, []);\n    observerArgsOK(args.bar, []);\n\nThe key here is that we use the raceWithTimeout function only when we want to ensure that we _lose_ the race. To get the same behaviour without the synchronous interleaving of code enabled by yield, I just opted to have us call on(...) before performing an action, and then make sure that our promise of a notification times out. Since we don't want to wait for a whole second in every test for it to time out, I set a small timeout. If bugs were introduced - the should probably manifest by just racing with executeSoon, but I figured the 50ms was just a cheap way to get a little bit of extra confidence.\n\nDoes that make sense? I can see how it's a bit confusing, and I'm open to more readable ways of coding the expectation that we _don't_ want to get a notification, if you have any.", "author": "dothayer@mozilla.com", "id": 13146026, "time": "2018-03-21T16:52:17Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227160/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13146375, "time": "2018-03-21T18:32:57Z"}, {"text": "Comment on attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227178/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13146376, "time": "2018-03-21T18:32:57Z"}, {"text": "(Also - Marco, if you're really swamped right now and don't mind passing it off, Gijs offered to review these patches.)\n\nI forgot to mention - some change in between now and when I posted the initial patch seems to have made both browser_startup.js failure (regarding initializing Sqlite.jsm too early), and the shutdown leak with executeTransaction go away. So I've removed the Sqlite.jsm patch. I'm going to mull over why that went away, because it doesn't seem like it should have, but I just wanted to clarify why the changes for both of those issues were no longer in the patches.", "author": "dothayer@mozilla.com", "id": 13150024, "time": "2018-03-22T22:32:53Z"}, {"text": "I can review this tomorrow, no worries.", "author": "mak77@bonardo.net", "id": 13150171, "time": "2018-03-22T23:10:11Z"}, {"text": "Created attachment 8961629\nBug 887889 - Don't load browser zoom pref for blank page\n\nThis is (still - ignore the comment in the bug) breaking the\nbrowser_startup.js test, because it causes us to load Sqlite.jsm\nbefore handling user input. It should be fine to do this if we\nhave about:blank with a null principal, because that should just\nbe a blank page with nothing to actually zoom in or out of.\n\nReview commit: https://reviewboard.mozilla.org/r/230496/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/230496/", "author": "dothayer@mozilla.com", "id": 13150453, "time": "2018-03-23T03:33:32Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nhttps://reviewboard.mozilla.org/r/227160/#review236038\n\nnit: now that we don't have legacy add-ons, it may be worth filing a followup to cleanup the code a bit:\n1. modernize the methods definitions to avoid CPS2_ labels\n2. Rename to just ContentPrefService\n3. Rename unit_cps2 to just unit\n4. rename various instances around from cps2 to just cps\n\n::: commit-message-a6a32:6\n(Diff revision 2)\n> +Bug 887889 - Migrate ContentPrefService2 to Sqlite.jsm r?mak\n> +\n> +Some notes:\n> +\n> +- We delay initializing the connection until we see a\n> +  sessionstore-windows-restored notification. This is to get the\n\nthis is no more the case right? Then the commit message should be updated.\n\n::: commit-message-a6a32:16\n(Diff revision 2)\n> +- I kept the xpcom-shutdown observer around even though it's not\n> +  doing much and it could be satisfied by doing a little more work\n> +  in the Sqlite.shutdown blocker. I wasn't sure which to use since\n> +  it seems like the Sqlite.shutdown blocker is intended to be\n> +  used to cleanup connection-related things. Thoughts on this are\n> +  welcome.\n\nyes sqlite.shutdown is mostly about \"Sqlite.jsm is going away, please cleanup your connection-related stuff\".\n\nAnyway, xpcom-shutdown is surely wrong for any service storing things in the profile, those services should instead use the async shutdown clients like profileBeforeChange, profileChangeTeardown or quitApplicationGranted.\nSince in this case the shutdown is really trivial (just cleaning up references and observers) you can just change xpcom-shutdown for profile-before-change here, that is a trivial workaround to the problem.\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:749\n(Diff revision 2)\n>     * statement is cached, one is created and cached.\n>     *\n>     * @param sql  The SQL query string.\n>     * @return     The cached, possibly new, statement.\n>     */\n> -  _stmt: function CPS2__stmt(sql) {\n> +  _stmt: function CPS2__stmt(sql, cachable) {\n\nnit: since the most common case seems to be cachable: true, you could provide it as default value and simplify most of the callers.\nOne day Sqlite.jsm will just cache all the statements, and automatically forget the ones that have not been used in a while...\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:955\n(Diff revision 2)\n>    /**\n>     * Removes all state from the service.  Used by tests.\n>     *\n>     * @param callback  A function that will be called when done.\n>     */\n> -  _reset: function CPS2__reset(callback) {\n> +  _reset: async function CPS2__reset(callback) {\n\nnit: async _reset(callback) {\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:1023\n(Diff revision 2)\n> -  // specific migration methods) must be careful not to call any method\n> -  // of the service that assumes the database connection has already been\n> -  // initialized, since it won't be initialized until at the end of _dbInit.\n> -\n> -  _dbInit: function ContentPrefService__dbInit() {\n> -    var dbFile = Services.dirsvc.get(\"ProfD\", Ci.nsIFile);\n> +    if (this._debugLog) {\n> +      Services.console.logStringMessage(\"ContentPrefService2: \" + aMessage);\n> +    }\n> +  },\n> +\n> +  _getConnection: async function CPS2__getConnection(aAttemptNum = 0) {\n\nnit: async _getConnection(attemptNum = 0) {\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:1082\n(Diff revision 2)\n> -      dbConnection.executeSimpleSQL(\"PRAGMA synchronous = OFF\");\n> +      await conn.execute(\"PRAGMA synchronous = OFF\");\n>  \n> -    this._dbConnection = dbConnection;\n> +    return conn;\n>    },\n>  \n> -  _dbCreate: function ContentPrefService__dbCreate(aDBFile) {\n> +  _failover: async function CPS2__failover(aConn, aPath) {\n\nnit: ditto, if you pretty-much rewrite a function please modernize its definition/code style, in the end you are already changing most of the blame in the function, so no reason to retain the old name/label/xpcom conventions.", "author": "mak77@bonardo.net", "id": 13151050, "time": "2018-03-23T10:49:16Z"}, {"text": "Comment on attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nhttps://reviewboard.mozilla.org/r/227178/#review236056\n\n::: toolkit/components/contentprefs/tests/unit_cps2/test_observers.js:13\n(Diff revision 2)\n> -  var allTests = [];\n> -  for (var i = 0; i < tests.length; i++) {\n> -    // Generate two wrappers of each test function that invoke the original test with an\n> -    // appropriate privacy context.\n> -    /* eslint-disable no-eval */\n> -    var pub = eval(\"var f = function* \" + tests[i].name + \"() { yield tests[\" + i + \"](privateLoadContext); }; f\");\n> +  await reset();\n> +});\n> +\n> +function raceWithTimeout(promise) {\n> +  return Promise.race([promise, new Promise(resolve => {\n> +    do_timeout(50, () => resolve(null));\n\nok, I see your point, but still, 50ms means this test could have frequent false PASS, because there's no way I/O on our tinderboxes takes a so small time.\n\nIn lack of a better solution I propose to set this timing to a meaningful value, that in any case keeps the total run time of this test below 5 seconds.\nI'd not set this below 300 or 400ms to avoid false PASSes.", "author": "mak77@bonardo.net", "id": 13151099, "time": "2018-03-23T11:11:10Z"}, {"text": "So, the state of Sqlite.jsm in browser_startup.js is a bit unclear. Could you clarify it please?\nI think in the end it is not a regression, in the sense we were already starting up mozStorage and the connection before, but browser_startup can't detect that. On the other side it can detect Sqlite.jsm.\nConsidered that, we could ask Florian for a temporary pass-through, and have a bug filed to investigate how to make browser-fullzoom not do I/O at all on startup. Though, that should be fixed shortly after.", "author": "mak77@bonardo.net", "id": 13151120, "time": "2018-03-23T11:22:54Z"}, {"text": "(In reply to Doug Thayer [:dthayer] from comment #20)\n> If bugs were\n> introduced - the should probably manifest by just racing with executeSoon,\n> but I figured the 50ms was just a cheap way to get a little bit of extra\n> confidence.\n> \n> Does that make sense? I can see how it's a bit confusing, and I'm open to\n> more readable ways of coding the expectation that we _don't_ want to get a\n> notification, if you have any.\n\nIf executeSoon isn't giving enough confidence, you can use idle callbacks instead (Services.tm.idleDispatchToMainThread). That should be faster than 50ms on a fast machine, and more reliable than a 50ms timeout on a machine under heavy load.", "author": "florian@queze.net", "id": 13151299, "time": "2018-03-23T13:10:36Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #28)\n> I think in the end it is not a regression, in the sense we were already\n> starting up mozStorage and the connection before, but browser_startup can't\n> detect that. On the other side it can detect Sqlite.jsm.\n\nI stand corrected (thanks Florian) browser_Startup detects mozStorage, but it's not blacklisted and the test doesn't complain, on the other side Sqlite.jsm is blacklisted.", "author": "mak77@bonardo.net", "id": 13151328, "time": "2018-03-23T13:28:43Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #27)\n> In lack of a better solution I propose to set this timing to a meaningful\n> value, that in any case keeps the total run time of this test below 5\n> seconds.\n> I'd not set this below 300 or 400ms to avoid false PASSes.\n\nHmm, but we're not waiting on IO, and I'm not anticipating ever having to wait on IO (we've already awaited for the onDone notification when using this). Really, racing with Promise.resolve() should be enough, but I just wanted to add a buffer that could survive us calling notifications in an executeSoon for any reason. I do like Florian's suggestion of using Services.tm.idleDispatchToMainThread.\n\nIf you still want to add it, to anticipate potential cases where we _will_ be waiting on IO in between sending onDone and sending notifications, I'm okay with that - I just wanted to make sure we're on the same page about it.", "author": "dothayer@mozilla.com", "id": 13151999, "time": "2018-03-23T17:16:19Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #30)\n> I stand corrected (thanks Florian) browser_Startup detects mozStorage, but\n> it's not blacklisted and the test doesn't complain, on the other side\n> Sqlite.jsm is blacklisted.\n\nSo I'm a bit unclear - would you still prefer to execute on your suggestion in Comment #28?", "author": "dothayer@mozilla.com", "id": 13152009, "time": "2018-03-23T17:20:33Z"}, {"text": "(In reply to Doug Thayer [:dthayer] from comment #31)\n> Hmm, but we're not waiting on IO, and I'm not anticipating ever having to\n> wait on IO \n\nOk, that wasn't clear, I'm fine with Florian suggestions.\n\n(In reply to Doug Thayer [:dthayer] from comment #32)\n> So I'm a bit unclear - would you still prefer to execute on your suggestion\n> in Comment #28?\n\nI still don't know if, with the null principal trick, we still call into contentPrefs in browser_startup.js. If so did you figure out why?\nI asked Florian on IRC, he said that for a main-thread I/O win like this, we could even take a Sqlite.jsm hit in browser_startup (move it a bit earlier), provided we start investigating in a follow-up bug why we can't delay this zoom fetching.", "author": "mak77@bonardo.net", "id": 13152051, "time": "2018-03-23T17:39:02Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #33)\n> I still don't know if, with the null principal trick, we still call into\n> contentPrefs in browser_startup.js. If so did you figure out why?\n> I asked Florian on IRC, he said that for a main-thread I/O win like this, we\n> could even take a Sqlite.jsm hit in browser_startup (move it a bit earlier),\n> provided we start investigating in a follow-up bug why we can't delay this\n> zoom fetching.\n\nThe null principal trick makes browser_startup.js pass just fine (at least locally - but I don't have any reason to believe it would be different in automation.)", "author": "dothayer@mozilla.com", "id": 13152138, "time": "2018-03-23T17:57:26Z"}, {"text": "Ok, that's fine.", "author": "mak77@bonardo.net", "id": 13152468, "time": "2018-03-23T19:54:33Z"}, {"text": "Comment on attachment 8961629\nBug 887889 - Don't load browser zoom pref for blank page\n\nhttps://reviewboard.mozilla.org/r/230496/#review236230\n\n::: commit-message-ad8d2:4\n(Diff revision 1)\n> +Bug 887889 - Don't load browser zoom pref for blank page r?mak\n> +\n> +This is (still - ignore the comment in the bug) breaking the\n> +browser_startup.js test, because it causes us to load Sqlite.jsm\n\nthis comment needs a small update", "author": "mak77@bonardo.net", "id": 13152475, "time": "2018-03-23T19:55:47Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227160/diff/2-3/", "author": "dothayer@mozilla.com", "id": 13153679, "time": "2018-03-24T23:01:41Z"}, {"text": "Comment on attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227178/diff/2-3/", "author": "dothayer@mozilla.com", "id": 13153680, "time": "2018-03-24T23:01:41Z"}, {"text": "Comment on attachment 8961629\nBug 887889 - Don't load browser zoom pref for blank page\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/230496/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13153681, "time": "2018-03-24T23:01:41Z"}, {"text": "Turns out it does fix the browser_startup.js failure, but it has some incidental failures in other tests. I think it's probably best to do the work for this in a follow-up, so I'm just going to put up a patch relaxing browser_startup.js for now and file a follow-up.", "author": "dothayer@mozilla.com", "id": 13156284, "time": "2018-03-26T16:57:27Z"}, {"text": "Created attachment 8962417\nBug 887889 - Relax Sqlite.jsm restrictions in browser_startup.js\n\nWe've improved the startup IO situation in bug 887889 by not synchronously\ninitializing a connection to the contentprefs db. However, this means\nwe are loading Sqlite.jsm earlier than we were, which isn't ideal and\ncan be avoided. However, this isn't completely trivial so I'd like to\nmove this work to a follow-up.\n\nReview commit: https://reviewboard.mozilla.org/r/231270/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/231270/", "author": "dothayer@mozilla.com", "id": 13156335, "time": "2018-03-26T17:10:33Z"}, {"text": "Comment on attachment 8962417\nBug 887889 - Relax Sqlite.jsm restrictions in browser_startup.js\n\nhttps://reviewboard.mozilla.org/r/231270/#review236694", "author": "florian@queze.net", "id": 13156463, "time": "2018-03-26T17:46:26Z"}, {"text": "Running into shutdown leaks on try that are killing me. I think I've narrowed it down to two things: the timeout promise and the .jsm boundary. If I implement the executeTransaction method inside ContentPrefService2.js _and_ change the timeout mechanism, the failures go away. Unfortunately it's slow going because I can only reproduce the failures on try (though it is 100% reproducible).", "author": "dothayer@mozilla.com", "id": 13165491, "time": "2018-03-29T01:18:51Z"}, {"text": "jsm boundaries may matter, if you store an object or an array created in a window in your jsm. Usually to solve those we clone before storing them, for example https://searchfox.org/mozilla-central/source/toolkit/components/places/PlacesTransactions.jsm#741\n\nIt's strange that these leaks only appear for CPS2, when a lot of other components use Sqlite.jsm without showing any leak.", "author": "mak77@bonardo.net", "id": 13165966, "time": "2018-03-29T08:53:17Z"}, {"text": "Hey dthayer,\n\nI struggled with shutdown leaks in bug 888784 too (see bug 888784 comment 68).\n\nWhat ended up working for me was ensuring transactions ran in a separate function scope instead of using an arrow function which would enclose all of the variables within the scope of the caller of executeTransaction.\n\nSee bug 888784 comment 83.\n\nI've not looked at your patch, so I don't know if my experience in that bug is even applicable, but wanted to bring it up in case it's useful as a road for experimentation.", "author": "mconley@mozilla.com", "id": 13167872, "time": "2018-03-29T21:25:52Z"}, {"text": "(In reply to Mike Conley (:mconley) (:\u2699\ufe0f) (Totally backlogged on reviews and needinfos) from comment #45)\n> Hey dthayer,\n> \n> I struggled with shutdown leaks in bug 888784 too (see bug 888784 comment\n> 68).\n> \n> What ended up working for me was ensuring transactions ran in a separate\n> function scope instead of using an arrow function which would enclose all of\n> the variables within the scope of the caller of executeTransaction.\n> \n> See bug 888784 comment 83.\n> \n> I've not looked at your patch, so I don't know if my experience in that bug\n> is even applicable, but wanted to bring it up in case it's useful as a road\n> for experimentation.\n\nYeah - unfortunately I made the same transformation to mine that you made to yours and it didn't resolve it. The only thing that's resolved it is pulling the implementation of executeTransaction into ContentPrefService2.js :/", "author": "dothayer@mozilla.com", "id": 13167889, "time": "2018-03-29T21:32:22Z"}, {"text": "Created attachment 8964376\nBug 887889 - Limit scope of executeTransaction closure\n\nReview commit: https://reviewboard.mozilla.org/r/233084/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/233084/", "author": "dothayer@mozilla.com", "id": 13174509, "time": "2018-04-02T18:50:00Z"}, {"text": "Created attachment 8964377\nBug 887889 - Clean up ContentPrefServiceChild on xpcom-shutdown\n\nI'm not sure why this became necessary as a result of migrating to\nSqlite.jsm, but this is the only way I've found to eliminate\nleaks from the tab process on shutdown. These leaks occur when\nthe child process requests something from the ContentPrefService2\nbut shuts down before it gets its response.\n\nReview commit: https://reviewboard.mozilla.org/r/233086/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/233086/", "author": "dothayer@mozilla.com", "id": 13174510, "time": "2018-04-02T18:50:00Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227160/diff/3-4/", "author": "dothayer@mozilla.com", "id": 13174511, "time": "2018-04-02T18:50:00Z"}, {"text": "Comment on attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227178/diff/3-4/", "author": "dothayer@mozilla.com", "id": 13174512, "time": "2018-04-02T18:50:00Z"}, {"text": "Comment on attachment 8962417\nBug 887889 - Relax Sqlite.jsm restrictions in browser_startup.js\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231270/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13174513, "time": "2018-04-02T18:50:00Z"}, {"text": "Comment on attachment 8964377\nBug 887889 - Clean up ContentPrefServiceChild on xpcom-shutdown\n\nhttps://reviewboard.mozilla.org/r/233086/#review239318\n\n::: toolkit/components/contentprefs/ContentPrefServiceChild.jsm:65\n(Diff revision 1)\n>  \n>    init() {\n>      Services.cpmm.addMessageListener(\"ContentPrefs:HandleResult\", this);\n>      Services.cpmm.addMessageListener(\"ContentPrefs:HandleError\", this);\n>      Services.cpmm.addMessageListener(\"ContentPrefs:HandleCompletion\", this);\n> +    Services.obs.addObserver(this, \"xpcom-shutdown\");\n\ncan we do this earlier, like on profile-before-change, or is necessary to act so late?", "author": "mak77@bonardo.net", "id": 13180112, "time": "2018-04-04T16:11:21Z"}, {"text": "Comment on attachment 8964376\nBug 887889 - Limit scope of executeTransaction closure\n\nhttps://reviewboard.mozilla.org/r/233084/#review239328\n\nI wonder if the problem here was using the onRow handler inside a transaction. Usually only multiple writes should go inside transactions, that should be as short lived as possible. This _execStmts thing is just a bit overengineered.\nMaybe one day we'll fix this service API to use promises instead of the triple-callback API, and then it would be trivial to just remove _execStmts and use raw Sqlite.jsm executes all around. But it may be more complex to use from cpp :(\n\nMoreover, wrapping multiple SELECTs in a transaction is not a great thing to do, as well as wrapping a single write statement. Currently _get and getByName are doing the former... could we add an option to skip the transaction for those, or alternatively, check if there is only 1 stmt in the array or if all the stmts in the array begin with SELECT, and just skip the transaction in that case.\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:798\n(Diff revision 1)\n> -                onRow(row);\n> +          callbacks.onError(e);\n> -              } catch (e) {\n> +        } catch (e) {\n> -                Cu.reportError(e);\n> +          Cu.reportError(e);\n> -              }\n> +        }\n> +      } else {\n> +        throw e;\n\nThe old method didn't seem to throw at all... why is this one rethrowing if there's no onError callback? Is this a case we may hit in reality? Should it rather just console.assert?\n\n::: toolkit/components/contentprefs/ContentPrefService2.js:802\n(Diff revision 1)\n> +      } else {\n> +        throw e;\n> -            }\n> +      }\n> -          });\n> -        } catch (e) {\n> +    }\n> +\n> +    if (rows) {\n\nif (rows && callbacks.onRow) {", "author": "mak77@bonardo.net", "id": 13180221, "time": "2018-04-04T16:39:41Z"}, {"text": "Created attachment 8969710\nBug 887889 - Fix leak in RemoteSpellCheckingEngineChild\n\nThe work to migrate to Sqlite.jsm seems to have caused a timing problem\nin our tests where shutdown the content process while this IPC message\nis still unresolved. This causes us to destroy RemoteSpellCheckingEngineChild\nwithout it having processed its RecvNotiy..., leading to the promise being\nleaked. As far as I can tell this resolves all of our leak issues on try.\n\nReview commit: https://reviewboard.mozilla.org/r/238502/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/238502/", "author": "dothayer@mozilla.com", "id": 13221907, "time": "2018-04-20T16:51:32Z"}, {"text": "Created attachment 8969711\nBug 887889 - Fix intermittent failure in browser_bug419612.js\n\nReview commit: https://reviewboard.mozilla.org/r/238504/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/238504/", "author": "dothayer@mozilla.com", "id": 13221908, "time": "2018-04-20T16:51:32Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227160/diff/4-5/", "author": "dothayer@mozilla.com", "id": 13221909, "time": "2018-04-20T16:51:32Z"}, {"text": "Comment on attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227178/diff/4-5/", "author": "dothayer@mozilla.com", "id": 13221910, "time": "2018-04-20T16:51:32Z"}, {"text": "Comment on attachment 8962417\nBug 887889 - Relax Sqlite.jsm restrictions in browser_startup.js\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231270/diff/2-3/", "author": "dothayer@mozilla.com", "id": 13221911, "time": "2018-04-20T16:51:32Z"}, {"text": "Comment on attachment 8964376\nBug 887889 - Limit scope of executeTransaction closure\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/233084/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13221912, "time": "2018-04-20T16:51:32Z"}, {"text": "Comment on attachment 8964377\nBug 887889 - Clean up ContentPrefServiceChild on xpcom-shutdown\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/233086/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13221913, "time": "2018-04-20T16:51:32Z"}, {"text": "Comment on attachment 8969711\nBug 887889 - Fix intermittent failure in browser_bug419612.js\n\nhttps://reviewboard.mozilla.org/r/238504/#review244632\n\n::: browser/base/content/browser-fullZoom.js:264\n(Diff revision 1)\n>    // Setting & Pref Manipulation\n>  \n>    /**\n>     * Reduces the zoom level of the page in the current browser.\n>     */\n> -  reduce: function FullZoom_reduce() {\n> +  reduce: async function FullZoom_reduce() {\n\nnit: async reduce() {\n\n::: browser/base/content/browser-fullZoom.js:274\n(Diff revision 1)\n>    },\n>  \n>    /**\n>     * Enlarges the zoom level of the page in the current browser.\n>     */\n> -  enlarge: function FullZoom_enlarge() {\n> +  enlarge: async function FullZoom_enlarge() {\n\nnit: ditto", "author": "mak77@bonardo.net", "id": 13226811, "time": "2018-04-23T15:41:50Z"}, {"text": "I honestly don't know who can review the editor/spellcheck code, I tentatively forwarded to Masayuki-san that IIRC owns editor", "author": "mak77@bonardo.net", "id": 13226816, "time": "2018-04-23T15:43:10Z"}, {"text": "You could try ehsan if Masayuki-san doesn't feel comfortable reviewing it.", "author": "mconley@mozilla.com", "id": 13226861, "time": "2018-04-23T16:00:03Z"}, {"text": "Comment on attachment 8969710\nBug 887889 - Fix leak in RemoteSpellCheckingEngineChild\n\nhttps://reviewboard.mozilla.org/r/238502/#review245462\n\nThanks, your patch makes perfect sense and it does look that your change just got unlucky to run into this.  I have a suggestion for not managing the memory manually below, which should be easy to address, feel free to flag me again if you need another review pass but otherwise I don't need to look at it again.  :-)\n\nSorry about the delay!\n\n::: extensions/spellcheck/hunspell/glue/RemoteSpellCheckEngineChild.h:31\n(Diff revision 1)\n>    RefPtr<GenericPromise> SetCurrentDictionaryFromList(\n>                             const nsTArray<nsString>& aList);\n>  \n>  private:\n>    mozSpellChecker *mOwner;\n> +  nsTArray<MozPromiseHolder<GenericPromise>*> mResponsePromises;\n\nI'm not a huge fan of storing raw pointers in this array and managing the memory behind them manually.  How about instead making this an nsTArray<UniquePtr<MozPromiseHolder<GenericPromise>>>?\n\n::: extensions/spellcheck/hunspell/glue/RemoteSpellCheckEngineChild.cpp:25\n(Diff revision 1)\n> +\n> +  // ensure we don't leak any promise holders for which we haven't yet\n> +  // received responses\n> +  for (MozPromiseHolder<GenericPromise>* promiseHolder : mResponsePromises) {\n> +    promiseHolder->RejectIfExists(NS_ERROR_ABORT, __func__);\n> +    delete promiseHolder;\n\nthen this delete would go away\n\n::: extensions/spellcheck/hunspell/glue/RemoteSpellCheckEngineChild.cpp:34\n(Diff revision 1)\n>  RefPtr<GenericPromise>\n>  RemoteSpellcheckEngineChild::SetCurrentDictionaryFromList(\n>    const nsTArray<nsString>& aList)\n>  {\n>    MozPromiseHolder<GenericPromise>* promiseHolder =\n>      new MozPromiseHolder<GenericPromise>();\n\nand you would make a UniquePtr here\n\n::: extensions/spellcheck/hunspell/glue/RemoteSpellCheckEngineChild.cpp:38\n(Diff revision 1)\n>    MozPromiseHolder<GenericPromise>* promiseHolder =\n>      new MozPromiseHolder<GenericPromise>();\n>    if (!SendSetDictionaryFromList(\n>           aList,\n>           reinterpret_cast<intptr_t>(promiseHolder))) {\n>      delete promiseHolder;\n\nand this would go away\n\n::: extensions/spellcheck/hunspell/glue/RemoteSpellCheckEngineChild.cpp:41\n(Diff revision 1)\n>           aList,\n>           reinterpret_cast<intptr_t>(promiseHolder))) {\n>      delete promiseHolder;\n>      return GenericPromise::CreateAndReject(NS_ERROR_FAILURE, __func__);\n>    }\n> +  mResponsePromises.AppendElement(promiseHolder);\n\nand you'd move here\n\n::: extensions/spellcheck/hunspell/glue/RemoteSpellCheckEngineChild.cpp:60\n(Diff revision 1)\n>      promiseHolder->RejectIfExists(NS_ERROR_NOT_AVAILABLE, __func__);\n>    } else {\n>      promiseHolder->ResolveIfExists(true, __func__);\n>    }\n> +  mResponsePromises.RemoveElement(promiseHolder);\n>    delete promiseHolder;\n\nand then you'd probably need to rewrite this bit as a loop over the array with a call to RemoveElementAt().\n\nI think this would help make the code less error prone.", "author": "ehsan@mozilla.com", "id": 13233656, "time": "2018-04-25T20:37:31Z"}, {"text": "(In reply to Marco Bonardo [::mak] (Away 23 Apr - 1 May) from comment #52)\n> can we do this earlier, like on profile-before-change, or is necessary to\n> act so late?\n\nUnfortunately, and I still am not sure I understand why, if I move this to profile-before-change it still leaks :/", "author": "dothayer@mozilla.com", "id": 13236716, "time": "2018-04-26T21:06:16Z"}, {"text": "Comment on attachment 8958233\nBug 887889 - Migrate ContentPrefService2 to Sqlite.jsm\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227160/diff/5-6/", "author": "dothayer@mozilla.com", "id": 13236730, "time": "2018-04-26T21:12:55Z"}, {"text": "Comment on attachment 8958234\nBug 887889 - Asyncify cps2 tests\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/227178/diff/5-6/", "author": "dothayer@mozilla.com", "id": 13236731, "time": "2018-04-26T21:12:55Z"}, {"text": "Comment on attachment 8962417\nBug 887889 - Relax Sqlite.jsm restrictions in browser_startup.js\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231270/diff/3-4/", "author": "dothayer@mozilla.com", "id": 13236732, "time": "2018-04-26T21:12:55Z"}, {"text": "Comment on attachment 8964376\nBug 887889 - Limit scope of executeTransaction closure\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/233084/diff/2-3/", "author": "dothayer@mozilla.com", "id": 13236733, "time": "2018-04-26T21:12:55Z"}, {"text": "Comment on attachment 8964377\nBug 887889 - Clean up ContentPrefServiceChild on xpcom-shutdown\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/233086/diff/2-3/", "author": "dothayer@mozilla.com", "id": 13236734, "time": "2018-04-26T21:12:55Z"}, {"text": "Comment on attachment 8969710\nBug 887889 - Fix leak in RemoteSpellCheckingEngineChild\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238502/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13236735, "time": "2018-04-26T21:12:55Z"}, {"text": "Comment on attachment 8969711\nBug 887889 - Fix intermittent failure in browser_bug419612.js\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238504/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13236736, "time": "2018-04-26T21:12:55Z"}, {"text": "Pushed by dothayer@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/29598c587f7f\nMigrate ContentPrefService2 to Sqlite.jsm r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/744a7b9fe0ab\nAsyncify cps2 tests r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/e7f2bc2cb13c\nRelax Sqlite.jsm restrictions in browser_startup.js r=florian\nhttps://hg.mozilla.org/integration/autoland/rev/7e4a87170569\nLimit scope of executeTransaction closure r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/6480e870dd73\nClean up ContentPrefServiceChild on xpcom-shutdown r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/fad1b59c9f55\nFix leak in RemoteSpellCheckingEngineChild r=Ehsan\nhttps://hg.mozilla.org/integration/autoland/rev/20e6e6da280d\nFix intermittent failure in browser_bug419612.js r=mak", "author": "pulsebot@bots.tld", "id": 13237315, "time": "2018-04-27T02:20:04Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/29598c587f7f\nhttps://hg.mozilla.org/mozilla-central/rev/744a7b9fe0ab\nhttps://hg.mozilla.org/mozilla-central/rev/e7f2bc2cb13c\nhttps://hg.mozilla.org/mozilla-central/rev/7e4a87170569\nhttps://hg.mozilla.org/mozilla-central/rev/6480e870dd73\nhttps://hg.mozilla.org/mozilla-central/rev/fad1b59c9f55\nhttps://hg.mozilla.org/mozilla-central/rev/20e6e6da280d", "author": "csabou@mozilla.com", "id": 13237763, "time": "2018-04-27T10:07:21Z"}], "id": 887889, "priority": "--", "platform": "All", "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_platform_rel": "---", "product": "Firefox", "cf_fx_iteration": "---", "blocks": [885732, 1361095, 1448944], "qa_contact": "", "cf_tracking_firefox17": "---", "cf_tracking_firefox16": "---", "cf_tracking_firefox19": "---", "creation_time": "2013-06-27T17:32:04Z", "cf_status_firefox_esr52": "---", "component": "General", "assigned_to_detail": {"email": "dothayer@mozilla.com", "id": 582499, "name": "dothayer@mozilla.com", "real_name": "Doug Thayer [:dthayer] (PTO on June 4)"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "groups": [], "cf_status_firefox60": "---", "target_milestone": "Firefox 61", "cf_qa_whiteboard": "", "severity": "normal", "cf_rank": null, "cf_fx_points": "---", "cf_tracking_firefox18": "---", "url": "", "creator_detail": {"email": "mak77@bonardo.net", "id": 240353, "name": "mak77@bonardo.net", "real_name": "Marco Bonardo [::mak]"}, "whiteboard": "[fxperf:p1]", "mentors": [], "summary": "Use Sqlite.jsm in ContentPrefs", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-04-27T10:07:21Z", "assigned_to": "dothayer@mozilla.com", "is_open": false, "resolution": "FIXED", "op_sys": "All", "cc": ["adw@mozilla.com", "bug-husbandry-bot@mozilla.bugs", "dothayer@mozilla.com", "ehsan@mozilla.com", "florian@queze.net", "gijskruitbosch+bugs@gmail.com", "kit@mozilla.com", "mak77@bonardo.net", "masayuki@d-toybox.com", "mcastelluccio@mozilla.com", "mconley@mozilla.com", "Tobias.Marty@gmx.de"], "history": [{"changes": [{"removed": "Use mozIStorageAsyncConnection in ContentPrefs", "field_name": "summary", "added": "Use Sqlite.jsm in ContentPrefs"}], "who": "mak77@bonardo.net", "when": "2016-11-05T15:10:31Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "886907"}], "who": "mak77@bonardo.net", "when": "2016-11-05T15:16:08Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1361095"}], "who": "mak77@bonardo.net", "when": "2017-05-05T07:54:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "florian@queze.net"}], "who": "florian@queze.net", "when": "2017-05-05T11:18:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ehsan@mozilla.com"}], "who": "ehsan@mozilla.com", "when": "2017-05-10T01:42:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kit@mozilla.com"}], "who": "kit@mozilla.com", "when": "2017-10-18T01:13:30Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "main-thread-io"}], "who": "mak77@bonardo.net", "when": "2018-01-23T09:16:46Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bug-husbandry-bot@mozilla.bugs"}, {"removed": "", "field_name": "whiteboard", "added": "[fxperf]"}], "who": "bug-husbandry-bot@mozilla.bugs", "when": "2018-02-10T00:21:47Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P2"}, {"removed": "", "field_name": "cc", "added": "dothayer@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mak77@bonardo.net)"}], "who": "dothayer@mozilla.com", "when": "2018-02-22T17:10:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "adw@mozilla.com"}, {"removed": "needinfo?(mak77@bonardo.net)", "field_name": "flagtypes.name", "added": ""}], "who": "mak77@bonardo.net", "when": "2018-02-22T20:10:10Z"}, {"changes": [{"removed": "P2", "field_name": "priority", "added": "--"}, {"removed": "[fxperf]", "field_name": "whiteboard", "added": "[fxperf:p2]"}], "who": "dothayer@mozilla.com", "when": "2018-02-23T22:46:48Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "dothayer@mozilla.com"}], "who": "dothayer@mozilla.com", "when": "2018-03-05T17:38:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gijskruitbosch+bugs@gmail.com"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2018-03-06T21:40:49Z"}, {"changes": [{"removed": "[fxperf:p2]", "field_name": "whiteboard", "added": "[fxperf:p1]"}], "who": "dothayer@mozilla.com", "when": "2018-03-07T01:01:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8958233, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8958234, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8958235, "added": "review?(mak77@bonardo.net)"}], "who": "dothayer@mozilla.com", "when": "2018-03-12T21:58:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8958235, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-03-16T11:00:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8958233, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-03-16T12:25:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8958234, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-03-16T12:44:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8958233, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8958234, "added": "review?(mak77@bonardo.net)"}], "who": "dothayer@mozilla.com", "when": "2018-03-21T18:32:57Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8958235, "added": "1"}], "who": "dothayer@mozilla.com", "when": "2018-03-21T18:33:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8961629, "added": "review?(mak77@bonardo.net)"}], "who": "dothayer@mozilla.com", "when": "2018-03-23T03:33:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8958233, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-03-23T10:49:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8958234, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-03-23T11:11:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8961629, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-03-23T19:55:47Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1448944"}], "who": "dothayer@mozilla.com", "when": "2018-03-26T17:04:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962417, "added": "review?(florian@queze.net)"}], "who": "dothayer@mozilla.com", "when": "2018-03-26T17:10:33Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8961629, "added": "1"}], "who": "dothayer@mozilla.com", "when": "2018-03-26T17:10:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(florian@queze.net)", "attachment_id": 8962417, "added": "review+"}], "who": "florian@queze.net", "when": "2018-03-26T17:46:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mconley@mozilla.com"}], "who": "mconley@mozilla.com", "when": "2018-03-29T21:25:52Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8964376, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8964377, "added": "review?(mak77@bonardo.net)"}], "who": "dothayer@mozilla.com", "when": "2018-04-02T18:50:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8964377, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-04-04T16:11:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8964376, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-04-04T16:39:41Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2018-04-10T15:49:44Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Tobias.Marty@gmx.de"}], "who": "Tobias.Marty@gmx.de", "when": "2018-04-19T00:27:29Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969710, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969711, "added": "review?(mak77@bonardo.net)"}], "who": "dothayer@mozilla.com", "when": "2018-04-20T16:51:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8969710, "added": "review?(masayuki@d-toybox.com)"}, {"removed": "", "field_name": "cc", "added": "masayuki@d-toybox.com"}], "who": "mak77@bonardo.net", "when": "2018-04-23T15:36:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8969711, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-04-23T15:41:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(masayuki@d-toybox.com)", "attachment_id": 8969710, "added": "review?(ehsan@mozilla.com)"}], "who": "dothayer@mozilla.com", "when": "2018-04-23T20:11:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ehsan@mozilla.com)", "attachment_id": 8969710, "added": "review+"}], "who": "ehsan@mozilla.com", "when": "2018-04-25T20:37:31Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "Firefox 61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-04-27 10:07:21"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "csabou@mozilla.com", "when": "2018-04-27T10:07:21Z"}]}