{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "stoklund@2pi.dk", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-17T17:07:51Z", "type_id": 4, "creation_date": "2016-02-16T19:12:32Z", "id": 1343285, "setter": "nicolas.b.pierron@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8719891}, {"creator": "stoklund@2pi.dk", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-17T17:09:15Z", "type_id": 4, "creation_date": "2016-02-16T19:12:34Z", "id": 1343286, "setter": "nicolas.b.pierron@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8719892}], "classification": "Components", "creator": "choller@mozilla.com", "cc": ["bbouvier@mozilla.com", "choller@mozilla.com", "fuzzing@mozilla.com", "jruderman@gmail.com", "nicolas.b.pierron@mozilla.com", "nth10sd@gmail.com", "stoklund@2pi.dk"], "depends_on": [], "creation_time": "2016-02-16T01:03:48Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "x86", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": ["assertion", "regression", "testcase"], "summary": "Assertion failure: box->initialHeap() == initialHeap(), at js/src/jit/MIR.h:3460", "id": 1248503, "assigned_to_detail": {"email": "stoklund@2pi.dk", "id": 549175, "name": "stoklund@2pi.dk", "real_name": "Jakob Stoklund Olesen [:jolesen]"}, "severity": "critical", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "stoklund@2pi.dk", "comment_count": 18, "comments": [{"text": "The following testcase crashes on mozilla-central revision e355cacefc88 (build with --enable-optimize --enable-posix-nspr-emulation --enable-valgrind --enable-gczeal --target=i686-pc-linux-gnu --disable-tests --enable-debug, run with --fuzzing-safe --thread-count=2 --ion-offthread-compile=off --baseline-eager):\n\nfunction assertEqVec(v, w) {\n  [0].forEach(i => v, w);\n  function assertEqX4(...opts) {}\n}\ngczeal(1);\nfunction f() {\n  SIMD.Float32x4();\n  var i1 = SIMD.Int32x4();\n  for (j = 0; j < 100000; ++j, eval.eval)\n    assertEqVec(SIMD.Int32x4.check(i1), i1);\n}\nf();\n\n\n\nBacktrace:\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x084831d4 in js::jit::MSimdBox::congruentTo (this=0xf7ab83d0, ins=0xf7aa62d0) at js/src/jit/MIR.h:3460\n#0  0x084831d4 in js::jit::MSimdBox::congruentTo (this=0xf7ab83d0, ins=0xf7aa62d0) at js/src/jit/MIR.h:3460\n#1  0x0845eaf4 in js::jit::ValueNumberer::VisibleValues::ValueHasher::match (k=0xf7ab83d0, l=0xf7aa62d0) at js/src/jit/ValueNumbering.cpp:58\n#2  0x08490cb2 in match (l=<optimized out>, k=<optimized out>) at js/src/jit/ValueNumbering.cpp:55\n#3  match (l=@0xffffb0e0: 0xf7aa62d0, e=...) at js/src/debug32/dist/include/js/HashTable.h:1296\n#4  js::detail::HashTable<js::jit::MDefinition* const, js::HashSet<js::jit::MDefinition*, js::jit::ValueNumberer::VisibleValues::ValueHasher, js::jit::JitAllocPolicy>::SetOps, js::jit::JitAllocPolicy>::lookup (this=0xffffb3e8, l=@0xffffb0e0: 0xf7aa62d0, keyHash=2211676086, collisionBit=1) at js/src/debug32/dist/include/js/HashTable.h:1323\n#5  0x08476f37 in lookupForAdd (l=@0xffffb0e0: 0xf7aa62d0, this=0xffffb3e8) at js/src/debug32/dist/include/js/HashTable.h:1652\n#6  lookupForAdd (l=@0xffffb0e0: 0xf7aa62d0, this=0xffffb3e8) at js/src/debug32/dist/include/js/HashTable.h:384\n#7  findLeaderForAdd (def=0xf7aa62d0, this=0xffffb3e8) at js/src/jit/ValueNumbering.cpp:97\n#8  js::jit::ValueNumberer::leader (this=this@entry=0xffffb3e0, def=def@entry=0xf7aa62d0) at js/src/jit/ValueNumbering.cpp:636\n#9  0x084789e8 in js::jit::ValueNumberer::visitDefinition (this=0xffffb3e0, def=0xf7aa62d0) at js/src/jit/ValueNumbering.cpp:804\n#10 0x0847915d in js::jit::ValueNumberer::visitBlock (this=this@entry=0xffffb3e0, block=block@entry=0xf7aa5ad0, dominatorRoot=dominatorRoot@entry=0xf7aa4c58) at js/src/jit/ValueNumbering.cpp:966\n#11 0x08479493 in js::jit::ValueNumberer::visitDominatorTree (this=this@entry=0xffffb3e0, dominatorRoot=dominatorRoot@entry=0xf7aa4c58) at js/src/jit/ValueNumbering.cpp:1011\n#12 0x084796d7 in js::jit::ValueNumberer::visitGraph (this=this@entry=0xffffb3e0) at js/src/jit/ValueNumbering.cpp:1049\n#13 0x08479882 in js::jit::ValueNumberer::run (this=this@entry=0xffffb3e0, updateAliasAnalysis=updateAliasAnalysis@entry=js::jit::ValueNumberer::UpdateAliasAnalysis) at js/src/jit/ValueNumbering.cpp:1167\n#14 0x082f5227 in js::jit::OptimizeMIR (mir=mir@entry=0xf7aa3158) at js/src/jit/Ion.cpp:1681\n#15 0x082f8efa in js::jit::CompileBackEnd (mir=mir@entry=0xf7aa3158) at js/src/jit/Ion.cpp:1993\n[...]\n#23 0xf7fc8c5c in ?? ()\neax\t0x0\t0\nebx\t0x986e42c\t159835180\necx\t0xf7e3b88c\t-136071028\nedx\t0x0\t0\nesi\t0xf7aa62d0\t-139828528\nedi\t0xf7ab83d0\t-139754544\nebp\t0xffffaff8\t4294946808\nesp\t0xffffafd0\t4294946768\neip\t0x84831d4 <js::jit::MSimdBox::congruentTo(js::jit::MDefinition const*) const+116>\n=> 0x84831d4 <js::jit::MSimdBox::congruentTo(js::jit::MDefinition const*) const+116>:\tmovl   $0xd84,0x0\n   0x84831de <js::jit::MSimdBox::congruentTo(js::jit::MDefinition const*) const+126>:\tcall   0x8100d80 <abort()>", "author": "choller@mozilla.com", "id": 11167076, "time": "2016-02-16T01:03:48Z"}, {"text": "JSBugMon: Bisection requested, result:\nautoBisect shows this is probably related to the following changeset:\n\nThe first bad revision is:\nchangeset:   https://hg.mozilla.org/mozilla-central/rev/dbf37b860853\nuser:        Jakob Stoklund Olesen\ndate:        Tue Feb 09 08:46:00 2016 -0800\nsummary:     Bug 1244254 - Add IonBuilder::unboxSimd(). r=nbp\n\nThis iteration took 395.194 seconds to run.", "author": "fuzzing@mozilla.com", "id": 11167162, "time": "2016-02-16T03:02:45Z"}, {"text": "Jakob, is bug 1244254 a likely regressor?", "author": "nth10sd@gmail.com", "id": 11167315, "time": "2016-02-16T06:09:23Z"}, {"text": "How is that even possible to have the same template object with different initial heap?", "author": "nicolas.b.pierron@mozilla.com", "id": 11167632, "time": "2016-02-16T10:39:27Z"}, {"text": "Gary: Yes, that is likely the regressor since it added the assertion.\n\nI'll take a look.\n\nNBP: I suspect we're not getting the initial heap correctly in some place.", "author": "stoklund@2pi.dk", "id": 11168311, "time": "2016-02-16T15:54:52Z"}, {"text": "I can reproduce this:\n\n*this:\n  templateObject_ = (ptr_ = 0x000000010626a320)\n  simdType_ = Int32x4\n  initialHeap_ = DefaultHeap\n\n*box:\n  templateObject_ = (ptr_ = 0x000000010626a320)\n  simdType_ = Int32x4\n  initialHeap_ = TenuredHeap\n\nThe templateObject pointers are identical like they should be.\n\nIt looks like EagerSimdUnbox has gc::DefaultHeap hardwired when creating MSimdBox instructions.\n\nI think we should simply attach a templateObject and initialHeap to MSimdUnbox. That would give EagerSimdUnbox.cpp the information it needs, and we can avoid calling jitCompartment->maybeGetSimdTemplateObjectFor() too.", "author": "stoklund@2pi.dk", "id": 11168562, "time": "2016-02-16T16:52:25Z"}, {"text": "OK, just to summarize my findings here.\n\nEach SIMD type has its own ObjectGroup, and each ObjectGroup should provide a consistent initialHeap() answer for each compilation, but the initial heap for a given ObjectGroup may change between compilations.\n\nThis means that it should be possible in theory to require that two MSimdBox instructions with the same simdType() would also have the same initialHeap() (and templateObject() since they are singletons).\n\nWe don't always have an appropriate template object available when creating an MSimdUnbox instruction. For example, SIMD.*.extractLane() returns a scalar, so there is no template object attached, and we need to unbox the SIMD argument.\n\nIt is not clear to me if it is possible to create a template object from IonBuilder::inlineSimd(). Do we have access to the right context? If we can call JitCompartment::getSimdTemplateObjectFor() from IonBuilder::inlineSimd(), why even bother attaching SIMD template objects at all in BaselineIC.cpp?\n\nCurrently, EagerSimdUnbox creates MSimdBox instructions with gc::DefaultHeap in corner cases, which seems to be harmless. The simplest fix here is to change the assertion to allow for this.", "author": "stoklund@2pi.dk", "id": 11169163, "time": "2016-02-16T19:02:47Z"}, {"text": "Created attachment 8719891\nMozReview Request: Bug 1248503 - Improve log output for MSimdBox and MSimdUnbox. r=nbp\n\nAdd a function SimdTypeToString used for logging purposes only.\n\nInclude the exact SimdType and initial heap when logging MSimdBox and\nMSimdUnbox instructions.\n\nReview commit: https://reviewboard.mozilla.org/r/35169/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/35169/", "author": "stoklund@2pi.dk", "id": 11169203, "time": "2016-02-16T19:12:32Z"}, {"text": "Created attachment 8719892\nMozReview Request: Bug 1248503 - Fix initial heap assertion. r=nbp\n\nTwo MSimdBox instructions with the same SimdType must have identical template\nobjects, but they do not need to have identical initial heaps. One could\nrepresent a pre-tenured SIMD object allocation.\n\nReview commit: https://reviewboard.mozilla.org/r/35171/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/35171/", "author": "stoklund@2pi.dk", "id": 11169204, "time": "2016-02-16T19:12:34Z"}, {"text": "Comment on attachment 8719891\nMozReview Request: Bug 1248503 - Improve log output for MSimdBox and MSimdUnbox. r=nbp\n\nhttps://reviewboard.mozilla.org/r/35169/#review31913\n\n::: js/src/builtin/SIMD.cpp:104\n(Diff revision 1)\n> +#undef RETSTR\n\nnit: Append an underscore after the name of temporary macros.\n\n::: js/src/builtin/SIMD.cpp:105\n(Diff revision 1)\n> +      default: return \"<bad SimdType>\";\n\nIsn't the FOR_EACH_SIMD macro exhaustive?", "author": "nicolas.b.pierron@mozilla.com", "id": 11172598, "time": "2016-02-17T17:07:52Z"}, {"text": "Comment on attachment 8719892\nMozReview Request: Bug 1248503 - Fix initial heap assertion. r=nbp\n\nhttps://reviewboard.mozilla.org/r/35171/#review31939", "author": "nicolas.b.pierron@mozilla.com", "id": 11172603, "time": "2016-02-17T17:09:15Z"}, {"text": "(In reply to Nicolas B. Pierron [:nbp] from comment #9)\n> Comment on attachment 8719891\n> MozReview Request: Bug 1248503 - Improve log output for MSimdBox and\n> MSimdUnbox. r?nbp\n> \n> https://reviewboard.mozilla.org/r/35169/#review31913\n> \n> ::: js/src/builtin/SIMD.cpp:104\n> (Diff revision 1)\n> > +#undef RETSTR\n> \n> nit: Append an underscore after the name of temporary macros.\n\nSure.\n \n> ::: js/src/builtin/SIMD.cpp:105\n> (Diff revision 1)\n> > +      default: return \"<bad SimdType>\";\n> \n> Isn't the FOR_EACH_SIMD macro exhaustive?\n\nNo, there is a SimdType::Count enumerator which is not a type.", "author": "stoklund@2pi.dk", "id": 11172776, "time": "2016-02-17T17:54:54Z"}, {"text": "Comment on attachment 8719891\nMozReview Request: Bug 1248503 - Improve log output for MSimdBox and MSimdUnbox. r=nbp\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/35169/diff/1-2/", "author": "stoklund@2pi.dk", "id": 11172875, "time": "2016-02-17T18:17:11Z"}, {"text": "Comment on attachment 8719892\nMozReview Request: Bug 1248503 - Fix initial heap assertion. r=nbp\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/35171/diff/1-2/", "author": "stoklund@2pi.dk", "id": 11172876, "time": "2016-02-17T18:17:13Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/4e2494d7a161\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/4d724d047005", "author": "pulsebot@bots.tld", "id": 11172893, "time": "2016-02-17T18:21:03Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/4e2494d7a161\nhttps://hg.mozilla.org/mozilla-central/rev/4d724d047005", "author": "cbook@mozilla.com", "id": 11175218, "time": "2016-02-18T11:26:28Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/e3cb485761b8bf33d3493e301b065d06996cd486\nBug 1248503 - Disable test when SIMD is not available. r=me", "author": "stoklund@2pi.dk", "id": 11176213, "time": "2016-02-18T17:12:56Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/e3cb485761b8", "author": "cbook@mozilla.com", "id": 11178868, "time": "2016-02-19T11:09:14Z"}], "cf_last_resolved": "2016-02-18T11:26:28Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2016-02-19T11:09:14Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [676763, 1244254], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript Engine", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla47", "cf_status_firefox47": "fixed", "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "choller@mozilla.com", "id": 395101, "name": "choller@mozilla.com", "real_name": "Christian Holler (:decoder)"}, "whiteboard": "[jsbugmon:update]", "mentors": [], "cc_detail": [{"email": "bbouvier@mozilla.com", "id": 468907, "name": "bbouvier@mozilla.com", "real_name": "Benjamin Bouvier [:bbouvier]"}, {"email": "choller@mozilla.com", "id": 395101, "name": "choller@mozilla.com", "real_name": "Christian Holler (:decoder)"}, {"email": "fuzzing@mozilla.com", "id": 469204, "name": "fuzzing@mozilla.com", "real_name": "Fuzzing Team"}, {"email": "jruderman@gmail.com", "id": 11608, "name": "jruderman@gmail.com", "real_name": "Jesse Ruderman"}, {"email": "nicolas.b.pierron@mozilla.com", "id": 422187, "name": "nicolas.b.pierron@mozilla.com", "real_name": "Nicolas B. Pierron [:nbp] {backlog: ~36}"}, {"email": "nth10sd@gmail.com", "id": 132034, "name": "nth10sd@gmail.com", "real_name": "Gary Kwong [:gkw] [:nth10sd]"}, {"email": "stoklund@2pi.dk", "id": 549175, "name": "stoklund@2pi.dk", "real_name": "Jakob Stoklund Olesen [:jolesen]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "cf_qa_whiteboard": "", "history": [{"changes": [{"removed": "[jsbugmon:update,bisect]", "field_name": "whiteboard", "added": "[jsbugmon:update]"}], "who": "fuzzing@mozilla.com", "when": "2016-02-16T03:02:44Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jolesen@mozilla.com, nicolas.b.pierron@mozilla.com"}, {"removed": "", "field_name": "blocks", "added": "1244254"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jolesen@mozilla.com)"}], "who": "nth10sd@gmail.com", "when": "2016-02-16T06:09:23Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bbouvier@mozilla.com"}], "who": "bbouvier@mozilla.com", "when": "2016-02-16T09:42:20Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "jolesen@mozilla.com"}, {"removed": "needinfo?(jolesen@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "stoklund@2pi.dk", "when": "2016-02-16T15:54:52Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8719891, "added": "review?(nicolas.b.pierron@mozilla.com)"}], "who": "stoklund@2pi.dk", "when": "2016-02-16T19:12:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8719892, "added": "review?(nicolas.b.pierron@mozilla.com)"}], "who": "stoklund@2pi.dk", "when": "2016-02-16T19:12:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nicolas.b.pierron@mozilla.com)", "attachment_id": 8719891, "added": "review+"}], "who": "nicolas.b.pierron@mozilla.com", "when": "2016-02-17T17:07:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nicolas.b.pierron@mozilla.com)", "attachment_id": 8719892, "added": "review+"}], "who": "nicolas.b.pierron@mozilla.com", "when": "2016-02-17T17:09:15Z"}, {"changes": [{"field_name": "attachments.description", "removed": "MozReview Request: Bug 1248503 - Improve log output for MSimdBox and MSimdUnbox. r?nbp", "attachment_id": 8719891, "added": "MozReview Request: Bug 1248503 - Improve log output for MSimdBox and MSimdUnbox. r=nbp"}], "who": "stoklund@2pi.dk", "when": "2016-02-17T18:17:10Z"}, {"changes": [{"field_name": "attachments.description", "removed": "MozReview Request: Bug 1248503 - Fix initial heap assertion. r?nbp", "attachment_id": 8719892, "added": "MozReview Request: Bug 1248503 - Fix initial heap assertion. r=nbp"}], "who": "stoklund@2pi.dk", "when": "2016-02-17T18:17:13Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla47"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-02-18 03:26:28"}, {"removed": "affected", "field_name": "cf_status_firefox47", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2016-02-18T11:26:28Z"}], "resolution": "FIXED", "op_sys": "Linux", "cf_fx_points": "---", "cf_blocking_fennec": "---"}