{"cf_tracking_thunderbird_esr52": "---", "cf_tracking_firefox60": "---", "attachments": [{"creator": "mstriemer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-04T03:50:24Z", "type_id": 4, "creation_date": "2018-02-12T21:15:40Z", "id": 1715718, "setter": "aswan@mozilla.com"}, {"status": "+", "name": "review", "modification_date": "2018-02-14T16:39:49Z", "type_id": 4, "creation_date": "2018-02-12T21:15:40Z", "id": 1715719, "setter": "gijskruitbosch+bugs@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8943416}, {"creator": "mstriemer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-04T04:08:46Z", "type_id": 4, "creation_date": "2018-02-12T21:15:40Z", "id": 1715720, "setter": "aswan@mozilla.com"}, {"status": "+", "name": "review", "modification_date": "2018-02-17T11:02:02Z", "type_id": 4, "creation_date": "2018-02-16T21:39:34Z", "id": 1718014, "setter": "gijskruitbosch+bugs@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8943417}, {"creator": "mstriemer@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "image/gif", "id": 8943423}, {"creator": "mstriemer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/gif", "id": 8950378}, {"creator": "vcarciu@softvision.ro", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/gif", "id": 8971283}, {"creator": "vcarciu@softvision.ro", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/gif", "id": 8971285}, {"creator": "vcarciu@softvision.ro", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/gif", "id": 8971287}], "cf_tracking_firefox62": "---", "creator": "mconca@mozilla.com", "mentors_detail": [], "depends_on": [1369482, 1429590], "cf_status_firefox_esr60": "---", "cf_user_story": "", "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "amckay@mozilla.com"}, {"removed": "", "field_name": "blocks", "added": "1342584"}, {"removed": "normal", "field_name": "severity", "added": "enhancement"}, {"removed": "---", "field_name": "cf_status_firefox57", "added": "wontfix"}, {"removed": "--", "field_name": "priority", "added": "P3"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-09-12T23:28:02Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mstriemer@mozilla.com"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "mstriemer@mozilla.com"}], "who": "mstriemer@mozilla.com", "when": "2017-12-15T16:49:32Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1429590"}], "who": "andy+bugzilla@mckay.pub", "when": "2018-01-10T21:31:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8943416, "added": "review?(lgreco@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8943417, "added": "review?(lgreco@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "lgreco@mozilla.com"}], "who": "mstriemer@mozilla.com", "when": "2018-01-17T22:51:06Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1369482"}], "who": "mstriemer@mozilla.com", "when": "2018-01-17T22:55:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(lgreco@mozilla.com)", "attachment_id": 8943416, "added": "review?(aswan@mozilla.com), review?(jaws@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "review?(lgreco@mozilla.com)", "attachment_id": 8943417, "added": "review?(aswan@mozilla.com), review?(jaws@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "aswan@mozilla.com, jaws@mozilla.com"}], "who": "mstriemer@mozilla.com", "when": "2018-01-23T22:54:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gijskruitbosch+bugs@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(gijskruitbosch+bugs@gmail.com)"}], "who": "mstriemer@mozilla.com", "when": "2018-01-23T23:00:17Z"}, {"changes": [{"removed": "needinfo?(gijskruitbosch+bugs@gmail.com)", "field_name": "flagtypes.name", "added": "needinfo?(mstriemer@mozilla.com)"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2018-01-23T23:30:05Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1378459"}, {"removed": "needinfo?(mstriemer@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "mstriemer@mozilla.com", "when": "2018-01-29T16:03:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jaws@mozilla.com)", "attachment_id": 8943416, "added": ""}], "who": "jaws@mozilla.com", "when": "2018-01-29T20:11:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jaws@mozilla.com)", "attachment_id": 8943417, "added": "review-"}], "who": "jaws@mozilla.com", "when": "2018-01-29T20:14:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "alice.wyman@verizon.net"}], "who": "alice.wyman@verizon.net", "when": "2018-01-30T15:51:41Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1414029"}], "who": "alice.wyman@verizon.net", "when": "2018-01-30T15:56:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mjaritz@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mjaritz@mozilla.com)"}], "who": "mstriemer@mozilla.com", "when": "2018-01-30T22:17:02Z"}, {"changes": [{"removed": "needinfo?(mjaritz@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "mjaritz@mozilla.com", "when": "2018-01-31T14:01:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8943416, "added": "review?(jaws@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "review-", "attachment_id": 8943417, "added": "review?(jaws@mozilla.com)"}], "who": "mstriemer@mozilla.com", "when": "2018-02-01T21:24:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jaws@mozilla.com)", "attachment_id": 8943417, "added": "review?(gijskruitbosch+bugs@gmail.com)"}], "who": "jaws@mozilla.com", "when": "2018-02-05T20:24:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com), review?(jaws@mozilla.com)", "attachment_id": 8943416, "added": "review?(gijskruitbosch+bugs@gmail.com)"}], "who": "jaws@mozilla.com", "when": "2018-02-05T20:25:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8943416, "added": "review?(aswan@mozilla.com)"}], "who": "jaws@mozilla.com", "when": "2018-02-05T20:26:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8943416, "added": ""}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2018-02-07T19:48:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8943417, "added": ""}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2018-02-07T19:48:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8943416, "added": ""}], "who": "mstriemer@mozilla.com", "when": "2018-02-07T20:33:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8943417, "added": ""}], "who": "mstriemer@mozilla.com", "when": "2018-02-07T20:33:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "antoine.mozilla@gmail.com"}], "who": "antoine.mozilla@gmail.com", "when": "2018-02-09T04:23:04Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8943416, "added": "review?(aswan@mozilla.com), review?(gijskruitbosch+bugs@gmail.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8943417, "added": "review?(aswan@mozilla.com), review?(gijskruitbosch+bugs@gmail.com)"}], "who": "mstriemer@mozilla.com", "when": "2018-02-12T21:15:40Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8943423, "added": "1"}], "who": "mstriemer@mozilla.com", "when": "2018-02-12T21:29:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8943416, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-02-14T00:09:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8943417, "added": "review-"}], "who": "aswan@mozilla.com", "when": "2018-02-14T00:45:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8943416, "added": "review+"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2018-02-14T16:39:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8943417, "added": ""}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2018-02-14T17:10:14Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1438396"}], "who": "mstriemer@mozilla.com", "when": "2018-02-15T01:44:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review-", "attachment_id": 8943417, "added": "review?(aswan@mozilla.com), review?(gijskruitbosch+bugs@gmail.com)"}], "who": "mstriemer@mozilla.com", "when": "2018-02-16T21:39:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8943417, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-02-17T02:32:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8943417, "added": "review+"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2018-02-17T11:02:02Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mwalkington@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mwalkington@mozilla.com)"}], "who": "mstriemer@mozilla.com", "when": "2018-03-08T18:37:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mark@striemer.ca"}, {"removed": "needinfo?(mwalkington@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(mark@striemer.ca)"}], "who": "mwalkington@mozilla.com", "when": "2018-04-03T15:27:35Z"}, {"changes": [{"removed": "needinfo?(mark@striemer.ca)", "field_name": "flagtypes.name", "added": ""}], "who": "mstriemer@mozilla.com", "when": "2018-04-03T16:59:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8943416, "added": "review?(aswan@mozilla.com)"}], "who": "mstriemer@mozilla.com", "when": "2018-04-03T17:02:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8943417, "added": "review?(aswan@mozilla.com)"}], "who": "mstriemer@mozilla.com", "when": "2018-04-03T17:05:42Z"}, {"changes": [{"removed": "mark@striemer.ca", "field_name": "cc", "added": ""}], "who": "mstriemer@mozilla.com", "when": "2018-04-03T18:54:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8943416, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-04-04T03:50:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8943417, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-04-04T04:08:46Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mozilla@kaply.com"}], "who": "mozilla@kaply.com", "when": "2018-04-16T21:32:34Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-04-18 10:52:24"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "ccoroiu@mozilla.com", "when": "2018-04-18T10:52:24Z"}, {"changes": [{"removed": "RESOLVED", "field_name": "status", "added": "VERIFIED"}, {"removed": "", "field_name": "cc", "added": "vcarciu@softvision.ro"}], "who": "vcarciu@softvision.ro", "when": "2018-04-26T15:46:17Z"}, {"changes": [{"removed": "fixed", "field_name": "cf_status_firefox61", "added": "verified"}], "who": "vcarciu@softvision.ro", "when": "2018-04-26T15:52:09Z"}], "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cf_status_firefox57": "wontfix", "cc_detail": [{"email": "alice.wyman@verizon.net", "id": 268217, "name": "alice.wyman@verizon.net", "real_name": "Alice Wyman"}, {"email": "andy+bugzilla@mckay.pub", "id": 397635, "name": "andy+bugzilla@mckay.pub", "real_name": "Andy McKay"}, {"email": "antoine.mozilla@gmail.com", "id": 333996, "name": "antoine.mozilla@gmail.com", "real_name": "Antoine Turmel [:GeekShadow]"}, {"email": "aswan@mozilla.com", "id": 561655, "name": "aswan@mozilla.com", "real_name": "Andrew Swan [:aswan] (on PTO until 6/25)"}, {"email": "gijskruitbosch+bugs@gmail.com", "id": 159069, "name": "gijskruitbosch+bugs@gmail.com", "real_name": ":Gijs (he/him)"}, {"email": "jaws@mozilla.com", "id": 409754, "name": "jaws@mozilla.com", "real_name": "Jared Wein [:jaws] (please needinfo? me)"}, {"email": "lgreco@mozilla.com", "id": 339062, "name": "lgreco@mozilla.com", "real_name": "Luca Greco [:rpl]"}, {"email": "mjaritz@mozilla.com", "id": 520640, "name": "mjaritz@mozilla.com", "real_name": "Markus Jaritz [:designakt] (UX)"}, {"email": "mozilla@kaply.com", "id": 7313, "name": "mozilla@kaply.com", "real_name": "Mike Kaply [:mkaply]"}, {"email": "mstriemer@mozilla.com", "id": 492360, "name": "mstriemer@mozilla.com", "real_name": "Mark Striemer [:mstriemer]"}, {"email": "mwalkington@mozilla.com", "id": 606692, "name": "mwalkington@mozilla.com", "real_name": "Meridel"}, {"email": "vcarciu@softvision.ro", "id": 431489, "name": "vcarciu@softvision.ro", "real_name": "Victor Carciu"}], "cf_last_resolved": "2018-04-18T10:52:24Z", "cf_tracking_firefox61": "---", "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 69, "comments": [{"text": "When an a user views their home page controlled by an extension for the first time, they should be notified that this page is managed by an extension and be shown options to keep the changes or revert to the stock home page.\n\nThis is analogous to what was done for the New Tab override.\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1390158\nNew Tab Mock: https://mozilla.invisionapp.com/share/6HCITJKP8#/screens/244736432", "author": "mconca@mozilla.com", "id": 12638111, "time": "2017-09-07T16:32:12Z"}, {"text": "Created attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview commit: https://reviewboard.mozilla.org/r/213730/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/213730/", "author": "mstriemer@mozilla.com", "id": 12977621, "time": "2018-01-17T22:51:06Z"}, {"text": "Created attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview commit: https://reviewboard.mozilla.org/r/213732/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/213732/", "author": "mstriemer@mozilla.com", "id": 12977622, "time": "2018-01-17T22:51:06Z"}, {"text": "Andrew is out so I'm sending this your way, Luca. If you test it locally the heading will be missing, this was regressed by bug 1369482. I added a patch to that bug which should fix it, so if that lands then this changeset should be fine. Otherwise it will need a minor tweak to use `startlabel` instead of `label`.", "author": "mstriemer@mozilla.com", "id": 12977636, "time": "2018-01-17T22:55:11Z"}, {"text": "Created attachment 8943423\nhomepage-doorhanger.mov.gif", "author": "mstriemer@mozilla.com", "id": 12977642, "time": "2018-01-17T22:59:45Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/1-2/", "author": "mstriemer@mozilla.com", "id": 12980652, "time": "2018-01-18T22:58:15Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review219982\n\nHi Mark, here is a round of review comments on this first patch, most of the review comments are about nits, and the other ones are related to improvements or questions about the reasons behind some of the code from this patch.\n\nI've been looking in most of this code for the first time, I did my best to provide as much useful feedback as possible (but I'd like if someone from our team that has worked or reviewed this pieces before could give a brief look, it could be Shane, which it looks that has reviewed some of this code before, or Bob which has worked on the webextension settings code a lot).\n\nThe customizableui pieces should also be signed off by jaws.\n\n::: browser/components/customizableui/content/panelUI.inc.xul:709\n(Diff revision 1)\n>         hidden=\"true\"\n>         flip=\"slide\"\n>         position=\"bottomcenter topright\"\n>         tabspecific=\"true\">\n>    <popupnotification id=\"extension-new-tab-notification\"\n> +                     class=\"extension-controlled-notification\"\n\nThis change and the one to the related css file looks good to me given the refactoring introduced by this patch, but it prefer if jaws would give his explicit sign-off on these two files (this xul file and the related css file)\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:17\n(Diff revision 1)\n> +const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;\n> +\n> +Cu.import(\"resource://gre/modules/Services.jsm\");\n> +Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n> +\n> +XPCOMUtils.defineLazyModuleGetter(this, \"ExtensionSettingsStore\",\n\nNit, we can merge this three `XPCOMUtils.defineLazyModuleGetter` calls into a single `XPCOMUtils.defineLazyModuleGetters` (e.g. like we do here: https://searchfox.org/mozilla-central/rev/2031c0f517185b2bd0e8f6f92f9491b3410c1f7f/toolkit/components/extensions/ext-storage.js#6-11)\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:25\n(Diff revision 1)\n> +                                  \"resource://gre/modules/AddonManager.jsm\");\n> +XPCOMUtils.defineLazyModuleGetter(this, \"CustomizableUI\",\n> +                                  \"resource:///modules/CustomizableUI.jsm\");\n> +\n> +class ExtensionControlledPopup {\n> +  constructor(opts) {\n\nGiven that `opts` doesn't tell much about what this class is going to get as parameters in the contructor, and looking at the rest of the class methods it looks that there a number of parameter that has to be there to make an instance of this class to work as expected (e.g. `confirmedType`, `observerEvent`, `onObserverAdded`, `onObserverRemoved`, `settingType`, `settingKey`, `windowTracker` and more)\n\nI think that we should add some jsdoc here to detail what `opts`, in particular what are its property and property types and what role they have in the `ExtensionControlledPopup`.\n\nWhen the actual parameters are the properties on a single parameter of type object, we are usually using the following convention:\n\n- https://searchfox.org/mozilla-central/rev/2031c0f517185b2bd0e8f6f92f9491b3410c1f7f/toolkit/components/extensions/Extension.jsm#868-873\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:26\n(Diff revision 1)\n> +XPCOMUtils.defineLazyModuleGetter(this, \"CustomizableUI\",\n> +                                  \"resource:///modules/CustomizableUI.jsm\");\n> +\n> +class ExtensionControlledPopup {\n> +  constructor(opts) {\n> +    // Keep opts as an object so `this` is maintained for it.\n\nI'm not sure that I get this comment, maybe I'm missing something? (or we could make it more clear)\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:33\n(Diff revision 1)\n> +    this.observerRegistered = false;\n> +    this.observer = {\n> +      observe: (subject, topic, data) => {\n> +        // Do this work in an idle callback to avoid interfering with new tab performance tracking.\n> +        this.opts.windowTracker\n> +          .getCurrentWindow({})\n\nit looks that it would be better to use [`windowTracker.topWindow`][1] here instead of  `windowTracker.getCurrent({})`, where `{}` is basically a `fake context object` that we are passing to `getCurrent` only to make it fallback to [`windowTracker.topWindow`][2].\n\nSame for the `windowTracker.getCurrent` call at line 84.\n\n[1]: https://searchfox.org/mozilla-central/source/toolkit/components/extensions/ext-tabs-base.js#1285-1287\n[2]: https://searchfox.org/mozilla-central/rev/1f9b4f0f0653b129b4db1b9fc5e9068054afaac0/toolkit/components/extensions/ext-tabs-base.js#1311-1313\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:39\n(Diff revision 1)\n> +          .requestIdleCallback(this.handleEvent.bind(this));\n> +      },\n> +    };\n> +  }\n> +\n> +  userWasNotified(id) {\n\nit looks that this method is called to check if the \"user has made his choice\" (by pressing one of the two buttons in the doorhanger), and so I'm wondering if a different name for this method would make it much more clear (e.g. something like `hasUserChoice` or `isUserConfirmed`).\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:74\n(Diff revision 1)\n> +    // We don't need to open the doorhanger again until the controlling add-on changes.\n> +    this.removeObserver();\n\nIt looks that we were removing the observer around here even in the previous version of this code, but I'm wondering if, given that it seems that we always want to observe the observer service notification we are looking for only once, maybe we could call `this.removeObserver` from the `this.observer.observe` method (around line 31), so that we can't receive another handleEvent call while waiting for the idle callback to be called.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:79\n(Diff revision 1)\n> +    // We don't need to open the doorhanger again until the controlling add-on changes.\n> +    this.removeObserver();\n> +\n> +    let item = ExtensionSettingsStore.getSetting(this.opts.settingType, this.opts.settingKey);\n> +\n> +    if (!item || !item.id || this.userWasNotified(item.id)) {\n\nI see that this check has been just moved mostly unmodified from the ext-url-overrides.js, https://searchfox.org/mozilla-central/rev/2031c0f517185b2bd0e8f6f92f9491b3410c1f7f/browser/components/extensions/ext-url-overrides.js#51,53-55\nbut I'm wondering which are the conditions that make `ExtensionSettingsStore.getSetting` to return an `item` without an `id`? an inline comment which explain when we are going to return early from this function may be helpful.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:87\n(Diff revision 1)\n> +\n> +    // Find the elements we need.\n> +    let win = this.opts.windowTracker.getCurrentWindow({});\n> +    let doc = win.document;\n> +    let panel = doc.getElementById(\"extension-notification-panel\");\n> +    let popupnotification = doc.getElementById(this.opts.popupnotificationId);\n\nHow about also check if popupnotification has not been found here and raise an error message that could make it easier to investigate an issue related to a caller which as mistyped the popupnotificationId?\n\n::: browser/components/extensions/ext-url-overrides.js:39\n(Diff revision 1)\n>    gBrowser.loadURIWithFlags(\n>      url, {flags: Ci.nsIWebNavigation.LOAD_FLAGS_REPLACE_HISTORY});\n>    return loaded;\n>  }\n>  \n> -async function handleNewTabOpened() {\n> +let newTabPopup = new ExtensionControlledPopup({\n\nCan we create the ExtensionControlledPopup lazily?\n\n(we can use XPCOMUtils.defineLazyGetter like we do in other WebExtensions API modules, e.g. https://searchfox.org/mozilla-central/rev/2031c0f517185b2bd0e8f6f92f9491b3410c1f7f/browser/components/extensions/ext-browsingData.js#32-36)\n\n::: browser/components/extensions/ext-url-overrides.js:45\n(Diff revision 1)\n> -  // We don't need to open the doorhanger again until the controlling add-on changes.\n> -  // eslint-disable-next-line no-use-before-define\n> -  removeNewTabObserver();\n> -\n> -  let item = ExtensionSettingsStore.getSetting(STORE_TYPE, NEW_TAB_SETTING_NAME);\n> -\n> +  confirmedType: NEW_TAB_CONFIRMED_TYPE,\n> +  settingType: STORE_TYPE,\n> +  settingKey: NEW_TAB_SETTING_NAME,\n> +  observerEvent: \"browser-open-newtab-start\",\n> +  popupnotificationId: \"extension-new-tab-notification\",\n> +  onObserverAdded() {\n\nNit, how about keeping these properties alphabetically ordered? \n(or at least group the onObserverAdded/onObserverRemoved/etc callbacks together)\n\n::: browser/components/extensions/ext-url-overrides.js:59\n(Diff revision 1)\n> -      // Secondary action is to restore settings. Disabling an add-on should remove\n> -      // the tabs that it has open, but we want to open the new New Tab in this tab.\n> -      //   1. Replace the tab's URL with about:blank, wait for it to change\n> +    //   1. Replace the tab's URL with about:blank, wait for it to change\n> -      //   2. Now that this tab isn't associated with the add-on, disable the add-on\n> +    //   2. Now that this tab isn't associated with the add-on, disable the add-on\n> -      //   3. Replace the tab's URL with the new New Tab URL\n> +    //   3. Replace the tab's URL with the new New Tab URL\n> -      ExtensionSettingsStore.removeSetting(NEW_TAB_CONFIRMED_TYPE, item.id);\n> +    let win = windowTracker.getCurrentWindow({});\n\nSame as for the ExtensionControllerPopup.jsm, how about using `windowTracker.topWindow` here instead of `windowTracker.getCurrentWindow({})`?\n\n::: browser/components/extensions/ext-url-overrides.js:66\n(Diff revision 1)\n> -      let tab = gBrowser.selectedTab;\n> +    let tab = gBrowser.selectedTab;\n> -      await replaceUrlInTab(gBrowser, tab, \"about:blank\");\n> +    await replaceUrlInTab(gBrowser, tab, \"about:blank\");\n> -      Services.obs.addObserver({\n> +    Services.obs.addObserver({\n> -        async observe() {\n> +      async observe() {\n> -          await replaceUrlInTab(gBrowser, tab, aboutNewTabService.newTabURL);\n> +        await replaceUrlInTab(gBrowser, tab, aboutNewTabService.newTabURL);\n> -          handleNewTabOpened();\n> +        doorhanger.handleEvent();\n\nNit, I guess that we are calling `doorhander.handleEvent()` here in case the newtab is still controlled by another installed extension that wanted to control the newtab, and so an inline comment like the one added in the second patch in ext-chrome-settings-overrides.js could be useful.\n\nWe could also briefly mention that is `ExtensionControlledPopup` that is going to disable the addon internally, right after calling this onRestored async callback, and that is going to allow to another installed extension to inherit the control over the newtab (mostly because in the previous version `addon.userDisabled = true;` was immediately after this code, but in the new version is hidden inside the new `ExtensionControlledPopup`).\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:11\n(Diff revision 1)\n> +XPCOMUtils.defineLazyModuleGetter(this, \"ExtensionSettingsStore\",\n> +                                  \"resource://gre/modules/ExtensionSettingsStore.jsm\");\n> +XPCOMUtils.defineLazyModuleGetter(this, \"ExtensionControlledPopup\",\n> +                                  \"resource:///modules/ExtensionControlledPopup.jsm\");\n> +\n> +add_task(async function testExtensionControlledPopup() {\n\nNit, it could be helpful to mention in an inline comment that this test is using an empty extension because its goal is to \"unit test\" the ExtensionControlledPopup class itself and not its usage in the newtab and homepage doorhanger (which have their own tests with non-empty test extensions in separate test files).\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:15\n(Diff revision 1)\n> +\n> +add_task(async function testExtensionControlledPopup() {\n> +  let id = \"ext-controlled@mochi.test\";\n> +  let extension = ExtensionTestUtils.loadExtension({\n> +    manifest: {applications: {gecko: {id}}},\n> +    useAddonManager: \"temporary\",\n\nNit, I would add a comment here to explain why we need the extension to use the \"temporary\" mode (which I'm pretty sure that is because we need the AddonManager to know about the test extension).\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:30\n(Diff revision 1)\n> +  let settingType = \"extension-controlled\";\n> +  let settingKey = \"some-key\";\n> +  let observerAdded = null;\n> +  let restored = null;\n> +  let popup = new ExtensionControlledPopup({\n> +    confirmedType,\n\nNit, like in one of the previous comments: how about keeping these properties alphabetically ordered? \n(or at least group the onObserverAdded/onObserverRemoved/etc callbacks together)\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:48\n(Diff revision 1)\n> +    async onRestore(doorhanger) {\n> +      restored = true;\n> +    },\n> +  });\n> +\n> +  let doc = windowTracker.getCurrentWindow({}).document;\n\nNit, this could also be just `windowTracker.topWindow.document`\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:50\n(Diff revision 1)\n> +    },\n> +  });\n> +\n> +  let doc = windowTracker.getCurrentWindow({}).document;\n> +  let panel = doc.getElementById(\"extension-notification-panel\");\n> +  let popupnotification = doc.createElement(\"popupnotification\");\n\nwe could move the code that create the `popupnotification` XUL element in an helper function outside of the test case body, so that the test case itself can be easier to read.\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:69\n(Diff revision 1)\n> +  };\n> +  Object.keys(attributes).forEach(key => {\n> +    popupnotification.setAttribute(key, attributes[key]);\n> +  });\n> +  popupnotification.innerHTML = `\n> +      <popupnotificationcontent orient=\"vertical\">\n\nNit, even if it is just a template string (and so eslint is not going to complain), how about indent its content with 2 spaces instead of 4?\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:77\n(Diff revision 1)\n> +        </description>\n> +      </popupnotificationcontent>\n> +  `;\n> +  panel.appendChild(popupnotification);\n> +\n> +  // Test that the popup can be ignored.\n\nDoes this comment mean that \"creating the ExtensionControlledPopup instance doesn't mean that it is already actively listening for the event that it is supposed to observe\"?\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:94\n(Diff revision 1)\n> +  let popupShown = promisePopupShown(panel);\n> +  Services.obs.notifyObservers(null, \"extension-controlled-event\");\n> +  await popupShown;\n\nIt seems that we repeat this sequence a couple of times during this test case, we could group it into an helper function (even just one that is defined inside the test case body itself) and reuse it to make the test case a bit shorter\n(and maybe there is also some other parts of it that could be grouped in an helper function to be reused inside the test).\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:101\n(Diff revision 1)\n> +  await popupShown;\n> +\n> +  is(observerAdded, false, \"Done observing the event\");\n> +  is(restored, null, \"Settings have not been restored\");\n> +  is(panel.getAttribute(\"panelopen\"), \"true\", \"The panel is open\");\n> +  is(popupnotification.hidden, false, \"The popup is open\");\n\nNit, How about \"the panel content is visible\" instead?\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:102\n(Diff revision 1)\n> +\n> +  is(observerAdded, false, \"Done observing the event\");\n> +  is(restored, null, \"Settings have not been restored\");\n> +  is(panel.getAttribute(\"panelopen\"), \"true\", \"The panel is open\");\n> +  is(popupnotification.hidden, false, \"The popup is open\");\n> +  is(popup.userWasNotified(id), false, \"The user has not been notified\");\n\nNit, how about \"The user did not made a choice yet\"? \n(it is just that I personally read \"The user has not been notified\" as \"The user has received an open popup to be notified of the change\")\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:167\n(Diff revision 1)\n> +  is(restored, true, \"The onRestore callback was fired\");\n> +  is(popup.userWasNotified(id), false, \"The user has not confirmed\");\n> +  is(addon.userDisabled, true, \"The extension is now disabled\");\n> +\n> +  // Cleanup the DOM and unload extension.\n> +  popupnotification.remove();\n\nwhat if the test fails before removing the injected popupnotification XUL element?\n(e.g. we could register a cleanup function when we inject it to be sure that even in the worst case, \"the test fails and exits before being able to remove it\", we are going to remove it and prevent it to make other unrelated tests to fail)", "author": "lgreco@mozilla.com", "id": 12982030, "time": "2018-01-19T15:54:35Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review219992\n\nAnd here is a round of review comments for the second patch.\n\nAs for the first patch:\n- the customizableui and the dtd pieces should also be signed off by jaws\n- the pieces in browser.js should also be signed off by Gijs (or someone that he may suggest)\n- it would be great if someone from our team that has worked or reviewed these pieces before could give a brief second look (e.g. Shane or Bob)\n\n::: browser/base/content/browser.js:2151\n(Diff revision 2)\n>  function BrowserGoHome(aEvent) {\n>    if (aEvent && \"button\" in aEvent &&\n>        aEvent.button == 2) // right-click: do nothing\n>      return;\n>  \n> +  Services.obs.notifyObservers(null, \"browser-open-homepage-start\");\n\nThis change may use an inline comment that explain why we are notifying \"browser-open-homepage-start\" here and what component/components are going to observe it.\n\nThis should also be signed-off by someone that has worked on or reviewed patches for the `browser/base/content/browser.js` file (e.g. Gijs is probably a good pick for this).\n\n(to be fair we should also add an inline comment near where \"browser-open-newtab-start\" is notified, https://searchfox.org/mozilla-central/rev/2031c0f517185b2bd0e8f6f92f9491b3410c1f7f/browser/base/content/browser.js#2263, which does have an inline comment but it only mention its usage  \"for modular peformance tracking\" and does not mention that it is also used by the webextensions internals)\n\n::: browser/components/customizableui/content/panelUI.inc.xul:726\n(Diff revision 2)\n>        <description id=\"extension-new-tab-notification-description\">\n>          &newTabControlled.message;\n>        </description>\n>      </popupnotificationcontent>\n>    </popupnotification>\n> +  <popupnotification id=\"extension-homepage-notification\"\n\nDo you mind to also ask jaws to review and sign-off this newly added popupnotification? (it looks like he also reviewed the new-tab one from Bug 1390158)\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:5\n(Diff revision 2)\n>  /* This Source Code Form is subject to the terms of the Mozilla Public\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> -/* globals windowTracker */\n> +/* import-globals-from ext-browser.js */\n\nJust as a side note: I recall that Kris wanted to remove any usage of `import-globals-from` from our internals, but I'm not sure what we were going to use instead (and to be fair we are currently using `import-globals-from`  in a lot of the WebExtensions internals: https://searchfox.org/mozilla-central/search?q=%2F*+import-globals-from&case=false&regexp=false&path=components%2Fextensions%2F)\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:11\n(Diff revision 2)\n>  \n>  \"use strict\";\n>  \n>  const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;\n>  \n>  XPCOMUtils.defineLazyModuleGetter(this, \"ExtensionPreferencesManager\",\n\nNit, we could also merge all this into a single `XPCOMUtils.defineLazyModuleGetters`\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:50\n(Diff revision 2)\n> +function waitForTabLoaded(tab) {\n> +  return new Promise(resolve => {\n> +    windowTracker.addListener(\"progress\", {\n> +      onLocationChange(browser, webProgress, request, locationURI, flags) {\n> +        if (webProgress.isTopLevel\n> +            && browser.ownerGlobal.gBrowser.getTabForBrowser(browser) == tab) {\n> +          windowTracker.removeListener(this);\n> +          resolve();\n> +        }\n> +      },\n> +    });\n> +  });\n> +}\n> +\n> +function replaceUrlInTab(gBrowser, tab, url) {\n> +  let loaded = waitForTabLoaded(tab);\n> +  gBrowser.loadURIWithFlags(\n> +    url, {flags: Ci.nsIWebNavigation.LOAD_FLAGS_REPLACE_HISTORY});\n> +  return loaded;\n> +}\n\nIt looks like we have a pretty similar helper function in ext-url-overrides.js, can we share one implementation for both?\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:71\n(Diff revision 2)\n> +  gBrowser.loadURIWithFlags(\n> +    url, {flags: Ci.nsIWebNavigation.LOAD_FLAGS_REPLACE_HISTORY});\n> +  return loaded;\n> +}\n> +\n> +let popup = new ExtensionControlledPopup({\n\nit would be easier to understand what popup is if we give it a more specific name, e.g. the other one is currently named `newTabPopup` and we could call this one `homepagePopup` (or `homepageControlledPopup`)\n\n\nLike for the `newTabPopup`, can we create this lazily?\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:85\n(Diff revision 2)\n> +    // Disabling an add-on should remove the tabs that it has open, but we want\n> +    // to open the new homepage in this tab (which might get closed).\n> +    //   1. Replace the tab's URL with about:blank, wait for it to change\n> +    //   2. Now that this tab isn't associated with the add-on, disable the add-on\n> +    //   3. Trigger the browser's homepage method\n> +    let win = windowTracker.getCurrentWindow({});\n\nNit, or just `windowTracker.topWindow`\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:174\n(Diff revision 2)\n>  \n>    async onManifestEntry(entryName) {\n>      let {extension} = this;\n>      let {manifest} = extension;\n>  \n>      await ExtensionSettingsStore.initialize();\n\nNit, we could add an empty line between the `await ...` and the `if (...)` (just to aid the readability and being consistent to the similar code from ext-url-overrides.js in the other patch).\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:310\n(Diff revision 2)\n> +  onSetPrefs(item) {\n> +    if (item.id) {\n> +      popup.addObserver(item.id);\n> +    } else {\n> +      popup.removeObserver();\n> +    }\n> +  },\n\nThis `onSetPrefs` callback seems to be used as part of the mechanism that allows to notify the user that another extension is controlling the homepage after the extension that was previously controling it has been disabled, am I right? (an inline comment above it could help to make immediately clear what is its role).\n\n::: browser/components/extensions/test/browser/browser_ext_chrome_settings_overrides_home.js:278\n(Diff revision 2)\n> +add_task(async function test_doorhanger() {\n> +  let defaultHomePage = getHomePageURL();\n> +  let ext1 = ExtensionTestUtils.loadExtension({\n> +    manifest: {\"chrome_settings_overrides\": {\"homepage\": \"ext1.html\"}},\n> +    files: {\"ext1.html\": \"<h1>1</h1>\"},\n> +    useAddonManager: \"temporary\",\n\nNit, we could mention in an inline comment that both these test extension are using the \"temporary\" mode to: \"to be recognized by the AddonManager\" and \"so that the extension shutdown handlers are going to be called\"\n\n::: browser/components/extensions/test/browser/browser_ext_chrome_settings_overrides_home.js:307\n(Diff revision 2)\n> +  document.getAnonymousElementByAttribute(popupnotification, \"anonid\", \"secondarybutton\").click();\n> +  await prefPromise;\n> +  await popupHidden;\n> +\n> +  // Expect a new doorhanger for the next extension.\n> +  await promisePopupShown(panel);\n\nI'm wondering if it would be better to create the promise before we click the secondarybutton on the doorhanger, so that we don't risk this await to fail intermittently (if the popupshown event would be sent before we create the promise that is going to listen for it), e.g. like we are doing for the popupHidden and prefPromise promises.\n\nNit, I usually try to make it clear when an identifier is a promise by prefixing its name with `on` or `once` (e.g. `popupHidden` -> `oncePopupHidden`, `prefPromise` -> `oncePrefChanged` etc.)\n\n::: browser/locales/en-US/chrome/browser/browser.dtd:981\n(Diff revision 2)\n> +<!ENTITY homepageControlled.message \"An extension has changed what you see as your home page. You can restore your settings if you do not want this change.\">\n> +<!ENTITY homepageControlled.header.message \"Your home page has changed.\">\n> +<!ENTITY homepageControlled.keepButton.label \"Keep Changes\">\n> +<!ENTITY homepageControlled.keepButton.accesskey \"K\">\n> +<!ENTITY homepageControlled.restoreButton.label \"Restore Settings\">\n> +<!ENTITY homepageControlled.restoreButton.accesskey \"R\">\n\nThis new entities looks ok to me, but I would prefer that they would also receive a final signoff from jaws (like for the changes to panelUI.inc.xul)\n\n::: toolkit/components/extensions/ExtensionPreferencesManager.jsm:105\n(Diff revision 2)\n>        Preferences.set(pref, prefs[pref]);\n> +      changed = true;\n> +    }\n> -    }\n> +  }\n> +  if (changed && typeof setting.onSetPrefs == \"function\") {\n> +    setting.onSetPrefs(item);\n\nThe difference between the `setting.setCallback` and this new `setting.onSetPrefs` is clear once you read the code that use both, but:\n\n- it is not easy to guess by their name\n- we should also update the jsdoc comment on setPrefs to mention onSetPrefs (and make it if and when they are optional)\n\nI would prefer to rename at least the new one so that it is easier to guess its role (e.g. `onChanged`?).\n\n(I would also prefer if `setCallback` was called `getPrefsToSet` or another name that makes it clear that it doesn't set anything on its own, it just return the map of the preferences to set, at least if I'm not reading it wrong, but no need to renamed it in this patch, we can evaluate if we want to do that and if we do we can do it in a follow up).\n\n::: toolkit/components/extensions/test/xpcshell/test_ext_extensionPreferencesManager.js:86\n(Diff revision 2)\n>    for (let pref of settingObj.prefNames) {\n>      equal(Preferences.get(pref), settingObj.valueFn(pref, value), msg);\n>    }\n>  }\n>  \n> +function checkOnSetPrefs(setting, value, msg) {\n\nThis helper doesn't do anything if the setting in not \"singlePref\", which is reasonable because that is the only one that has a `setPrefs` callback defined, but we are using the helper inside the for that loops over all the settings that we are going to test, but I'm wondering if we could make it more clear, e.g. by not calling this helper at all when the `settingObj` doesn't have a `setPrefs` callback (and removing the `if (setting == \"singlePrefs\")` check the helper function body).", "author": "lgreco@mozilla.com", "id": 12982096, "time": "2018-01-19T16:20:43Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/1-2/", "author": "mstriemer@mozilla.com", "id": 12990268, "time": "2018-01-23T22:54:17Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/2-3/", "author": "mstriemer@mozilla.com", "id": 12990269, "time": "2018-01-23T22:54:17Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review219992\n\n> I'm wondering if it would be better to create the promise before we click the secondarybutton on the doorhanger, so that we don't risk this await to fail intermittently (if the popupshown event would be sent before we create the promise that is going to listen for it), e.g. like we are doing for the popupHidden and prefPromise promises.\n> \n> Nit, I usually try to make it clear when an identifier is a promise by prefixing its name with `on` or `once` (e.g. `popupHidden` -> `oncePopupHidden`, `prefPromise` -> `oncePrefChanged` etc.)\n\n`promisePopupShown()` will resolve right away if the popup is currently shown. So we don't need to handle that case, it also means we can't create this promise any earlier.\n\nhttps://searchfox.org/mozilla-central/rev/b7e3ec2468d42fa59d86c03ec7afeb209813f1d4/browser/components/extensions/test/browser/head.js#112", "author": "mstriemer@mozilla.com", "id": 12990270, "time": "2018-01-23T22:54:29Z"}, {"text": "Luca has done an initial review but wanted jaws to look over the frontend changes and someone who's seen this code (aswan) to take another look.\n\n@Gijs this also adds an observer notification to `BrowserGoHome()` in browser/base/content/browser.js [1]. Do these changes look okay?\n\n[1] https://reviewboard.mozilla.org/r/213732/diff/3#1", "author": "mstriemer@mozilla.com", "id": 12990287, "time": "2018-01-23T23:00:17Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review220696\n\n\nStatic analysis found 1 defect in this patch.\n - 1 defect found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint check path/to/file` (Python/Javascript/wpt)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: browser/components/extensions/ext-browser.js:109\n(Diff revision 3)\n>    // FIXME: This allows for collisions.\n>    return id.replace(/[^a-z0-9_-]/g, \"_\");\n>  };\n>  \n> +\n> +function replaceUrlInTab(gBrowser, tab, url) {\n\nError: 'replaceUrlInTab' is defined but never used. Allowed unused vars must match /^(Cc|Ci|Cr|Cu|EXPORTED_SYMBOLS)$/. [eslint: no-unused-vars]", "author": "jkeromnes+clangbot@mozilla.com", "id": 12990312, "time": "2018-01-23T23:12:32Z"}, {"text": "(In reply to Mark Striemer [:mstriemer] from comment #11)\n> Luca has done an initial review but wanted jaws to look over the frontend\n> changes and someone who's seen this code (aswan) to take another look.\n> \n> @Gijs this also adds an observer notification to `BrowserGoHome()` in\n> browser/base/content/browser.js [1]. Do these changes look okay?\n> \n> [1] https://reviewboard.mozilla.org/r/213732/diff/3#1\n\nEh, I don't love use of the observer service for this but I don't have a much better idea...\n\n... that said, the summary of this bug is about the user seeing their homepage. The normal reason users see that page isn't actually the user clicking the 'home' button, but will be opening a new window (or opening the first window, for users who don't restore tabs from last session automatically, which is most users). From that perspective, it seems better to detect navigation to a particular URL, though that will obviously also trigger when an add-on has changed the homepage and the user individually navigates to the homepage URL. Alternatively, you'd need to add extra code to catch those 2 cases...", "author": "gijskruitbosch+bugs@gmail.com", "id": 12990346, "time": "2018-01-23T23:30:05Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review221040\n\nSomebody like florian or jaws should also look closely at the frontend bits, but in the mean time, a few nits/questions about the API to ExtensionControlledPopup\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:38\n(Diff revision 2)\n> +\n> +class ExtensionControlledPopup {\n> +  /* Provide necessary options for the popup.\n> +   *\n> +   * @param {object} opts Options for configuring popup.\n> +   * @param {string} info.confirmedType\n\ninfo -> opts in each `@param`\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:41\n(Diff revision 2)\n> +   * @param {function} info.makeWidgetId\n> +   *                   The makeWidgetId function from ext-browser.js.\n\nCan we just have the caller pass in a widget id instead of this?\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:54\n(Diff revision 2)\n> +   * @param {object} info.windowTracker\n> +   *                 The windowTracker object from ext-browser.js.\n\nif this is just for getting the top window, how about just using `Services.wm.getMostRecentWindow()` directly?\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:63\n(Diff revision 2)\n> +   * @param {function} info.onRestore\n> +   *                   A function that is called before disabling an extension when the\n> +   *                   user decides to disable the extension. If this function is async\n> +   *                   then the extension won't be disabled until it is fulfilled.\n\nThe \"Restore\" in the name refers to restoring the underlying page?  That confused me at first, `onDisableExtension` or something might be clearer?\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:69\n(Diff revision 2)\n> +   *                   A function that is called before disabling an extension when the\n> +   *                   user decides to disable the extension. If this function is async\n> +   *                   then the extension won't be disabled until it is fulfilled.\n> +   */\n> +  constructor(opts) {\n> +    // Keep opts as an object so `this` is maintained when calling methods on it.\n\nI don't get this, won't this make `this` bound to the opts object?\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:119\n(Diff revision 2)\n> +        this.opts.onObserverAdded();\n> +      }\n> +    }\n> +  }\n> +\n> +  async handleEvent() {\n\nCould we name this `showNotification()` (or `maybeShowNotification()` or something more descriptive?", "author": "aswan@mozilla.com", "id": 12992672, "time": "2018-01-24T21:23:34Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review221132\n\nI'll clear review of the patch for now since aswan has done a good round of feedback already.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:23\n(Diff revision 2)\n> + * the change by triggering the primary action.\n> + */\n> +\n> +var EXPORTED_SYMBOLS = [\"ExtensionControlledPopup\"];\n> +\n> +const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;\n\nPlease pay attention to bug 767640, as this may not be needed by the time you land this.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:69\n(Diff revision 2)\n> +   *                   A function that is called before disabling an extension when the\n> +   *                   user decides to disable the extension. If this function is async\n> +   *                   then the extension won't be disabled until it is fulfilled.\n> +   */\n> +  constructor(opts) {\n> +    // Keep opts as an object so `this` is maintained when calling methods on it.\n\nI agree, the use of the arrow function below will maintain the `this` reference.", "author": "jaws@mozilla.com", "id": 13003228, "time": "2018-01-29T20:11:48Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review222096\n\n::: browser/locales/en-US/chrome/browser/browser.dtd:981\n(Diff revision 3)\n>  <!ENTITY newTabControlled.keepButton.label \"Keep Changes\">\n>  <!ENTITY newTabControlled.keepButton.accesskey \"K\">\n>  <!ENTITY newTabControlled.restoreButton.label \"Restore Settings\">\n>  <!ENTITY newTabControlled.restoreButton.accesskey \"R\">\n>  \n> +<!ENTITY homepageControlled.message \"An extension has changed what you see as your home page. You can restore your settings if you do not want this change.\">\n\nWe should include the name of the extension in this message so users will know what extension they can disable if they don't want to disable it right at this moment.", "author": "jaws@mozilla.com", "id": 13003235, "time": "2018-01-29T20:14:10Z"}, {"text": "(In reply to Jared Wein [:jaws] (please needinfo? me) from comment #16)\n> Comment on attachment 8943417\n> > +<!ENTITY homepageControlled.message \"An extension has changed what you see as your home page. You can restore your settings if you do not want this change.\">\n> \n> We should include the name of the extension in this message so users will\n> know what extension they can disable if they don't want to disable it right\n> at this moment.\n\nWe had discussed this in the New Tab doorhanger as well (bug 1390158 comment 40 has Markus's response). There it was decided that we didn't need the extension name since it is in the identity block. In the homepage case however the extension name might not be in the identity bar like in the Yandex - Homepage [1] extension where it sets the homepage to yandex.ru.\n\nMarkus, do we want to include the extension name in the message here since it might not be in the identity block?\n\n[1] https://addons.mozilla.org/en-US/firefox/addon/yandex-homepage/", "author": "mstriemer@mozilla.com", "id": 13006675, "time": "2018-01-30T22:17:02Z"}, {"text": "(In reply to Mark Striemer [:mstriemer] from comment #17)\n> (In reply to Jared Wein [:jaws] (please needinfo? me) from comment #16)\n> > Comment on attachment 8943417\n> > > +<!ENTITY homepageControlled.message \"An extension has changed what you see as your home page. You can restore your settings if you do not want this change.\">\n> > \n> > We should include the name of the extension in this message so users will\n> > know what extension they can disable if they don't want to disable it right\n> > at this moment.\n> \n> We had discussed this in the New Tab doorhanger as well (bug 1390158 comment\n> 40 has Markus's response). There it was decided that we didn't need the\n> extension name since it is in the identity block. In the homepage case\n> however the extension name might not be in the identity bar like in the\n> Yandex - Homepage [1] extension where it sets the homepage to yandex.ru.\n> \n> Markus, do we want to include the extension name in the message here since\n> it might not be in the identity block?\n> \n> [1] https://addons.mozilla.org/en-US/firefox/addon/yandex-homepage/\n\nFor the later case: people will also see what extension is controlling their home page in the home page settings in preferences. We do that, so that they do not need to remember.", "author": "mjaritz@mozilla.com", "id": 13008257, "time": "2018-01-31T14:01:43Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/2-3/", "author": "mstriemer@mozilla.com", "id": 13012489, "time": "2018-02-01T21:24:14Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/3-4/", "author": "mstriemer@mozilla.com", "id": 13012490, "time": "2018-02-01T21:24:14Z"}, {"text": "I updated this based on the comments above, I had to add another notifyObservers call. This time in nsBrowserContentHandler.js, I'm not sure if that's really the right spot though.\n\nThis now catches the case where a new window is opened. So if you install a homepage extension and open a new window you'll see the doorhanger. It still misses the first window though since the doorhanger code hasn't registered its observer yet.\n\nI put together a not-so-pretty hack yesterday where I have nsBrowserContentHandler.js wait for an observer event from the extension before sending the open-homepage-start event. This likely has some race conditions but I thought it might work and it does in this case.\n\nIt seems like there should be a better way but I'm hesitant to import a bunch of code in nsBrowserContentHandler.js or browser.js.", "author": "mstriemer@mozilla.com", "id": 13012607, "time": "2018-02-01T21:54:01Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\n/me stares at MozReview", "author": "jaws@mozilla.com", "id": 13019888, "time": "2018-02-05T20:26:08Z"}, {"text": "There should be an update to this tomorrow to handle the initial homepage case without modifying nsBrowserContentHandler.js. It isn't a perfect solution but should work well enough.", "author": "mstriemer@mozilla.com", "id": 13020500, "time": "2018-02-06T00:01:31Z"}, {"text": "(In reply to Mark Striemer [:mstriemer] from comment #23)\n> There should be an update to this tomorrow to handle the initial homepage\n> case without modifying nsBrowserContentHandler.js. It isn't a perfect\n> solution but should work well enough.\n\nI assume this means I should wait with reviewing this. Please let me know if not.", "author": "gijskruitbosch+bugs@gmail.com", "id": 13021397, "time": "2018-02-06T12:52:18Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nClearing this for now per IRC / bug.", "author": "gijskruitbosch+bugs@gmail.com", "id": 13025565, "time": "2018-02-07T19:48:11Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/3-4/", "author": "mstriemer@mozilla.com", "id": 13037213, "time": "2018-02-12T21:15:40Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/4-5/", "author": "mstriemer@mozilla.com", "id": 13037214, "time": "2018-02-12T21:15:40Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review221040\n\n> Can we just have the caller pass in a widget id instead of this?\n\nWe could probably pass a widget id to `addObserver()` and `open()` instead of holding on to this function. It seems simpler to make the widget ID when we need it to me though. I can make the change if you'd like.", "author": "mstriemer@mozilla.com", "id": 13037253, "time": "2018-02-12T21:28:14Z"}, {"text": "Created attachment 8950378\nhomepage-all-cases.mov.gif\n\nAttached is a giant gif showing what I think are all the cases: startup, new windows and homepage button click.\n\nThis doesn't do anything for the case where the homepage is opened in the background.\n\nThe observer notification is triggered in BrowserGoHome() and OpenBrowserWindow(). When an extension starts at app startup it will check if it is on the homepage to handle the initial case since we'll likely miss the observer notification.", "author": "mstriemer@mozilla.com", "id": 13037256, "time": "2018-02-12T21:29:16Z"}, {"text": "I'm afraid I'm likely not getting to this today - apologies for the delay. Hopefully tomorrow...", "author": "gijskruitbosch+bugs@gmail.com", "id": 13038903, "time": "2018-02-13T14:52:22Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review221040\n\n> We could probably pass a widget id to `addObserver()` and `open()` instead of holding on to this function. It seems simpler to make the widget ID when we need it to me though. I can make the change if you'd like.\n\nHm, looks like we already have a copy of that function in ExtensionPopups.jsm :(  Can you just make that shareable and use it instead?  Its the passing around of the callable from ext-browser.js that I object to...", "author": "aswan@mozilla.com", "id": 13040425, "time": "2018-02-13T23:46:36Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review225854\n\nI don't really love the way we're using ExtensionSettingsStore here but I guess its our best realistic option for the time being.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:100\n(Diff revision 4)\n> +  clearConfirmation(id) {\n> +    return ExtensionSettingsStore.removeSetting(id, this.confirmedType, id);\n> +  }\n\nIs it the responsibility of users of this class to call this method when the related extension is uninstalled?  That should be documented very clearly if failing to do that means a storage leak (even if its a small leak)\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:153\n(Diff revision 4)\n> +      if (event.originalTarget.getAttribute(\"anonid\") == \"button\") {\n> +        // Main action is to keep changes.\n> +        await this.setConfirmation(item.id);\n> +      } else {\n> +        // Secondary action is to restore settings.\n> +        await this.beforeDisableAddon(this);\n\nShould the call to `pnael.hidePopup()` below happen before this call?  It seems like the popup should go away immediately to acknowledge that the user has pressed a button and we are handling that, even if some further work is still going to happen before the extension actually gets disabled...", "author": "aswan@mozilla.com", "id": 13040473, "time": "2018-02-14T00:09:56Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review225864\n\nA few questions to resolve.  Also, I assume Gijs will evaluate the browser.js bits, I don't know enough to properly evaluate those changes.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:81\n(Diff revision 5)\n>        observe: (subject, topic, data) => {\n>          // We don't need to open the doorhanger again until the controlling add-on changes.\n>          this.removeObserver();\n>  \n>          // Do this work in an idle callback to avoid interfering with new tab performance tracking.\n> -        this.topWindow.requestIdleCallback(this.open.bind(this));\n> +        this.topWindow.requestIdleCallback(this.open.bind(this, subject));\n\nCan you add some documentation to the ExtensionControlledPopup constructor that the observed event should have the window as its subject or else bad things will happen?\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:125\n(Diff revision 5)\n>        }\n>      }\n>    }\n>  \n> -  async open() {\n> +  async open(targetWindow) {\n> +    // Don't listen anymore if the popup has been manually opened.\n\nI don't understand this comment?\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:62\n(Diff revision 5)\n> +      // Disabling an add-on should remove the tabs that it has open, but we want\n> +      // to open the new homepage in this tab (which might get closed).\n> +      //   1. Replace the tab's URL with about:blank, wait for it to change\n> +      //   2. Now that this tab isn't associated with the add-on, disable the add-on\n> +      //   3. Trigger the browser's homepage method\n> +      let win = windowTracker.topWindow;\n\nIs this safe?  I think you could get the actual window from `doorhanger.ownerDocument`?\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:66\n(Diff revision 5)\n> +      //   3. Trigger the browser's homepage method\n> +      let win = windowTracker.topWindow;\n> +      let gBrowser = win.gBrowser;\n> +      let tab = gBrowser.selectedTab;\n> +      await replaceUrlInTab(gBrowser, tab, \"about:blank\");\n> +      Preferences.observe(HOMEPAGE_PREF, async function prefObserver() {\n\nCan you just use `Services.prefs.addObserver()` here\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:78\n(Diff revision 5)\n> +      });\n> +    },\n> +  });\n> +});\n> +\n> +async function handleInitialHomepagePopup(extensionId, homepageUrl) {\n\nI don't understand the purpose of this function.  Is the issue that the event we're trying to observe has already fired by the time the extension startup code that registers a listener for it runs?\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:182\n(Diff revision 5)\n>      await ExtensionSettingsStore.initialize();\n> -    if (manifest.chrome_settings_overrides.homepage) {\n> -      ExtensionPreferencesManager.setSetting(extension.id, \"homepage_override\",\n> -                                             manifest.chrome_settings_overrides.homepage);\n> +\n> +    let homepageUrl = manifest.chrome_settings_overrides.homepage;\n> +\n> +    if (homepageUrl) {\n> +      let inControl = await ExtensionPreferencesManager.setSetting(\n\nI realize you didn't change this but why are we setting this preference every time the extension starts up?  Preferences are persistent, we should only need to do this on install.\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:196\n(Diff revision 5)\n> +        }\n> +      }\n> +      extension.callOnClose({\n> +        close: () => {\n> +          if (extension.shutdownReason == \"ADDON_DISABLE\"\n> +              || extension.shutdownReason == \"ADDON_UNINSTALL\") {\n\nYou should generally use `onUninstall()` for this, not `extension.callOnClose()`\n\n::: browser/locales/en-US/chrome/browser/browser.dtd:985\n(Diff revision 5)\n>  \n> +<!ENTITY homepageControlled.message \"An extension has changed what you see as your home page. You can restore your settings if you do not want this change.\">\n> +<!ENTITY homepageControlled.header.message \"Your home page has changed.\">\n> +<!ENTITY homepageControlled.keepButton.label \"Keep Changes\">\n> +<!ENTITY homepageControlled.keepButton.accesskey \"K\">\n> +<!ENTITY homepageControlled.restoreButton.label \"Restore Settings\">\n\nThis does not seem like a good description of what this button does, but enough cooks have already been in this particular kitchen...", "author": "aswan@mozilla.com", "id": 13040541, "time": "2018-02-14T00:45:16Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review225864\n\n> I don't understand the purpose of this function.  Is the issue that the event we're trying to observe has already fired by the time the extension startup code that registers a listener for it runs?\n\nAh and now I see that you commented on this in the bug.  There should definitely be comments in the code here explaining this.  Also, the logic about about:blank logic doesn't seem right, can you check the page's document.readyState?", "author": "aswan@mozilla.com", "id": 13040596, "time": "2018-02-14T01:19:46Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review226062\n\nThanks! Haven't looked at the test in detail, but generally this looks fine. Some nitpicking follows.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:65\n(Diff revision 4)\n> +   *                   user decides to disable the extension. If this function is async\n> +   *                   then the extension won't be disabled until it is fulfilled.\n> +   */\n> +  constructor(opts) {\n> +    this.confirmedType = opts.confirmedType;\n> +    this.makeWidgetId = opts.makeWidgetId;\n\nI concur with making this not have to be an argument.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:66\n(Diff revision 4)\n> +   *                   then the extension won't be disabled until it is fulfilled.\n> +   */\n> +  constructor(opts) {\n> +    this.confirmedType = opts.confirmedType;\n> +    this.makeWidgetId = opts.makeWidgetId;\n> +    this.observerEvent = opts.observerEvent;\n\nNit: `observerTopic` would be more consistent with what we use elsewhere.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:75\n(Diff revision 4)\n> +    this.observer = {\n> +      observe: (subject, topic, data) => {\n\nYou can pass just a function to `Services.obs.addObserver/removeObserver`, because nsIObserver has the function keyword ( https://dxr.mozilla.org/mozilla-central/source/xpcom/ds/nsIObserver.idl ).\n\nSo in this case, could just do:\n\n```js\nthis.observer = (subject, topic, data) => {\n};\n```\n\nOr, for that matter, you could just add it as a method called `observe` on the class (adding a QueryInterface definition to the class) and then just pass `this` to the observer service? I'm not clear on why it needs to be set dynamically in the constructor.\n\n::: browser/components/extensions/ext-url-overrides.js:58\n(Diff revision 4)\n> +      // ExtensionControlledPopup will disable the add-on once this function completes.\n> +      // Disabling an add-on should remove the tabs that it has open, but we want\n> +      // to open the new New Tab in this tab (which might get closed).\n\nThis is a pre-existing issue, but from what I can tell the popup may be open while the user switches tabs, or while the user loads something else in that tab. Replacing the contents of a tab is a destructive action. I guess it doesn't matter in most cases, but ideally this should check that the content we're replacing isn't something the user loaded independently / in a different tab.\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:28\n(Diff revision 4)\n> +  Object.keys(attributes).forEach(key => {\n> +    popupnotification.setAttribute(key, attributes[key]);\n> +  });\n\nNit: you can use `Object.entries(...).forEach((key, value) => {`.\n\nOr you could just make the `attributes` thing an array of 2-element arrays (\"pairs\") and then you can just use a `for of` loop.\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:83\n(Diff revision 4)\n> +    onObserverRemoved() {\n> +      observerAdded = false;\n> +    },\n> +    async beforeDisableAddon(doorhanger) {\n> +      beforeDisableAddonCalled = true;\n> +    },\n\nIt's not really worth changing here, but in future you may want to consider using `sinon` which is an in-tree library that does stubbing like this and lets you verify what methods get called with etc.", "author": "gijskruitbosch+bugs@gmail.com", "id": 13041899, "time": "2018-02-14T16:39:49Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review226100\n\n::: browser/base/content/browser.js:2185\n(Diff revision 5)\n>      break;\n>    case \"tabshifted\":\n>    case \"tab\":\n>      urls = homePage.split(\"|\");\n>      var loadInBackground = getBoolPref(\"browser.tabs.loadBookmarksInBackground\", false);\n> +    notifyObservers = !loadInBackground;\n\nSorry, I'm a little confused. Why don't we put up the notification if the tab loads in the background? You stated this in comment 29 but without the reasoning, and I'm not sure what it is.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:162\n(Diff revision 5)\n> +      if (urlBarWasFocused) {\n> -      win.gURLBar.focus();\n> +        win.gURLBar.focus();\n> +      }\n\nFocus and panels is a giant pain in the ... Not your fault, but it means it'd take me more time than I have to work out exactly when this works and when it breaks. Without thinking too hard, I think this does the wrong thing if you follow e.g. these steps:\n\n1. have url bar focused when this prompt is open\n2. focus search bar while prompt is open (AIUI our new panels won't dismiss in this case?)\n3. close panel with this command\n\n\nIf the panel *does* dismiss if you move focus, perhaps my concern doesn't really apply.\n\nIn any case, I don't know that this is correct. Why do we need to mess with focus at all? Put differently, can you describe what led you (or the original newtab notification implementer if that wasn't you, assuming that's where the focus call came from to begin with) to do this?\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:79\n(Diff revision 5)\n> +  // browser.startup.page == 1 is show homepage.\n> +  if (Services.prefs.getIntPref(\"browser.startup.page\") == 1) {\n\nThis won't be right if the browser restores after a crash even if it normally shows the homepage. Edgecase, but we can do this right. :-)\n\nI think you can use the same checks we use elsewhere (IIRC nsBrowserContentHandler.js or just browser.js) that, from memory, use a getter on session restore to figure out if we're restoring a session or not.\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:88\n(Diff revision 5)\n> +        windowTracker.addListener(\"status\", function listener() {\n> +          windowTracker.removeListener(\"status\", listener);\n> +          resolve();\n\nIt's not clear to me what the 'status' event is and why this is always going to be the desired thing... What if a tab switch happens?", "author": "gijskruitbosch+bugs@gmail.com", "id": 13042004, "time": "2018-02-14T17:10:14Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review226062\n\n> This is a pre-existing issue, but from what I can tell the popup may be open while the user switches tabs, or while the user loads something else in that tab. Replacing the contents of a tab is a destructive action. I guess it doesn't matter in most cases, but ideally this should check that the content we're replacing isn't something the user loaded independently / in a different tab.\n\nThe doorhanger will close if the user clicks on the page or changes tabs. So I think any content change would be done by the page that the doorhanger appeared on and we should still show it.\n\n> It's not really worth changing here, but in future you may want to consider using `sinon` which is an in-tree library that does stubbing like this and lets you verify what methods get called with etc.\n\nI had no idea sinon was available. I added it to this file and switched this to using `sinon.spy()` instead of setting booleans.", "author": "mstriemer@mozilla.com", "id": 13043422, "time": "2018-02-15T00:37:00Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review225854\n\n> Is it the responsibility of users of this class to call this method when the related extension is uninstalled?  That should be documented very clearly if failing to do that means a storage leak (even if its a small leak)\n\nI filed bug 1438364 to clean this up for all data when an extension is uninstalled. I'll make sure this is being cleaned up properly though for now.\n\n> Should the call to `pnael.hidePopup()` below happen before this call?  It seems like the popup should go away immediately to acknowledge that the user has pressed a button and we are handling that, even if some further work is still going to happen before the extension actually gets disabled...\n\nThere was some test code relying on the ExtensionSettingsStore having been updated when the popup was hidden. I updated the tests to wait for that update rather than the popup being hidden.", "author": "mstriemer@mozilla.com", "id": 13043427, "time": "2018-02-15T00:37:08Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review225864\n\n> Ah and now I see that you commented on this in the bug.  There should definitely be comments in the code here explaining this.  Also, the logic about about:blank logic doesn't seem right, can you check the page's document.readyState?\n\n`document.readyState` is \"complete\" and `currentUrl` is \"about:blank\" at this point.\n\n> I realize you didn't change this but why are we setting this preference every time the extension starts up?  Preferences are persistent, we should only need to do this on install.\n\nThis would set the preferences to what we expect if it gets out of sync for some reason, but technically it should only need to happen on install. Would you like me to change it? I'm not sure how much it matters or if one way is better than the other.", "author": "mstriemer@mozilla.com", "id": 13043526, "time": "2018-02-15T01:36:42Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review226100\n\n> Sorry, I'm a little confused. Why don't we put up the notification if the tab loads in the background? You stated this in comment 29 but without the reasoning, and I'm not sure what it is.\n\nThe reasoning is basically it's an edge case I didn't want to deal with right now. It seems like it would have enough complexity on its own to justify its own bug. I filed bug 1438396 to handle that if we think we need to handle it.\n\n> Focus and panels is a giant pain in the ... Not your fault, but it means it'd take me more time than I have to work out exactly when this works and when it breaks. Without thinking too hard, I think this does the wrong thing if you follow e.g. these steps:\n> \n> 1. have url bar focused when this prompt is open\n> 2. focus search bar while prompt is open (AIUI our new panels won't dismiss in this case?)\n> 3. close panel with this command\n> \n> \n> If the panel *does* dismiss if you move focus, perhaps my concern doesn't really apply.\n> \n> In any case, I don't know that this is correct. Why do we need to mess with focus at all? Put differently, can you describe what led you (or the original newtab notification implementer if that wasn't you, assuming that's where the focus call came from to begin with) to do this?\n\nThese panels are dismissable and tab specific so if you manually focus the URL bar the popup will be dismissed.\n\nThe focus was originally being set for the new tab case because when the new tab opens the URL bar is focused by default. This popup steals the focus so if the user takes an action on the popup the focus will be restored to the URL bar.\n\nThere is also the case where the homepage and the new tab page are the same, in this case the URL bar is focused when the homepage is opened as well. But if the homepage is set to web content or a different extension page where the URL bar is filled in the page is focused.\n\nThe original focus state is checked so it can be restored when an action is taken on the popup.\n\nI will add a comment.\n\n> This won't be right if the browser restores after a crash even if it normally shows the homepage. Edgecase, but we can do this right. :-)\n> \n> I think you can use the same checks we use elsewhere (IIRC nsBrowserContentHandler.js or just browser.js) that, from memory, use a getter on session restore to figure out if we're restoring a session or not.\n\nI had looked through that code path and found `SessionStore.willOverrideHomepagePromise` [1]. I couldn't quite tell if it is safe to \"call\" this getter more than once and it doesn't guarantee that it won't override the homepage anyway [2].\n\nI think this will still handle the case where the homepage is overridden since it checks that the URL is the same as the homepage URL.\n\n[1] https://searchfox.org/mozilla-central/rev/9011be0a172711bc243e50dfca16d42e877bf4ec/browser/base/content/browser.js#1764\n[2] https://searchfox.org/mozilla-central/rev/9011be0a172711bc243e50dfca16d42e877bf4ec/browser/components/sessionstore/nsSessionStartup.js#312-318\n\n> It's not clear to me what the 'status' event is and why this is always going to be the desired thing... What if a tab switch happens?\n\nHmm, yeah, this isn't right. The status event will be for any tab which isn't what we want.\n\nI had this using `waitForTabLoaded` before but I changed it for some reason. I think that's still what we want.\n\nI'll switch it back to using that and also verify that we're still on the same tab.", "author": "mstriemer@mozilla.com", "id": 13048819, "time": "2018-02-16T21:33:12Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/4-5/", "author": "mstriemer@mozilla.com", "id": 13048835, "time": "2018-02-16T21:39:34Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/5-6/", "author": "mstriemer@mozilla.com", "id": 13048836, "time": "2018-02-16T21:39:34Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review227010\n\nIt looks like the special handling of browser startup doesn't have a test?  But I guess it's not really practical to test from mochitest... :/\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:67\n(Diff revision 6)\n> +        // Manually trigger an event in case this is controlled again.\n> +        popup.open();\n\nWhy is this needed?  Is there a race between this code and the pref observer below that activates the observer?\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:88\n(Diff revision 6)\n> +    let currentUrl = gBrowser.currentURI.spec;\n> +    // When the first window is still loading the URL might be about:blank.\n> +    // Wait for that the actual page to load before checking the URL, unless\n> +    // the homepage is set to about:blank.\n> +    if (currentUrl != homepageUrl && currentUrl == \"about:blank\") {\n> +      await await waitForTabLoaded(tab);\n\nOne should be enough here :)\n\n::: browser/components/extensions/test/browser/browser_ext_chrome_settings_overrides_home.js:31\n(Diff revision 6)\n>      HOMEPAGE_URL_PREF, Ci.nsIPrefLocalizedString).data;\n>  };\n>  \n> +function isConfirmed(id) {\n> +  let item = ExtensionSettingsStore.getSetting(\"homepageNotification\", id);\n> +  dump(`${id} ${JSON.stringify(item)}\\n`);\n\nThis should be removed", "author": "aswan@mozilla.com", "id": 13049314, "time": "2018-02-17T02:32:13Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review227038\n\nThanks for all the explanations, r=me.\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:79\n(Diff revisions 5 - 6)\n>      this.onObserverAdded = opts.onObserverAdded;\n>      this.onObserverRemoved = opts.onObserverRemoved;\n>      this.beforeDisableAddon = opts.beforeDisableAddon;\n>      this.observerRegistered = false;\n>  \n> -    this.observer = {\n> +    this.observe = this.observe.bind(this);\n\nYou're passing `this` to the observer service, and it'll take care of calling the `observe` method with the right `this`, so this line shouldn't be necessary.", "author": "gijskruitbosch+bugs@gmail.com", "id": 13049589, "time": "2018-02-17T11:02:02Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/5-6/", "author": "mstriemer@mozilla.com", "id": 13106701, "time": "2018-03-05T23:23:50Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/6-7/", "author": "mstriemer@mozilla.com", "id": 13106702, "time": "2018-03-05T23:23:50Z"}, {"text": "Fixed up the comments. I also added some `await ExtensionSettingsStore.initialize()` calls to ExtensionControlledPopup since it was causing some test failures.", "author": "mstriemer@mozilla.com", "id": 13106711, "time": "2018-03-05T23:29:33Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/6-7/", "author": "mstriemer@mozilla.com", "id": 13108729, "time": "2018-03-06T17:58:21Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/7-8/", "author": "mstriemer@mozilla.com", "id": 13108730, "time": "2018-03-06T17:58:21Z"}, {"text": "Can you please confirm the updated copy for this with the extension name, like in bug 1444149, Meridel.", "author": "mstriemer@mozilla.com", "id": 13114769, "time": "2018-03-08T18:37:06Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/7-8/", "author": "mstriemer@mozilla.com", "id": 13115473, "time": "2018-03-08T22:43:31Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/8-9/", "author": "mstriemer@mozilla.com", "id": 13115474, "time": "2018-03-08T22:43:31Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/8-9/", "author": "mstriemer@mozilla.com", "id": 13164316, "time": "2018-03-28T18:20:34Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/9-10/", "author": "mstriemer@mozilla.com", "id": 13164317, "time": "2018-03-28T18:20:34Z"}, {"text": "Is copy review still needed from me on this? I believe we finalized via Slack?", "author": "mwalkington@mozilla.com", "id": 13176682, "time": "2018-04-03T15:27:35Z"}, {"text": "Copy was confirmed over Slack.", "author": "mstriemer@mozilla.com", "id": 13177109, "time": "2018-04-03T16:59:31Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nhttps://reviewboard.mozilla.org/r/213730/#review239064\n\nlooks good to me with comments addressed\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:77\n(Diff revision 9)\n> +    this.descriptionId = opts.descriptionId;\n> +    this.descriptionMessageId = opts.descriptionMessageId;\n> +    this.learnMoreMessageId = opts.learnMoreMessageId;\n> +    this.learnMoreLink = opts.learnMoreLink;\n\nplease document these above\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:112\n(Diff revision 9)\n> +  observe(subject, topic, data) {\n> +    // We don't need to open the doorhanger again until the controlling add-on changes.\n> +    this.removeObserver();\n> +\n> +    // Do this work in an idle callback to avoid interfering with new tab performance tracking.\n> +    this.topWindow.requestIdleCallback(this.open.bind(this));\n\nnit: we usually use `() => this.open();` instead of `.bind`\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:128\n(Diff revision 9)\n> +  }\n> +\n> +  async addObserver(extensionId) {\n> +    await ExtensionSettingsStore.initialize();\n> +\n> +    if (!this.observerRegistered && extensionId && !this.userHasConfirmed(extensionId)) {\n\nwhen does this get called without an extensionId?\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:141\n(Diff revision 9)\n> +\n> +  async open() {\n> +    await ExtensionSettingsStore.initialize();\n> +\n> +    // Ensure that an observer event won't cause this to open again.\n> +    this.removeObserver();\n\nThis is also done in `observe()` do we need both?\n\n::: browser/components/extensions/ExtensionControlledPopup.jsm:163\n(Diff revision 9)\n> +    if (!popupnotification) {\n> +      throw new Error(`No popupnotification found for id \"${this.popupnotificationId}\"`);\n> +    }\n\nshould this be up a few lines?  seems like if something has gone haywire and this could throw, something inside `populateDescription()` will probably throw before we ever get here.\n\n::: browser/components/extensions/test/browser/browser_ext_ExtensionControlledPopup.js:72\n(Diff revision 9)\n> +  let {\n> +    Management: {global: {windowTracker}},\n> +  } = ChromeUtils.import(\"resource://gre/modules/Extension.jsm\", {});\n\nIf you're just using this for topWindow, maybe easier to just use `Services.wm.getMostRecentWindow()` directly?", "author": "aswan@mozilla.com", "id": 13178494, "time": "2018-04-04T03:50:24Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nhttps://reviewboard.mozilla.org/r/213732/#review239066\n\n::: browser/components/extensions/ext-browser.js:10\n(Diff revision 10)\n>  // This file provides some useful code for the |tabs| and |windows|\n>  // modules. All of the code is installed on |global|, which is a scope\n>  // shared among the different ext-*.js scripts.\n>  \n>  /* global EventEmitter:false, TabContext:false, WindowEventManager:false,\n> -          makeWidgetId:false, tabTracker:true, windowTracker:true */\n> +          waitForTabLoaded:false, replaceUrlInTab:false, makeWidgetId:false,\n\nYou'll probably notice this anyway when you rebase but this should be in .eslintrc instead\n\n::: browser/components/extensions/ext-browser.json:175\n(Diff revision 10)\n>    },\n>    \"urlOverrides\": {\n>      \"url\": \"chrome://browser/content/ext-url-overrides.js\",\n>      \"schema\": \"chrome://browser/content/schemas/url_overrides.json\",\n>      \"scopes\": [\"addon_parent\"],\n> +    \"events\": [\"uninstall\"],\n\nthis should actually be in the part 1 patch right?\n\n::: browser/components/extensions/ext-chrome-settings-overrides.js:50\n(Diff revision 10)\n> +XPCOMUtils.defineLazyGetter(this, \"strBundle\", function() {\n> +  return Services.strings.createBundle(\"chrome://global/locale/extensions.properties\");\n> +});\n\nthis doesn't appear to be used?", "author": "aswan@mozilla.com", "id": 13178504, "time": "2018-04-04T04:08:46Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/9-10/", "author": "mstriemer@mozilla.com", "id": 13202286, "time": "2018-04-12T21:32:48Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/10-11/", "author": "mstriemer@mozilla.com", "id": 13202287, "time": "2018-04-12T21:32:48Z"}, {"text": "Comment on attachment 8943416\nBug 1397809 - Part 1: Convert New Tab doorhanger to a generic class\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213730/diff/10-11/", "author": "mstriemer@mozilla.com", "id": 13212956, "time": "2018-04-17T16:41:11Z"}, {"text": "Comment on attachment 8943417\nBug 1397809 - Part 2: Add a doorhanger when an extension changes the homepage\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/213732/diff/11-12/", "author": "mstriemer@mozilla.com", "id": 13212957, "time": "2018-04-17T16:41:11Z"}, {"text": "Pushed by mstriemer@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/0ff9b41cb0dd\nPart 1: Convert New Tab doorhanger to a generic class r=aswan,Gijs\nhttps://hg.mozilla.org/integration/autoland/rev/8f31c3153ea0\nPart 2: Add a doorhanger when an extension changes the homepage r=aswan,Gijs", "author": "pulsebot@bots.tld", "id": 13213310, "time": "2018-04-17T18:42:24Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/0ff9b41cb0dd\nhttps://hg.mozilla.org/mozilla-central/rev/8f31c3153ea0", "author": "ccoroiu@mozilla.com", "id": 13214989, "time": "2018-04-18T10:52:24Z"}, {"text": "Verified as fixed in Latest Firefox Nightly on Windows 10x64.\nI will attach postfix videos.", "author": "vcarciu@softvision.ro", "id": 13235788, "time": "2018-04-26T15:46:17Z"}, {"text": "Created attachment 8971283\nPostfix video Homepage", "author": "vcarciu@softvision.ro", "id": 13235789, "time": "2018-04-26T15:46:52Z"}, {"text": "Created attachment 8971285\nPostfix video new tab", "author": "vcarciu@softvision.ro", "id": 13235797, "time": "2018-04-26T15:49:28Z"}, {"text": "Created attachment 8971287\nPostfix video start Firefox", "author": "vcarciu@softvision.ro", "id": 13235808, "time": "2018-04-26T15:51:44Z"}], "id": 1397809, "priority": "P3", "cc": ["alice.wyman@verizon.net", "andy+bugzilla@mckay.pub", "antoine.mozilla@gmail.com", "aswan@mozilla.com", "gijskruitbosch+bugs@gmail.com", "jaws@mozilla.com", "lgreco@mozilla.com", "mjaritz@mozilla.com", "mozilla@kaply.com", "mstriemer@mozilla.com", "mwalkington@mozilla.com", "vcarciu@softvision.ro"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1378459", "https://bugzilla.mozilla.org/show_bug.cgi?id=1414029"], "cf_tracking_thunderbird_esr60": "---", "status": "VERIFIED", "product": "Toolkit", "cf_fx_iteration": "---", "blocks": [1342584, 1438396], "qa_contact": "", "creation_time": "2017-09-07T16:32:12Z", "cf_status_firefox_esr52": "---", "component": "WebExtensions: Frontend", "assigned_to_detail": {"email": "mstriemer@mozilla.com", "id": 492360, "name": "mstriemer@mozilla.com", "real_name": "Mark Striemer [:mstriemer]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "verified", "cf_status_firefox60": "---", "target_milestone": "mozilla61", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "enhancement", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "mconca@mozilla.com", "id": 599100, "name": "mconca@mozilla.com", "real_name": "Mike Conca [:mconca] (Denver, CO, USA UTC-6)"}, "whiteboard": "", "mentors": [], "summary": "Notify user on home page when an extension has updated it", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-04-26T15:52:09Z", "assigned_to": "mstriemer@mozilla.com", "is_open": false, "cf_blocking_webextensions": "---", "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}