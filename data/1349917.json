{"cf_tracking_thunderbird_esr52": "---", "status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "dteller@mozilla.com", "mentors_detail": [], "depends_on": [1409840, 1417850, 1417852, 1417853, 1417859, 1417886, 1455547, 1459555, 1377007, 1409815, 1417851, 1417854, 1417858, 1437004, 1439855, 1444956, 1460805], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "keywords": [], "cc_detail": [{"email": "allstars.chh@mozilla.bugs", "id": 434672, "name": "allstars.chh@mozilla.bugs", "real_name": "Yoshi Huang [:allstars.chh], Inactive"}, {"email": "b56girard@gmail.com", "id": 368375, "name": "b56girard@gmail.com", "real_name": "Benoit Girard (:BenWa)"}, {"email": "bbouvier@mozilla.com", "id": 468907, "name": "bbouvier@mozilla.com", "real_name": "Benjamin Bouvier [:bbouvier]"}, {"email": "bkelly@mozilla.com", "id": 465500, "name": "bkelly@mozilla.com", "real_name": "Ben Kelly [:bkelly]"}, {"email": "clarkbw@mozilla.com", "id": 301863, "name": "clarkbw@mozilla.com", "real_name": "Bryan Clark (DevTools PM) [:clarkbw]"}, {"email": "f103119@gmail.com", "id": 598729, "name": "f103119@gmail.com", "real_name": "Chia-Hung Duan"}, {"email": "janus926@gmail.com", "id": 492058, "name": "janus926@gmail.com", "real_name": "Ting-Yu Chou [:ting] (away)"}, {"email": "jorendorff@mozilla.com", "id": 281791, "name": "jorendorff@mozilla.com", "real_name": "Jason Orendorff [:jorendorff]"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "jwalden+bmo@mit.edu", "id": 83595, "name": "jwalden+bmo@mit.edu", "real_name": "Jeff Walden [:Waldo]"}, {"email": "kvijayan@mozilla.com", "id": 436087, "name": "kvijayan@mozilla.com", "real_name": "Kannan Vijayan [:djvj]"}, {"email": "lhansen@mozilla.com", "id": 499633, "name": "lhansen@mozilla.com", "real_name": "Lars T Hansen [:lth]"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "Ms2ger@gmail.com", "id": 302720, "name": "Ms2ger@gmail.com", "real_name": ":Ms2ger (\u231a UTC+1/+2)"}, {"email": "nampnq@gmail.com", "id": 608821, "name": "nampnq@gmail.com", "real_name": ""}, {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, {"email": "nicolas.b.pierron@mozilla.com", "id": 422187, "name": "nicolas.b.pierron@mozilla.com", "real_name": "Nicolas B. Pierron [:nbp] {backlog: 36}"}, {"email": "rhys@rpowell.me", "id": 490021, "name": "rhys@rpowell.me", "real_name": "Rhys Powell"}, {"email": "shu@rfrn.org", "id": 381259, "name": "shu@rfrn.org", "real_name": "Shu-yu Guo [:shu]"}, {"email": "ssherwood89@outlook.com", "id": 501851, "name": "ssherwood89@outlook.com", "real_name": "Sam Sherwood"}, {"email": "vladan.bugzilla@gmail.com", "id": 423812, "name": "vladan.bugzilla@gmail.com", "real_name": "Vladan Djeric (:vladan)"}], "cf_last_resolved": null, "attachments": [{"creator": "dteller@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8859324}, {"creator": "dteller@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8859325}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8859326}, {"creator": "dteller@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8859327}, {"creator": "dteller@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/plain", "id": 8859329}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/plain", "id": 8859331}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8859600}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8860363}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8860518}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8861429}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8861430}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8862727}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8862758}, {"creator": "dteller@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8862818}], "votes": 4, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 39, "comments": [{"text": "Let's run an experiment to find out whether we could come up with a binary format for delivering JS source code and that would support faster parsing.", "author": "dteller@mozilla.com", "id": 12171748, "time": "2017-03-23T13:41:48Z"}, {"text": "A few random ideas that could make the binary format more efficient:\n- extracting string constants, making sure that there is a single canonical representation for them;\n- extracting all identifiers, representing them by numbers.\n\nA big question: what about toSource()?", "author": "dteller@mozilla.com", "id": 12171774, "time": "2017-03-23T13:51:12Z"}, {"text": "Out of curiosity, which aspects of parsing take the most time?  I have heard \"scope analysis\" in the past.\n\nNot to shoot this suggestion down (all speedups are great), just remember that unless there's a very close correspondence between the token streams of source JS and the binary ast format you'll effectively have *two* programming languages to support instead of one.  Almost every optimization / simplification performed by the translator will cause the introduction in the AST language of some phrase that almost, but not quite, corresponds to JS semantics (the new phrase is usually more general); people programming directly in the AST language will then be able to create programs that could not have been expressed in JS, which can be a challenge for the consumer.  Avoiding this trap while getting worthwhile speedups is probably somewhat difficult.  And the AST language has to be checked for syntax and semantics when it's parsed, too.", "author": "lhansen@mozilla.com", "id": 12171803, "time": "2017-03-23T13:54:20Z"}, {"text": "(In reply to David Teller [:Yoric] (please use \"needinfo\") from comment #0)\n> Let's run an experiment to find out whether we could come up with a binary\n> format for delivering JS source code and that would support faster parsing.\n\nI think looking at WebAssembly structure would be a good starting point, as they share similar goals, in terms of network size and in terms of getting to the interpretation/compilation quickly.\n\nIf this format is delivering JS source code, I guess we would ideally prefer to have a 1-to-1 mapping with JS.  Maybe we could limit that to a subset of JS semantic instead (no with keyword for example / statically typed)?\n\nSide note, one idea which was raised 5 years ago, was about not having a bytecode interpreter as we have today, but having an AST interpreter to avoid the BytecodeEncoder.  If we want to add a new format this might be the next question in row, should we change our interpreter too?", "author": "nicolas.b.pierron@mozilla.com", "id": 12172050, "time": "2017-03-23T15:06:06Z"}, {"text": "(In reply to Lars T Hansen [:lth] from comment #2)\n> Out of curiosity, which aspects of parsing take the most time?  I have heard\n> \"scope analysis\" in the past.\n\nGood question. I haven't seen anything that looks like scope analysis in profiles but I haven't checked closely.\n\n> Not to shoot this suggestion down (all speedups are great), just remember\n> that unless there's a very close correspondence between the token streams of\n> source JS and the binary ast format you'll effectively have *two*\n> programming languages to support instead of one.  Almost every optimization\n> / simplification performed by the translator will cause the introduction in\n> the AST language of some phrase that almost, but not quite, corresponds to\n> JS semantics (the new phrase is usually more general); people programming\n> directly in the AST language will then be able to create programs that could\n> not have been expressed in JS, which can be a challenge for the consumer. \n> Avoiding this trap while getting worthwhile speedups is probably somewhat\n> difficult.  And the AST language has to be checked for syntax and semantics\n> when it's parsed, too.\n\nGood point. For the moment, the idea is just to start experimenting, though. As suggested by nbp, I believe that a subset of JS would be interesting, rather than a superset.", "author": "dteller@mozilla.com", "id": 12172227, "time": "2017-03-23T15:51:14Z"}, {"text": "(In reply to Nicolas B. Pierron [:nbp] from comment #3)\n> (In reply to David Teller [:Yoric] (please use \"needinfo\") from comment #0)\n> > Let's run an experiment to find out whether we could come up with a binary\n> > format for delivering JS source code and that would support faster parsing.\n> \n> I think looking at WebAssembly structure would be a good starting point, as\n> they share similar goals, in terms of network size and in terms of getting\n> to the interpretation/compilation quickly.\n\nI think the wasm format of basic block trees of stack bytecode to be not comparable to the goal here: we need a surface structure. I agree with lth that it is in fact rather unclear what the net speedups are, given the required verification. Also it is simply true that anything that does not preserve 1-1 correspondence between JS text source and a binary format is a nonstarter due to standardization alone.\n\n> \n> If this format is delivering JS source code, I guess we would ideally prefer\n> to have a 1-to-1 mapping with JS.  Maybe we could limit that to a subset of\n> JS semantic instead (no with keyword for example / statically typed)?\n\nI strongly, strongly prefer not subsetting and tacking on different semantics. I will also veto any kind of typing pipe dream right now. This should be a delivery format only.\n\n> \n> Side note, one idea which was raised 5 years ago, was about not having a\n> bytecode interpreter as we have today, but having an AST interpreter to\n> avoid the BytecodeEncoder.  If we want to add a new format this might be the\n> next question in row, should we change our interpreter too?\n\nNot right now, no, that'd be too much scope creep. It might open new opportunities though, for sure.", "author": "shu@rfrn.org", "id": 12172581, "time": "2017-03-23T17:21:33Z"}, {"text": "(In reply to Lars T Hansen [:lth] from comment #2)\n> Out of curiosity, which aspects of parsing take the most time?  I have heard\n> \"scope analysis\" in the past.\n\nI'm not sure I can point to any particular component that is the obvious culprit. Tokenizing is slow, parsing + bytecode compilation as 2 passes isn't fast either. Some of the present things that are slow will remain slow, I believe, even in a binary format world: name analysis of binding names, atomizing strings, etc.\n\n> \n> Not to shoot this suggestion down (all speedups are great), just remember\n> that unless there's a very close correspondence between the token streams of\n> source JS and the binary ast format you'll effectively have *two*\n> programming languages to support instead of one.  Almost every optimization\n> / simplification performed by the translator will cause the introduction in\n> the AST language of some phrase that almost, but not quite, corresponds to\n> JS semantics (the new phrase is usually more general); people programming\n> directly in the AST language will then be able to create programs that could\n> not have been expressed in JS, which can be a challenge for the consumer. \n> Avoiding this trap while getting worthwhile speedups is probably somewhat\n> difficult.\n\nThis is an astute point. I am confident that any format that requires spec authors to spec both a text and a binary grammar is a nonstarter. 1-1 correspondence to spec grammar is a diamond-hard constraint.\n\n> And the AST language has to be checked for syntax and semantics\n> when it's parsed, too.\n\nYeah, this is the one of the things we need to think through. The verification needs to be single pass, and, ideally, understandably piggy-backed onto bytecode generation.", "author": "shu@rfrn.org", "id": 12172811, "time": "2017-03-23T18:08:15Z"}, {"text": "I was going to comment that it would probably be best if this were about producing an *algorithm* for mechanically translating the grammar productions of the ECMAScript spec into optimized notation.  That way we won't ever have two diverging languages with distinct syntaxes.\n\nBut then I thought a little bit more about it, and I'm not sure that's quite the case, at least not if we look to history.  Consider, for example, that ES3 had all manner of *NoIn grammar productions in it, that all went await in the Great Grammar Parametrization of ES6.  A sort of braindead translation of grammar productions to numeric constants for embedding in a compact binary format, would probably have quickly broken on that.  It's possible to *imagine* that that could be papered over.  But it seems doubtful an automatic translation process could ever have handled that in an anticipatory manner.\n\nWhich is a long way of saying that this, despite that I was thinking might be possible with minimal invasion into the spec process, when I first heard about this late last year -- I'm not sure this will be long-term feasible without it being an additional constraint on spec evolution.  A constraint along a very different axis from most syntax-related constraints, but a constraint nonetheless.\n\nAnyway.  Two cents, not stop energy, just that this is probably more complicated than I'd originally thought it might be.", "author": "jwalden+bmo@mit.edu", "id": 12173939, "time": "2017-03-23T23:37:50Z"}, {"text": "You're right, we need to be on the lookout for future-proofing any format we design.\n\nA few additional ideas, btw. With a carefully-crafted format, we could achieve better laziness. We could for instance have a table of symbols, with offsets to let us jump to the definition of symbols, without even having to look at the code during  a first pass. That's assuming that we can come up with a different semantics for SyntaxError for binary-formatted code.", "author": "dteller@mozilla.com", "id": 12188548, "time": "2017-03-29T16:22:33Z"}, {"text": "Created attachment 8859324\nBug 1349917 - Early experiments with a binary format\n\nReview commit: https://reviewboard.mozilla.org/r/129572/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/129572/", "author": "dteller@mozilla.com", "id": 12244668, "time": "2017-04-18T19:56:22Z"}, {"text": "Created attachment 8859325\nBug 1349917 - One-pass deserialization from binary format\n\nReview commit: https://reviewboard.mozilla.org/r/130268/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/130268/", "author": "dteller@mozilla.com", "id": 12244669, "time": "2017-04-18T19:56:22Z"}, {"text": "Created attachment 8859326\nBug 1349917 - Early implementation of a binary format\n\nReview commit: https://reviewboard.mozilla.org/r/131356/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/131356/", "author": "dteller@mozilla.com", "id": 12244670, "time": "2017-04-18T19:56:22Z"}, {"text": "Created attachment 8859327\nBug 1349917 - Misc benchmarking\n\nReview commit: https://reviewboard.mozilla.org/r/131358/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/131358/", "author": "dteller@mozilla.com", "id": 12244671, "time": "2017-04-18T19:56:22Z"}, {"text": "Created attachment 8859329\nSize change\n\nAttaching a few numbers that represent how the size currently changes by going from the source format to the binary format. Numbers are taken from Facebook's snapshot test (file names are strings of random chars, so not meaningful). This is prior to any optimization with the length of integers/variable length encoding. All numbers are taken *after* gzip.", "author": "dteller@mozilla.com", "id": 12244676, "time": "2017-04-18T19:57:57Z"}, {"text": "Created attachment 8859331\nParsing times\n\nThese are the duration numbers for parsing our snapshot of Facebook's JS code. I have attempted to measure only the creation of the AST. Code hasn't been optimized yet, in particular this checks a lots of useless headers/footers and performs a lot of useless string copies.", "author": "dteller@mozilla.com", "id": 12244689, "time": "2017-04-18T20:00:42Z"}, {"text": "Created attachment 8859600\nBug 1349917 - Optimizing the size of binary ASTs, part 1\n\nReview commit: https://reviewboard.mozilla.org/r/131596/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/131596/", "author": "dteller@mozilla.com", "id": 12247278, "time": "2017-04-19T14:51:20Z"}, {"text": "Comment on attachment 8859326\nBug 1349917 - Early implementation of a binary format\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/131356/diff/1-2/", "author": "dteller@mozilla.com", "id": 12247279, "time": "2017-04-19T14:51:20Z"}, {"text": "Created attachment 8860363\nBug 1349917 - Introducing jsbinParse and jsbinSerialize to the js shell\n\nReview commit: https://reviewboard.mozilla.org/r/132392/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/132392/", "author": "dteller@mozilla.com", "id": 12254316, "time": "2017-04-21T11:44:22Z"}, {"text": "Comment on attachment 8859600\nBug 1349917 - Optimizing the size of binary ASTs, part 1\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/131596/diff/1-2/", "author": "dteller@mozilla.com", "id": 12254317, "time": "2017-04-21T11:44:22Z"}, {"text": "Comment on attachment 8859329\nSize change\n\nWith the latest patch, I get the following results:\n\n- Facebook: * 1.05\n- Webpacked Devtools: * 0.47", "author": "dteller@mozilla.com", "id": 12254319, "time": "2017-04-21T11:45:38Z"}, {"text": "Great work Yoric.  Good to see us getting to parity on the size issue.  What are the major updates you did to get to that?", "author": "kvijayan@mozilla.com", "id": 12255603, "time": "2017-04-21T19:25:03Z"}, {"text": "Created attachment 8860518\nBug 1349917 - Extracting all strings to a strings table\n\nAll strings (string literals, identifiers, templates) are now\nextracted to a table and represented inline as a (variable-length)\nindex in the table.\n\nThe layout of the file now looks as follows:\n1. (variable length) number of strings;\n2. array of (variable length) length of strings;\n3. blob containing all strings;\n4. actual encoding of the tree.\n\nThe representation of the strings table as 1+2+3 is designed to let us\nread strings lazily should we decide to.\n\nFor this prototype, the strings are laid out before the tree in the\nhope that we can start atomizing them in the background before we have\nfinished receiving the script source.\n\nWith this encoding, we manage the following scores (gzipped sizes):\n- DevTools snapshot *0.38\n- Facebook snapshot *0.96\n\nReview commit: https://reviewboard.mozilla.org/r/132520/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/132520/", "author": "dteller@mozilla.com", "id": 12255774, "time": "2017-04-21T20:47:20Z"}, {"text": "With the latest patch, I get the following result:\n\n- Facebook: *0.96\n- Webpacked Devtools: 0.38\n\nThe list of changes is in the commit messages, but basically:\n- using variable length numbers almost everywhere;\n- removing some redundant data;\n- atoms now use null-terminated strings (with a special constant \\0\\0 for \"no atom\") instead of present/absent + length-prefixed;\n- atoms are now extracted to a table of strings and are represented inline as a variable length identifier;\n- taking advantage of variable length string identifiers to ensure that the most common strings are represented with a single byte.\n\nAlso, the table of strings is designed so that we can either read it lazily or start extracting atoms before the buffer has been received in its entirety.\n\nAnd I'm currently out of ideas for file size :)", "author": "dteller@mozilla.com", "id": 12255801, "time": "2017-04-21T20:56:01Z"}, {"text": "Nice, nice, nice.  This is awesome!  Overall I think the \"proof of concept\" aspect of this has basically complete.\n\nAs some in Canada have been known to say, \"A proof is a proof. And when you have a good proof, it's because it's proven.\"", "author": "kvijayan@mozilla.com", "id": 12256198, "time": "2017-04-22T00:10:04Z"}, {"text": "Created attachment 8861429\nBug 1349917 - Outputting parse duration\n\nReview commit: https://reviewboard.mozilla.org/r/133414/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/133414/", "author": "dteller@mozilla.com", "id": 12263377, "time": "2017-04-25T14:21:54Z"}, {"text": "Created attachment 8861430\nBug 1349917 - Pseudo-implementation of lazy parsing of functions\n\nWe don't really have the data structures to store lazy parsing data,\nso this patch just heap-allocates some data to represent the cost of\nstoring this lazy parsing data.\n\nWith this patch, we get the following speedups on Facebook for the AST creation phase\n(which takes ~700 ms from source):\n* no skipping: *0.31\n* skipping all nested functions: *0.12\n* skipping all functions: *0.04\n\nAll measures are done in optimized build.\n\nReview commit: https://reviewboard.mozilla.org/r/133416/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/133416/", "author": "dteller@mozilla.com", "id": 12263378, "time": "2017-04-25T14:21:54Z"}, {"text": "Comment on attachment 8859326\nBug 1349917 - Early implementation of a binary format\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/131356/diff/2-3/", "author": "dteller@mozilla.com", "id": 12263379, "time": "2017-04-25T14:21:54Z"}, {"text": "Comment on attachment 8859600\nBug 1349917 - Optimizing the size of binary ASTs, part 1\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/131596/diff/2-3/", "author": "dteller@mozilla.com", "id": 12263380, "time": "2017-04-25T14:21:54Z"}, {"text": "Comment on attachment 8860363\nBug 1349917 - Introducing jsbinParse and jsbinSerialize to the js shell\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/132392/diff/1-2/", "author": "dteller@mozilla.com", "id": 12263381, "time": "2017-04-25T14:21:54Z"}, {"text": "Comment on attachment 8860518\nBug 1349917 - Extracting all strings to a strings table\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/132520/diff/1-2/", "author": "dteller@mozilla.com", "id": 12263382, "time": "2017-04-25T14:21:54Z"}, {"text": "I have just implemented an approximation of lazy parsing, which cuts functions beyond a given depth.\n\nWe don't really have the data structures to store lazy parsing data, so for the sake of benchmarking, I just heap-allocates some data to represent the cost of storing this lazy parsing data.\n\nWith this patch, we get the following speedups on the (2.5Mb gzipped) of Facebook source code Facebook, measuring the AST creation phase (which takes ~500-800 ms from source):\n* no skipping: *0.31\n* skipping all nested functions: *0.12\n* skipping all functions: *0.04\n\nAll measures are done in optimized build.\n\nSo, the question is whether these gains are sufficient to proceed.", "author": "dteller@mozilla.com", "id": 12263556, "time": "2017-04-25T15:02:59Z"}, {"text": "I have done some quick experiments to see if lazy loading of strings would be useful, but it doesn't seem to affect performance on Facebook, one way or the other.", "author": "dteller@mozilla.com", "id": 12263668, "time": "2017-04-25T15:31:18Z"}, {"text": "> * no skipping: *0.31\n> * skipping all nested functions: *0.12\n> * skipping all functions: *0.04\n\nI take these numbers to mean that with no skipping, we're 3x faster.  With nested function skipping we're ~8x faster?", "author": "kvijayan@mozilla.com", "id": 12264845, "time": "2017-04-25T20:05:29Z"}, {"text": "> I take these numbers to mean that with no skipping, we're 3x faster.  With nested function skipping we're ~8x faster?\n\nExactly. On the subset we're measuring, of course.", "author": "dteller@mozilla.com", "id": 12264883, "time": "2017-04-25T20:15:12Z"}, {"text": "Created attachment 8862727\nBug 1349917 - Implementing syntaxParse\n\nThis patch introduces an option `syntaxParse` to `jsbinParse` in the\njs shell, to parse without creating the AST.\n\nThis does *not* seem to improve performance, for reasons I don't understand.\n\nReview commit: https://reviewboard.mozilla.org/r/134590/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/134590/", "author": "dteller@mozilla.com", "id": 12273681, "time": "2017-04-28T05:47:25Z"}, {"text": "Created attachment 8862758\nBug 1349917 - Caching atoms\n\nThis change ensures that we do not reparse atoms at each instance. This doesn't seem to really affect performance.\n\nReview commit: https://reviewboard.mozilla.org/r/134628/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/134628/", "author": "dteller@mozilla.com", "id": 12274022, "time": "2017-04-28T08:57:23Z"}, {"text": "I realized that there was still debugging code on the hot path, so I removed it, improving a bit further the speed. I have also implemented a pseudo syntax-parse, which doesn't allocate anything.\n\nFinally, I have also attempted to optimize parsing of atoms, which doesn't seem to have any measurable effect.\n\nUpdated numbers vs syntax parse/vs full parse, using the usual Facebook snapshot:\n\n* no skipping: *0.35/*0.29;\n* skipping all nested functions: *0.14/*0.12;\n* skipping all functions: *0.08/*0.06\n\n\nAnd the same without allocating nodes:\n\n* no skipping: *0.28/*0.23;\n* skipping all nested functions: *0.12/*0.10;\n* skipping all functions: *0.08/*0.06\n\n\nI'm a bit disappointed that removing allocations doesn't improve performance all that much, but profiling seems to confirm that memory allocations have little to no impact on the total runtime. This might be an artifact of the fact that I'm performing each benchmark with a fresh jsshell.", "author": "dteller@mozilla.com", "id": 12274147, "time": "2017-04-28T10:00:41Z"}, {"text": "By the way, there are several performance gains that we haven't discussed and that I cannot measure for the time being:\n\n* as this is a binary format, we don't need to transcode first;\n* this format is designed so that we can start parsing without having received the entire data;\n* should we decide to head in this direction, we could possibly hand the parsing of specific subtrees to worker threads.", "author": "dteller@mozilla.com", "id": 12274181, "time": "2017-04-28T10:09:22Z"}, {"text": "Created attachment 8862818\nBug 1349917 - Measuring globalBody duration\n\nReview commit: https://reviewboard.mozilla.org/r/134740/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/134740/", "author": "dteller@mozilla.com", "id": 12274385, "time": "2017-04-28T12:11:20Z"}], "id": 1349917, "priority": "P2", "cc": ["allstars.chh@mozilla.bugs", "b56girard@gmail.com", "bbouvier@mozilla.com", "bkelly@mozilla.com", "clarkbw@mozilla.com", "f103119@gmail.com", "janus926@gmail.com", "jorendorff@mozilla.com", "jryans@gmail.com", "jwalden+bmo@mit.edu", "kvijayan@mozilla.com", "lhansen@mozilla.com", "mcastelluccio@mozilla.com", "Ms2ger@gmail.com", "nampnq@gmail.com", "nfitzgerald@mozilla.com", "nicolas.b.pierron@mozilla.com", "rhys@rpowell.me", "shu@rfrn.org", "ssherwood89@outlook.com", "vladan.bugzilla@gmail.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1420263"], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [], "qa_contact": "", "creation_time": "2017-03-23T13:41:48Z", "cf_status_firefox_esr52": "---", "component": "JavaScript Engine", "assigned_to_detail": {"email": "dteller@mozilla.com", "id": 181388, "name": "dteller@mozilla.com", "real_name": "David Teller [:Yoric] (please use \"needinfo\")"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "dteller@mozilla.com", "id": 181388, "name": "dteller@mozilla.com", "real_name": "David Teller [:Yoric] (please use \"needinfo\")"}, "whiteboard": "", "mentors": [], "summary": "Experiment with a binary AST format", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-11T06:03:06Z", "assigned_to": "dteller@mozilla.com", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "kvijayan@mozilla.com, shu@mozilla.com"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "dteller@mozilla.com"}], "who": "dteller@mozilla.com", "when": "2017-03-23T13:42:16Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "lhansen@mozilla.com"}], "who": "lhansen@mozilla.com", "when": "2017-03-23T13:42:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nicolas.b.pierron@mozilla.com"}], "who": "nicolas.b.pierron@mozilla.com", "when": "2017-03-23T15:06:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bbouvier@mozilla.com"}], "who": "bbouvier@mozilla.com", "when": "2017-03-23T15:15:07Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jwalden+bmo@mit.edu"}], "who": "jwalden+bmo@mit.edu", "when": "2017-03-23T23:37:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bkelly@mozilla.com"}], "who": "bkelly@mozilla.com", "when": "2017-03-24T16:03:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfitzgerald@mozilla.com"}], "who": "nfitzgerald@mozilla.com", "when": "2017-04-12T17:33:41Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "b56girard@gmail.com, vladan.bugzilla@gmail.com"}], "who": "vladan.bugzilla@gmail.com", "when": "2017-04-18T21:58:28Z"}, {"changes": [{"field_name": "attachments.description", "removed": "Now benchmarking", "attachment_id": 8859326, "added": "Bug 1349917 - Early implementation of a binary format"}], "who": "dteller@mozilla.com", "when": "2017-04-19T14:51:20Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8859324, "added": "1"}], "who": "dteller@mozilla.com", "when": "2017-04-19T14:51:23Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8859325, "added": "1"}], "who": "dteller@mozilla.com", "when": "2017-04-19T14:51:26Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8859327, "added": "1"}], "who": "dteller@mozilla.com", "when": "2017-04-19T14:51:28Z"}, {"changes": [{"field_name": "attachments.description", "removed": "Bug 1349917 - Adding jsbinCreate to the jsshell", "attachment_id": 8859600, "added": "Bug 1349917 - Optimizing the size of binary ASTs, part 1"}], "who": "dteller@mozilla.com", "when": "2017-04-21T11:44:22Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8859329, "added": "1"}], "who": "dteller@mozilla.com", "when": "2017-04-21T11:45:38Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1377007"}], "who": "dteller@mozilla.com", "when": "2017-06-29T00:46:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "clarkbw@mozilla.com"}], "who": "clarkbw@mozilla.com", "when": "2017-07-26T19:37:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2017-08-03T23:52:14Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "rhys@rpowell.me"}], "who": "rhys@rpowell.me", "when": "2017-08-19T04:19:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2017-08-21T20:00:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "allstars.chh@mozilla.com"}], "who": "allstars.chh@mozilla.bugs", "when": "2017-09-01T02:49:03Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bruant.d@gmail.com"}], "who": "bruant.d@gmail.com", "when": "2017-09-15T12:57:19Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1409815"}], "who": "dteller@mozilla.com", "when": "2017-10-18T19:17:20Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1409840"}], "who": "dteller@mozilla.com", "when": "2017-10-18T19:17:58Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1417850"}], "who": "dteller@mozilla.com", "when": "2017-11-16T10:42:35Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1417851"}], "who": "dteller@mozilla.com", "when": "2017-11-16T10:44:53Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1417852"}], "who": "dteller@mozilla.com", "when": "2017-11-16T10:45:37Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1417853"}], "who": "dteller@mozilla.com", "when": "2017-11-16T10:46:15Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1417854"}], "who": "dteller@mozilla.com", "when": "2017-11-16T10:47:02Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1417858"}], "who": "dteller@mozilla.com", "when": "2017-11-16T10:53:27Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1417859"}], "who": "dteller@mozilla.com", "when": "2017-11-16T10:53:59Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1417886"}], "who": "dteller@mozilla.com", "when": "2017-11-16T12:54:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cduan@mozilla.com"}], "who": "f103119@gmail.com", "when": "2017-11-17T06:14:01Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1420263"}], "who": "kvijayan@mozilla.com", "when": "2017-11-23T19:32:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nampnq@gmail.com"}], "who": "nampnq@gmail.com", "when": "2017-12-26T06:06:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "janus926@gmail.com"}], "who": "janus926@gmail.com", "when": "2018-01-15T01:34:48Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Ms2ger@gmail.com"}], "who": "Ms2ger@gmail.com", "when": "2018-01-30T16:09:57Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1439855"}], "who": "dteller@mozilla.com", "when": "2018-02-21T10:58:56Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1437004"}], "who": "dteller@mozilla.com", "when": "2018-02-22T13:16:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ssherwood89@outlook.com"}], "who": "ssherwood89@outlook.com", "when": "2018-02-23T11:14:36Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P1"}, {"removed": "", "field_name": "cc", "added": "jorendorff@mozilla.com"}], "who": "jorendorff@mozilla.com", "when": "2018-02-26T23:29:23Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1444956"}], "who": "dteller@mozilla.com", "when": "2018-03-12T20:38:33Z"}, {"changes": [{"removed": "bruant.d@gmail.com", "field_name": "cc", "added": ""}], "who": "bruant.d@gmail.com", "when": "2018-04-08T15:08:25Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1455547"}], "who": "dteller@mozilla.com", "when": "2018-04-20T08:10:02Z"}, {"changes": [{"removed": "P1", "field_name": "priority", "added": "P2"}], "who": "jorendorff@mozilla.com", "when": "2018-04-26T15:06:25Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1459555"}], "who": "vladan.bugzilla@gmail.com", "when": "2018-05-07T08:57:23Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1460805"}], "who": "vladan.bugzilla@gmail.com", "when": "2018-05-11T06:03:06Z"}], "resolution": "", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}