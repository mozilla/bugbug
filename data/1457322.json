{"cf_tracking_firefox60": "---", "cf_tracking_firefox61": "+", "classification": "Components", "creator": "shobson@mozilla.com", "cc": ["bwerth@mozilla.com", "jlaster@mozilla.com", "matt.woodrow@gmail.com", "mcastelluccio@mozilla.com", "pbrosset@mozilla.com", "ryanvm@gmail.com"], "depends_on": [], "creation_time": "2018-04-26T22:29:54Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox59": "unaffected", "keywords": ["regression"], "summary": "Moving mouse vertically off inspector results in blue page", "cf_last_resolved": "2018-05-22T02:39:28Z", "attachments": [{"creator": "shobson@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/png", "id": 8971423}, {"creator": "pbrosset@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/gif", "id": 8975426}], "assigned_to_detail": {"email": "bwerth@mozilla.com", "id": 571010, "name": "bwerth@mozilla.com", "real_name": "Brad Werth [:bradwerth]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "comments": [{"text": "Created attachment 8971423\nScreen Shot 2018-04-26 at 15.29.05.png\n\nWith the DOM Inspector open, if I move my mouse from the inspector panel up onto the page, it highlights the last element hovered and paints it blue. Since this is the HTML element the result is a blue page.\n\nIt makes it hard to see the page and I've usually moved my mouse up to try to interact with the page.\n\nIt took me a while to figure out what was happening and how to avoid it.", "author": "shobson@mozilla.com", "id": 13236989, "time": "2018-04-26T22:29:54Z"}, {"text": "Thanks for filing. This is a regression that we need to fix now as it can be very annoying to get rid of the highlighter.", "author": "pbrosset@mozilla.com", "id": 13237629, "time": "2018-04-27T08:31:57Z"}, {"text": "I could swear I had seen the problem earlier this week too, but now I can't reproduce it any longer.\n\nIf you still see the problem locally, could you please try to provide a list of detailed steps to reproduce?\nMaybe it only happens when you move your mouse a certain way? Maybe you need to wait for a little bit? Stuff\n\nAlso, it would really help if you could check which exact version this happens on. I'm wondering if I may have a slightly more recent 61 than you, and maybe the problem has gone away? (crossed fingers).\nIs this on macOS?\n\nThanks Stephanie!", "author": "pbrosset@mozilla.com", "id": 13237638, "time": "2018-04-27T08:40:59Z"}, {"text": "Happening for me on 61.0a1.\n\nSteps to reproduce:\n1) open this page: https://www.mozilla.org/zh-TW/firefox/whatsnew/\n- I suggest this one because it has a really long HTML element\n2) open the element inspector\n3) use the inspector to inspect the Firefox logo\n- the goal here is to have the bright blue selection line on a small element that does not take up the entire page\n- make sure your browser window is big enough that you can see the <html> element inside the inspector\n4) move the mouse up to the website\n\nI don't get it if I go unnaturally fast.\n\nI generally get it going at what I consider a normal pace (it happened a lot to me during regular use yesterday). But not always.\n\nI can trigger it consistently by going slowly. If you're trying that you can intentionally hover (but not click) the HTML element before moving the mouse off the inspector.", "author": "shobson@mozilla.com", "id": 13238686, "time": "2018-04-27T16:56:08Z"}, {"text": "Oh yes, on MacOS.", "author": "shobson@mozilla.com", "id": 13238688, "time": "2018-04-27T16:56:37Z"}, {"text": "Thanks for the information Stephanie. I'm running mozregression at the moment to find out what caused this issue. I'll update the bug once I know more.", "author": "pbrosset@mozilla.com", "id": 13242974, "time": "2018-04-30T12:47:15Z"}, {"text": "Here's what I got:\n\nLast good revision: c783649db622b222fbe2477998006cb3d20a1ff9\nFirst bad revision: 229be2ad5ee3a60ddc31568792725bee2a6564dc\nPushlog: https://hg.mozilla.org/integration/autoland/pushloghtml?fromchange=c783649db622b222fbe2477998006cb3d20a1ff9&tochange=229be2ad5ee3a60ddc31568792725bee2a6564dc\n\nwhich points to bug 1453668. I'll need to verify locally that that's correct.", "author": "pbrosset@mozilla.com", "id": 13243028, "time": "2018-04-30T13:15:13Z"}, {"text": "So far I'm clueless as to what could be the root cause for this.\nLooking at the DevTools code, everything seems to be functioning properly. The mouseout event is triggered, the request to hide the highlighter is sent and handled, and then we attempt to add the \"hidden\" attribute to the SVG element of the highlighter (which should hide it).\n\nI was able to confirm that this code runs: https://searchfox.org/mozilla-central/rev/08df4e6e11284186d477d7e5b0ae48483ecc979c/devtools/server/actors/highlighters/box-model.js#393-395\nbut that the highlighter does not get hidden.\n\nOddly, this does not seem to happen when the tested element is small, in the page. If it gets taller (like more than 90% of the viewport's height) then the problem starts to occur.", "author": "pbrosset@mozilla.com", "id": 13243185, "time": "2018-04-30T14:22:08Z"}, {"text": "I'll try to figure this out.", "author": "bwerth@mozilla.com", "id": 13243808, "time": "2018-04-30T17:46:21Z"}, {"text": "I can reproduce on macOS. For me, the easiest way to reproduce it is these steps:\n\n1) select one item in the Inspector\n2) hover over another item in the inspector\n3) slowly move the cursor to the LEFT off the window. If the highlighter remains on (it doesn't for me on every element), then it will stay on as you move the cursor back in the window in the content area, and stay that way until you trigger a cursor change by moving the cursor over a link.\n\nSo far, on the https://www.mozilla.org/zh-TW/firefox/whatsnew/ page, I can get this to happen on the html element, the body element, and the first div element (with id \"outer-wrapper\"). Once I get to children of the div, the highlighter consistently disappears as I move the cursor to the left. What those elements have in common is a small indentation level (either none or one step). On other sites, I can get to happen on more deeply-nested elements. I'll keep investigating.", "author": "bwerth@mozilla.com", "id": 13259645, "time": "2018-05-07T14:35:55Z"}, {"text": "Hmmm... I can reproduce in release Nightly, but not in my local Nightly build. That makes it hard to determine causes and to test fixes. I'll try debugging the JS stack/behavior on release Nightly.", "author": "bwerth@mozilla.com", "id": 13269709, "time": "2018-05-11T00:24:48Z"}, {"text": "(In reply to Patrick Brosset <:pbro> from comment #7)\n> I was able to confirm that this code runs:\n> https://searchfox.org/mozilla-central/rev/\n> 08df4e6e11284186d477d7e5b0ae48483ecc979c/devtools/server/actors/highlighters/\n> box-model.js#393-395\n> but that the highlighter does not get hidden.\n\nI can't replicate this. As I debug it, it seems that the packet is prepared, sent(?), but never received and this code is NOT called in the failure case. I don't know a lot about the transport protocol, but I'm trying to figure out the difference in the code paths between my local Nightly (which works correctly and hides the box model) and my release Nightly (which exhibits the failure).", "author": "bwerth@mozilla.com", "id": 13271662, "time": "2018-05-11T20:00:21Z"}, {"text": "(In reply to Brad Werth [:bradwerth] from comment #11)\n> I can't replicate this. As I debug it, it seems that the packet is prepared,\n> sent(?), but never received and this code is NOT called in the failure case.\n> I don't know a lot about the transport protocol, but I'm trying to figure\n> out the difference in the code paths between my local Nightly (which works\n> correctly and hides the box model) and my release Nightly (which exhibits\n> the failure).\n\nI've traced as far as https://searchfox.org/mozilla-central/source/devtools/shared/transport/transport.js#775 where it appears that a packet { to : \"server1.conn0.child1/highlighter27\", type : \"hideBoxModel\" } is passed to the message manager, but I can't step into the sendAsyncMessage() function to see what happens to it.\n\nJason, I'm needinfo-ing you for insight about two things:\n1) Is there a way for the debugger to step into the workings of the message manager sendAsyncMessage() function?\n2) What are the best practices for debugging situations where a message is sent from a client actor but not received by the server actor?", "author": "bwerth@mozilla.com", "id": 13271974, "time": "2018-05-11T22:35:34Z"}, {"text": "Hi, sorry I'm not sure. I would usually set breakpoints in those cases and then track the flow that way.\n\n>  not received by the server actor?\n\nthat is difficult, it is hard to pause in the server. I usually just do `dump` statements", "author": "jlaster@mozilla.com", "id": 13271984, "time": "2018-05-11T22:38:20Z"}, {"text": "Created attachment 8975426\nbox-model-trying-to-hide.gif\n\n(In reply to Brad Werth [:bradwerth] from comment #11)\n> (In reply to Patrick Brosset <:pbro> from comment #7)\n> > I was able to confirm that this code runs:\n> > https://searchfox.org/mozilla-central/rev/\n> > 08df4e6e11284186d477d7e5b0ae48483ecc979c/devtools/server/actors/highlighters/\n> > box-model.js#393-395\n> > but that the highlighter does not get hidden.\n> \n> I can't replicate this. As I debug it, it seems that the packet is prepared,\n> sent(?), but never received and this code is NOT called in the failure case.\nI can confirm that for me, locally, this is *not* a protocol problem. I added a simple console.log(\"hiding\") to the _hideBoxModel method of the box-model highlighter class and I can see it in the browser console (ctrl+shift+J) in the failure cases too.", "author": "pbrosset@mozilla.com", "id": 13275185, "time": "2018-05-14T09:36:36Z"}, {"text": "(In reply to Patrick Brosset <:pbro> from comment #14)\n> I can confirm that for me, locally, this is *not* a protocol problem. I\n> added a simple console.log(\"hiding\") to the _hideBoxModel method of the\n> box-model highlighter class and I can see it in the browser console\n> (ctrl+shift+J) in the failure cases too.\n\nI see. I realized that I was debugging release Nightly which had e10s on, so I wasn't hitting my server breakpoints. Not a protocol problem. I'll keep digging.", "author": "bwerth@mozilla.com", "id": 13275813, "time": "2018-05-14T14:26:33Z"}, {"text": "Now that I'm running release Nightly with e10s off, I can't replicate the problem any more. I'll turn e10s back on and see if I can hit a server breakpoint to confirm the hideBoxModel message is being received.", "author": "bwerth@mozilla.com", "id": 13276149, "time": "2018-05-14T16:26:47Z"}, {"text": "I've confirmed that unrolling the working part of Bug 1453668 resolves this issue. Needinfo-ing Matt on this question:\n\nMatt, is the change made in Bug 1453668 to ProcessFrame (now ProcessFrameInternal) to constrain to currentFrame->IsFixedPosContainingBlock() somehow over-constraining? In this case, an SVG element is being given the \"hidden\" attribute, and that is getting properly translated into applying display:none to the element, but the frame region is not being included in the ProcessFrameInternal collection of dirty rects when we need it to be included.\n\nI'm having trouble breakpointing the ProcessFrameInternal method at the point where this frame is being considered, but I assume that the code is going through nsStyleDisplay::IsFixedPosContainingBlock and hitting https://searchfox.org/mozilla-central/source/layout/style/nsStyleStructInlines.h#190. If that's the case, then it's not allowing through any frames where nsSVGUtils::IsInSVGTextSubtree() returns true. I'm not sure what the rationale is for that exclusion. One possible fix for this problem would be for me to make a parameterized version of nsStyleDisplay::IsFixedPosContainingBlock that ignores this SVG check. I'll try that shortly.\n\nAll insights appreciated.", "author": "bwerth@mozilla.com", "id": 13277224, "time": "2018-05-14T21:47:43Z"}, {"text": "Thanks for looking into this Brad!\n\nNormally for retained display lists, whenever a frame changes, we rebuild the display items for that frame, as long as all items infront and behind it.\n\nHowever, when we have nested lists (like a transform having a sub-list of children), we only really need to build items infront/behind the modified frame within the list the modified frame is in.\n\nProcessFrame iterates up the frame tree looking for a frame that would create a nested list, and if it finds one, then sets things up so we only build the modified area for that subtree of the frame tree.\n\nThe change in bug 1453668 was changing the condition we use to identify these container frames. Previously we required them to be a stacking context (like transform/opacity), but now we also require them to be a containing block for fixed:position (which including being a containing block for everything). I am unsure why this affect SVG text.\n\nDisplay:none usually results in us deleting the nsIFrame*, and calling nsIFrame::RemoveDisplayItemDataForDeletion(). That should clear out any dangling references to the nsIFrame* on the display items created for that frame, and result in nsDisplayItem::HasDeletedFrame() returning true.\n\nThe next paint won't have the frame in the set we iterate through in ProcessFrame (since it's deleted), and we won't add any area for it to the rebuild area. If this was the only change, then we expect to have no frame, and compute an empty area.\n\nAfter that, we should call RetainedDisplayListBuilder::MergeDisplayLists, which should call into [1] (either from ProcessItemFromNewList, or Finalize), which is where we decide *not* to include the display items from the deleted frame into the new list.\n\nI also noticed [2], which is called from ProcessFrame and might prove relevant if the above turns out not to be the situation here.\n\n\n[1] https://searchfox.org/mozilla-central/source/layout/painting/RetainedDisplayListBuilder.cpp#364\n[2] https://searchfox.org/mozilla-central/source/layout/base/nsLayoutUtils.cpp#2952", "author": "matt.woodrow@gmail.com", "id": 13277625, "time": "2018-05-15T01:48:13Z"}, {"text": "(In reply to Matt Woodrow (:mattwoodrow) from comment #18)\n\n> Display:none usually results in us deleting the nsIFrame*, and calling\n> nsIFrame::RemoveDisplayItemDataForDeletion(). That should clear out any\n> dangling references to the nsIFrame* on the display items created for that\n> frame, and result in nsDisplayItem::HasDeletedFrame() returning true.\n> \n> The next paint won't have the frame in the set we iterate through in\n> ProcessFrame (since it's deleted), and we won't add any area for it to the\n> rebuild area. If this was the only change, then we expect to have no frame,\n> and compute an empty area.\n\nThanks so much for this info. I've confirmed that nsIFrame::RemoveDisplayItemDataForDeletion() is being called for the affected frame in PresShell::NotifyDestroyingFrame(), but then noticed the code hitting this line later in that function: https://searchfox.org/mozilla-central/source/layout/base/PresShell.cpp#2160. This surprised me. If a frame is destroyed, then we remove it from the mFramesToDirty list? That makes sense because the object is dying, but it doesn't make sense in that we still care about the region occupied by that frame. To test this, I manipulated my debugger to skip over the mFramesToDirty.RemoveEntry(aFrame) line for all the SVG frames affected by the display:none, and that resulted in correct behavior!\n\nSo, how does the retained display list deal with a destroyed frame whose area needs to be dirtied and repainted? This seems like a common case that I presume is handled somehow. Is there something about this SVG frame that prevents it from being correctly handled?", "author": "bwerth@mozilla.com", "id": 13279331, "time": "2018-05-15T17:51:30Z"}, {"text": "Interesting! mFramesToDirty is the set of frames that we want to run Reflow for, and isn't directly related to display lists at all. I would guess that running reflow on them again results in them being put back into the set of frames that we use for ProcessFrame.\n\nNote that doing this will result in the frame being accessed after it's deleted, so the contents on the nsIFrame* will likely be the poison value, or possibly belong to a new frame allocated into the same memory.\n\nFor dirtying and repainting, there's two things that need to happen:\n\n* We need to remove the display items that no longer have frames from the display list. RemoveDisplayItemDataForDeletion() should disown all display items for the deleted frame, and MergeDisplayLists should handle detecting those and omitting them.\n\n* We need to notify the code that manages the retained pixel buffers (FrameLayerBuilder) to tell it to dirty pixels covered by the deleted frame. We do this synchronously during deletion, to prevent us getting confused if the frame memory gets reused (common with the arena). RemoveDisplayItemDataForDeletion calls  FrameLayerBuilder::RemoveFrameFromLayerManager, which iterates its internal state about what that frame painted, and dirties pixels covered by it.\n\nEnabling the PrintDisplayList calls in RetainedDisplayListBuilder::AttemptPartialUpdate can be useful to verify the display list building part. I'd lean towards that (given the regression range), but can't rule out downstream effects.", "author": "matt.woodrow@gmail.com", "id": 13279819, "time": "2018-05-15T20:18:50Z"}, {"text": "Brad, do you have what you need to move forward with this now?", "author": "ryanvm@gmail.com", "id": 13294505, "time": "2018-05-21T16:53:04Z"}, {"text": "Does this still reproduce for anyone? I can't reproduce it, and I now suspect that this is a duplicate of bug 1461231.", "author": "matt.woodrow@gmail.com", "id": 13295230, "time": "2018-05-21T21:57:31Z"}, {"text": "It does not reproduce anymore. Judging by the work done in bug 1461231, which is solving the problem noted in comment 19, this is certainly a duplicate. And that bug's patch has been uplifted. Wonderful!\n\n*** This bug has been marked as a duplicate of bug 1461231 ***", "author": "bwerth@mozilla.com", "id": 13295601, "time": "2018-05-22T02:39:28Z"}, {"text": "Great news! Thanks everyone!", "author": "pbrosset@mozilla.com", "id": 13295779, "time": "2018-05-22T07:07:31Z"}], "id": 1457322, "priority": "P2", "mentors_detail": [], "comment_count": 25, "version": "61 Branch", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox62": "+", "status": "RESOLVED", "product": "DevTools", "cf_fx_iteration": "---", "blocks": [1461470, 1453668], "qa_contact": "", "see_also": [], "cf_status_firefox_esr52": "unaffected", "component": "Inspector", "votes": 0, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "fixed", "cf_status_firefox60": "unaffected", "target_milestone": "---", "is_cc_accessible": true, "groups": [], "url": "", "creator_detail": {"email": "shobson@mozilla.com", "id": 260861, "name": "shobson@mozilla.com", "real_name": "Stephanie Hobson [:shobson]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bwerth@mozilla.com", "id": 571010, "name": "bwerth@mozilla.com", "real_name": "Brad Werth [:bradwerth]"}, {"email": "jlaster@mozilla.com", "id": 555817, "name": "jlaster@mozilla.com", "real_name": "Jason Laster [:jlast]"}, {"email": "matt.woodrow@gmail.com", "id": 380838, "name": "matt.woodrow@gmail.com", "real_name": "Matt Woodrow (:mattwoodrow)"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "pbrosset@mozilla.com", "id": 478661, "name": "pbrosset@mozilla.com", "real_name": "Patrick Brosset <:pbro>"}, {"email": "ryanvm@gmail.com", "id": 75935, "name": "ryanvm@gmail.com", "real_name": "Ryan VanderMeulen [:RyanVM]"}], "alias": null, "dupe_of": 1461231, "flags": [], "last_change_time": "2018-06-13T17:27:05Z", "cf_status_firefox_esr60": "unaffected", "assigned_to": "bwerth@mozilla.com", "is_open": false, "resolution": "DUPLICATE", "op_sys": "Unspecified", "cf_fx_points": "---", "history": [{"changes": [{"removed": "--", "field_name": "priority", "added": "P2"}, {"removed": "", "field_name": "cc", "added": "pbrosset@mozilla.com"}, {"removed": "Developer Tools", "field_name": "component", "added": "Developer Tools: Inspector"}], "who": "pbrosset@mozilla.com", "when": "2018-04-27T08:31:57Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(shobson@mozilla.com)"}], "who": "pbrosset@mozilla.com", "when": "2018-04-27T08:40:59Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "regression"}, {"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2018-04-27T13:34:30Z"}, {"changes": [{"removed": "needinfo?(shobson@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "shobson@mozilla.com", "when": "2018-04-27T16:56:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bwerth@mozilla.com"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "bwerth@mozilla.com"}], "who": "bwerth@mozilla.com", "when": "2018-04-30T17:46:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ryanvm@gmail.com"}, {"removed": "", "field_name": "blocks", "added": "1453668"}, {"removed": "---", "field_name": "cf_status_firefox_esr52", "added": "unaffected"}, {"removed": "---", "field_name": "cf_status_firefox_esr60", "added": "unaffected"}, {"removed": "---", "field_name": "cf_status_firefox59", "added": "unaffected"}, {"removed": "---", "field_name": "cf_status_firefox60", "added": "unaffected"}, {"removed": "---", "field_name": "cf_tracking_firefox61", "added": "+"}], "who": "ryanvm@gmail.com", "when": "2018-05-01T15:27:56Z"}, {"changes": [{"removed": "---", "field_name": "cf_tracking_firefox62", "added": "+"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "affected"}], "who": "ryanvm@gmail.com", "when": "2018-05-08T01:42:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jlaster@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jlaster@mozilla.com)"}], "who": "bwerth@mozilla.com", "when": "2018-05-11T22:35:34Z"}, {"changes": [{"removed": "needinfo?(jlaster@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jlaster@mozilla.com", "when": "2018-05-11T22:38:20Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "matt.woodrow@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(matt.woodrow@gmail.com)"}], "who": "bwerth@mozilla.com", "when": "2018-05-14T21:47:43Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1461470"}], "who": "ryanvm@gmail.com", "when": "2018-05-15T00:42:37Z"}, {"changes": [{"removed": "needinfo?(matt.woodrow@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "matt.woodrow@gmail.com", "when": "2018-05-15T01:48:13Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(matt.woodrow@gmail.com)"}], "who": "bwerth@mozilla.com", "when": "2018-05-15T17:51:30Z"}, {"changes": [{"removed": "needinfo?(matt.woodrow@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "matt.woodrow@gmail.com", "when": "2018-05-15T20:18:50Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bwerth@mozilla.com)"}], "who": "ryanvm@gmail.com", "when": "2018-05-21T16:53:04Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "DUPLICATE"}, {"removed": "needinfo?(bwerth@mozilla.com)", "field_name": "flagtypes.name", "added": ""}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-22 02:39:28"}], "who": "bwerth@mozilla.com", "when": "2018-05-22T02:39:28Z"}, {"changes": [{"removed": "affected", "field_name": "cf_status_firefox61", "added": "fixed"}, {"removed": "affected", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "ryanvm@gmail.com", "when": "2018-05-22T03:35:27Z"}, {"changes": [{"removed": "Firefox", "field_name": "product", "added": "DevTools"}], "who": "automation@bmo.tld", "when": "2018-06-13T17:27:05Z"}]}