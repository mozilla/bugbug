{"cf_tracking_thunderbird_esr52": "---", "status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "nfroyd@mozilla.com", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "x86_64", "keywords": [], "cc_detail": [{"email": "bkelly@mozilla.com", "id": 465500, "name": "bkelly@mozilla.com", "real_name": "Ben Kelly [:bkelly]"}, {"email": "erahm@mozilla.com", "id": 496127, "name": "erahm@mozilla.com", "real_name": "Eric Rahm [:erahm] (please no mozreview requests)"}, {"email": "jld@mozilla.com", "id": 462836, "name": "jld@mozilla.com", "real_name": "Jed Davis [:jld] (\u23f0UTC-6)"}, {"email": "n.nethercote@gmail.com", "id": 334849, "name": "n.nethercote@gmail.com", "real_name": "Nicholas Nethercote [:njn]"}], "cf_last_resolved": null, "attachments": [], "votes": 3, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 2, "comments": [{"text": "Our current PLDHashTable setup requires that all items stored inherit from PLDHashEntryHdr:\n\nstruct PLDHashEntryHdr {\n  // PLDHashNumber is a uint32_t.\n  PLDHashNumber mKeyHash;\n};\n\nclass MyType : public PLDHashEntryHdr {\n  // Data members, etc.\n};\n\nPLDHashEntryHdr::mKeyHash is used to cache the computed hash value of the entry, so we aren't rehashing entries on every lookup/add/etc.\n\nBecause of structure layout requirements on 64-bit platforms, the data members of MyType will typically start at offset 8:\n\nMyType, offset 0: mKeyHash\nMyType, offset 4: padding required by alignment\nMyType, offset 8: first data member of MyType\nMyType, offset N: ...\n\nThe padding at offset 4 is dead, unused space.  For a lot of our hashtables:\n\nhttps://searchfox.org/mozilla-central/search?q=nsTHashtable%3C&regexp=true&path=\n\n(nsTHashtable is backed by PLDHashTable; it's harder to look at all the PLDHashTables because it's not immediately obvious what type they're storing.  Templated C++ hashtables are more common than PLDHashTables, anyway.)\n\nit's extremely common to have a MyType that looks like the moral equivalent of:\n\ntemplate<typename T>\nclass MyType : public PLDHashEntryHdr {\n  T* mPtr;\n};\n\nwhich means that 25% of MyType's bytes are taken up by padding.  (mPtr can also be a smart pointer type, which is the same size as a pointer.)  That is, 25% of the bytes allocated by PLDHashTable to store MyType entries are taken up by padding.  String keys are also common, the moral equivalent of:\n\ntemplate<typename Char>\nclass MyType : public PLDHashEntryHdr {\n  nsTString<Char> mString;\n}\n\nnsTString<Char> is 16 bytes, so we're wasting 4/24 bytes, or ~16%.\n\nFor other templated hashtables:\n\nhttps://searchfox.org/mozilla-central/search?q=ns..%2BHashtable%3C&case=false&regexp=true&path=\n\nthe space waste is less noticeable, but it's probably ~5-10%.\n\nWe can do better than this.\n\nThe usual way this is handled (Rust does this, for instance) is to allocate one giant block of memory for hashtable storage, but internally store the entries and the cached hashes in separate regions of the block:\n\n[ entry1, entry2, ..., entryN, hash1, hash2, ..., hashN ]\n\n(Putting the hashes after the entries means that you--almost certainly--don't have to worry about alignment, since the alignment requirements + sizes of the entries means that the memory after entryN is already correctly aligned for the cached hashes, whereas the reverse is not necessarily true.)\n\nFor PLDHashTable, we'd remove mKeyHash from PLDHashEntryHdr (making everything not inherit from PLDHashEntryHdr would be another way to do this, but it's probably simpler to do that in a separate bug), and extensively modify PLDHashTable to understand this new layout for its internal storage.\n\nSplitting the cached hash from the entry means that when we find a hash that matches, the entry is almost certainly not in the same cache line as the hash itself, so we're going to take a cache miss to examine the entry and see if it matches.  Whether this is noticeable is up for debate, since the tighter packing of cached hashes and entries has its own cache-related benefits.\n\nI am slightly worried about whether making the internal logic for combing through entries + hashes more expensive will be worth it; the hashtable code is fairly sensitive to small details (see PLDHashTable::SearchTable).  We may want to *not* do this change for 32-bit platforms, as they don't need it, though that would significantly complicate the code.\n\n(A really wild idea would be to \"butterfly\" the entry layouts:\n\n[entry1, hash1, hash2, entry2, entry3, hash3, hash4, ...]\n\nI am not sure that all the necessary logic for handling that can be implemented efficiently, though.)", "author": "nfroyd@mozilla.com", "id": 13268886, "time": "2018-05-10T17:30:53Z"}, {"text": "I too have been thinking about this. I was waiting on the Robin Hood work (bug 1402910) because then the hashes are probed linearly, which means having all the hashes laid out consecutively is really good in terms of cache behaviour.", "author": "n.nethercote@gmail.com", "id": 13269239, "time": "2018-05-10T20:17:29Z"}], "id": 1460674, "priority": "--", "cc": ["bkelly@mozilla.com", "erahm@mozilla.com", "jld@mozilla.com", "n.nethercote@gmail.com"], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1436250], "qa_contact": "", "creation_time": "2018-05-10T17:30:53Z", "cf_status_firefox_esr52": "---", "component": "XPCOM", "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "affected", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, "whiteboard": "", "mentors": [], "summary": "decrease hash table item storage for 64-bit platforms", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-10T21:07:57Z", "assigned_to": "nobody@mozilla.org", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "bkelly@mozilla.com"}], "who": "bkelly@mozilla.com", "when": "2018-05-10T17:55:42Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jld@mozilla.com"}], "who": "jld@mozilla.com", "when": "2018-05-10T21:07:57Z"}], "resolution": "", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}