{"status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "jordan@jsantell.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-07-08T22:34:36Z", "type_id": 748, "creation_date": "2015-07-01T22:14:03Z", "id": 1200362, "setter": "jlong@mozilla.com"}], "content_type": "text/plain", "id": 8628504}, {"creator": "jordan@jsantell.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2016-02-09T23:13:22Z", "type_id": 607, "creation_date": "2016-02-03T02:12:52Z", "id": 1335480, "setter": "jryans@gmail.com"}], "content_type": "text/plain", "id": 8715110}, {"creator": "jordan@jsantell.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8717289}, {"creator": "jordan@jsantell.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2016-02-11T14:23:42Z", "type_id": 748, "creation_date": "2016-02-10T20:38:00Z", "id": 1340459, "setter": "jryans@gmail.com"}], "content_type": "text/plain", "id": 8718053}, {"creator": "jordan@jsantell.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-22T22:36:15Z", "type_id": 748, "creation_date": "2016-02-20T01:42:38Z", "id": 1345831, "setter": "jryans@gmail.com"}, {"status": "+", "name": "review", "modification_date": "2016-03-14T18:09:06Z", "type_id": 748, "creation_date": "2016-02-20T01:42:38Z", "id": 1345832, "setter": "jlong@mozilla.com"}], "content_type": "text/plain", "id": 8721574}], "classification": "Client Software", "creator": "jordan@jsantell.com", "cc": ["bgrinstead@mozilla.com", "bruant.d@gmail.com", "dahjelle.mozilla.org@thehjellejar.com", "esigra@gmail.com", "jfong@mozilla.com", "jlong@mozilla.com", "jryans@gmail.com", "nfitzgerald@mozilla.com", "ttromey@mozilla.com"], "depends_on": [1269919, 1132501], "creation_time": "2015-06-24T23:31:59Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Source Map Controller/Renderer/Orchestrator", "cf_last_resolved": "2016-03-15T09:45:19Z", "assigned_to_detail": {"email": "jordan@jsantell.com", "id": 464691, "name": "jordan@jsantell.com", "real_name": "Jordan Santell [:jsantell] [@jsantell]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "jordan@jsantell.com", "comment_count": 47, "comments": [{"text": "On the front end, we need to react to source location changes when sources update via source map, pretty print, etc.\n\nScenarios:\n* console.log, source maps load one second later, the location should be updated\n* console.log a minified file, pretty print in the future, location should be updated\n* same as above, but then unprettyprint in the future, and location is updated back to original location\n* Any of the above scenarios, except instead of console.log (which is updating text on an element), updating text on canvas (perf tools), so has to update a canvas rendering\n* Tons of console.logs on a page, and when pretty printing later, where we have to update 1000 elements, a way for a specific tool to batch/render smartly for its specific scenario\n\nconsole.log is an example, but covers the \"update an element's text\" scenario.\n\nPseudocode implementation: https://gist.github.com/jsantell/f5eb39c248a1d2f59f82", "author": "jordan@jsantell.com", "id": 10420754, "time": "2015-06-24T23:31:59Z"}, {"text": "Jordan, are you going to continue working on the frontend? I can take the backend piece so that the \"updated\" event is emitted.", "author": "jlong@mozilla.com", "id": 10430980, "time": "2015-06-29T16:01:16Z"}, {"text": "Yeah I'm going to keep on this one -- the backend piece I think I have working, and I'll certainly send over for review to you to make sure it's right", "author": "jordan@jsantell.com", "id": 10432102, "time": "2015-06-29T19:42:25Z"}, {"text": "Created attachment 8628504\n1177279-source-location.patch\n\nHandles the orchestration of location objects -- these can be generated sources, and lazily updated when source map parsed, or the possibility of pretty prints. For actual use case, these would probably receive the already source mapped locations.\n\nThese require the debugger being opened. Should handle that in a different bug", "author": "jordan@jsantell.com", "id": 10442840, "time": "2015-07-01T22:14:03Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=84d3c883904d", "author": "jordan@jsantell.com", "id": 10442872, "time": "2015-07-01T22:22:05Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=b4085f3b0829", "author": "jordan@jsantell.com", "id": 10446865, "time": "2015-07-02T17:36:45Z"}, {"text": "Comment on attachment 8628504\n1177279-source-location.patch\n\nReview of attachment 8628504:\n-----------------------------------------------------------------\n\n::: toolkit/devtools/server/actors/script.js\n@@ +1870,5 @@\n>        source: aSource.form()\n>      });\n>    },\n>  \n> +  onResolveLocation: function (aRequest) {\n\nThis method should be on \"parent\" actors: TabActor, ChromeActor, AddonActor, etc. Not on the ThreadActor. I *think* they all inherit from TabActor, so you shouldn't need to repeat yourself a bunch.\n\nIn general, actors shouldn't be talking to their siblings or cousins in the hierarchy (which having a console/profiler actor talk to a debugger actor would be doing), but only to their parents and/or children. Otherwise, lifetimes get confusing and error prone, and this tends to lead to either leaks or dangling actor id references that error out when you try to do anything with them. This will additionally make it a lot easier to use without needing the debugger to be in a specific state in the future.", "author": "nfitzgerald@mozilla.com", "id": 10446956, "time": "2015-07-02T17:55:55Z"}, {"text": "> I *think* they all inherit from TabActor, so you shouldn't need to repeat yourself a bunch.\n\nThey do, or at least that's the intention. There might be one type that still doesn't inherit, I think, but a lot of work has been done recently to have a common base actor. ChildProcessActor in child-process.js I think is one place you might need to duplicate, not sure how all that works.", "author": "jlong@mozilla.com", "id": 10447306, "time": "2015-07-02T19:08:08Z"}, {"text": "(I'll review this patch tomorrow, or possibly today!)", "author": "jlong@mozilla.com", "id": 10447308, "time": "2015-07-02T19:08:29Z"}, {"text": "(In reply to Nick Fitzgerald [:fitzgen][:nf] from comment #6)\n> This method should be on \"parent\" actors: TabActor, ChromeActor, AddonActor,\n> etc. Not on the ThreadActor. I *think* they all inherit from TabActor, so\n> you shouldn't need to repeat yourself a bunch.\n\nAlex recently landed some docs about the actors[1], so that's a helpful reference when discussing these matters!  Soon we hope to rename them a bit for less confusion as well.\n\n[1]: https://dxr.mozilla.org/mozilla-central/source/toolkit/devtools/server/docs/actor-hierarchy.md", "author": "jryans@gmail.com", "id": 10447311, "time": "2015-07-02T19:09:20Z"}, {"text": "repinging jlongster", "author": "jordan@jsantell.com", "id": 10469597, "time": "2015-07-08T15:41:39Z"}, {"text": "Comment on attachment 8628504\n1177279-source-location.patch\n\nReview of attachment 8628504:\n-----------------------------------------------------------------\n\nThere's a few other small things I want to look at in this patch, but I'm going to r- mainly because of the onResolveLocation request. Move that into the TabActor and the rest of this looks good. r? me again when you do that, just didn't want this review to linger any more\n\n::: browser/devtools/shared/source-location.js\n@@ +6,5 @@\n> +\n> +loader.lazyImporter(this, \"Task\", \"resource://gre/modules/Task.jsm\");\n> +loader.lazyRequireGetter(this, \"EventTarget\", \"sdk/event/target\", true);\n> +loader.lazyRequireGetter(this, \"emit\", \"sdk/event/core\", true);\n> +loader.lazyRequireGetter(this, \"Class\", \"sdk/core/heritage\", true);\n\nI don't think it's worth making any of these lazy imports. They are all used pretty much immediately.\n\n::: toolkit/devtools/server/actors/script.js\n@@ +1870,5 @@\n>        source: aSource.form()\n>      });\n>    },\n>  \n> +  onResolveLocation: function (aRequest) {\n\n(warning: this triggered a braindump of stuff I've been meaning to figure out for a while)\n\nYeah, we need to figure out the \"canonical\" place to put data that should be global to all tools (like sources). And figure out what data and APIs should be put there.\n\nI was thinking ThreadActor was that place, but taking a step back I realize it's really just a debugger-specific thing that handles pausing/resuming the thread and other things. You appropriately put APIs on TabTarget to work with locations, which is right, and I think we should be consistent with these RDP calls too.\n\nThis even uses `this.sources`, which is just a getter for `this.parent.sources`, since it's the target that handles sources because so many things need them. Eventually I want to move SourceActor out of here because it's no longer tied to the debugger. Eddy has talked about moving breakpoint methods out into its own module too, since it's complicated and would be good to modularize.\n\nWe're going to have to initialize the debugger on toolbox open to be able to query sources (we also want to do this to catch any `debugger` statements). However, I have concerns about eagerly fetching all the sources, since some pages have hundreds, and I'm sure there's a perf hit there.\n\nWe can lazily fetch a SourceActor based on URL (or something else, I'm not sure what locations from eval scripts show up in the console as). This means all APIs needs to be async though, even things like querying if a source is blackboxed. Right now we just check a property of the `SourceClient`, but I don't think we can do that if we're going to lazily populate sources.\n\nAnyway, just something to think about. There's a bunch of stuff to figure out, but adding APIs and RDP methods to TabActor is what we should be doing for anything that all tools need.\n\n::: toolkit/devtools/server/actors/utils/TabSources.js\n@@ +232,5 @@\n>          return this._sourceMappedSourceActors[url];\n>        }\n>      }\n>  \n> +    return null;\n\nWhy do you need to change this? We were very intentional about making the getSource* methods throw an error. It's too easy to unintentionally try to get one when it doesn't exist for some reason.\n\nI'd rather you add methods to query the state of the sources, like \"hasSource*\". I like that these functions imply that you don't have to check for null; if you are calling them, you *know* the source exists.\n\nOr add an optional parameter to these methods that explicitly turn on the null-returning behavior.", "author": "jlong@mozilla.com", "id": 10471683, "time": "2015-07-08T22:34:36Z"}, {"text": "(In reply to James Long (:jlongster) from comment #11)\n> Yeah, we need to figure out the \"canonical\" place to put data that should be\n> global to all tools (like sources). And figure out what data and APIs should\n> be put there.\n\n1. They aren't really global, they are shared within the given debugging context, ie chrome debugging, tab debugging, addon debugging, etc.\n\n2. We have this \"canonical\" place and it is the parent actor (ie TabActor, AddonActor, ChromeActor, etc). Its just that traditionally, we have shared almost nothing and so there isn't much there. As we share more stuff, like this bug does, we should populate those actors with more functionality.", "author": "nfitzgerald@mozilla.com", "id": 10471795, "time": "2015-07-08T22:52:08Z"}, {"text": "(In reply to Nick Fitzgerald [:fitzgen][:nf] from comment #12)\n> (In reply to James Long (:jlongster) from comment #11)\n> > Yeah, we need to figure out the \"canonical\" place to put data that should be\n> > global to all tools (like sources). And figure out what data and APIs should\n> > be put there.\n> \n> 1. They aren't really global, they are shared within the given debugging\n> context, ie chrome debugging, tab debugging, addon debugging, etc.\n\nThat's what I meant, good to clarify though.\n\n> \n> 2. We have this \"canonical\" place and it is the parent actor (ie TabActor,\n> AddonActor, ChromeActor, etc). Its just that traditionally, we have shared\n> almost nothing and so there isn't much there. As we share more stuff, like\n> this bug does, we should populate those actors with more functionality.\n\nOk. I'm confused when you have a reference to those. These shouldn't be tool-specific, so does the target somehow have a reference to this?\n\nLooking at target.js, looks like it might. `target.activeTab` is a TabClient, which works for normal tab and addon debugging, right? And then it has `target.chrome` which is a client for the ChromeActor?\n\nSo we need a generic way to get a reference to whatever remote actor it is, that conforms to the TabActor interface, and will have the APIs we need.\n\nI need to read through the docs more in webbrowser.js, I know Alex has improved them a lot.", "author": "jlong@mozilla.com", "id": 10472118, "time": "2015-07-09T00:19:45Z"}, {"text": "cc'ing jryans, I'm sure he has good input here. fwiw when asking him it target was the right place to put stuff he said:\n\n<jryans> jlongster: hmm. the main \"global\" things are the target and the\n         client (from dbg-client.jsm). i might suggest the client for this\n         case. in my mental model, the target is for \"what does the toolbox\n         need to get started?\", and the client is more focused on specific RDP\n         requests.                                                      [18:50]", "author": "jlong@mozilla.com", "id": 10472123, "time": "2015-07-09T00:20:32Z"}, {"text": "I think I finally understand what things are \"TabActor\" like things. The only things that's annoying is that not everything inherits from TabActor. ChildProcessActor, for example, does not: https://github.com/mozilla/gecko-dev/blob/master/toolkit/devtools/server/actors/child-process.js but it is that parent of the debugger when debugging \"child chrome scripts\" in e10s (using the Browser Content Toolbox).\n\nI don't know if there are even plans to make it inherit from TabActor, as I assume there is a reason it is not right now. It just implements the interface, and we add stuff to that interface we'll need to add it in 2 places.\n\nWhat about `client`? It looks likes that is a `DebuggerClient` instance. I'm not sure if tools that use protocol.js even use that though.", "author": "jlong@mozilla.com", "id": 10476565, "time": "2015-07-09T19:35:25Z"}, {"text": "I agree with both of you that on the actor side, these shared functions make sense at the \"TabActor interface\"[1] level, which corresponds to \"server side thing you point a whole toolbox at\".  (Everyone's agreed these names are terrible, join the fun in bug 1172897 to bike shed new ones!)\n\n(In reply to James Long (:jlongster) from comment #15)\n> I think I finally understand what things are \"TabActor\" like things. The\n> only things that's annoying is that not everything inherits from TabActor.\n> ChildProcessActor, for example, does not:\n> https://github.com/mozilla/gecko-dev/blob/master/toolkit/devtools/server/\n> actors/child-process.js but it is that parent of the debugger when debugging\n> \"child chrome scripts\" in e10s (using the Browser Content Toolbox).\n> \n> I don't know if there are even plans to make it inherit from TabActor, as I\n> assume there is a reason it is not right now. It just implements the\n> interface, and we add stuff to that interface we'll need to add it in 2\n> places.\n\nI think the main reason it currently does not inherit from TabActor is that the browser content toolbox that this actor supports has only a subset of the usual features: only Console / Debugger / Scratchpad are accessible.\n\nHowever, we also seem to lose time being confused by this distinction.  It may be possible to always use inheritance, but then disable some features, so we at least don't have to duplicate code -- but I haven't thought about this in depth.\n\n> What about `client`? It looks likes that is a `DebuggerClient` instance. I'm\n> not sure if tools that use protocol.js even use that though.\n\nPart of what dbg-client.jsm implements is the `TabClient`.  The `TabClient` has the client-side requests for RDP methods on the TabActor interface today.\n\nSo, adding your methods to TabClient seems like the natural place.  If TabActors used protocol.js, this thing would be a TabFront, but they do not yet, so this is what we have instead.\n\n(In reply to James Long (:jlongster) from comment #13)\n> Looking at target.js, looks like it might. `target.activeTab` is a\n> TabClient, which works for normal tab and addon debugging, right? And then\n> it has `target.chrome` which is a client for the ChromeActor?\n\nNot quite.  A target only represents *one* \"thing you point a toolbox at\", or in other words it is only describing a single TabActor interface.  So, for a single tab, you have target A.  For a child process you have target B.  They are separate targets.  Each thing you aim a toolbox at is a new target.\n\n`target.activeTab` will always be the target's `TabClient`, so that should be all you need.  You should be able to reach the current target from most places in front-end code, but if that's hard for some special case, let's think about how to tweak things for that scenario.\n\n`target.chrome` is a boolean flag that is trying to say[2] \"is this targeted thing content or chrome scope?\", which seems unrelated to the work being done in this bug.\n\n[1]: https://dxr.mozilla.org/mozilla-central/source/toolkit/devtools/server/docs/actor-hierarchy.md#69\n[2]: https://dxr.mozilla.org/mozilla-central/source/browser/devtools/framework/target.js#330-333", "author": "jryans@gmail.com", "id": 10477758, "time": "2015-07-10T00:21:51Z"}, {"text": "Jordan, May that help if I also review this patch? Or do you just need some free cycles to get back to this?", "author": "poirot.alex@gmail.com", "id": 10885386, "time": "2015-10-29T14:22:41Z"}, {"text": "waiting for bug 1132501 to land due to the thread actor events moving around", "author": "jordan@jsantell.com", "id": 10886512, "time": "2015-10-29T18:48:03Z"}, {"text": "Created attachment 8715110\n1177279-source-location.patch\n\nWanted to f? this sooner than later; adding comments, removing logs and fixing up tests are pretty straight forward, but my main question is where should this live? Right now thread actor emits new/updated source events, and the SourceLocationController (better name?) takes a toolbox (I'd imagine the toolbox should be the owner of this then) to register a location and bind callbacks when they update.\n\nThe next step would be actually plugging this into the toolbox (or target?) and then add a wrapper around bindLocation for our scenarios as we approach different tools: vanilla element in XUL (console), react element in HTML (memory), etc.", "author": "jordan@jsantell.com", "id": 11131774, "time": "2016-02-03T02:12:52Z"}, {"text": "(In reply to Jordan Santell [:jsantell] [@jsantell] (Please needinfo) from comment #19)\n> Right now thread actor emits new/updated source events,\n\nThis should definitely be the actor representing the debugging context emitting these events, not the ThreadActor, as we talked about a bit in older comments. So that would be the parent of the ThreadActor (and all the other tool-specific actors): TabActor/AddonActor/ChromeActor/WorkerActor.", "author": "nfitzgerald@mozilla.com", "id": 11133743, "time": "2016-02-03T16:53:05Z"}, {"text": "Comment on attachment 8715110\n1177279-source-location.patch\n\nReview of attachment 8715110:\n-----------------------------------------------------------------\n\nGoing to leave the specifics to jlongster and jryans.", "author": "nfitzgerald@mozilla.com", "id": 11133750, "time": "2016-02-03T16:54:19Z"}, {"text": "The debugger still uses newSource event on the thread actor, but can emit on both, or change the debugger to listen to the parent actor. Thoughts? Would probably move the logic added in attach-thread back to the TabTarget then. Maybe expose the API via toolbox though?", "author": "jordan@jsantell.com", "id": 11133760, "time": "2016-02-03T16:58:05Z"}, {"text": "(In reply to Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8] from comment #20)\n> (In reply to Jordan Santell [:jsantell] [@jsantell] (Please needinfo) from\n> comment #19)\n> > Right now thread actor emits new/updated source events,\n> \n> This should definitely be the actor representing the debugging context\n> emitting these events, not the ThreadActor, as we talked about a bit in\n> older comments. So that would be the parent of the ThreadActor (and all the\n> other tool-specific actors): TabActor/AddonActor/ChromeActor/WorkerActor.\n\nWhy? These are things specific to the thread running the content, it doesn't change at all if it's a tab/addon/chrome/etc. Technically speaking that's a lot harder because we have to duplicate a lot of code across each type (they don't inherit from the same thing). It's way simpler to use the thread as the thing that everything uses (it's *always* there now), no matter what the parent implementation is.\n\nI guess theoretically if we're only talking about event boundaries, the thread could implement all the logic but actually emit events on its parent (no matter what it is). But there are also cases where it's not just events: you have a URL and you want a SourceActor to set a breakpoint on it from the console (can't do that right now, just a thought). Right now we have a `sources` property on the tab/addon/etc instance but it seems like we should consolidate all of this somewhere that doesn't care what the target type is (we have to duplicate the `sources` property in 3 places).", "author": "jlong@mozilla.com", "id": 11133959, "time": "2016-02-03T17:45:07Z"}, {"text": "(In reply to James Long (:jlongster) from comment #23)\n> (In reply to Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8] from comment #20)\n> > (In reply to Jordan Santell [:jsantell] [@jsantell] (Please needinfo) from\n> > comment #19)\n> > > Right now thread actor emits new/updated source events,\n> > \n> > This should definitely be the actor representing the debugging context\n> > emitting these events, not the ThreadActor, as we talked about a bit in\n> > older comments. So that would be the parent of the ThreadActor (and all the\n> > other tool-specific actors): TabActor/AddonActor/ChromeActor/WorkerActor.\n> \n> Why? These are things specific to the thread running the content, it doesn't\n> change at all if it's a tab/addon/chrome/etc. Technically speaking that's a\n> lot harder because we have to duplicate a lot of code across each type (they\n> don't inherit from the same thing). It's way simpler to use the thread as\n> the thing that everything uses (it's *always* there now), no matter what the\n> parent implementation is.\n> \n> I guess theoretically if we're only talking about event boundaries, the\n> thread could implement all the logic but actually emit events on its parent\n> (no matter what it is). But there are also cases where it's not just events:\n> you have a URL and you want a SourceActor to set a breakpoint on it from the\n> console (can't do that right now, just a thought). Right now we have a\n> `sources` property on the tab/addon/etc instance but it seems like we should\n> consolidate all of this somewhere that doesn't care what the target type is\n> (we have to duplicate the `sources` property in 3 places).\n\nThe non-inheritance of the TabActor-like objects is confusing, and not only in this case.  Either they should be changed to use inheritance, or we should use a mixin technique to implement the shared functionality in one place.  We should really do _something_ to clean this up, no matter what choices we make about source maps in this specific bug.\n\nIt seems like the mixin technique could be used for this case, assuming we reach agreement that the events belong on the TabActor-like.", "author": "jryans@gmail.com", "id": 11137658, "time": "2016-02-04T15:45:37Z"}, {"text": "I plan to give more specific feedback here, but I am in meetings all day, so it may have to wait until tomorrow.", "author": "jryans@gmail.com", "id": 11137671, "time": "2016-02-04T15:48:22Z"}, {"text": "Comment on attachment 8715110\n1177279-source-location.patch\n\nReview of attachment 8715110:\n-----------------------------------------------------------------\n\nOverall, this seems good at a high level.  The only issue I see is where the actor parts of this live.  Like :fitzgen suggested, I agree that it should live on TabActor-ish actor since that actor owns the sources.\n\n:jlong expressed concerns about putting things on TabActor-ish actors, since there are several of them, and they do not inherit things directly.  No one is asking for or wants code to be duplicated N times on each them, so we should write it once somewhere and use a mixin approach to implement it on each TabActor-ish actor.\n\n::: devtools/server/actors/script.js\n@@ +1891,5 @@\n>    },\n>  \n> +  /**\n> +   * A function called when there's a new or updated source from a thread actor's\n> +   * sources. Emits `newSource` and `updatedSource` on the tab actor.\n\nThis comment says \"tab actor\", but it seems you are emitting on the thread actor.\n\nWe do in fact want the events to come from the TabActor-ish actor though, since it owns the sources.\n\n(ThreadActor emits `newSource` because of compat.  It should probably be moved carefully with a trait or whatever, so this can be less confusing.)\n\n@@ +1905,4 @@\n>      });\n>    },\n>  \n> +  onResolveLocation: Task.async(function *(request) {\n\nThe TabActor-ish actors own the sources, so this should be moved there.  (`onSources` should really live there too, but currently doesn't because of compat.  It should probably be moved carefully with a trait or whatever, so this can be less confusing.)", "author": "jryans@gmail.com", "id": 11142826, "time": "2016-02-05T22:32:47Z"}, {"text": "Created attachment 8717289\n1177279-source-location.patch\n\nSo this is getting more and more complex. Nothing is shared between the {Tab|Worker|Addon}Client, so added that, but not sure where the ChromeClient equivilient is. Also, the actors themselves will need it, just did it for TabActor, looks like some parts of ChromeActor uses these. And again the traits on the front end to optionally connect to parent actor, as well as the different *Targets implementing the hook to listen. Are these all tested solidly? Last I checked, browser toolbox debugging was a bit fragile but that may have changed.\n\nSo this probably doesn't work, but more digging I did, the less I knew about how these pieces work. I don't know enough about all the parent actors to ensure all them are covered, handle trait-specific connections in all 4 parent actors, and just differences between them (some XClient's have `events` in prototype, others in the constructor, in devtools/shared/client/main.js, is there a reason for that?) and seems too fragile. But this seems like starting to get into some bigger refactorings, which I'm not comfortable starting to do in these sections of code. If I'm misunderstanding the size and it's just a matter of a mixin, can you let me know which Actors and Clients and Targets specifically need to be similar and inherit from a base parent? It's a bit confusing as the names aren't always consistent (ChromeActor = WindowTarget = ?Client?). Or if we need to handle all 4 targets from the parent from the start, much of the refactoring should be done in a separate bug.", "author": "jordan@jsantell.com", "id": 11149166, "time": "2016-02-09T02:51:28Z"}, {"text": "Comment on attachment 8717289\n1177279-source-location.patch\n\nReview of attachment 8717289:\n-----------------------------------------------------------------\n\nThanks for making an attempt at this clean up, it's sorely needed!  Unfortunately, I think it was wrong for me to push for you to do so in this bug.  The main reasoning I've changed my mind is:\n\n1. I did more research to give you an exhaustive list of actors that need changing\n2. One of them is WorkerActor\n3. There is no \"real\" parent actor for the WorkerActor[1]\n\nSo, I think doing the work to move these things up to the TabActor-ish target actor becomes too much work and noise for this bug.  It is still work I think needs to be done, but not here.\n\nI have filed bug 1247084 to implement the clean up.  I'll cancel this review and take another look at your previous patch.\n\nFor future reference, the TabActor-ish actors are documented in actor-heirarchy.md[2].  But this file is rude and does not mention workers at all.  I filed bug 1247091 to correct the docs.\n\nSorry again!\n\n[1]: https://dxr.mozilla.org/mozilla-central/source/devtools/server/worker.js#58\n[2]: https://dxr.mozilla.org/mozilla-central/source/devtools/server/docs/actor-hierarchy.md", "author": "jryans@gmail.com", "id": 11151930, "time": "2016-02-09T22:28:47Z"}, {"text": "Comment on attachment 8715110\n1177279-source-location.patch\n\nReview of attachment 8715110:\n-----------------------------------------------------------------\n\nMakes sense at a high level.  Still want to do another review when ready for r?.\n\nResetting f? for :jlong.\n\n::: devtools/client/framework/source-location.js\n@@ +5,5 @@\n> +\n> +const { Task } = require(\"resource://gre/modules/Task.jsm\");\n> +const { assert } = require(\"devtools/shared/DevToolsUtils\");\n> +\n> +function SourceLocationController (toolbox) {\n\nWho will require this module outside of test code?", "author": "jryans@gmail.com", "id": 11152126, "time": "2016-02-09T23:13:22Z"}, {"text": "(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #29)\n> Comment on attachment 8715110\n> 1177279-source-location.patch\n> \n> Who will require this module outside of test code?\n\nI imagine the *Target will create it and retain it, so consumers (tools) can access either it, or a target method, directly for binding locations and creating elements, like in the vanilla JS case:\n\n```\nlet el = this.target.sourceLocation.createSourceElement({ line: 123, url: \"http://localhost/file.js\" });\nthis.consoleView.appendChild(el);\n```\n\nAlso provided would be a way to make a react component for tools that use that. These would be in follow up bugs -- how does that sound?", "author": "jordan@jsantell.com", "id": 11152148, "time": "2016-02-09T23:18:08Z"}, {"text": "(In reply to Jordan Santell [:jsantell] [@jsantell] (Please needinfo) from comment #30)\n> (In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #29)\n> > Comment on attachment 8715110\n> > 1177279-source-location.patch\n> > \n> > Who will require this module outside of test code?\n> \n> I imagine the *Target will create it and retain it, so consumers (tools) can\n> access either it, or a target method, directly for binding locations and\n> creating elements, like in the vanilla JS case:\n> \n> ```\n> let el = this.target.sourceLocation.createSourceElement({ line: 123, url:\n> \"http://localhost/file.js\" });\n> this.consoleView.appendChild(el);\n> ```\n> \n> Also provided would be a way to make a react component for tools that use\n> that. These would be in follow up bugs -- how does that sound?\n\nOkay, seems reasonable.  If it lives on the target, then I think \"source-updated\" should be emitted on the target, not the toolbox.", "author": "jryans@gmail.com", "id": 11152694, "time": "2016-02-10T04:23:12Z"}, {"text": "Created attachment 8718053\n1177279-source-location.patch\n\nOk, finally ready for a real review.\n\nFollow up bugs in addition to what jryans mentioned are tests for `resolveLocation` on the tab actor itself, and then a few more source map specific things, like creating elements that update themselves based on the controller, and wiring the controller into the target itself (so it's actually used outside of tests).\n\nThis requires a remote TabTarget to setup the listeners -- is this always true? Do these not work in single process? Not sure if `target.makeRemote()` is optional or not.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=6c7ff6dd9284", "author": "jordan@jsantell.com", "id": 11155350, "time": "2016-02-10T20:38:00Z"}, {"text": "(In reply to Jordan Santell [:jsantell] [@jsantell] (Please needinfo) from comment #32)\n> Follow up bugs in addition to what jryans mentioned are tests for\n> `resolveLocation` on the tab actor itself\n\nDo we have TabActor method tests anywhere? Or these all tested implicitly through other tests? Can't find tests for the other methods (listFrames, listWorkers)", "author": "jordan@jsantell.com", "id": 11156163, "time": "2016-02-11T00:54:27Z"}, {"text": "(In reply to Jordan Santell [:jsantell] [@jsantell] (Please needinfo) from comment #33)\n> (In reply to Jordan Santell [:jsantell] [@jsantell] (Please needinfo) from\n> comment #32)\n> > Follow up bugs in addition to what jryans mentioned are tests for\n> > `resolveLocation` on the tab actor itself\n> \n> Do we have TabActor method tests anywhere? Or these all tested implicitly\n> through other tests? Can't find tests for the other methods (listFrames,\n> listWorkers)\n\nI believe they may only be covered by integration tests.", "author": "jryans@gmail.com", "id": 11157376, "time": "2016-02-11T14:00:31Z"}, {"text": "(In reply to Jordan Santell [:jsantell] [@jsantell] (Please needinfo) from comment #32)\n> This requires a remote TabTarget to setup the listeners -- is this always\n> true? Do these not work in single process? Not sure if `target.makeRemote()`\n> is optional or not.\n\nShould be fine, these days makeRemote is called on all targets by someone or another, mainly the toolbox itself, but also many other places too.\n\nIt's yet another historical API artifact to clean up.", "author": "jryans@gmail.com", "id": 11157381, "time": "2016-02-11T14:03:06Z"}, {"text": "Comment on attachment 8718053\n1177279-source-location.patch\n\nReview of attachment 8718053:\n-----------------------------------------------------------------\n\nOverall, it seems good.  However, I think emitting the parent of the script actor may break in workers, so please test it.\n\nWould like to see the next round still.  Only reviewed connections to the rest of the tools, relying on :jlong to make sense of the source mapping logic.\n\n::: devtools/client/framework/source-location.js\n@@ +27,5 @@\n> +  target.on(\"will-navigate\", this.reset);\n> +  target.on(\"close\", this.destroy);\n> +}\n> +\n> +SourceLocationController.prototype.reset = function () {\n\nNit: The space before ( goes against our ESLint style.  Many more to clean up in various places.\n\n@@ +62,5 @@\n> + *\n> + * @param {String} eventName\n> + * @param {Object} sourceEvent\n> + */\n> +SourceLocationController.prototype._onSourcesUpdated = function (_, sourceEvent) {\n\nNit: Let's use `_onSourceUpdated` (singular) to match the event name and target's method name\n\n::: devtools/client/framework/target.js\n@@ +495,5 @@\n>      this._onFrameUpdate = (aType, aPacket) => {\n>        this.emit(\"frame-update\", aPacket);\n>      };\n>      this.client.addListener(\"frameUpdate\", this._onFrameUpdate);\n> +   \n\nNit: whitespace\n\n@@ +497,5 @@\n>      };\n>      this.client.addListener(\"frameUpdate\", this._onFrameUpdate);\n> +   \n> +    this._onSourceUpdated = (event, packet) => this.emit(\"source-updated\", packet);\n> +    this.client.addListener(\"newSource\", this._onSourceUpdated);\n\nWhere is `_onSourceUpdated` defined?\n\n::: devtools/server/actors/script.js\n@@ +1900,2 @@\n>      this.conn.send({\n> +      from: this._parent.actorID,\n\nThis may throw errors in worker debugging, which doesn't appear to have a parent actor ID.\n\nTest the worker debugging case to see what happens.\n\n::: devtools/server/actors/webbrowser.js\n@@ +1919,5 @@\n> +\n> +      return this.sources.getOriginalLocation(generatedLocation).then(loc => {\n> +        // If no map found, return this packet\n> +        if (loc.originalLine == null) {\n> +          return { from: this.actorID, type: \"resolveLocation\", status: \"MAP_NOT_FOUND\" };\n\nIs this an error state?  The protocol defines error replies as having an \"error\" property, should the \"status\" be \"error\" instead?\n\n@@ +1928,5 @@\n> +      });\n> +    }\n> +\n> +    // Fall back to this packet when source is not found\n> +    return promise.resolve({ from: this.actorID, type: \"resolveLocation\", status: \"SOURCE_NOT_FOUND\" });\n\nIs this an error state?  The protocol defines error replies as having an \"error\" property, should the \"status\" be \"error\" instead?\n\n::: devtools/shared/client/main.js\n@@ +1370,5 @@\n>  \n>    attachWorker: function (aWorkerActor, aOnResponse) {\n>      this.client.attachWorker(aWorkerActor, aOnResponse);\n> +  },\n> +  \n\nNit: whitespace", "author": "jryans@gmail.com", "id": 11157446, "time": "2016-02-11T14:23:42Z"}, {"text": "Created attachment 8721574\n1177279-source-location.patch\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=b0866dbe7ffa", "author": "jordan@jsantell.com", "id": 11181203, "time": "2016-02-20T01:42:38Z"}, {"text": "When debugging workers, I didn't notice any issues -- it seemed that workers weren't even hitting that line of code.", "author": "jordan@jsantell.com", "id": 11182030, "time": "2016-02-20T23:37:29Z"}, {"text": "Comment on attachment 8721574\n1177279-source-location.patch\n\nReview of attachment 8721574:\n-----------------------------------------------------------------\n\nI believe this version looks good as far as wiring things up.  Still needs :jlong for source maps.", "author": "jryans@gmail.com", "id": 11185901, "time": "2016-02-22T22:36:15Z"}, {"text": "Comment on attachment 8721574\n1177279-source-location.patch\n\nReview of attachment 8721574:\n-----------------------------------------------------------------\n\nThis generally looks good, but I don't see how this would work in the scenario where a source already exists with a sourcemap applied, and a new location is logged to the console. In the debugger, I believe we will essentially be sending already-sourcemapped locations, but that's not possible with the console. Or is the intention, when we integrate it, that we can check if it's already been sourcemapped and we will manually call `resolveLocation` in the console itself?\n\nThanks so much for working on this, and sorry for the slow review!\n\n::: devtools/client/framework/source-location.js\n@@ +52,5 @@\n> + */\n> +SourceLocationController.prototype.bindLocation = function(location, callback) {\n> +  assert(location.url, \"Location must have a url.\");\n> +  assert(location.line, \"Location must have a line.\");\n> +  this.locations.add({ location, callback });\n\nHow is this going to work when integrating in the console? This will still add new entries for each location in the UI, because you will have to bind a new `callback` to update that specific element, even if it's the same location used in previous entries. Or does the frame component help with that?\n\nWe should definitely make sure, however it's implemented, that the same location is only sourcemapped once, even if it's logged 1000 times.\n\n@@ +66,5 @@\n> +SourceLocationController.prototype._onSourceUpdated = function(_, sourceEvent) {\n> +  let { type, source } = sourceEvent;\n> +  // If we get a new source, and it's not a source map, abort;\n> +  // we can ahve no actionable updates as this is just a new normal source.\n> +  // Also abort if there's no `url`, which means it's unsourcemappable anyway,\n\nThat's not entirely true. An eval script can theoretically embed a sourcemap inline using a data URI (actually, there's no reason it can't have a normal sourceMapURL either but it's far more likely to dynamically generate it and embed it). I believe the debugger supports this properly, but doesn't show sources without a URL by default (you can give an eval source a URL with the `sourceURL` pragma). However, if you have a `debugger` statement in an eval script, or have \"break on exceptions\" turned on, the debugger might still pause inside one of these unnamed eval scripts. In that case, the frontend gives it an arbitrary name (like \"SCRIPT1\", Chrome uses \"VM1\") and adds the source to the UI and shows it paused in the right place.\n\nI *think* if it has a sourcemap the frontend should treat it like any other source, and it'll work.\n\nI just tested what the console logs when I do `eval('\\nconsole.log(\"hi\");\\n');` inside a file named `foo.js`. It logs the raw URL returned from the engine: \"foo.js line 3 > eval\" which is wrong. We need to decide a uniform way to display the \"lack of a URL\" scenario. What is going to happen with your path? The URL will just error when trying to resolve it?\n\nThe fundamental conflict is that this API takes URL instead of a SourceActor ID, but I think that's OK. For this to work with most tools we pretty much have to do that. The performance tool is never going to use SourceActors.\n\nAfter thinking a bit more about this, I think the `canonicalID` property of sources might help with this. That property is a unique ID that represents the script at the engine level. If we can encode that in the URL that tools get from the engine, we can use it to map to a unique script in the debugger and get a sourcemap for it. The nice thing about having that everywhere is that linking to the debugger would *always* work: click on a location and it would use the ID to open the debugger, not a URL, which famously conflicts and is hard to figure out the right place to go.\n\nJust wanted to explain everything, this is long-term thinking. No need to do this right now. Note that this will willingly receive wrong URLs like \"foo.js line 3 > eval\" though, which is probably fine (it'll just error).\n\n@@ +128,5 @@\n> +function isSourceRelated(location, source) {\n> +         // Mapping location to subsequently loaded source map\n> +  return source.generatedUrl === location.url ||\n> +         // Mapping source map loc to source map\n> +         source.url === location.url\n\nCan you add a comment here as to why we can't just check `generatedUrl`? It seems like we could only check for that, and look for locations that are actually sourcemapped. But the reason we can't do that is because of pretty-printing: in that scenario, a source is dynamically converted to and from a sourcemapped source. I don't know, at least explaining the pretty-printing scenario seems like a good thing to have in comments.\n\n::: devtools/server/actors/script.js\n@@ +1895,5 @@\n> +   *\n> +   * @param {String} name\n> +   * @param {SourceActor} source\n> +   */\n> +  onSourceEvent: function (name, source) {\n\n+1 I like renaming this, `onNewSource` sounded like it was a Debugger API hook.", "author": "jlong@mozilla.com", "id": 11240380, "time": "2016-03-11T20:02:02Z"}, {"text": "Comment on attachment 8721574\n1177279-source-location.patch\n\nReview of attachment 8721574:\n-----------------------------------------------------------------\n\n::: devtools/client/framework/source-location.js\n@@ +52,5 @@\n> + */\n> +SourceLocationController.prototype.bindLocation = function(location, callback) {\n> +  assert(location.url, \"Location must have a url.\");\n> +  assert(location.line, \"Location must have a line.\");\n> +  this.locations.add({ location, callback });\n\nCaching will definitely have to be done -- that can be done for the integration, but as long as file:line:column's are unique (and you mentioned in some cases, this wouldn't be true, if loading a script that was already loaded, but that is more fresh), this would work\n\n@@ +66,5 @@\n> +SourceLocationController.prototype._onSourceUpdated = function(_, sourceEvent) {\n> +  let { type, source } = sourceEvent;\n> +  // If we get a new source, and it's not a source map, abort;\n> +  // we can ahve no actionable updates as this is just a new normal source.\n> +  // Also abort if there's no `url`, which means it's unsourcemappable anyway,\n\nAll great points and insight -- once we have all these possible source map scenarios, we can test them, and I don't think that'll change the architecture of this though. Is there a list of possible source map/source representation types?\n\n@@ +128,5 @@\n> +function isSourceRelated(location, source) {\n> +         // Mapping location to subsequently loaded source map\n> +  return source.generatedUrl === location.url ||\n> +         // Mapping source map loc to source map\n> +         source.url === location.url\n\nI believe the second conditional is for pretty printed sources -- but that should be mentioned in the comments", "author": "jordan@jsantell.com", "id": 11241227, "time": "2016-03-12T03:44:40Z"}, {"text": "Comment on attachment 8721574\n1177279-source-location.patch\n\nReview of attachment 8721574:\n-----------------------------------------------------------------\n\nCan we change this patch to just include the changes on the back end? actors/script.js, actors/webbrowser.js, TabSources.js? If it means faster landing, since the SLC will need to be changed API-wise for the frame component anyway?", "author": "jordan@jsantell.com", "id": 11244256, "time": "2016-03-14T15:38:57Z"}, {"text": "It's up to you, I'm fine r+'ing this patch as long as there' is a follow-up bug.", "author": "jlong@mozilla.com", "id": 11244806, "time": "2016-03-14T18:08:48Z"}, {"text": "Thanks all! And yes, many follow ups \nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=dacb02495cfb", "author": "jordan@jsantell.com", "id": 11245779, "time": "2016-03-14T22:39:25Z"}, {"text": "https://hg.mozilla.org/integration/fx-team/rev/4adc4cef8117", "author": "pulsebot@bots.tld", "id": 11246221, "time": "2016-03-15T01:52:47Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/4adc4cef8117", "author": "cbook@mozilla.com", "id": 11246973, "time": "2016-03-15T09:45:19Z"}], "id": 1177279, "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "41 Branch", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2017-05-03T19:07:32Z", "cf_platform_rel": "---", "product": "Firefox", "cf_status_firefox_esr52": "---", "blocks": [1250722, 1339970, 670002, 1179813, 1179823], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "Developer Tools: Framework", "votes": 0, "cf_status_firefox48": "fixed", "groups": [], "cf_status_firefox60": "---", "cf_status_firefox41": "affected", "target_milestone": "Firefox 48", "is_cc_accessible": true, "url": "https://gist.github.com/jsantell/f5eb39c248a1d2f59f82", "creator_detail": {"email": "jordan@jsantell.com", "id": 464691, "name": "jordan@jsantell.com", "real_name": "Jordan Santell [:jsantell] [@jsantell]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bgrinstead@mozilla.com", "id": 476442, "name": "bgrinstead@mozilla.com", "real_name": "Brian Grinstead [:bgrins]"}, {"email": "bruant.d@gmail.com", "id": 365126, "name": "bruant.d@gmail.com", "real_name": "David Bruant"}, {"email": "dahjelle.mozilla.org@thehjellejar.com", "id": 116002, "name": "dahjelle.mozilla.org@thehjellejar.com", "real_name": "David Alan Hjelle"}, {"email": "esigra@gmail.com", "id": 13568, "name": "esigra@gmail.com", "real_name": ""}, {"email": "jfong@mozilla.com", "id": 425628, "name": "jfong@mozilla.com", "real_name": "Jen Fong-Adwent [:ednapiranha]"}, {"email": "jlong@mozilla.com", "id": 402289, "name": "jlong@mozilla.com", "real_name": "James Long (:jlongster)"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, {"email": "ttromey@mozilla.com", "id": 516940, "name": "ttromey@mozilla.com", "real_name": "Tom Tromey :tromey"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "history": [{"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8628504, "added": "review?(jlong@mozilla.com), feedback?"}], "who": "jordan@jsantell.com", "when": "2015-07-01T22:14:03Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?", "attachment_id": 8628504, "added": "feedback?(nfitzgerald@mozilla.com)"}], "who": "jordan@jsantell.com", "when": "2015-07-01T22:14:45Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1179823"}], "who": "jordan@jsantell.com", "when": "2015-07-02T15:50:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(nfitzgerald@mozilla.com)", "attachment_id": 8628504, "added": ""}], "who": "nfitzgerald@mozilla.com", "when": "2015-07-02T17:55:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "esigra@gmail.com"}], "who": "esigra@gmail.com", "when": "2015-07-02T18:01:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jlong@mozilla.com)", "attachment_id": 8628504, "added": "review-"}], "who": "jlong@mozilla.com", "when": "2015-07-08T22:34:36Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jlong@mozilla.com", "when": "2015-07-09T00:20:32Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jryans@gmail.com)"}], "who": "jlong@mozilla.com", "when": "2015-07-09T15:53:10Z"}, {"changes": [{"removed": "needinfo?(jryans@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jryans@gmail.com", "when": "2015-07-10T00:21:51Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bgrinstead@mozilla.com"}], "who": "bgrinstead@mozilla.com", "when": "2015-08-11T17:03:34Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1179813"}], "who": "jordan@jsantell.com", "when": "2015-09-28T16:32:39Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1132501"}], "who": "jlong@mozilla.com", "when": "2015-09-28T21:47:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bruant.d@gmail.com"}], "who": "bruant.d@gmail.com", "when": "2015-10-25T11:04:30Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "670002"}], "who": "poirot.alex@gmail.com", "when": "2015-10-29T14:21:37Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8628504, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8715110, "added": "feedback?(jlong@mozilla.com), feedback?(jryans@gmail.com), feedback?(nfitzgerald@mozilla.com)"}], "who": "jordan@jsantell.com", "when": "2016-02-03T02:12:52Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(nfitzgerald@mozilla.com)", "attachment_id": 8715110, "added": ""}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-03T16:54:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jfong@mozilla.com"}], "who": "jfong@mozilla.com", "when": "2016-02-03T19:28:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(jryans@gmail.com)", "attachment_id": 8715110, "added": "feedback-"}], "who": "jryans@gmail.com", "when": "2016-02-05T22:32:47Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8715110, "added": "1"}, {"field_name": "flagtypes.name", "removed": "feedback?(jlong@mozilla.com)", "attachment_id": 8715110, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8717289, "added": "feedback?(jlong@mozilla.com), feedback?(jryans@gmail.com)"}], "who": "jordan@jsantell.com", "when": "2016-02-09T02:51:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(jlong@mozilla.com), feedback?(jryans@gmail.com)", "attachment_id": 8717289, "added": ""}], "who": "jryans@gmail.com", "when": "2016-02-09T22:28:47Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8717289, "added": "1"}], "who": "jryans@gmail.com", "when": "2016-02-09T22:29:38Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "1", "attachment_id": 8715110, "added": "0"}], "who": "jryans@gmail.com", "when": "2016-02-09T22:30:09Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback-", "attachment_id": 8715110, "added": "feedback+, feedback?(jlong@mozilla.com)"}], "who": "jryans@gmail.com", "when": "2016-02-09T23:13:22Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8715110, "added": "1"}, {"field_name": "flagtypes.name", "removed": "feedback?(jlong@mozilla.com)", "attachment_id": 8715110, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8718053, "added": "review?(jryans@gmail.com), review?(jlong@mozilla.com)"}], "who": "jordan@jsantell.com", "when": "2016-02-10T20:38:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8718053, "added": "review-"}], "who": "jryans@gmail.com", "when": "2016-02-11T14:23:42Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ttromey@mozilla.com"}], "who": "ttromey@mozilla.com", "when": "2016-02-17T20:35:44Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8718053, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(jlong@mozilla.com)", "attachment_id": 8718053, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8721574, "added": "review?(jryans@gmail.com), review?(jlong@mozilla.com)"}], "who": "jordan@jsantell.com", "when": "2016-02-20T01:42:38Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8721574, "added": "review+"}], "who": "jryans@gmail.com", "when": "2016-02-22T22:36:15Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1250722"}], "who": "jordan@jsantell.com", "when": "2016-02-24T00:17:39Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dahjelle.mozilla.org@thehjellejar.com"}], "who": "dahjelle.mozilla.org@thehjellejar.com", "when": "2016-02-24T21:34:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jlong@mozilla.com)", "attachment_id": 8721574, "added": "review+"}], "who": "jlong@mozilla.com", "when": "2016-03-14T18:09:06Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "Firefox 48"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-03-15 02:45:19"}, {"removed": "---", "field_name": "cf_status_firefox48", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2016-03-15T09:45:19Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1269919"}], "who": "jryans@gmail.com", "when": "2016-05-03T23:18:16Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1339970"}], "who": "clarkbw@mozilla.com", "when": "2017-05-03T19:07:32Z"}]}