{"cf_tracking_thunderbird_esr52": "---", "cf_status_firefox39": "fixed", "cf_tracking_firefox60": "---", "attachments": [{"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8558869}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8560364}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8561274}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-02-10T05:01:21Z", "type_id": 4, "creation_date": "2015-02-10T02:46:08Z", "id": 1096048, "setter": "b56girard@gmail.com"}], "content_type": "text/plain", "id": 8561819}, {"creator": "b56girard@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-02-19T21:22:15Z", "type_id": 4, "creation_date": "2015-02-13T09:59:28Z", "id": 1099595, "setter": "dholbert@mozilla.com"}, {"status": "+", "name": "feedback", "modification_date": "2015-02-16T02:27:18Z", "type_id": 607, "creation_date": "2015-02-13T09:59:28Z", "id": 1099596, "setter": "ffantasy1999@gmail.com"}, {"status": "+", "name": "feedback", "modification_date": "2015-02-16T01:39:17Z", "type_id": 607, "creation_date": "2015-02-16T01:39:17Z", "id": 1100633, "setter": "ffantasy1999@gmail.com"}], "content_type": "text/plain", "id": 8564017}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-02-24T17:58:48Z", "type_id": 4, "creation_date": "2015-02-24T06:48:18Z", "id": 1106694, "setter": "dholbert@mozilla.com"}, {"status": "+", "name": "review", "modification_date": "2015-02-24T23:56:21Z", "type_id": 4, "creation_date": "2015-02-24T06:48:18Z", "id": 1106695, "setter": "b56girard@gmail.com"}], "content_type": "text/plain", "id": 8568398}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-02-26T07:16:33Z", "type_id": 4, "creation_date": "2015-02-26T07:16:33Z", "id": 1108806, "setter": "ffantasy1999@gmail.com"}], "content_type": "text/plain", "id": 8569653}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-03-02T18:14:26Z", "type_id": 4, "creation_date": "2015-03-02T09:45:30Z", "id": 1111163, "setter": "dholbert@mozilla.com"}], "content_type": "text/plain", "id": 8571251}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8573738}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8573741}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8575799}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-03-11T20:20:21Z", "type_id": 4, "creation_date": "2015-03-11T06:20:49Z", "id": 1119171, "setter": "dholbert@mozilla.com"}, {"status": "+", "name": "review", "modification_date": "2015-03-11T17:48:47Z", "type_id": 4, "creation_date": "2015-03-11T06:20:49Z", "id": 1119172, "setter": "mstange@themasta.com"}], "content_type": "text/plain", "id": 8575801}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8576459}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2015-03-12T14:49:23Z", "type_id": 607, "creation_date": "2015-03-12T14:49:23Z", "id": 1120651, "setter": "dholbert@mozilla.com"}], "content_type": "text/plain", "id": 8576542}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2015-03-13T18:17:10Z", "type_id": 607, "creation_date": "2015-03-13T18:17:10Z", "id": 1122019, "setter": "dholbert@mozilla.com"}], "content_type": "text/plain", "id": 8577107}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-03-16T06:45:01Z", "type_id": 4, "creation_date": "2015-03-16T03:45:53Z", "id": 1122808, "setter": "dholbert@mozilla.com"}], "content_type": "text/plain", "id": 8577854}, {"creator": "ffantasy1999@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-03-19T09:19:07Z", "type_id": 4, "creation_date": "2015-03-19T09:19:07Z", "id": 1126243, "setter": "ffantasy1999@gmail.com"}], "content_type": "text/plain", "id": 8579904}], "classification": "Components", "creator": "ffantasy1999@gmail.com", "cc": ["b56girard@gmail.com", "bignose1007+bugzilla@gmail.com", "c@lightme.us", "dholbert@mozilla.com", "ffantasy1999@gmail.com", "howareyou322@gmail.com", "jmuizelaar@mozilla.com", "mstange@themasta.com"], "depends_on": [1142181, 1145988, 1149065], "creation_time": "2015-02-04T02:12:14Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Make Restyle label splitted based on element id and log the callstack from javascript if available", "id": 1129249, "assigned_to_detail": {"email": "ffantasy1999@gmail.com", "id": 454145, "name": "ffantasy1999@gmail.com", "real_name": "Chiajung Hung [:chiajung]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "ffantasy1999@gmail.com", "comment_count": 61, "comments": [{"text": "Created attachment 8558869\nWIP1\n\nWhile debugging performance issues respect to Restyle with GeckoProfiler, we usually see large \"Style #\" chunk, and the chunk has a stack.\n\nHowever, we usually have several pending restyles in 1 Restyle batch, and the stack is usually not enough to reveal each style change's effort, and which Restyle takes most time.\n\nHere is a example output of the proposal:\nhttp://people.mozilla.org/~bgirard/cleopatra/#report=a65b87cc3619d160d569ccf8f2205940a9cc93c5&filter=%5B{%22type%22%3A%22RangeSampleFilter%22,%22start%22%3A2974,%22end%22%3A3468},{%22type%22%3A%22RangeSampleFilter%22,%22start%22%3A3265,%22end%22%3A3427}%5D&selection=0,1,8,206,207,298,338\n\nIn this profile, the Style#1 takes 117ms, and the stack inside shows aw__changeState. In fact, there are 5 Restyles: statusbar: 37 ms, homescreen: 30 ms, appWindow: 20ms. And the aw__changeState is associated to appWindow.\n\nMy WIP needs cleanup for unused part, and need a better way to keep JSStack.\nCurrently, I use property to protect it, because it can cause memory pressure in some case. And I only logged for RestyleRoots, which is sometime not enough.\nI would like to add some more information for PendingRestyles and self expended restyles.", "author": "ffantasy1999@gmail.com", "id": 9877739, "time": "2015-02-04T02:12:14Z"}, {"text": "Created attachment 8560364\nWIP v2\n\nSample output of WIP v2:\nhttp://people.mozilla.org/~bgirard/cleopatra/#report=e17e8407dee9b94fdf6bef378ae25f77489468ef&filter=%5B{%22type%22%3A%22RangeSampleFilter%22,%22start%22%3A4011,%22end%22%3A4210}%5D&selection=0,1,252,253,254,364,382\n\nIn this profile, we can see 5 Restyles during [4104,4154] and each label has a JSStack in tool tip.\n\nI want to make the profiler_label contain JSStack, too(Since we sometime have restyle but not Style graph). However, ProfilerBacktrace::StreamJSObject seems clear the content of the backtrack and make tooltip wrong. \n\nAnd we may need a way to log several JSStack at same time, since some JS change style properties 1-by-1 and make it shows only 1st stack. (Because each RestyleRoot restyles only once even multiple modification, and no way to merge 2 ProfilerBacktrace into 1.)\n\nFurthermore, sometimes a StyleRoot can be expanded into several PendingRestyles(if Restyle_LaterSibling), we may need a way to show this information on GeckoProfiler, too. (This need the ability to serialize a ProfileBacktrace multiple times, too)", "author": "ffantasy1999@gmail.com", "id": 9889519, "time": "2015-02-06T10:05:38Z"}, {"text": "Created attachment 8561274\nWIP v3\n\nI can not stream the ProfileBacktrace object twice, but the output contains some redundant data for PROFILER_LABEL.\n\nI think I should prune the data or create a simple function to create a clean stack.", "author": "ffantasy1999@gmail.com", "id": 9896142, "time": "2015-02-09T09:10:10Z"}, {"text": "Created attachment 8561819\nv1\n\nI finally managed to dump the stack both on graph and on profiler labels.\nWe may need to extend \nhttps://dxr.mozilla.org/mozilla-central/source/tools/profiler/GeckoProfilerImpl.h#382\nto make the label complete while debug.\n\nIn this patch I decided to skip several frames in label while they are rather noisy. And I think we can record style change(old/new) and animation styles(some app forget to remove invisible animations and just waste CPU time) in another bug.", "author": "ffantasy1999@gmail.com", "id": 9900753, "time": "2015-02-10T02:46:08Z"}, {"text": "I don't think this patch is complete. You add PrintJSStack but it's not used anywhere.", "author": "b56girard@gmail.com", "id": 9900873, "time": "2015-02-10T03:15:50Z"}, {"text": "Oh!? I forgot to remove them...:P\n\nPrintJSStack consumes to much memory and crashes most app while launch(due to OOM), so I decided to use ProfilerBacktrace now.", "author": "ffantasy1999@gmail.com", "id": 9900939, "time": "2015-02-10T03:45:42Z"}, {"text": "Comment on attachment 8561819\nv1\n\nReview of attachment 8561819:\n-----------------------------------------------------------------\n\nThis patch is very interesting but it needs to be cleaner before we can land it.\n\n::: layout/base/RestyleManager.cpp\n@@ +3504,2 @@\n>    nsIContent* content = aFrame->GetContent();\n> +  nsAutoCString idStr;\n\nThis code will do a lot of computation when the profiler is disabled.\n\n@@ +3514,5 @@\n> +\n> +  std::ostringstream outstream;\n> +  if (bt.get() != nullptr) {\n> +    JSStreamWriter writer(outstream);\n> +    bt->StreamJSObject(writer, false);\n\nThis is a hack, we should add a proper API for this. See https://bugzilla.mozilla.org/show_bug.cgi?id=1123237#c41 where the memory profiler will also need the same API.\n\n@@ +3521,5 @@\n> +  profiler_tracing(\"Paint\", \"Styles\", bt.forget(), TRACING_INTERVAL_START);  // Since profiler_tracing release the Backtrace\n> +                                                                          // We must not release it here\n> +  std::string stack = outstream.str();\n> +  size_t pos = stack.find(\"RunScript\");\n> +  if (pos != std::string::npos)\n\nif (...) {\n  ...\n}\n\n@@ +3525,5 @@\n> +  if (pos != std::string::npos)\n> +    pos = stack.find(\"\\\"location\", pos);\n> +  PROFILER_LABEL_PRINTF(\"ElementRestyler\", \"ComputeStyleChangeFor\",\n> +      js::ProfileEntry::Category::CSS, \"Element: %s, Stack: %s\",\n> +      content && content->GetID() ? idStr.get() : \"{null}\", pos != std::string::npos ? stack.data()+pos : \"{null}\");\n\nI think showing stack: null is confusing. Perhaps we should show (Native) instead? I believe this will show when you don't have any JS execution triggering the frame.\n\nstack.data()+pos should be stack.data() + pos. Coding style has spaces around the operators.\n\n::: layout/base/RestyleTracker.h\n@@ +382,4 @@\n>    // flag.  We need this to avoid enumerating the hashtable looking\n>    // for such entries when we can't possibly have any.\n>    bool mHaveLaterSiblingRestyles;\n> +//#ifdef RESTYLE_LOGGING\n\nremove the ifdef\n\n@@ +382,5 @@\n>    // flag.  We need this to avoid enumerating the hashtable looking\n>    // for such entries when we can't possibly have any.\n>    bool mHaveLaterSiblingRestyles;\n> +//#ifdef RESTYLE_LOGGING\n> +  typedef nsClassHashtable<nsISupportsHashKey, ProfilerBacktrace> PendingRestyleSource;\n\nMaybe this should work like the other ProfilerBacktrace* restyle causes. Make this a ProfilerBacktrace* and you should be able to remove the .forget(). I don't think ProfilerBacktrace supports being copy constructed.\n\nOtherwise we can make sure that ProfilerBacktrace can be copy constructed.\n\n::: tools/profiler/ProfileEntry.cpp\n@@ -525,4 @@\n>    StreamJSObject(b);\n>  }\n>  \n> -void ThreadProfile::StreamJSObject(JSStreamWriter& b)\n\nremove all the profiler changes they are not needed for this.", "author": "b56girard@gmail.com", "id": 9901089, "time": "2015-02-10T05:01:21Z"}, {"text": "Created attachment 8564017\nPart 1: Expose the element id", "author": "b56girard@gmail.com", "id": 9916598, "time": "2015-02-13T09:48:42Z"}, {"text": "We discussed this in person:\n- We're going to split out 1) the part where we get the node name, 2) the part where we get a restyle cause.\n- We're going to put part 2) behind a profiler feature since it's more costly to collect.", "author": "b56girard@gmail.com", "id": 9916637, "time": "2015-02-13T09:58:43Z"}, {"text": "Comment on attachment 8564017\nPart 1: Expose the element id\n\nReview of attachment 8564017:\n-----------------------------------------------------------------\n\nYou should expose the restyle hint as well", "author": "jmuizelaar@mozilla.com", "id": 9916771, "time": "2015-02-13T10:44:00Z"}, {"text": "Comment on attachment 8564017\nPart 1: Expose the element id\n\nReview of attachment 8564017:\n-----------------------------------------------------------------\n\nThis is basically the same patch of mine.\nIn this part, we simply log element id (if available) in profiler label, and split the Style bar into smaller chunks.", "author": "ffantasy1999@gmail.com", "id": 9921738, "time": "2015-02-16T01:39:17Z"}, {"text": "Comment on attachment 8564017\nPart 1: Expose the element id\n\n(Sorry for the few days of delay here -- I was out on Friday and Monday, and I'm catching up on reviews now.)\n\n># Node ID f76ef9f7800919c91b94d5a639025d9b1cbb20d5\n># Parent  2f5c5ec1a24b9da27ee21e737239289f0f7105ec\n>[PATCH] Bug 1129249 - Make Restyle label splitted based on element id\n\nI don't quite understand what this commit message is saying -- needs some clarification.\n\nMaybe it means to say something like \"Include element ID in profiler logging for restyle events\"?\n\n>+++ b/layout/base/RestyleManager.cpp\n>@@ -3494,20 +3494,32 @@ ElementRestyler::RestyleChildrenOfDispla\n> \n> void\n> ElementRestyler::ComputeStyleChangeFor(nsIFrame*          aFrame,\n>                                        nsStyleChangeList* aChangeList,\n>                                        nsChangeHint       aMinChange,\n>                                        RestyleTracker&    aRestyleTracker,\n>                                        nsRestyleHint      aRestyleHint)\n> {\n>   nsIContent* content = aFrame->GetContent();\n[...]\n>+  nsAutoCString idStr;\n>+  if (content) {\n>+    nsIAtom * id = content->GetID();\n>+    if (id)\n>+      id->ToUTF8String(idStr);\n>+  }\n\nTwo stylistic nits:\n 1) s/nsIAtom * id/nsIAtom* id/\n 2) Add braces around one-line \"if\" statement.\n\nAnd one more important functional nit:\nIt looks like we're doing this string-copying *unconditionally* here, regardless of whether the profiler is running.  That's a bit wasteful, since 99.99% of the time that this is called in the real world, we won't be profiling.  Can we wrap this whole chunk in a \"if you are actually profiling\" check of some sort? (e.g. maybe this should be inside of #ifndef MOZ_ENABLE_PROFILER_SPS -- but that's probably still not enough, since (I think?) that flag will be on by default in our release builds, and the fact remains that those builds aren't going to be using this output 99.99% of the time.)\n\n>+  const char* elemName = \"?\";\n>+  if (content && content->GetID()) {\n>+    elemName = idStr.get();\n>+  }\n\nTwo things:\n 1) This re-check of \"content && content->GetId()\" seems redundant. (We already checked those things above, where we initialized idStr.) Seems like it'd be cleaner to move the \"elemName\" decl up top, to where we declare \"idStr\", and then set it to idStr.get() in the same clause where we populate idStr.\n\n 2) the naming difference between \"elemName\" vs. \"idStr\" don't make sense to me, since these variables represent the same thing AFAICT. Maybe call them \"elemIdStr\" and \"elemIDCharPtr\"?  (or something along those lines, to make it clearer that they're the same.)\n\n>+  profiler_tracing(\"Paint\", \"Styles\", TRACING_INTERVAL_START);\n>+  PROFILER_LABEL_PRINTF(\"ElementRestyler\", \"ComputeStyleChangeFor\",\n>+      js::ProfileEntry::Category::CSS, \"Element: %s\", elemName);\n\n(Why \"Paint\" here? We're not necessarily painting... Though I guess we have \"Paint\" everywhere.)\n\n>+        profiler_tracing(\"Paint\", \"Styles\", TRACING_INTERVAL_END);\n>         return;\n>       }\n>     }\n>   }\n>+  profiler_tracing(\"Paint\", \"Styles\", TRACING_INTERVAL_END);\n\nDo we need this call at every return path? (looks like it)\n\nI'd much prefer we use an RAII guard object to set this & automatically clean it up when we return, so that we don't need to boilerplate & we don't get bugs from forgetting to add this call at future return-paths.", "author": "dholbert@mozilla.com", "id": 9933043, "time": "2015-02-18T21:34:58Z"}, {"text": "(In reply to Daniel Holbert [:dholbert] from comment #11)\n> (Why \"Paint\" here? We're not necessarily painting... Though I guess we have\n> \"Paint\" everywhere.)\n\n(by \"everywhere\" I meant \"in almost all other calls to profiler_tracing\"; so I guess it's reasonable enough to have it here as well. I couldn't find documentation for profiler_tracing, so I don't really know what \"Paint\" means in this context; is it saying \"We're beginning a thing that might trigger a paint\"?)", "author": "dholbert@mozilla.com", "id": 9933085, "time": "2015-02-18T21:40:44Z"}, {"text": "Comment on attachment 8564017\nPart 1: Expose the element id\n\n(r- for now, per comment 11)", "author": "dholbert@mozilla.com", "id": 9937523, "time": "2015-02-19T21:22:15Z"}, {"text": "Do you want to address these comments chiajung since it's your patch?", "author": "b56girard@gmail.com", "id": 9938056, "time": "2015-02-19T22:51:31Z"}, {"text": "(In reply to Benoit Girard (:BenWa) from comment #14)\n> Do you want to address these comments chiajung since it's your patch?\n\nSure, I can fix them :)", "author": "ffantasy1999@gmail.com", "id": 9949306, "time": "2015-02-24T00:54:16Z"}, {"text": "Created attachment 8568398\npart 1 (v2)\n\nThis is part 1, so I removed all confusing things.\nTo avoid cost, I add a new profiler feature -- restyle. This patch only affect code behavior when enable the feature now.", "author": "ffantasy1999@gmail.com", "id": 9950154, "time": "2015-02-24T06:48:18Z"}, {"text": "Comment on attachment 8568398\npart 1 (v2)\n\n(I'm just reviewing the RestyleManager code here; I'm assuming BenWa will take the profiler code.)\n\n>+  const char* elemName = nullptr;\n>+  nsAutoCString idStr;\n>+  if (profiler_feature_active(\"restyle\") && content) {\n>+    elemName = \"?\";\n>+    nsIAtom* id = content->GetID();\n>+    if (id) {\n>+      id->ToUTF8String(idStr);\n>+      elemName = idStr.get();\n>+    }\n>+  }\n\nAs noted in comment 11, the naming-difference between elemName vs. idStr doesn't make sense to me. (When elemName contains anything meaningful, it's the ID; so it seems like it should have \"id\" in its variable name.)\n\nAlso: I worry slightly that someone might come along and \"optimize\" the idStr declaration to be inside of the \"if\" statements, since that's where it's directly used -- which would be bad because it'd leave a dangling pointer to freed stack-memory in elemName, after idStr goes out of scope.\n\nTo address these concerns, could you:\n (1) Get rid of elemName\n (2) Drop the elemName =  \"?\"; line, and replace it with an \"else { idStr.AssignLiteral(\"?\"); }, after the \"if (id)\" check.\n (3) Replace all elemName null-checks with 'content' null-checks, and replace elemName in the PROFILER_LABEL_PRINTF call with idStr.get().\n\n>+  PROFILER_LABEL_PRINTF(\"ElementRestyler\", \"ComputeStyleChangeFor\",\n>+      js::ProfileEntry::Category::CSS, elemName ? \"Element: %s\" : \"%s\", elemName ? elemName : \"\");\n\nI'd prefer a newline after each comma here, to make this more readable. Two ternary statements on a single line makes for pretty hard-to-read code.\n\nSo this would end up as:\n  PROFILER_LABEL_PRINTF(\"ElementRestyler\", \"ComputeStyleChangeFor\",\n                        js::ProfileEntry::Category::CSS,\n                        content ? \"Element: %s\" : \"%s\",\n                        content ? idStr.get() : \"\");\n\nr=me with that", "author": "dholbert@mozilla.com", "id": 9952262, "time": "2015-02-24T17:58:48Z"}, {"text": "Comment on attachment 8568398\npart 1 (v2)\n\nReview of attachment 8568398:\n-----------------------------------------------------------------\n\n::: layout/base/RestyleManager.cpp\n@@ +3524,4 @@\n>    nsIContent* content = aFrame->GetContent();\n> +  const char* elemName = nullptr;\n> +  nsAutoCString idStr;\n> +  if (profiler_feature_active(\"restyle\") && content) {\n\nIMO just checking if profiling is enabled should be sufficient here. This is a tad costly but not greatly so. I think this should be always on.\n\nNow the remaining changes you have should be behind this \"restyle\" feature so you should keep the platform.cpp changes in this patch for part 2.", "author": "b56girard@gmail.com", "id": 9954068, "time": "2015-02-24T23:56:21Z"}, {"text": "(In reply to Daniel Holbert [:dholbert] from comment #17)\n> Comment on attachment 8568398\n> part 1 (v2)\n> \n> (I'm just reviewing the RestyleManager code here; I'm assuming BenWa will\n> take the profiler code.)\n> \n> >+  const char* elemName = nullptr;\n> >+  nsAutoCString idStr;\n> >+  if (profiler_feature_active(\"restyle\") && content) {\n> >+    elemName = \"?\";\n> >+    nsIAtom* id = content->GetID();\n> >+    if (id) {\n> >+      id->ToUTF8String(idStr);\n> >+      elemName = idStr.get();\n> >+    }\n> >+  }\n> \n> As noted in comment 11, the naming-difference between elemName vs. idStr\n> doesn't make sense to me. (When elemName contains anything meaningful, it's\n> the ID; so it seems like it should have \"id\" in its variable name.)\n> \n> Also: I worry slightly that someone might come along and \"optimize\" the\n> idStr declaration to be inside of the \"if\" statements, since that's where\n> it's directly used -- which would be bad because it'd leave a dangling\n> pointer to freed stack-memory in elemName, after idStr goes out of scope.\n> \n> To address these concerns, could you:\n>  (1) Get rid of elemName\n>  (2) Drop the elemName =  \"?\"; line, and replace it with an \"else {\n> idStr.AssignLiteral(\"?\"); }, after the \"if (id)\" check.\n>  (3) Replace all elemName null-checks with 'content' null-checks, and\n> replace elemName in the PROFILER_LABEL_PRINTF call with idStr.get().\n> \n> >+  PROFILER_LABEL_PRINTF(\"ElementRestyler\", \"ComputeStyleChangeFor\",\n> >+      js::ProfileEntry::Category::CSS, elemName ? \"Element: %s\" : \"%s\", elemName ? elemName : \"\");\n> \n> I'd prefer a newline after each comma here, to make this more readable. Two\n> ternary statements on a single line makes for pretty hard-to-read code.\n> \n> So this would end up as:\n>   PROFILER_LABEL_PRINTF(\"ElementRestyler\", \"ComputeStyleChangeFor\",\n>                         js::ProfileEntry::Category::CSS,\n>                         content ? \"Element: %s\" : \"%s\",\n>                         content ? idStr.get() : \"\");\n> \n> r=me with that\nOK\n(In reply to Benoit Girard (:BenWa) from comment #18)\n> Comment on attachment 8568398\n> part 1 (v2)\n> \n> Review of attachment 8568398:\n> -----------------------------------------------------------------\n> \n> ::: layout/base/RestyleManager.cpp\n> @@ +3524,4 @@\n> >    nsIContent* content = aFrame->GetContent();\n> > +  const char* elemName = nullptr;\n> > +  nsAutoCString idStr;\n> > +  if (profiler_feature_active(\"restyle\") && content) {\n> \n> IMO just checking if profiling is enabled should be sufficient here. This is\n> a tad costly but not greatly so. I think this should be always on.\n> \n> Now the remaining changes you have should be behind this \"restyle\" feature\n> so you should keep the platform.cpp changes in this patch for part 2.\n\nOK, and since bug 1123237 may not land very soon and I think they are not dependent, I will include some stack stuff in part 2, too.", "author": "ffantasy1999@gmail.com", "id": 9954569, "time": "2015-02-25T02:14:19Z"}, {"text": "Created attachment 8569653\npart 1(final)\n\nCarry r+. Let's land part 1 first.\n\nTry ticket:\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=85e0c0b5e529", "author": "ffantasy1999@gmail.com", "id": 9960558, "time": "2015-02-26T07:16:33Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/e3eb286a2f3f", "author": "cbook@mozilla.com", "id": 9960786, "time": "2015-02-26T08:48:16Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/e3eb286a2f3f", "author": "kwierso@gmail.com", "id": 9965376, "time": "2015-02-27T02:30:14Z"}, {"text": "Created attachment 8571251\npart2(v1)\n\nPart 2. In this part I store JS cause of restyle in profiler label and split the \"Style Bar\" on the graph into smaller ones with PseudoStack.\n\nI tried the method in bug 1123237, but all stack labels of JS are js::RunScript, which seems less useful.\n\nBTW, I don't know why pseudo stack of ProfilerBacktrace contains only tons of js::RunScript now.", "author": "ffantasy1999@gmail.com", "id": 9972769, "time": "2015-03-02T09:45:30Z"}, {"text": "Comment on attachment 8571251\npart2(v1)\n\n>From 5921944a69d08f3b2fa48b430b5b78dbedaf69ee Mon Sep 17 00:00:00 2001\n>From: chiajung hung <chung@mozilla.com>\n>Date: Mon, 2 Mar 2015 17:30:26 +0800\n>Subject: [PATCH] Bug 1129249 - Add a \"restyle\" feature to GeckoProfiler and\n> split the style label in               GeckoProfiler front-end based on the\n> restyleSource\n\nThis commit message looks a bit mangled (odd whitespace and newlining).\n\n(Maybe a git artifact? Anyway, needs a tweak before this can land to hg.m.o. In particular, the main commit message should all be on a single line.)\n\n>+++ b/layout/base/RestyleManager.cpp\n>+class ProfilerTrackingStyleRAII {\n>+public:\n>+  ProfilerTrackingStyleRAII(ProfilerBacktrace* pb = nullptr) {\n>+    profiler_tracing(\"Paint\", \"Styles\", pb, TRACING_INTERVAL_START);\n>+  }\n>+  ~ProfilerTrackingStyleRAII() {\n>+    profiler_tracing(\"Paint\", \"Styles\", TRACING_INTERVAL_END);\n>+  }\n\nA few things:\n (1) This should be a class that can be used for all profiler_tracing() calls. Its constructor should take 2 const char* args, instead of hardcoding \"Paint\" & \"Styles\", and cache the args in const char* member-vars for use in the destructor.  (One minor concern with that: it's conceivable that someone could mess this up by allocating a string, passing it into the constructor, and then deallocating it before the destructor runs. But that's pretty unlikely, given that we generally use hardcoded string-constants for these calls, and those are never deallocated -- and also, this class is stack-allocated/RAII & hence will be auto-destructed before anything declared before it is auto-destructed. So I'm not actually concerned about this problem; someone would have to be *really* trying to shoot themself in the foot to hit it.)\n\n (2) Given (1), this class should live in a profiler header somewhere, not in RestyleManager.cpp.\n\n (3) This class needs some macros to enforce that it's *actually used* in an RAII way -- see https://developer.mozilla.org/en-US/docs/Using_RAII_classes_in_Mozilla#Assertions and http://mxr.mozilla.org/mozilla-central/source/mfbt/GuardObjects.h#22 -- in particular, you need a MOZ_STACK_CLASS annotation and the same MOZ_[...]GUARD[...] macros used in nsAutoScriptBlocker in that MDN article.\n\n\nYou'll need to #include \"mozilla/Attributes.h\" and \"mozilla/GuardObjects.h\" wherever you define your RAII class, to get these annotations.\n\nI'd also suggest spinning off a helper-bug to create the RAII class & use it everywhere that's appropriate, and then this patch can just layer on top of that & make use of the class.\n\n> void\n> ElementRestyler::ComputeStyleChangeFor(nsIFrame*          aFrame,\n>                                        nsStyleChangeList* aChangeList,\n>@@ -3521,8 +3531,10 @@ ElementRestyler::ComputeStyleChangeFor(nsIFrame*          aFrame,\n>                                        RestyleTracker&    aRestyleTracker,\n>                                        nsRestyleHint      aRestyleHint)\n> {\n>+  nsAutoPtr<ProfilerTrackingStyleRAII> profilerRAII;\n[...]\n>+      profilerRAII = new ProfilerTrackingStyleRAII(rs->mBacktrace);\n\nThis won't work with MOZ_STACK_CLASS. Best to never create RAII objects on the heap, since that allows you to use them in a non-RAII way (and have them last forever, accidentally).  In this case nsAutoPtr would make that pretty safe, but still best to prevent that sort of issue altogether.\n\nYou really want \"Maybe<profilerRAII> profilerRAII;\" here, and profilerRAII.emplace(rs->mBacktrace); at the instantiation-point.  (This is similar to nsAutoPtr, except it uses stack memory, so there's nothing to leak and no way to let the RAII thing stick around forever.)\n\n>+  nsAutoPtr<const char> stack;\n[...]\n>+      stack = rs->mStack;\n[...]\n>+      rs->mStack = nullptr;\n\nI don't understand what's going on here.\n\nIn particular:\n (0) \"stack\" & \"mStack\" are probably better named \"jsStack\", to make it clearer what they refer to. In particular: despite the name, this is not a generalized stack data-structure.\n (1) Your 'stack' variable here is a nsAutoPtr to a *single* const char.  But it looks like mStack (where it gets assigned from) is actually a character *array* (a string). So, 'stack' should perhaps really be a nsAutoArrayPtr? (I don't know where the memory was allocated, & whether it was allocated with \"new char\", \"new char[]\", \"malloc\", or something else, so I don't know what's right.)\n (2) I don't really understand how stack/mStack's lifetime is managed, or why we need to steal it from rs here. Why can't we just trust \"rs\" to manage this string, and just co-opt it for our usage in this function?  (i.e. why do we need this 'stack' local variable in the first place?)", "author": "dholbert@mozilla.com", "id": 9974740, "time": "2015-03-02T18:14:26Z"}, {"text": "we have part 2", "author": "ffantasy1999@gmail.com", "id": 9989353, "time": "2015-03-05T07:32:11Z"}, {"text": "Created attachment 8573738\npart2(v2)\n\n@Jeff, \nCan you help review profiler changes?\n\n@Daniel\nI think PrintJSStack() allocate memory by js_malloc, so I use js_free to free it now. There are several places in codebase use profiler_tracing with START/END directly. And some of them live in different scope, for example: [1] only start the profiler_tracing, and end in [2] which can not be replaced with the RAII. I found about 6~7 places can be replaced with it, and since it affect serveral files, I think it derserves a separate bug.\n\n[1]https://dxr.mozilla.org/mozilla-central/source/gfx/layers/client/ClientLayerManager.cpp#254\n[2]https://dxr.mozilla.org/mozilla-central/source/gfx/layers/ipc/ShadowLayers.cpp#670", "author": "ffantasy1999@gmail.com", "id": 9995054, "time": "2015-03-06T06:51:41Z"}, {"text": "Created attachment 8573741\npart 2(v2)\n\nWrong file attached", "author": "ffantasy1999@gmail.com", "id": 9995064, "time": "2015-03-06T06:57:48Z"}, {"text": "Comment on attachment 8573741\npart 2(v2)\n\nmstange should be a better reviewer.", "author": "b56girard@gmail.com", "id": 9995078, "time": "2015-03-06T07:07:54Z"}, {"text": "(In reply to Chiajung Hung [:chiajung] from comment #26)\n> @Daniel\n> I think PrintJSStack() allocate memory by js_malloc, so I use js_free to\n> free it now.\n\nSo, let's step back -- I'm unclear on how/why we're using PrintJSStack() here, in the first place.\n\nI only see one actual call to PrintJSStack() in our current codebase, in some android debug-logging in PowerManagerService.cpp.  Are you sure it's something we need & want to be using in the profiler?  If so, where is the resulting pretty-printed stack exposed in the profiler? (And why do we need that pretty-printed stack here, but not in any of the pre-existing profiler spots?)\n\nSupposing that we do actually want to be calling PrintJSStack -- I'm not sure if js_free is the right way to free its buffer.  It looks like it's ultimately a wrapper for JS::FormatStackDump() (after several layers of abstraction), and from some brief MXR searching, it looks like we free FormatStackDump()'s result using JS_smprintf_free(): \nhttp://mxr.mozilla.org/mozilla-central/source/js/src/builtin/TestingFunctions.cpp?rev=cac62569779c&mark=1970-1970,1974-1974#1970\n...though JS_smprintf_free is *actually* just a wrapper for js_free. Bleh. Not sure why we bother with that; maybe someone on the JS team knows. But we should probably be consistent about how we free it (and that should be documented somewhere -- if you do end up using PrintJSStack here, could you file a bug on documenting it, so that it's clearer what its correct usage is?)\n\n\n> There are several places in codebase use profiler_tracing with\n> START/END directly. And some of them live in different scope, for example:\n> [1] only start the profiler_tracing, and end in [2] which can not be\n> replaced with the RAII.\n\nGotcha, so maybe we can't drop *all* the profiler_tracing calls. It looks like we can simplify a lot of them, though. (& yeah, separate bug makes sense for that).", "author": "dholbert@mozilla.com", "id": 9995181, "time": "2015-03-06T07:40:03Z"}, {"text": "Two more notes on PrintJSStack:\n - According to hg blame, PrintJSStack() was added in bug 600304, just as a debugging aid on Android, where we can't call the debugging function \"DumpJSStack()\". This reduces my confidence that this is something we should actually be calling as part of normal (non-debugging) execution.  (Note that we have 0 calls to DumpJSStack() in our codebase -- it's intended to just be called from GDB, and I think the same is true of PrintJSStack.)\n\n - Looks like PrintJSStack's helper-method \"xpc_PrintJSStack\" does have a *little* bit of documentation[1] which confirms that JS_smprintf_free is the correct way to free its returned buffer, if we do end up keeping the call.\n\n[1] http://mxr.mozilla.org/mozilla-central/source/js/xpconnect/src/xpcprivate.h#2974", "author": "dholbert@mozilla.com", "id": 9997308, "time": "2015-03-06T17:32:04Z"}, {"text": "(In reply to Chiajung Hung [:chiajung] from comment #23)\n> Created attachment 8571251\n> part2(v1)\n> \n> Part 2. In this part I store JS cause of restyle in profiler label and split\n> the \"Style Bar\" on the graph into smaller ones with PseudoStack.\n> \n> I tried the method in bug 1123237, but all stack labels of JS are\n> js::RunScript, which seems less useful.\n\nThat's what's in the PseudoStack, but during stack postprocessing we merge JS function names in between the js::RunScript pseudostack entries, at least when you're profiling with the \"js\" feature selected. How are you starting the profiler?\n\nIn other words, you shouldn't need PrintJSStack at all, just enable js profiling in the profiler.", "author": "mstange@themasta.com", "id": 9998119, "time": "2015-03-06T20:05:17Z"}, {"text": "(In reply to Markus Stange [:mstange] from comment #31)\n> (In reply to Chiajung Hung [:chiajung] from comment #23)\n> > Created attachment 8571251\n> > part2(v1)\n> > \n> > Part 2. In this part I store JS cause of restyle in profiler label and split\n> > the \"Style Bar\" on the graph into smaller ones with PseudoStack.\n> > \n> > I tried the method in bug 1123237, but all stack labels of JS are\n> > js::RunScript, which seems less useful.\n> \n> That's what's in the PseudoStack, but during stack postprocessing we merge\n> JS function names in between the js::RunScript pseudostack entries, at least\n> when you're profiling with the \"js\" feature selected. How are you starting\n> the profiler?\n> \n> In other words, you shouldn't need PrintJSStack at all, just enable js\n> profiling in the profiler.\nThanks for the information.\n\nI enable the profiler by following command before\n./profiler.sh start -p b2g -f restyle\n\nI will try to get the stack from PseudoStack with this new command and see the different.\n./profiler.sh start -p b2g -f restyle,js", "author": "ffantasy1999@gmail.com", "id": 10007154, "time": "2015-03-10T02:43:15Z"}, {"text": "I tried the patch in bug 1123237, and enable profiler with js feature.\nIt works as expected, so I block this by bug 1123237, and will upload a new version based on it later.", "author": "ffantasy1999@gmail.com", "id": 10008184, "time": "2015-03-10T09:53:49Z"}, {"text": "Created attachment 8575799\npart 2(v3)\n\nAfter some more test, I think the js stack string is redundant, since profile like:\nhttp://people.mozilla.org/~bgirard/cleopatra/#report=e5a0a45abdfa05c4f85dc54e57589956c11a30cd&filter=[{%22type%22%3A%22RangeSampleFilter%22,%22start%22%3A7010,%22end%22%3A7584},{%22type%22%3A%22RangeSampleFilter%22,%22start%22%3A7280,%22end%22%3A7424}]\n\ncontains all I need in the graph now.\n\nStyle#5 and 6 shows the stack of self expanding restyle now, which make the stack in the detailed profile useless now, so I decided to drop it now.", "author": "ffantasy1999@gmail.com", "id": 10013607, "time": "2015-03-11T06:16:15Z"}, {"text": "Created attachment 8575801\npart 2(v3-1)", "author": "ffantasy1999@gmail.com", "id": 10013616, "time": "2015-03-11T06:19:28Z"}, {"text": "Comment on attachment 8575801\npart 2(v3-1)\n\nReview of attachment 8575801:\n-----------------------------------------------------------------\n\nLooks good to me.", "author": "mstange@themasta.com", "id": 10016227, "time": "2015-03-11T17:48:47Z"}, {"text": "Comment on attachment 8575801\npart 2(v3-1)\n\n>+++ b/tools/profiler/TableTicker.h\n>@@ -77,6 +77,7 @@ class TableTicker: public Sampler {\n>     mTaskTracer = hasFeature(aFeatures, aFeatureCount, \"tasktracer\");\n>     mLayersDump = hasFeature(aFeatures, aFeatureCount, \"layersdump\");\n>     mDisplayListDump = hasFeature(aFeatures, aFeatureCount, \"displaylistdump\");\n>+    mProfileRestyle = hasFeature(aFeatures, aFeatureCount, \"restyle\");\n[...]\n>+  bool ProfileRestyle() const { return mProfileRestyle; }\n[...]\n>   bool mDisplayListDump;\n>+  bool mProfileRestyle;\n\nTrivial nit: these TableTicker changes don't belong in this patch -- they've already been made in mozilla-central, as part of your patch 1, here:\n  http://hg.mozilla.org/mozilla-central/diff/e3eb286a2f3f/tools/profiler/TableTicker.h\n\n(So, this part of the patch doesn't apply to current trunk. The rest seems to apply, though.)\n\nMore review comments coming shortly.", "author": "dholbert@mozilla.com", "id": 10016374, "time": "2015-03-11T18:11:48Z"}, {"text": "With this patch applied, I get this build error locally:\n{\nIn file included from $OBJDIR/layout/generic/Unified_cpp_layout_generic1.cpp:2:\nIn file included from $SRCDIR/layout/generic/nsFirstLetterFrame.cpp:17:\nIn file included from $SRCDIR/layout/generic/../base/RestyleManager.h:17:\nIn file included from $SRCDIR/layout/generic/../base/RestyleTracker.h:19:\n../../dist/include/ProfilerBacktrace.h:18:23: error: unknown type name 'JSStreamWriter'\n  void StreamJSObject(JSStreamWriter& b);\n                      ^\n}\n\nLooks like ProfilerBacktrace.h doesn't #include or forward-declare all its dependencies, and this is just the first spot to uncover that problem.\n\nPlease add \"class JSStreamWriter;\" to ProfilerBacktrace.h (above its other forward-decl) -- this fixes this build error for me.", "author": "dholbert@mozilla.com", "id": 10016472, "time": "2015-03-11T18:27:45Z"}, {"text": "(I filed bug 1142181 on reordering ProfilerBacktrace.cpp's #includes so that we can catch issues like comment 38 more directly. If you'd like to take that & add the JSStreamWriter forward-decl as part of that patch [instead of adding the forward-decl here], that works for me.)", "author": "dholbert@mozilla.com", "id": 10016502, "time": "2015-03-11T18:33:18Z"}, {"text": "Comment on attachment 8575801\npart 2(v3-1)\n\nReview of attachment 8575801:\n-----------------------------------------------------------------\n\n::: layout/base/RestyleManager.cpp\n@@ +3534,5 @@\n>      }\n> +\n> +    if (profiler_feature_active(\"restyle\")) {\n> +      aRestyleTracker.mRestyleSources.RemoveAndForget(content->AsElement(), rs);\n> +      if (rs.get()) {\n\nJust use:\n  if (rs) {\n\n@@ +3538,5 @@\n> +      if (rs.get()) {\n> +        profilerRAII.emplace(\"Paint\", \"Styles\", rs->mBacktrace);\n> +        rs->mBacktrace = nullptr; // profiler_tracing calls delete this object\n> +      } else {\n> +        profilerRAII.emplace(\"Paint\", \"Styles\", nullptr);\n\nIf we get rid of \"RestyleSource\" and just replace it with a ProfilerBacktrace as suggested below, then we don't actually need this \"if/else\" anymore. (since RemoveAndForget's failure \"nullptr\" value will be the right thing to pass into profilerRAII.emplace for the \"else\" clause).\n\n::: layout/base/RestyleTracker.h\n@@ +373,5 @@\n> +\n> +  struct RestyleSource {\n> +    ProfilerBacktrace* mBacktrace;\n> +    uint32_t mCount;\n> +  };\n\nTwo distinct things here:\n (1) mCount:\nWhat's the point of \"mCount\" here? We set it and increment it, but never actually read it. So maybe it should just go away? (and in that case, maybe the RestyleSource class is an unnecessary layer of encapsulation, since then it'd just contain one thing -- a ProfilerBacktrace pointer)\n\n...and this second thing is only relevant if we're keeping this class (so ignore, if you act on (1) & remove mCount & this class):\n (2) mBacktrace is a heap-allocated thing, and it'd be nice to be sure we're not leaking it, when RestyleSource goes away. To be sure about that, I think this struct (RestyleSource) needs a destructor that: (a) Asserts that mBacktrace is null (can we assert that? Are we guaranteed to hit the code in RestyleManager that nulls it out?) (b) Calls profiler_free_backtrace(mBacktrace), in case it's not null.\n\nFor (2) to be safe, we *also* need a constructor, so that a default-constructed \"RestyleSource foo;\" won't just inadvertantly free random memory when it's destructed. Maybe just add a constructor that takes a ProfilerBacktrace*, and initialize mBacktrace to that & mCount to 1? (in the init list)\n\n(Side-note: I also filed bug 1142197 on putting ProfilerBacktrace instances in UniquePtrs instead of raw pointers. Once we've fixed that bug, that'll give us (2) automatically; but we may still want (1) as a sanity-check.)\n\n@@ +402,5 @@\n> +\n> +    if (profiler_feature_active(\"restyle\")) {\n> +      RestyleSource* rs = new RestyleSource;\n> +      rs->mBacktrace = profiler_get_backtrace();\n> +      rs->mCount = 1;\n\nPer my above suggestion, this would then become:\n  RestyleSource* rs = new RestyleSource(profiler_get_backtrace());\n\n@@ +403,5 @@\n> +    if (profiler_feature_active(\"restyle\")) {\n> +      RestyleSource* rs = new RestyleSource;\n> +      rs->mBacktrace = profiler_get_backtrace();\n> +      rs->mCount = 1;\n> +      mRestyleSources.Put(aElement, rs);\n\nWe should assert that mRestyleSources doesn't already have a value for aElement before we do this.\n\n@@ +409,5 @@\n>      return false;\n> +  } else if (profiler_feature_active(\"restyle\")) {\n> +    RestyleSource* rs = nullptr;\n> +    mRestyleSources.Get(aElement, &rs);\n> +    if (rs) {\n\n(0) This whole \"else if...\" clause may be unnecessary, if we do away with mCount (since this clause is just about updating mCount)\n\nBut if we happen to keep this code:\n(1) Don't bother initializing \"rs\" to nullptr.\n(2) The correct way to check for \"nsClassHashtable::Get\" success is to check its return-value -- not its outparam.\n\n::: tools/profiler/GeckoProfiler.h\n@@ +231,5 @@\n>  };\n>  \n> +class ProfilerBacktrace;\n> +\n> +class MOZ_STACK_CLASS GeckoProfilerTrackingRAII {\n\nThis class-name probably wants s/Tracking/Tracing/ (since this is about the \"profiler_tracing\" function call, not \"tracking\")", "author": "dholbert@mozilla.com", "id": 10017124, "time": "2015-03-11T20:17:11Z"}, {"text": "Comment on attachment 8575801\npart 2(v3-1)\n\nMarking r- (instead of \"r+ with comments addressed), because if we do remove \"mCount\" (as I think we maybe should, since it's unused), and then remove RestyleSource as a result of that, then this patch will look different-enough that it's worth one more sanity-check review before landing.", "author": "dholbert@mozilla.com", "id": 10017147, "time": "2015-03-11T20:20:21Z"}, {"text": "Also: I'm not 100% sure that ComputeStyleChangeFor() is the right place to be doing all of this.\n\nIf I break there in GDB (after a \":hover\"-triggered style change) and go up a few stack-levels, I get to RestyleTracker::DoProcessRestyles, which has this code, which seems like it may be a better place to be doing this:\n>         nsAutoPtr<RestyleData> data;\n>         if (!GetRestyleData(element, data)) {\n>           LOG_RESTYLE(\"skipping, already restyled\");\n>           continue;\n>         }\n> \n>         ProcessOneRestyle(element, data->mRestyleHint, data->mChangeHint);\n>         AddRestyleRootsIfAwaitingRestyle(data->mDescendants);\nhttp://mxr.mozilla.org/mozilla-central/source/layout/base/RestyleTracker.cpp?rev=c6c310429562&mark=302-309#302\n\nIf we could hook in here instead of ComputeStyleChangeFor, then we could hang our backtrace off of the existing \"RestyleData\" struct, instead of needing an all-new \"RestyleSource\" struct & an all-new \"mRestyleSources\" map.\n\nAlso, we'd then be keeping all of this profiling code in one set of files -- RestyleTracker.* -- instead of having it spread between RestyleTracker.h and RestyleManager.cpp.", "author": "dholbert@mozilla.com", "id": 10017331, "time": "2015-03-11T20:48:09Z"}, {"text": "That sounds similar to what I played around with a few weeks ago: https://pastebin.mozilla.org/8825369\nI wasn't going to land that patch, but it seems like something like that is what we need here.", "author": "mstange@themasta.com", "id": 10017490, "time": "2015-03-11T21:14:19Z"}, {"text": "Hmm, though I guess ProcessOneRestyle() *can* include stuff like RecreateFramesForContent() (via RestyleElement), and we may (?) not want to consider that as \"restyle\" work. (It can be expensive, and is a different sort of work from recomputing style data.)\n\n(Though -- if (a) we allow profiler_tracing() calls to be nested, and (b) we have appropriate \"profiler_tracing()\" calls around the expensive parts of RecreateFramesForContent to classify them as whatever profiler-category is appropriate, then this would be a non-issue. Not sure if either of those are true.)\n\n(Hypothetically if we were to move this profiling code up to the ProcessOneRestyle neighborhood, we'd need to catch *both* ProcessOneRestyle callers, as Markus's pastebin does -- and we'd also need to be able to transfer the ProfilerBacktrace* from RestyleData to RestyleEnumerateData (a temporary object), as his patch does.)", "author": "dholbert@mozilla.com", "id": 10017524, "time": "2015-03-11T21:22:09Z"}, {"text": "(I'm not too worried about my concern from the beginning of comment 44, FWIW -- the possibility of counting RecreateFramesForContent() in the \"restyle\" category. While RecreateFramesForContent is technically more of a frame-tree-surgery sort of thing, it does happen *during* restyle code, so it's reasonable in that sense to count it.  And if we end up wanting to separate it out, I'll bet we can extend the profiler to support that -- to let us 'push' a new profiler_tracing context when we enter RecreateFramesForContent, e.g. -- if that doesn't already work.)", "author": "dholbert@mozilla.com", "id": 10017653, "time": "2015-03-11T21:43:39Z"}, {"text": "(In reply to Daniel Holbert [:dholbert] from comment #40)\n> Two distinct things here:\n>  (1) mCount:\n> What's the point of \"mCount\" here? \n[...]\n>  (2) mBacktrace is a heap-allocated thing, and it'd be nice to be sure we're\n> not leaking it, when RestyleSource goes away. To be sure about that, I think\n> this struct (RestyleSource) needs a destructor that: (a) Asserts that\n> mBacktrace is null (can we assert that? Are we guaranteed to hit the code in\n> RestyleManager that nulls it out?) (b) Calls\n> profiler_free_backtrace(mBacktrace), in case it's not null.\n[...]\n> (Side-note: I also filed bug 1142197 on putting ProfilerBacktrace instances\n> in UniquePtrs instead of raw pointers. Once we've fixed that bug, that'll\n> give us (2) automatically; but we may still want (1) as a sanity-check.)\n\n\nSorry, I got my indexing into an inconsistent state when editing my writing here. At the end, I meant to say that UniquePtr will give us \"(b) automatically\", and we may still want \"(a)\". (not (2)/(1))", "author": "dholbert@mozilla.com", "id": 10018400, "time": "2015-03-12T00:58:00Z"}, {"text": "Created attachment 8576459\npart 2(v4)\n\nAddress most comment above and move the implementation to RestyleTracker. This make it clearer and compact.", "author": "ffantasy1999@gmail.com", "id": 10019125, "time": "2015-03-12T06:14:22Z"}, {"text": "Comment on attachment 8576459\npart 2(v4)\n\nThe count is originally for a case like\nfunction changeStyle() {\n    elt.style.visibility = \"visible\";\n    elt.style.width = \"100%\";\n    elt.style.height = \"100%\";\n}\n\neach line in this function trigger a restyle and all such manipulations in JS code before restyle should contribute a stack. So we want to count how many spot to show something like \"(X more...)\" on the stack. \n\nBTW, if we want record all these stacks somehow, someday we may need keep an array of ProfileBacktrace later.", "author": "ffantasy1999@gmail.com", "id": 10019175, "time": "2015-03-12T06:42:06Z"}, {"text": "(In reply to Chiajung Hung [:chiajung] from comment #48)\n> The count is originally for a case like\n[...]\n> So we want to count how\n> many spot to show something like \"(X more...)\" on the stack. \n\nMakes sense -- I figured it was something like that.\n\n> BTW, if we want record all these stacks somehow, someday we may need keep an\n> array of ProfileBacktrace later.\n\nYup, true.\n\nI looked at the new patch -- thanks for addressing those comments! I did notice you've still got the mRestyleSources map -- per second half of comment 42, I still think it'd be nice to hang the ProfileBacktrace off of RestyleData & RestyleEnumerateData, so we can co-opt the existing map instead of needing to maintain a separate one.\n\n(This new member-var on RestlyeData/RestyleEnumerateData should probably have type \"mozilla::UniquePtr<ProfilerBacktrace>\", which will give us cleanup & ownership transferring mostly-for-free -- so that we don't need a whole other map for it -- and will get us partway to bug 1142197.)\n\n(In case you're not familiar with UniquePtr: it's basically the same as nsAutoPtr, but it's got stronger guarantees & it's much more recent. There's a lot of old code that still uses nsAutoPtr, and we just stick with nsAutoPtr in some cases for consistency, but I'd suggest UniquePtr for these ProfilerTracing member-variables, in preparation for bug 1142197.)", "author": "dholbert@mozilla.com", "id": 10019296, "time": "2015-03-12T07:14:03Z"}, {"text": "(So we'd need to pass the ProfilerBacktrace into ProcessOneRestyle, via a new function-parameter e.g. \"mozilla::UniquePtr<ProfilerTracing> aRestyleSource\")", "author": "dholbert@mozilla.com", "id": 10019309, "time": "2015-03-12T07:16:30Z"}, {"text": "Created attachment 8576542\npart 2(v4-1)\n\nMake ProfilerBacktrace always goes to profiler_free_backtrace even if it is not used.", "author": "ffantasy1999@gmail.com", "id": 10019748, "time": "2015-03-12T09:35:59Z"}, {"text": "Comment on attachment 8576542\npart 2(v4-1)\n\nLooks good -- just needs to handle the one other call to ProcessOneRestyle, a bit further down.\n\n(which is why we need to add this to RestyleEnumerateData as well -- the code further down converts all of the RestyleData instances to RestyleEnumerateData before it calls ProcessOneRestyle.)", "author": "dholbert@mozilla.com", "id": 10020812, "time": "2015-03-12T14:49:23Z"}, {"text": "Created attachment 8577107\npart 2(v5)", "author": "ffantasy1999@gmail.com", "id": 10025044, "time": "2015-03-13T07:21:25Z"}, {"text": "Comment on attachment 8577107\npart 2(v5)\n\nAlmost there! This is just missing one thing -- as noted in my parenthetical in comment 49, please keep track of ProfilerBacktraces in these structs using a UniquePtr. (Most of my review notes in this comment are going to be related to that, FWIW) That way, ownership-transfering is automatic, and in the unlikely event that we create one of these structs and then bail out before clearing its mBacktrace, we can be sure it'll be cleaned up.\n\nNote that this means we'll implicitly be cleaning up mBacktrace using \"delete\" (in the UniquePtr destructor) instead of \"profiler_free_backtrace\", which is slightly inconsistent.  But I checked with aklotz in IRC, and he says he's fine with this, since (a) profiler_free_backtrace is really just \"delete\" after all, and (b) bug 1142197 will get rid of profiler_free_backtrace, and (c) UniquePtr lets us make this code so much cleaner.\n\n>+++ b/layout/base/RestyleTracker.cpp\n> struct RestyleEnumerateData : RestyleTracker::Hints {\n>   nsRefPtr<dom::Element> mElement;\n>+  ProfilerBacktrace* mBacktrace;\n> };\n\nSo this should be UniquePtr.\n\n> #ifdef RESTYLE_LOGGING\n>   collector->count++;\n>@@ -303,6 +306,11 @@ RestyleTracker::DoProcessRestyles()\n>           continue;\n>         }\n> \n>+        Maybe<GeckoProfilerTracingRAII> profilerRAII;\n>+        if (profiler_feature_active(\"restyle\")) {\n>+          profilerRAII.emplace(\"Paint\", \"Styles\", data->mBacktrace);\n>+          data->mBacktrace = nullptr; // profiler_tracing call free the backtrace\n\nThis last line (nulling out) should become unnecessary, once you've tweaked GeckoProfilerTracingRAII as I describe below.\n\n>+          Maybe<GeckoProfilerTracingRAII> profilerRAII;\n>+          if (profiler_feature_active(\"restyle\")) {\n>+            profilerRAII.emplace(\"Paint\", \"Styles\", currentRestyle->mBacktrace);\n>+            currentRestyle->mBacktrace = nullptr; // profiler_tracing call free the backtrace\n\nSame here.\n\n>diff --git a/layout/base/RestyleTracker.h b/layout/base/RestyleTracker.h\n>index a58ee1d..b295156 100644\n>--- a/layout/base/RestyleTracker.h\n>+++ b/layout/base/RestyleTracker.h\n>@@ -16,6 +16,8 @@\n> #include \"nsContainerFrame.h\"\n> #include \"mozilla/SplayTree.h\"\n> #include \"mozilla/RestyleLogging.h\"\n>+#include \"ProfilerBacktrace.h\"\n>+#include \"GeckoProfiler.h\"\n> \n> namespace mozilla {\n> \n>@@ -279,11 +281,19 @@ public:\n>     RestyleData() {\n>       mRestyleHint = nsRestyleHint(0);\n>       mChangeHint = NS_STYLE_HINT_NONE;\n>+      mBacktrace = nullptr;\n\nNo need for this 3rd line, after you make this a UniquePtr; UniquePtr is null by default.\n\n>     RestyleData(nsRestyleHint aRestyleHint, nsChangeHint aChangeHint) {\n>       mRestyleHint = aRestyleHint;\n>       mChangeHint = aChangeHint;\n>+      mBacktrace = nullptr;\n>+    }\n\nSame here.\n\n>+    ~RestyleData() {\n>+      if (mBacktrace) {\n>+        profiler_free_backtrace(mBacktrace);\n>+      }\n>     }\n\nYou don't need this destructor; just make mBacktrace a UniquePtr.\n\n>     // that we called AddPendingRestyle for and found the element this is\n>     // the RestyleData for as its nearest restyle root.\n>     nsTArray<nsRefPtr<Element>> mDescendants;\n>+    ProfilerBacktrace* mBacktrace;\n\nPer above notes, this should be UniquePtr<ProfilerBacktrace>.\n\n>+class MOZ_STACK_CLASS GeckoProfilerTracingRAII {\n>+public:\n>+  GeckoProfilerTracingRAII(const char* aCategory, const char* aInfo, ProfilerBacktrace* aBacktrace = nullptr\n>+                            MOZ_GUARD_OBJECT_NOTIFIER_PARAM)\n                             ^\nIndentation is off here -----^\n\nThe 3rd arg should probably be UniquePtr<ProfilerBacktrace>, to explicitly take ownership of the passed-in backtrace.\n\n(I think you can still provide a default-argument, e.g. something like:\n  UniquePtr<ProfilerBacktrace> aBacktrace = UniquePtr<ProfilerBacktrace>(nullptr)\nbut I'm not sure)\n\n>+    : mCategory(aCategory)\n>+    , mInfo(aInfo)\n>+  {\n>+    MOZ_GUARD_OBJECT_NOTIFIER_INIT;\n>+    profiler_tracing(mCategory, mInfo, aBacktrace, TRACING_INTERVAL_START);\n\nThis should now be \"aBacktrace.release()\" (which gives up ownership).\n\n(Once we've made the profiler APIs more UniquePtr<ProfilerBacktrace>-aware, in bug 1142197, we'll be able to drop the \"release\" here.)", "author": "dholbert@mozilla.com", "id": 10027422, "time": "2015-03-13T18:17:10Z"}, {"text": "Created attachment 8577854\npart 2(v5-1)\n\nSince UniquePtr has private operator=(), and the RAII need mBacktrace.release(), I can not pass const UniquePtr<ProfilerBacktrace>& nor UniquePtr<ProfilerBacktrace> into ctor. As a result, I removed the default parameter for it.\n\nTherefore, while clean up profiler_tracing calls in codebase, we should insert a ctor ProfilerRAII(const char*, const char*) for it, later.", "author": "ffantasy1999@gmail.com", "id": 10032465, "time": "2015-03-16T03:45:53Z"}, {"text": "Comment on attachment 8577854\npart 2(v5-1)\n\nReview of attachment 8577854:\n-----------------------------------------------------------------\n\nLooks great -- thanks! Just a few final notes.\n\nr=me with the following:\n\n::: layout/base/RestyleTracker.cpp\n@@ +306,5 @@\n>          }\n>  \n> +        Maybe<GeckoProfilerTracingRAII> profilerRAII;\n> +        if (profiler_feature_active(\"restyle\")) {\n> +          profilerRAII.emplace(\"Paint\", \"Styles\", data->mBacktrace);\n\nYou should be passing \"Move(data->mBacktrace)\" here. (See notes below on GeckoProfilerTracingRAII constructor).\n\n@@ +346,5 @@\n>            LOG_RESTYLE_INDENT();\n> +\n> +          Maybe<GeckoProfilerTracingRAII> profilerRAII;\n> +          if (profiler_feature_active(\"restyle\")) {\n> +            profilerRAII.emplace(\"Paint\", \"Styles\", currentRestyle->mBacktrace);\n\nSame here -- you should be passing \"Move(currentRestyle->mBacktrace)\" here. Also, you'll need to wrap that to a new line to avoid going over 80 characters.\n\n(See notes below on GeckoProfilerTracingRAII constructor)\n\n::: layout/base/RestyleTracker.h\n@@ +392,5 @@\n>  \n>    if (!existingData) {\n> +    RestyleData* rd = new RestyleData(aRestyleHint, aMinChangeHint);\n> +    if (profiler_feature_active(\"restyle\")) {\n> +      rd->mBacktrace.reset(profiler_get_backtrace());\n\n(Side note: right now, profiler_get_backtrace() is a wrapper for mozilla_sampler_get_backtrace(), which ultimately returns a \"new ProfilerBacktrace()\" expression. In bug 1142197, that call-stack should probably do allocation using \"MakeUnique\" instead of \"new\", which returns a smart-typed pointer instead of a raw pointer -- and then this line you're adding here will probably change to \"=\" instead of \".reset()\".)\n\n::: tools/profiler/GeckoProfiler.h\n@@ +234,5 @@\n> +class ProfilerBacktrace;\n> +\n> +class MOZ_STACK_CLASS GeckoProfilerTracingRAII {\n> +public:\n> +  GeckoProfilerTracingRAII(const char* aCategory, const char* aInfo, mozilla::UniquePtr<ProfilerBacktrace>& aBacktrace\n\nThis line is too long (looks like ~118 characters). Wrap it before \"mozilla::UniquePtr\".\n\nAlso: this shouldn't be a reference -- it should just be a UniquePtr. At least, the UniquePtr documentation says:\n * [...] To unconditionally transfer ownership of a UniquePtr\n * into a method, use a |UniquePtr| argument.\nhttp://mxr.mozilla.org/mozilla-central/source/mfbt/UniquePtr.h#148\n\nSo, please drop the \"&\". For this to work, you have to use \"Move()\" at the callsite -- seem my notes above for that. (As a bonus, this makes it more explicit that the pointer is being given up, at the callsite.)", "author": "dholbert@mozilla.com", "id": 10032737, "time": "2015-03-16T06:45:01Z"}, {"text": "Created attachment 8579904\npart 2(final)\n\nFix commit comment, and various UniquePtr usage in last review, carry r+.\n\nTry ticket:\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=d59c6b9f4828", "author": "ffantasy1999@gmail.com", "id": 10049995, "time": "2015-03-19T09:19:07Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/703caa5d845f", "author": "cbook@mozilla.com", "id": 10056082, "time": "2015-03-20T13:54:58Z"}, {"text": "This seems to have broken non-sps builds.", "author": "c@lightme.us", "id": 10060105, "time": "2015-03-21T11:32:02Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/703caa5d845f", "author": "philringnalda@gmail.com", "id": 10060936, "time": "2015-03-21T19:36:52Z"}], "cf_last_resolved": "2015-03-21T19:36:52Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2015-04-01T08:00:14Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1126646], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "Gecko Profiler", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla39", "is_cc_accessible": true, "status": "RESOLVED", "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "ffantasy1999@gmail.com", "id": 454145, "name": "ffantasy1999@gmail.com", "real_name": "Chiajung Hung [:chiajung]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "b56girard@gmail.com", "id": 368375, "name": "b56girard@gmail.com", "real_name": "Benoit Girard (:BenWa)"}, {"email": "bignose1007+bugzilla@gmail.com", "id": 473405, "name": "bignose1007+bugzilla@gmail.com", "real_name": "Jerry Shih[:jerry] (UTC+8) (inactive)"}, {"email": "c@lightme.us", "id": 467353, "name": "c@lightme.us", "real_name": "zhoubcfan@163.com"}, {"email": "dholbert@mozilla.com", "id": 278074, "name": "dholbert@mozilla.com", "real_name": "Daniel Holbert [:dholbert]"}, {"email": "ffantasy1999@gmail.com", "id": 454145, "name": "ffantasy1999@gmail.com", "real_name": "Chiajung Hung [:chiajung]"}, {"email": "howareyou322@gmail.com", "id": 452554, "name": "howareyou322@gmail.com", "real_name": "Peter Chang[:pchang]"}, {"email": "jmuizelaar@mozilla.com", "id": 309398, "name": "jmuizelaar@mozilla.com", "real_name": "Jeff Muizelaar [:jrmuizel]"}, {"email": "mstange@themasta.com", "id": 293943, "name": "mstange@themasta.com", "real_name": "Markus Stange [:mstange]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "chung@mozilla.com"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-04T02:12:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bgirard@mozilla.com"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-04T02:12:40Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "pchang@mozilla.com"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-04T02:39:13Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8558869, "added": "1"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-06T10:05:38Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "hshih@mozilla.com"}], "who": "bignose1007+bugzilla@gmail.com", "when": "2015-02-08T08:48:04Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8560364, "added": "1"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-09T09:10:10Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8561274, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8561819, "added": "review?(bgirard@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-10T02:46:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bgirard@mozilla.com)", "attachment_id": 8561819, "added": "review-"}], "who": "b56girard@gmail.com", "when": "2015-02-10T05:01:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "chung@mozilla.com, dholbert@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8564017, "added": "review?(dholbert@mozilla.com), feedback?(chung@mozilla.com)"}], "who": "b56girard@gmail.com", "when": "2015-02-13T09:59:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8564017, "added": "feedback+"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-16T01:39:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(chung@mozilla.com)", "attachment_id": 8564017, "added": "feedback+"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-16T02:27:18Z"}, {"changes": [{"field_name": "attachments.description", "removed": "Part 1: Expose the element name", "attachment_id": 8564017, "added": "Part 1: Expose the element id"}], "who": "dholbert@mozilla.com", "when": "2015-02-18T21:35:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8564017, "added": "review-"}], "who": "dholbert@mozilla.com", "when": "2015-02-19T21:22:15Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(chung@mozilla.com)"}], "who": "b56girard@gmail.com", "when": "2015-02-19T22:51:31Z"}, {"changes": [{"removed": "needinfo?(chung@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "ffantasy1999@gmail.com", "when": "2015-02-24T00:54:16Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8561819, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8564017, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8568398, "added": "review?(dholbert@mozilla.com), review?(bgirard@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-24T06:48:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8568398, "added": "review+"}], "who": "dholbert@mozilla.com", "when": "2015-02-24T17:58:48Z"}, {"changes": [{"removed": "x86_64", "field_name": "platform", "added": "All"}, {"removed": "unspecified", "field_name": "version", "added": "Trunk"}, {"removed": "Linux", "field_name": "op_sys", "added": "All"}], "who": "dholbert@mozilla.com", "when": "2015-02-24T17:58:59Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bgirard@mozilla.com)", "attachment_id": 8568398, "added": "review+"}], "who": "b56girard@gmail.com", "when": "2015-02-24T23:56:21Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1126646"}], "who": "howareyou322@gmail.com", "when": "2015-02-26T02:13:38Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8568398, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8569653, "added": "review+"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-26T07:16:33Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "checkin-needed"}], "who": "ffantasy1999@gmail.com", "when": "2015-02-26T07:16:55Z"}, {"changes": [{"removed": "checkin-needed", "field_name": "keywords", "added": ""}], "who": "cbook@mozilla.com", "when": "2015-02-26T08:48:16Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla39"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-02-26 18:30:14"}, {"removed": "---", "field_name": "cf_status_firefox39", "added": "fixed"}], "who": "kwierso@gmail.com", "when": "2015-02-27T02:30:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8571251, "added": "review?(dholbert@mozilla.com), review?(bgirard@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-02T09:45:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8571251, "added": "review-"}], "who": "dholbert@mozilla.com", "when": "2015-03-02T18:14:26Z"}, {"changes": [{"removed": "RESOLVED", "field_name": "status", "added": "REOPENED"}, {"removed": "FIXED", "field_name": "resolution", "added": ""}], "who": "ffantasy1999@gmail.com", "when": "2015-03-05T07:32:11Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8571251, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bgirard@mozilla.com)", "attachment_id": 8571251, "added": ""}, {"removed": "", "field_name": "cc", "added": "jmuizelaar@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8573738, "added": "review?(dholbert@mozilla.com), review?(jmuizelaar@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-06T06:51:41Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8573738, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com), review?(jmuizelaar@mozilla.com)", "attachment_id": 8573738, "added": ""}], "who": "ffantasy1999@gmail.com", "when": "2015-03-06T06:57:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8573741, "added": "review?(dholbert@mozilla.com), review?(jmuizelaar@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-06T06:58:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mstange@themasta.com"}, {"field_name": "flagtypes.name", "removed": "review?(jmuizelaar@mozilla.com)", "attachment_id": 8573741, "added": "review?(mstange@themasta.com)"}], "who": "b56girard@gmail.com", "when": "2015-03-06T07:07:54Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1123237"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-10T09:51:43Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8573741, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com), review?(mstange@themasta.com)", "attachment_id": 8573741, "added": ""}], "who": "ffantasy1999@gmail.com", "when": "2015-03-11T06:16:15Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8575799, "added": "1"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-11T06:19:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8575801, "added": "review?(dholbert@mozilla.com), review?(mstange@themasta.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-11T06:20:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mstange@themasta.com)", "attachment_id": 8575801, "added": "review+"}], "who": "mstange@themasta.com", "when": "2015-03-11T17:48:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8575801, "added": "review-"}], "who": "dholbert@mozilla.com", "when": "2015-03-11T20:20:21Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(chung@mozilla.com)"}], "who": "dholbert@mozilla.com", "when": "2015-03-11T20:48:53Z"}, {"changes": [{"removed": "needinfo?(chung@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "ffantasy1999@gmail.com", "when": "2015-03-12T06:14:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8576459, "added": "review?(dholbert@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-12T06:42:06Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8576459, "added": ""}], "who": "ffantasy1999@gmail.com", "when": "2015-03-12T06:54:37Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8575801, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8576459, "added": "1"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-12T09:35:59Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8576542, "added": "review?(dholbert@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-12T09:36:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8576542, "added": "feedback+"}], "who": "dholbert@mozilla.com", "when": "2015-03-12T14:49:23Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8576542, "added": "1"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-13T07:21:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8577107, "added": "review?(dholbert@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-13T07:25:12Z"}, {"changes": [{"removed": "1123237", "field_name": "depends_on", "added": "1142181"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-13T07:25:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8577107, "added": "feedback+"}], "who": "dholbert@mozilla.com", "when": "2015-03-13T18:17:10Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8577107, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8577854, "added": "review?(dholbert@mozilla.com)"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-16T03:45:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8577854, "added": "review+"}], "who": "dholbert@mozilla.com", "when": "2015-03-16T06:45:01Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8577854, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8579904, "added": "review+"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-19T09:19:07Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "checkin-needed"}], "who": "ffantasy1999@gmail.com", "when": "2015-03-19T09:19:32Z"}, {"changes": [{"removed": "checkin-needed", "field_name": "keywords", "added": ""}], "who": "cbook@mozilla.com", "when": "2015-03-20T13:54:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "zhoubcfan@163.com"}], "who": "c@lightme.us", "when": "2015-03-21T11:32:02Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1145988"}], "who": "jbeich@FreeBSD.org", "when": "2015-03-21T15:37:06Z"}, {"changes": [{"removed": "REOPENED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "2015-02-26 18:30:14", "field_name": "cf_last_resolved", "added": "2015-03-21 12:36:52"}], "who": "philringnalda@gmail.com", "when": "2015-03-21T19:36:52Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1149065"}], "who": "landry@openbsd.org", "when": "2015-04-01T08:00:14Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}