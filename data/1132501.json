{"status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8667064}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8667066}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8667069}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-09-29T16:16:49Z", "type_id": 748, "creation_date": "2015-09-29T16:16:49Z", "id": 1261872, "setter": "jryans@gmail.com"}], "content_type": "text/plain", "id": 8667343}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2015-09-29T20:51:10Z", "type_id": 607, "creation_date": "2015-09-29T20:51:10Z", "id": 1262145, "setter": "jryans@gmail.com"}], "content_type": "text/plain", "id": 8667475}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8668042}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8668688}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8673824}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8674297}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8686703}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-11-12T18:19:34Z", "type_id": 748, "creation_date": "2015-11-12T18:11:08Z", "id": 1291461, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8686704}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8687454}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8688132}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8688539}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8691051}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8699554}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8701662}, {"creator": "jlong@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-01-05T21:37:25Z", "type_id": 748, "creation_date": "2016-01-04T22:59:47Z", "id": 1316530, "setter": "bgrinstead@mozilla.com"}], "content_type": "text/plain", "id": 8703856}, {"creator": "jlong@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8704775}], "classification": "Client Software", "creator": "jlong@mozilla.com", "cc": ["bgrinstead@mozilla.com", "bruant.d@gmail.com", "editedredx@gmail.com", "epinal99-bugzilla2@yahoo.fr", "esigra@gmail.com", "fayolle-florent@orange.fr", "jlong@mozilla.com", "jordan@jsantell.com", "jryans@gmail.com", "jujjyl@gmail.com", "kwierso@gmail.com", "mjzffr@gmail.com", "nfitzgerald@mozilla.com", "oriol-bugzilla@hotmail.com", "past@mozilla.com", "poirot.alex@gmail.com", "sime.vidas@gmail.com"], "depends_on": [1113930, 1130214, 1137384, 1224822, 1234756, 1237795], "creation_time": "2015-02-12T16:34:52Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "x86", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Turn on the debugger whenever the devtools are opened", "cf_last_resolved": "2016-01-07T11:08:42Z", "assigned_to_detail": {"email": "jlong@mozilla.com", "id": 402289, "name": "jlong@mozilla.com", "real_name": "James Long (:jlongster)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "jlong@mozilla.com", "comment_count": 114, "comments": [{"text": "This is in prep for bug 670002. Let's go ahead and turn on the debugger if it's not already started when you are in the console. Note that this will be most of the time people open devtools since it's the first tool open.\n\nshu has done amazing work to make sure that it doesn't slow down the page a ton (everything can still go through Ion). We can make it even better over time.\n\nMy argument is this: if turning it on really is that bad, we need to fix that instead of avoiding it here. I would guess that the majority of users use our debugger a lot, so we should accept this instead of trying to optimize for the other case.\n\nIt also allows us to pause on `debugger` statements finally instead of just ignoring them if you haven't clicked the debugger stop, which is *super* weird.\n\nI'm going to do some research to see what the perf hit is, but in my early experiments it's been fine so far.", "author": "jlong@mozilla.com", "id": 9913078, "time": "2015-02-12T16:34:52Z"}, {"text": "Marking as blocking 956087, since this is specific to the console but would provide the groundwork for potentially enabling the debugger statement across the toolbox.", "author": "bgrinstead@mozilla.com", "id": 9913138, "time": "2015-02-12T16:48:01Z"}, {"text": "(In reply to Brian Grinstead [:bgrins] from comment #1)\n> Marking as blocking 956087, since this is specific to the console but would\n> provide the groundwork for potentially enabling the debugger statement\n> across the toolbox.\n\nIt definitely would. I think we should go through a release just enabling it on the toolbox to make sure there aren't complaints about the console making the page slower. I also need to look at the other tools because many of them (profiler, etc) have to enable debug mode as well, and if that's the case it really shouldn't be a problem making it toolbox-wide.", "author": "jlong@mozilla.com", "id": 9913191, "time": "2015-02-12T16:59:55Z"}, {"text": "Interesting graph from canuckistani: http://devtools-dash.paas.canuckistani.ca/tools-relative.html", "author": "jlong@mozilla.com", "id": 9913862, "time": "2015-02-12T19:27:21Z"}, {"text": "I just tested the performance impact. I found this demo: https://github.com/turbulenz/gargantia_editor. It uses the 3d Turbulenz engine, which is pretty large and complex, and runs a somewhat complex 3d flight game on it.\n\nI added code in one of the entities that averages out the amount of time between updates for that specific entity. This roughly measures the time between frames. The pseudo-code would be:\n\n      if(numSamples < 200) {\n        var now = Date.now();\n        avg = ((avg * numSamples) + (now - lastRunTime)) / (numSamples + 1);\n        numSamples++;\n        lastRunTime = Date.now();\n      }\n      else {\n        console.log('avg:', avg);\n      }\n\n\nI don't even do any console logs, because I don't care how about the performance of the console. All I care about is if enabling the debugger incurs a significant perf hit. Results:\n\nwith devtools closed: 16.53\nwith devtools open, but debugger not initialized: 16.76\nwith devtools open and debugger initialized: 16.54\n\nThe game is obviously running within it's 60 FPS budget, and requestAnimationFrame is limiting the frames to run 16.6ms apart (= 60 FPS). The may be a performance hit (which we don't see because of rAF throttling) but the important part is that it seems to be negligible. The game can still run smoothly, and this is a lot of code.\n\nI can find more test cases.\n\nIt definitely affects startup time, but that because the debugger is fully initialized and is fleshing out the whole UI with all the sources even though I'm not looking at it. I think that startup time is solvable; all we need is the Debugger object from it.", "author": "jlong@mozilla.com", "id": 9914778, "time": "2015-02-12T22:38:29Z"}, {"text": "jryans said he has a b2g app he'd be willing to fire up on a real b2g phone, and to see if there's an obvious performance degradation when enabling the debugger. Try interacting with the game and the console first before clicking the debugger tab, then click the debugger tab and see if it's noticeably slower. Thanks!", "author": "jlong@mozilla.com", "id": 9953589, "time": "2015-02-24T22:12:06Z"}, {"text": "(In reply to James Long (:jlongster) from comment #5)\n> jryans said he has a b2g app he'd be willing to fire up on a real b2g phone,\n> and to see if there's an obvious performance degradation when enabling the\n> debugger. Try interacting with the game and the console first before\n> clicking the debugger tab, then click the debugger tab and see if it's\n> noticeably slower. Thanks!\n\nI did not notice a notable slow down with the debugger tab opened.  It seemed to run at the same speed as before.\n\nThe game does use asm.js.", "author": "jryans@gmail.com", "id": 9954147, "time": "2015-02-25T00:11:07Z"}, {"text": "Created attachment 8667064\n1132501.patch\n\nThis is just a prototype. I'm waiting on a clobber build to finish to even test it, but I'm turning in for the night and wanted to post this. Think of it as pseudo-code.\n\nAs I dug into it more, it seems like if we are going to do this that it makes sense to do it on the `TabTarget`. It's unclear to me exactly the difference of `TabTarget` and `TabClient` though. Looking at `makeRemote` in `TabTarget`, though, it does basic bootstrapping of what a connected tab needs. If we are going to always be attaching the thread, we should just do it here in the tab, and the tab always has a `tab.threadClient` available.\n\nOr is there a better place for this? I think we should do this \"right\", and it seems like we could potentially clean up some of this other code (it assigns a `threadActor` variable in `makeRemote`, not sure why).", "author": "jlong@mozilla.com", "id": 10786676, "time": "2015-09-29T01:47:58Z"}, {"text": "Created attachment 8667066\n1132501.patch", "author": "jlong@mozilla.com", "id": 10786690, "time": "2015-09-29T01:49:41Z"}, {"text": "Created attachment 8667069\n1132501.patch\n\nHad to fix the reference to `Prefs`. Just tested, and this actually seems to work!\n\nNow I just need to change the debugger so the the tab shows that it's paused if it hasn't been initialized yet.", "author": "jlong@mozilla.com", "id": 10786786, "time": "2015-09-29T02:11:52Z"}, {"text": "Created attachment 8667343\n1132501.patch\n\nThis is working really well. This patch makes the target save the paused packet so that the debugger frontend can get it when it's initializing, and set the UI to the paused state if it should be (highlighting the line that paused, etc).\n\nThis also changes the debugger behavior to automatically switch to the debugger if a breakpoint or debugger statement is it. I've always wanted it to do that, and I think most people would expect that.", "author": "jlong@mozilla.com", "id": 10789229, "time": "2015-09-29T15:54:06Z"}, {"text": "One thing I don't understand is what the `WindowTarget` class is for in target.js. It won't have a threadClient, but now it sort of needs one. The protocol is for targets to always have one now.", "author": "jlong@mozilla.com", "id": 10789240, "time": "2015-09-29T15:56:48Z"}, {"text": "Comment on attachment 8667343\n1132501.patch\n\nReview of attachment 8667343:\n-----------------------------------------------------------------\n\nMy recommendation is we should still use a workflow like the inspector, as in the toolbox should cause these additional requests when it starts.\n\nAdding additional startup tasks to target or DebuggerClient is less good, because WebIDE creates many of these things for tab tracking, etc. and won't necessarily open a toolbox with them.\n\nSince we want this special behavior for the toolbox, it should be the toolbox that triggers the requests that make it happen.\n\nNow, the toolbox is a complicated module, so let's break it out if you want.  Simple modules are certainly nicer. :)", "author": "jryans@gmail.com", "id": 10789377, "time": "2015-09-29T16:16:49Z"}, {"text": "(In reply to James Long (:jlongster) from comment #11)\n> One thing I don't understand is what the `WindowTarget` class is for in\n> target.js. It won't have a threadClient, but now it sort of needs one. The\n> protocol is for targets to always have one now.\n\nWindowTargets were **meant** to be used when making a target for an entire chrome window[1] (so that would suggest Browser Toolbox).\n\nHowever, I think it's really an outdated, pre-RDP API.  The only uses I see end up in dead code.  I filed bug 1209634 to remove WindowTargets.\n\n[1]: https://dxr.mozilla.org/mozilla-central/source/devtools/client/framework/gDevTools.jsm#555", "author": "jryans@gmail.com", "id": 10789968, "time": "2015-09-29T17:54:09Z"}, {"text": "Created attachment 8667475\n1132501.patch\n\nI like how this is turning out. Basically I rip the thread state stuff out of the target, and the toolbox automatically attaches/detaches the thread. The toolbox still manually fires paused/resumed events on the target because it seems like listening to those events on the target is used a lot in other code.\n\nThe toolbox handles highlighting and selecting the debugger when paused/resumed. And if you want to check the state of the thread, you can just use the threadClient instance.", "author": "jlong@mozilla.com", "id": 10790463, "time": "2015-09-29T19:29:52Z"}, {"text": "Comment on attachment 8667475\n1132501.patch\n\nReview of attachment 8667475:\n-----------------------------------------------------------------\n\nETOOMANYNITS\n\nOverall, I think it's looking, but it would be good to clean up the thread-* event listeners from target, instead of emitting the event back there.\n\n::: devtools/client/debugger/debugger-controller.js\n@@ +216,5 @@\n> +    DebuggerView.Toolbar.toggleResumeButtonState(\n> +      this.activeThread.state,\n> +      !!pausedPacket\n> +    );\n> +    if(pausedPacket) {\n\nNit: if (\n\n(Try ESLint!)\n\n::: devtools/client/framework/attach-thread.js\n@@ +2,5 @@\n> +const Services = Cu.import(\"resource://gre/modules/Services.jsm\", {}).Services;\n> +const promise = require(\"promise\");\n> +\n> +function handleThreadState(toolbox, event, packet) {\n> +  toolbox.target.emit(\"thread-\" + event);\n\nWould it make more sense for the other consumers who listen for this on `target` to instead get the `threadClient` from the toolbox?\n\nIt seems surprising to me to emit this on the target, now that there is nothing else about thread state in the target.\n\n@@ +4,5 @@\n> +\n> +function handleThreadState(toolbox, event, packet) {\n> +  toolbox.target.emit(\"thread-\" + event);\n> +\n> +  if(event === \"paused\") {\n\nNit: if (\n\n@@ +7,5 @@\n> +\n> +  if(event === \"paused\") {\n> +    toolbox.highlightTool(\"jsdebugger\");\n> +\n> +    if(packet.why.type === 'debuggerStatement' ||\n\nNit: if (, use \" not '\n\n@@ +13,5 @@\n> +       packet.why.type === 'exception') {\n> +      toolbox.raise();\n> +      toolbox.selectTool(\"jsdebugger\");\n> +    }\n> +  }\n\nNit: } else {\n\n@@ +37,5 @@\n> +    }\n> +    threadClient.addListener(\"paused\", handleThreadState.bind(null, toolbox));\n> +    threadClient.addListener(\"resumed\", handleThreadState.bind(null, toolbox));\n> +\n> +    if (!threadClient.paused) {\n\nWhy are we always paused?  It seems like we did not assume that before.\n\n@@ +62,5 @@\n> +\n> +  return deferred.promise;\n> +}\n> +\n> +function detachThread(threadClient) {\n\nAdd a comment that we'll send a `detach` request when the target detaches from the entire DebuggerClient.\n\n::: devtools/client/framework/toolbox.js\n@@ +253,5 @@\n>    get target() {\n>      return this._target;\n>    },\n>  \n> +  get threadClient() {\n\nAdd a comment about why this is at the toolbox level.\n\n::: devtools/shared/client/main.js\n@@ +84,5 @@\n>      if (!this._listeners || !this._listeners[aName]) {\n>        return;\n>      }\n> +\n> +    if(!aListener) {\n\nNit: if (\n\n@@ +86,5 @@\n>      }\n> +\n> +    if(!aListener) {\n> +      this._listeners[aName] = [];\n> +    }\n\nNit: } else {", "author": "jryans@gmail.com", "id": 10790861, "time": "2015-09-29T20:51:10Z"}, {"text": "Pushed to try with DAMP enabled.  Will do some retriggers once it finishes to see if we can detect any regressions\n\nremote: Follow the progress of your build on Treeherder:\nremote:   https://treeherder.mozilla.org/#/jobs?repo=try&revision=769bce3ee777\nremote: \nremote: It looks like this try push has talos jobs. Compare performance against a baseline revision:\nremote:   https://treeherder.mozilla.org/perf.html#/comparechooser?newProject=try&newRevision=769bce3ee777", "author": "bgrinstead@mozilla.com", "id": 10790884, "time": "2015-09-29T20:56:40Z"}, {"text": "I fixed a few of the tests so this should look better. Still probably some related failures though.\n\nremote: Follow the progress of your build on Treeherder:\nremote:   https://treeherder.mozilla.org/#/jobs?repo=try&revision=bd420cc0170c\nremote:\nremote: It looks like this try push has talos jobs. Compare performance against a baseline revision:\nremote:   https://treeherder.mozilla.org/perf.html#/comparechooser?newProject=try&newRevision=bd420cc0170c", "author": "jlong@mozilla.com", "id": 10794491, "time": "2015-09-30T14:36:03Z"}, {"text": "So it looks like there's definitely a perf regression associated with this change (scroll down to 'damp opt'): https://treeherder.mozilla.org/perf.html#/compare?originalProject=fx-team&originalRevision=288d12e9236b&newProject=try&newRevision=769bce3ee777\n\nI've retriggered the ones that don't have many runs, but linux64 and windowsxp are both showing ~8% regressions.\n\nHaving a bit of trouble parsing the subtest view but here it is: https://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=fx-team&originalRevision=288d12e9236b&newProject=try&newRevision=769bce3ee777&originalSignature=25169736932930bc20f0437757e9399dadf68976&newSignature=25169736932930bc20f0437757e9399dadf68976", "author": "bgrinstead@mozilla.com", "id": 10794841, "time": "2015-09-30T15:39:26Z"}, {"text": "OK an update about the subtest view on perfherder - I've asked on IRC and the :wlach has confirmed that there's a frontend bug in the perfherder UI that's causing some data to not show up in that page, and that there should be a fix deployed soon for that.", "author": "bgrinstead@mozilla.com", "id": 10794892, "time": "2015-09-30T15:52:47Z"}, {"text": "(In reply to Brian Grinstead [:bgrins] from comment #19)\n> OK an update about the subtest view on perfherder - I've asked on IRC and\n> the :wlach has confirmed that there's a frontend bug in the perfherder UI\n> that's causing some data to not show up in that page, and that there should\n> be a fix deployed soon for that.\n\nSee Bug 1210009 for that work", "author": "bgrinstead@mozilla.com", "id": 10794949, "time": "2015-09-30T16:06:22Z"}, {"text": "Here's a push that doesn't block on attaching a thread. Code looks like this:\n\n      attachThread(this).then(thread => {\n        this._threadClient = thread;\n      });\n\n\nremote:   https://treeherder.mozilla.org/#/jobs?repo=try&revision=43aeb71f4a88\nremote:\nremote: It looks like this try push has talos jobs. Compare performance against a baseline revision:\nremote:   https://treeherder.mozilla.org/perf.html#/comparechooser?newProject=try&newRevision=43aeb71f4a88", "author": "jlong@mozilla.com", "id": 10795418, "time": "2015-09-30T17:33:29Z"}, {"text": "Just for kicks, here is a push with the attach/detach commented out. There should be no difference. Any of the jsdebugger runs will fail though.\n\nremote:   https://treeherder.mozilla.org/#/jobs?repo=try&revision=7ab59f681438\nremote:\nremote: It looks like this try push has talos jobs. Compare performance against a baseline revision:\nremote:   https://treeherder.mozilla.org/perf.html#/comparechooser?newProject=try&newRevision=7ab59f681438", "author": "jlong@mozilla.com", "id": 10795443, "time": "2015-09-30T17:36:01Z"}, {"text": "I *think* these are the correct comparison pages:\n\nComment 21: https://treeherder.mozilla.org/perf.html#/compare?originalProject=fx-team&originalRevision=55d38169a4ee&newProject=try&newRevision=43aeb71f4a88\nComment 22: https://treeherder.mozilla.org/perf.html#/compare?originalProject=fx-team&originalRevision=55d38169a4ee&newProject=try&newRevision=7ab59f681438", "author": "bgrinstead@mozilla.com", "id": 10795906, "time": "2015-09-30T18:56:58Z"}, {"text": "Created attachment 8668042\n1132501.patch\n\nHere's my latest patch. This still blocks opening on attaching the thread, but most of the tests should be fixed. I'm not sure about this though:\n\n 851 INFO TEST-UNEXPECTED-FAIL | devtools/client/webconsole/test/browser_webconsole_split_persist.js | leaked until shutdown [nsGlobalWindow #2774 outer about:blank] - expected PASS\n\n    1133487 Intermittent browser_webconsole_split_persist.js | uncaught exception - TypeError: self._init is not a function at chrome://global/content/bindings/toolbar.xml:144\n\nTEST-UNEXPECTED-FAIL | devtools/client/webconsole/test/browser_webconsole_view_source.js | application terminated with exit code 1\n\n1148225 Intermittent browser_webconsole_view_source.js | application terminated with exit code -11\n1145481 Intermittent browser_webconsole_view_source.js | application crashed [@ nsStandardURL::~nsStandardURL()] \n\nI don't really know even how to debug the crash. And that leak happened in an opt build, which is weird so I'm not sure how to debug that either if it's not the typical debug leak (I can't repro either locally).\n\nAny help with this would be great. And with reading DAMP and making decisions on what we should do.", "author": "jlong@mozilla.com", "id": 10795965, "time": "2015-09-30T19:14:22Z"}, {"text": "Are you able to reproduce locally? If so, make a debug build and add `--debugger gdb` to the end of the mach command. Then go from there.", "author": "nfitzgerald@mozilla.com", "id": 10796011, "time": "2015-09-30T19:26:09Z"}, {"text": "@fitzgen sort of, for me it just hangs (note that it's the very last test, and individually the test runs fine, so there's something else going on). Thanks, I'll see what I can do.", "author": "jlong@mozilla.com", "id": 10796062, "time": "2015-09-30T19:34:29Z"}, {"text": "I'd say first step is try with a debug build.", "author": "nfitzgerald@mozilla.com", "id": 10796096, "time": "2015-09-30T19:43:28Z"}, {"text": "(In reply to James Long (:jlongster) from comment #22)\n> Just for kicks, here is a push with the attach/detach commented out. There\n> should be no difference. Any of the jsdebugger runs will fail though.\n> \n> remote:  \n> https://treeherder.mozilla.org/#/jobs?repo=try&revision=7ab59f681438\n> remote:\n> remote: It looks like this try push has talos jobs. Compare performance\n> against a baseline revision:\n> remote:  \n> https://treeherder.mozilla.org/perf.html#/\n> comparechooser?newProject=try&newRevision=7ab59f681438\n\nAh, looks like DAMP is failing with that patch applied:\n\n2015-09-30 13:08:46,714 DEBUG : BROWSER_OUTPUT: Full message: TypeError: this._toolbox.threadClient is undefined\n2015-09-30 13:08:46,730 DEBUG : BROWSER_OUTPUT: Message: TypeError: this._toolbox.threadClient is undefined\n2015-09-30 13:08:46,809 DEBUG : BROWSER_OUTPUT: Full message: TypeError: panel is undefined", "author": "bgrinstead@mozilla.com", "id": 10796784, "time": "2015-09-30T21:48:30Z"}, {"text": "@bgrins yeah, that must be my other changes that assume it's there (thought that code wouldn't be hit). if we think this case is really important I can get it working, but seems like comparing it to a normal rev is the same thing.", "author": "jlong@mozilla.com", "id": 10797563, "time": "2015-10-01T03:59:39Z"}, {"text": "FWIW, to make sure there is no impact (even small), I just ran the Octane benchmarks with and without the Debugger attached and there's literally zero difference. I looked at the actual Octane scores and the total time spent from our performance tool. I don't think there's even a small impact. This has always been the theory (JS executes normally now under a debugger), but it's nice to see it play out that way.", "author": "jlong@mozilla.com", "id": 10800422, "time": "2015-10-01T21:05:13Z"}, {"text": "Created attachment 8668688\n1132501.patch\n\nrebased latest patch", "author": "jlong@mozilla.com", "id": 10800727, "time": "2015-10-01T22:06:51Z"}, {"text": "Try and perfherder push with the latest patch (which is taking into account a surprising 65% improvement across the board to DAMP over the last few days: https://groups.google.com/forum/#!searchin/mozilla.dev.tree-alerts/devtools$20at$20maximum$20performance|sort:date).\n\nLet's see how this turns up.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=f0e588d2f258\n\nhttps://treeherder.mozilla.org/perf.html#/compare?originalProject=mozilla-central&originalRevision=096c0f407f8b&newProject=try&newRevision=f0e588d2f258", "author": "bgrinstead@mozilla.com", "id": 10800785, "time": "2015-10-01T22:24:13Z"}, {"text": "*** Bug 956087 has been marked as a duplicate of this bug. ***", "author": "jlong@mozilla.com", "id": 10803107, "time": "2015-10-02T15:54:23Z"}, {"text": "One of the last failing tests is failing because of this specific line: https://github.com/mozilla/gecko-dev/blob/master/devtools/client/webconsole/test/browser_webconsole_bug_595350_multiple_windows_and_tabs.js#L63\n\nI guess we never opened multiple toolboxes at the same time with the debugger enabled. I looked at the protocol log and for some reason *all* toolboxes end up targeting the *same* thread, so somehow when we are connecting we're using something like `activeTab` and because everything opens up at once it ends up being the last opened tab. I'm not exactly sure if that's what happening, but it sure seems like it. I can't find any code where this obviously happens.\n\nIf I wait 1 second between opening tabs, the test passes. This is what I changed the code to;\n\n    setTimeout(() => {\n      openConsole(tab).then(function(index, hud) {\n        ok(hud, \"HUD is open for tab \" + index);\n        let window = hud.target.tab.linkedBrowser.contentWindow;\n        window.console.log(\"message for tab \" + index);\n        consolesOpen++;\n        if (consolesOpen == 4) {\n          // Use executeSoon() to allow the promise to resolve.\n          executeSoon(closeConsoles);\n        }\n      }.bind(null, i));\n    }, i * 1000);", "author": "jlong@mozilla.com", "id": 10805103, "time": "2015-10-03T03:34:25Z"}, {"text": "Actually I was wrong, they are different threads. I didn't realize the different `conn#`.\n\nJWL added threadClient server1.conn0.context26\nJWL added threadClient server1.conn1.context26\nJWL added threadClient server1.conn2.context26\nJWL added threadClient server1.conn3.context26\n\nStill though, opening the consoles after 1s each time fixed it so not sure what's going on.", "author": "jlong@mozilla.com", "id": 10805119, "time": "2015-10-03T04:07:39Z"}, {"text": "I figured it out (not really working on this today but still posting my results from yesterday). Threads are paused when they are initially attached, and the client sends a subsequent resume request. We force resuming the event loops to happen in a LIFO order: the last one to pause needs to be the next one that resumes. I'm assuming that 2 tabs are opening toolboxes, attaching, but resuming in a different order that they attached. The code to enforce this is here: https://github.com/mozilla/gecko-dev/blob/master/devtools/server/actors/script.js#L989-L991\n\nIf there are multiple event loops in a ThreadActor, does that mean that there's only one ThreadActor for the content process and thus *all* pages, even across tabs and windows? I actually forgot it worked that way. I need to look at this patch and see if I'm doing things correctly. I don't know how sending multiple `attach` requests works; it appears that multiple ThreadActors are created but somehow the event loops are communicating to each other (to know which order they are resumed).", "author": "jlong@mozilla.com", "id": 10805730, "time": "2015-10-03T19:35:07Z"}, {"text": "I fixed that test failure. Let's see what else shows up: https://treeherder.mozilla.org/#/jobs?repo=try&revision=0732ca504bb4", "author": "jlong@mozilla.com", "id": 10809425, "time": "2015-10-05T18:28:26Z"}, {"text": "Created attachment 8673824\n1132501.patch\n\nrebased", "author": "jlong@mozilla.com", "id": 10838729, "time": "2015-10-14T18:38:14Z"}, {"text": "Created attachment 8674297\n1132501.patch\n\nPrevious patch was rebased wrongly, here's one where all console tests pass locally.", "author": "jlong@mozilla.com", "id": 10841948, "time": "2015-10-15T15:49:19Z"}, {"text": "New try push: https://treeherder.mozilla.org/perf.html#/comparechooser?newProject=try&newRevision=58a051dd4bcb", "author": "jlong@mozilla.com", "id": 10842528, "time": "2015-10-15T18:03:16Z"}, {"text": "Oops, pasted the wrong link. https://treeherder.mozilla.org/#/jobs?repo=try&revision=58a051dd4bcb\n\nLooks like those errors magically went away! Getting close.", "author": "jlong@mozilla.com", "id": 10843530, "time": "2015-10-15T22:10:42Z"}, {"text": "Previous try is borked. New one: https://treeherder.mozilla.org/#/jobs?repo=try&revision=cde5165ef84e", "author": "jlong@mozilla.com", "id": 10860538, "time": "2015-10-21T18:06:20Z"}, {"text": "Oops, previous comment was not meant for this bug.", "author": "jlong@mozilla.com", "id": 10860540, "time": "2015-10-21T18:07:00Z"}, {"text": "Picking this up again. Rebased: https://treeherder.mozilla.org/#/jobs?repo=try&revision=d71ef1c637ff", "author": "jlong@mozilla.com", "id": 10927183, "time": "2015-11-12T16:10:42Z"}, {"text": "(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #15)\n> \n> ::: devtools/client/framework/attach-thread.js\n> @@ +2,5 @@\n> > +const Services = Cu.import(\"resource://gre/modules/Services.jsm\", {}).Services;\n> > +const promise = require(\"promise\");\n> > +\n> > +function handleThreadState(toolbox, event, packet) {\n> > +  toolbox.target.emit(\"thread-\" + event);\n> \n> Would it make more sense for the other consumers who listen for this on\n> `target` to instead get the `threadClient` from the toolbox?\n> \n> It seems surprising to me to emit this on the target, now that there is\n> nothing else about thread state in the target.\n> \n\nI know it's been a while, but I realized I never actually responded to this. I agree, but can I do that as a follow-up? This already feels a bit tricky to me so I'd like to go head and land it, and then it shouldn't be hard to update listeners of those events.", "author": "jlong@mozilla.com", "id": 10927215, "time": "2015-11-12T16:17:43Z"}, {"text": "(In reply to James Long (:jlongster) from comment #45)\n> (In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #15)\n> > \n> > ::: devtools/client/framework/attach-thread.js\n> > @@ +2,5 @@\n> > > +const Services = Cu.import(\"resource://gre/modules/Services.jsm\", {}).Services;\n> > > +const promise = require(\"promise\");\n> > > +\n> > > +function handleThreadState(toolbox, event, packet) {\n> > > +  toolbox.target.emit(\"thread-\" + event);\n> > \n> > Would it make more sense for the other consumers who listen for this on\n> > `target` to instead get the `threadClient` from the toolbox?\n> > \n> > It seems surprising to me to emit this on the target, now that there is\n> > nothing else about thread state in the target.\n> > \n> \n> I know it's been a while, but I realized I never actually responded to this.\n> I agree, but can I do that as a follow-up? This already feels a bit tricky\n> to me so I'd like to go head and land it, and then it shouldn't be hard to\n> update listeners of those events.\n\nI can live with that assuming you file the follow up and add comments with the bug number where the emitting and listening happens.", "author": "jryans@gmail.com", "id": 10927276, "time": "2015-11-12T16:35:03Z"}, {"text": "Created attachment 8686703\n1132501-asmjs.patch\n\nThis is a small patch on top of the last one. It keeps asm.js enabled until the debugger is actually used, which is very important if we're going to attach the thread eagerly.\n\nr? fitzgen because this actually change the default of all Debugger instances to *not* disable asm.js, and only the debugger disables it when it's opened. Might affect other tools that use Debugger instances.", "author": "jlong@mozilla.com", "id": 10927624, "time": "2015-11-12T18:08:52Z"}, {"text": "Created attachment 8686704\n1132501-asmjs.patch\n\nForgot a few cleanups", "author": "jlong@mozilla.com", "id": 10927639, "time": "2015-11-12T18:11:08Z"}, {"text": "I am going to write a few tests before landing this, but I want to see if anything is already breaking: https://treeherder.mozilla.org/#/jobs?repo=try&revision=58984cb0c26c", "author": "jlong@mozilla.com", "id": 10927649, "time": "2015-11-12T18:13:09Z"}, {"text": "Comment on attachment 8686704\n1132501-asmjs.patch\n\nReview of attachment 8686704:\n-----------------------------------------------------------------\n\nLGTM, just a couple comments below.\n\n::: devtools/client/debugger/debugger-controller.js\n@@ +226,5 @@\n>      }\n>  \n> +    // Disable asm.js so that we can set breakpoints and other things\n> +    // on asm.js scripts\n> +    this.reconfigureThread({ disableAsmJS: true });\n\nI think we should name this \"observeAsmJS\" or \"observeAndDisableAsmJS\" because \"disableAsmJS\" doesn't explain at all *why* you might want to do that.\n\n@@ +320,5 @@\n> +      aResponse => {\n> +        if (aResponse.error) {\n> +          let msg = \"Couldn't reconfigure thread: \" + aResponse.message;\n> +          Cu.reportError(msg);\n> +          dumpn(msg);\n\nWhile you're here, would you mind removing Cu.reportError and dumpn and using DTU.reportException in their place? Thanks!\n\n::: devtools/server/actors/script.js\n@@ +686,5 @@\n> +    if ('disableAsmJS' in options) {\n> +      this.dbg.allowUnobservedAsmJS = !options.disableAsmJS;\n> +    }\n> +\n> +    update(this._options, options || {});\n\nApparently options can be null/undefined and we handle that with this line, but the \"in\" operator above will throw before we get here. Make a default for options, or guard all this stuff on it or something.", "author": "nfitzgerald@mozilla.com", "id": 10927675, "time": "2015-11-12T18:19:34Z"}, {"text": "Created attachment 8687454\np.patch\n\nupdate w/fitzgen's comments (now calling the flag observeAsmJS).\n\nAlso fixed a major problem with regards to the initial pausing & resuming. The engine is initially paused, so we have to send a resume. I'm doing that in `attachThread` and blocking on it, so tools don't need to wait for a resume anymore. Needed to clean up a few places to make tests running again. Will post a try run soon.\n\nWe probably should talk more if we should block on that initial resume or not. I think it's fine to block", "author": "jlong@mozilla.com", "id": 10932386, "time": "2015-11-13T23:56:26Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=aee11a2d1305", "author": "jlong@mozilla.com", "id": 10932391, "time": "2015-11-13T23:58:25Z"}, {"text": "I think I've addressed all the above failures. optimistic that this'll work: https://treeherder.mozilla.org/#/jobs?repo=try&revision=5e3f1a581756", "author": "jlong@mozilla.com", "id": 10934586, "time": "2015-11-16T03:45:20Z"}, {"text": "Argh. Lost almost a whole day to this one. Sending the \"observeAsmJS\" flag in the \"reconfigure\" message when the debugger starts up was clearing out the sources, which made for some weird side effects (like multiple newSource notifications for an HTML file instead of just one, which triggered multiple `fetchEventListeners` requests...). Long story short, I definitely found the problem for this one. Let's see if there's anything else.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=5dff80766c55", "author": "jlong@mozilla.com", "id": 10937467, "time": "2015-11-16T22:48:01Z"}, {"text": "Created attachment 8688132\n1132501.patch", "author": "jlong@mozilla.com", "id": 10937468, "time": "2015-11-16T22:48:18Z"}, {"text": "I think this patch is ready to do. Unfortunately, we seem to have several intermittent tests that make it hard to decide if it's my fault or not. But looking through all those failures, I don't think any of them are mine.\n\nThe red dt2 failures, for instance, were blobuploader failures. All of the tests passed, but for some reason the machines had trouble uploaded stuff afterwards.", "author": "jlong@mozilla.com", "id": 10940129, "time": "2015-11-17T17:26:18Z"}, {"text": "Oops, meant to post this: https://treeherder.mozilla.org/#/jobs?repo=try&revision=8d204ea38d3d. I'm going to use checkin-needed to get the sheriff's opinion if I can push this or not.", "author": "jlong@mozilla.com", "id": 10940182, "time": "2015-11-17T17:41:03Z"}, {"text": "Created attachment 8688539\n1132501.patch", "author": "jlong@mozilla.com", "id": 10940302, "time": "2015-11-17T18:10:47Z"}, {"text": "sheriffs: there are failures in the above try but they seem like known intermittents and I can't imagine they are related. I don't know why they failed more than once or twice though.", "author": "jlong@mozilla.com", "id": 10940304, "time": "2015-11-17T18:11:34Z"}, {"text": "I went ahead and pushed this myself because I'm very eager to see if this is going to stick. I want this to land before thanksgiving next week.", "author": "jlong@mozilla.com", "id": 10944980, "time": "2015-11-18T21:26:38Z"}, {"text": "https://hg.mozilla.org/integration/fx-team/rev/e8c43ec095e3", "author": "pulsebot@bots.tld", "id": 10944982, "time": "2015-11-18T21:26:49Z"}, {"text": "All of the Gaia unit tests started failing with https://treeherder.mozilla.org/logviewer.html#?job_id=5800458&repo=fx-team when this landed. Backing you out to see if that's just a coincidence:\n\nhttps://hg.mozilla.org/integration/fx-team/rev/8e22c8aac023", "author": "kwierso@gmail.com", "id": 10945193, "time": "2015-11-18T22:34:55Z"}, {"text": "I'm at an absolute loss as to why this is making the mulet builds fail for gaia. I was able to reproduce it locally by building a mulet build and running gaia locally. This file opens up the devtools: https://github.com/mozilla/gecko-dev/blob/master/b2g/chrome/content/desktop.js\n\nLine 187 is where it opens them. If I delay opening them by a second or two, everything works fine. There is an error in the console that acts is if these two files are loaded in the wrong order: https://github.com/mozilla-b2g/gaia/blob/master/apps/ftu/index.html#L49-L50. I have *no* idea why attaching the thread would make them load in the wrong order.\n\nThis is so out of my comfort zone I'm worried about landing this before Thanksgiving, which is a real bummer :( Any insight would be appreciated...", "author": "jlong@mozilla.com", "id": 10952317, "time": "2015-11-20T19:51:43Z"}, {"text": "Alex you've worked with this stuff, and maybe can give me some clues. How does the mulet tests get notified that the devtools is finished loading? The devtools is going to load a little slower now, which is the only reason I can think of why it might be affecting things.", "author": "jlong@mozilla.com", "id": 10952318, "time": "2015-11-20T19:52:55Z"}, {"text": "I found it! \n\nWell, I found the crash. I finally figured out how to run the gaia unit tests locally under a real mulet build & config (this isn't actually documented anywhere, it's a combination of multiple setups), and sure enough, Firefox crashes and burns hard right before the test starts.\n\nThis is clearly a deeper issue within SpiderMonkey, where hooking a Debugger up freaks something out. Now I just need to dig around for the crash log which doesn't seem to be anywhere. Once I find more information about the crash I can file a new bug and it's not my problem anymore!", "author": "jlong@mozilla.com", "id": 10952756, "time": "2015-11-20T22:32:19Z"}, {"text": "I give up for now. I made a video, see end of my comment. I'm definitely going to need somebody else's help who is more familiar with how Gaia runs unit tests. It appears that Firefox isn't actually crashing; for some insane reason the test agent connection just randomly disconnects right before the tests start running. I have *zero* idea why this is connected to my patch.\n\nTo sum up: this patch connects a Debugger to the page whenever the toolbox opens, instead of waiting for the debugger to be used. The broke the gaia unit test runner under mulet, as seen here on try: https://treeherder.mozilla.org/#/jobs?repo=try&revision=464bbc35cd63. Mulet runs gaia within Firefox with responsive mode turned on and the devtools automatically opened (so there is a connection to my patch but this shouldn't really affect it). The tests just stops early with the message \"Build shut down unexpectedly\" with my patch. I was able to reproduce this locally after setting up a mulet build and running gaia unit tests.\n\nSomehow, connecting a debugger to the window under mulet makes it freak out. But Firefox is *not* crashing. I paused the python test runner and Firefox actually ran the tests fine and continued running; it's just the connection between the test client & server that closes for some reason.\n\nWatch this for a thorough walkthrough and to watch it happen: http://jlongster.com/s/failing-gaia.mp4", "author": "jlong@mozilla.com", "id": 10954062, "time": "2015-11-22T03:20:05Z"}, {"text": "STR:\n\n1. apply this patch on fx-team or master\n2. Build it with `ac_add_options --enable-application=b2g/dev`\n2. Set $FIREFOX to your build: `export FIREFOX=/Users/james/projects/mozilla/gecko-dev-quickfix/obj-x86_64-apple-darwin15.0.0/dist/NightlyDebug.app/Contents/MacOS/firefox`\n3. checkout gaia and `cd` into it\n4. Run `NO_LOCK_SCREEN=1 DEBUG=1 DESKTOP=0 make`\n5. Run `python tests/python/gaia-unit-tests/gaia_unit_test/main.py --binary $FIREFOX --profile ~/projects/mozilla/gaia/profile-debug system/test/unit/hierarchy_manager_test.js`\n\nThe last command runs a unit test in the mulet build with our patch. You'll see the \"build shutdown unexpectedly\" message.", "author": "jlong@mozilla.com", "id": 10956614, "time": "2015-11-23T16:03:26Z"}, {"text": "Hum, this isn't really optimal to run tests with devtools displayed to start with.\nBut your patch shouldn't also break anything...\nI'll take a look, but I can't promise the outcome, as you already chased this quite well!", "author": "poirot.alex@gmail.com", "id": 10956788, "time": "2015-11-23T16:43:19Z"}, {"text": "If you look at every failure on try push, you can see that it is always the same stdout.\nWe see a stacktrace from devtools toolbox opening, due to a dbg_assert call.\nThen various stuff related to gaia test harness and b2g initialization.\nAnd it always fails like this:\n15:55:14     INFO -  XXX FIXME : Dispatch a mozChromeEvent: apps-update-check\n15:55:15     INFO -  JavaScript error: jar:file:///home/worker/build/application/firefox/omni.ja!/components/BrowserElementParent.js, line 1176: NS_ERROR_NOT_IMPLEMENTED: SetNFCFocus for in-process mode is not yet supported\n15:55:17     INFO -  Build shut down unexpectedly\n\nI'm wondering if that's just a race in the test harness itself.\nLike, attaching debuggers slow down the startup of everything (gecko, gaia and the test harness) and the test misbehaves and kill itself because of a nasty race?", "author": "poirot.alex@gmail.com", "id": 10956823, "time": "2015-11-23T16:52:40Z"}, {"text": "Not really a race, but yes, the debugger is messing up with javasript behavior.\nIf you comment this line, tests work:\n  http://mxr.mozilla.org/mozilla-central/source/devtools/server/actors/script.js#1935\n  1935     this.unsafeSynchronize(this.sources.createSourceActors(aSource));\n\nI have to idea why we use unsafeSynchronize in so many places, but may be we really shouldn't ?!?\n\nI tried hard to figure out what exactly go wrong on test-agent side,\nbut haven't been able to figure out anything more than you. The Websocket shuts down on the python/server side and then the python automatically kills firefox.\nIf unsafeSynchronize breaks WebSocket API itself and make it close unexpectedly, it is going hard to find any additional clue.\n\nNote that unsafeSynchronize is being called when onNewScript fires for app://test-agent.gaiamobile.org/common/test/agent.js.", "author": "poirot.alex@gmail.com", "id": 10957708, "time": "2015-11-23T20:24:46Z"}, {"text": "That's too bad. I'm actually not sure about that call to it, though there's a comment that tries to explain it. I know we need the 2nd call to it further down because we need to fetch and parse sourcemaps, but block on it because we may need to set breakpoints on the script.\n\nI think we can eventually get rid of that first call to it. But not before this patch lands...\n\nThanks for figuring out that line specifically. I don't know why it would mess up websockets; we've never had any reports of the debugger having problem with websockets.\n\nI see two potential fixes:\n\n1. Delay opening the devtools for a second or two (after the test files load). Presumably that should fix the issue; no onNewScript events will fire.\n\n2. Add an option to `openToolbox` to not automatically attach the thread. We can remove this later once we get a proper fix in.", "author": "jlong@mozilla.com", "id": 10957868, "time": "2015-11-23T21:06:12Z"}, {"text": "(In reply to James Long (:jlongster) from comment #71)\n> I see two potential fixes:\n> \n> 1. Delay opening the devtools for a second or two (after the test files\n> load). Presumably that should fix the issue; no onNewScript events will fire.\n> \n> 2. Add an option to `openToolbox` to not automatically attach the thread. We\n> can remove this later once we get a proper fix in.\n\nA time-based delay sounds like a recipe for more intermittents, so I'd suggest going with #2.", "author": "jryans@gmail.com", "id": 10957933, "time": "2015-11-23T21:25:05Z"}, {"text": "Yeah, that's probably best for now. I'm *very* curious why it breaks things, but the synchronize is a hack and I'm pretty sure we can the one that seems to break this so I guess we'll just plan for that in the future.", "author": "jlong@mozilla.com", "id": 10957972, "time": "2015-11-23T21:32:27Z"}, {"text": "Created attachment 8691051\n1132501.patch\n\nAlright, this patch adds an option to `showToolbox` to not attach the thread. I don't know if you all want to look at it or not.\n\nNow I think there are still some other test failures...", "author": "jlong@mozilla.com", "id": 10958237, "time": "2015-11-23T22:37:36Z"}, {"text": "I also filed bug 1227317 to get rid of that nasty `unsafeSynchronize`.", "author": "jlong@mozilla.com", "id": 10958240, "time": "2015-11-23T22:38:00Z"}, {"text": "This is now blocked on bug 1113930, because it made a previous intermittent crash basically perma-fail. On linux debug it consistently fails with the crash linked to that bug. Luckily, somebody is working on it.", "author": "jlong@mozilla.com", "id": 10959120, "time": "2015-11-24T04:09:30Z"}, {"text": "Oops, wrong bug: bug 1224822", "author": "jlong@mozilla.com", "id": 10959122, "time": "2015-11-24T04:11:16Z"}, {"text": "Latest try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=80c448ed0dbf", "author": "jlong@mozilla.com", "id": 10959123, "time": "2015-11-24T04:11:40Z"}, {"text": "I applied the patch from bug 1224822 to confirm that it will actually fix it: https://treeherder.mozilla.org/#/jobs?repo=try&revision=f298456fde7e\n\nIf that works, I think this patch will be ready to land once the other one does.", "author": "jlong@mozilla.com", "id": 10960389, "time": "2015-11-24T15:42:42Z"}, {"text": "The patch that I applied was faulty, I got a new one from BenWa. Let's see if it fixes it... https://treeherder.mozilla.org/#/jobs?repo=try&revision=2598191dad78", "author": "jlong@mozilla.com", "id": 10960631, "time": "2015-11-24T16:50:25Z"}, {"text": "Let's get this baby landed https://treeherder.mozilla.org/#/jobs?repo=try&revision=11e586548eea", "author": "jlong@mozilla.com", "id": 11012795, "time": "2015-12-17T02:59:09Z"}, {"text": "Created attachment 8699554\n1132501.patch\n\nrebased & slightly updated patch", "author": "jlong@mozilla.com", "id": 11014710, "time": "2015-12-17T19:12:01Z"}, {"text": "Getting very, very close. Fixed several nasty failures, I think there is one last test to fix that is leaking a window. https://treeherder.mozilla.org/#/jobs?repo=try&revision=e22dfda61b1c", "author": "jlong@mozilla.com", "id": 11022685, "time": "2015-12-21T20:15:08Z"}, {"text": "Latest try with the patch from bug 1113930. There are still some obscure failures:\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=0986c2e5bdbe", "author": "jlong@mozilla.com", "id": 11025265, "time": "2015-12-22T17:05:00Z"}, {"text": "*** Bug 1234756 has been marked as a duplicate of this bug. ***", "author": "jlong@mozilla.com", "id": 11028651, "time": "2015-12-23T19:38:16Z"}, {"text": "I found a fix for bug 1234756. Here's the latest try: https://treeherder.mozilla.org/#/jobs?repo=try&revision=63eb6db15805\n\nAlso running talos for this one: https://treeherder.mozilla.org/perf.html#/comparechooser?newProject=try&newRevision=63eb6db15805\n\nSide note: we *really* need to clean up `_addSource` in the debugger server (that's where I had to fix the aforementioned bug)", "author": "jlong@mozilla.com", "id": 11028661, "time": "2015-12-23T19:41:47Z"}, {"text": "\\o/ -o/ \\o- I think the try gods finally looked on my favorably! This patch actually works finally!!\n\nThe above run had the patch from bug 1113930 applied. Along the way I discovered the tweaking something within the debugger server made things a lot more calm, so I'm curious if I don't need that fix anymore. Here's a run without it: https://treeherder.mozilla.org/#/jobs?repo=try&revision=4dcace340f02\n\nIt's not a big deal if that's the only bug blocking this. Looks like they are close to a solution.", "author": "jlong@mozilla.com", "id": 11029390, "time": "2015-12-24T02:04:47Z"}, {"text": "Created attachment 8701662\n1132501.patch\n\nThis patch has changed quite a bit, so time for a new review. I don't expect it to be done over Christmas, of course.", "author": "jlong@mozilla.com", "id": 11029391, "time": "2015-12-24T02:06:06Z"}, {"text": "Comment on attachment 8701662\n1132501.patch\n\nNick, it would be good if you checked out the debugger server changes. I discovered that we were calling `unsafeSynchronize` even if we don't have any breakpoints to set, which is pretty bad. Before we were strict on that, but we've introduced a second call to it which happens all the time.\n\nThat means we're calling `unsafeSynchronize` and spinning up an event loop for every newSource notification. Now that we attach the thread by default, that is happening for *every* devtools test, which seems to freak out a lot of stuff. Just look at the try run a few comments up. Various obscure weird C++ crashes happened, but removing the `unsafeSynchronize` call by default fixed all of that.\n\nThat probably means there are real bugs with it, but not calling it when we have no breakpoints is a good fix. It should also make startup faster.\n\nWe really should clean up `_addSource`, it's very ugly and confusing now.", "author": "jlong@mozilla.com", "id": 11029396, "time": "2015-12-24T02:10:35Z"}, {"text": "A note for my future self: I just realized that by avoiding the `unsafeSynchronize` call I just fixed that weird mulet test runner problem, described in comment 70. It was the source of all of that, so now I should be able to revert special-casing that test runner.", "author": "jlong@mozilla.com", "id": 11029417, "time": "2015-12-24T02:20:40Z"}, {"text": "Comment on attachment 8701662\n1132501.patch\n\nReview of attachment 8701662:\n-----------------------------------------------------------------\n\n::: devtools/server/actors/script.js\n@@ +689,2 @@\n>      // Update the global source store\n> +    this.sources.reconfigure(options);\n\nWhy doesn't this pass `this._options` anymore? The idea is that each reconfigure request needn't send the whole new option state, just the changed attributes. Thus, `options` here is only the changed attributes, not the whole state, which is what `this._options` is.", "author": "nfitzgerald@mozilla.com", "id": 11033349, "time": "2015-12-28T17:38:01Z"}, {"text": "(In reply to Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8] from comment #91)\n> Comment on attachment 8701662\n> 1132501.patch\n> \n> Review of attachment 8701662:\n> -----------------------------------------------------------------\n> \n> ::: devtools/server/actors/script.js\n> @@ +689,2 @@\n> >      // Update the global source store\n> > +    this.sources.reconfigure(options);\n> \n> Why doesn't this pass `this._options` anymore? The idea is that each\n> reconfigure request needn't send the whole new option state, just the\n> changed attributes. Thus, `options` here is only the changed attributes, not\n> the whole state, which is what `this._options` is.\n\nIf you look at the `reconfigure` method `TabSources.js`, I also changed that to accept a partial configuration object. It will only change options that exist in the object, instead of applying the entire object (assuming values are false by default).\n\nI may look into this again and see if there's a cleaner way to do it.", "author": "jlong@mozilla.com", "id": 11045024, "time": "2016-01-04T22:59:14Z"}, {"text": "Created attachment 8703856\n1132501.patch\n\nRebased patch", "author": "jlong@mozilla.com", "id": 11045027, "time": "2016-01-04T22:59:47Z"}, {"text": "Comment on attachment 8703856\n1132501.patch\n\nReview of attachment 8703856:\n-----------------------------------------------------------------\n\nFYI I've started reviewing this and will continue tomorrow\n\n::: devtools/client/framework/gDevTools.jsm\n@@ -381,5 @@\n>     * @param {Toolbox.HostType} hostType\n>     *        The type of host (bottom, window, side)\n>     * @param {object} hostOptions\n>     *        Options for host specifically\n> -   *\n\nLooks like an unintentional whitespace-only change\n\n::: devtools/client/framework/target.js\n@@ +526,5 @@\n>      }\n>    },\n>  \n> +  getPausedDetails: function() {\n> +    return this._pausedPacket;\n\nI don't think this function is ever called or this._pausedPacket is ever set\n\n::: devtools/client/webconsole/test/browser_webconsole_bug_1050691_click_function_to_source.js\n@@ -13,5 @@\n>  add_task(function*() {\n>    yield loadTab(TEST_URI);\n>    let hud = yield openConsole();\n>  \n> -  yield testWithoutDebuggerOpen(hud);\n\nThis removal appears to be removing actual code coverage (i.e. does clicking on a variable before the debugger has been opened work?).  Does this code have to be removed for the test to pass?", "author": "bgrinstead@mozilla.com", "id": 11045398, "time": "2016-01-05T01:24:43Z"}, {"text": "You are right on the first two comments (that functionality was moved to devtools/shared/client/main.js). Good catch.\n\nFor the test, yes it has to be removed. The problem before is that we didn't have the debugger backend available to get an object actor to pass to the debugger. Therefore if the debugger hadn't been initialized yet, it would open the variables side panel in the console. If it had been, it will go to the function in the source.\n\nNow the debugger is *always* initialized, so we can always go to the function in the source when clicking on it in the console. We'll never show it in a variables view. Whether or not we want to change that is a different issue, but now there is no concept of \"debugger not open\".", "author": "jlong@mozilla.com", "id": 11045427, "time": "2016-01-05T01:40:24Z"}, {"text": "Another try run just in cast the review is mostly formatting; wanted a fresh run done by the end of today.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=447ef726c875\nhttps://treeherder.mozilla.org/perf.html#/comparechooser?newProject=try&newRevision=447ef726c875", "author": "jlong@mozilla.com", "id": 11047003, "time": "2016-01-05T14:49:16Z"}, {"text": "Oops... made a stupid mistake in that last run.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=aff1b87ac583\nhttps://treeherder.mozilla.org/perf.html#/comparechooser?newProject=try&newRevision=aff1b87ac583", "author": "jlong@mozilla.com", "id": 11047518, "time": "2016-01-05T17:06:51Z"}, {"text": "Comment on attachment 8703856\n1132501.patch\n\nReview of attachment 8703856:\n-----------------------------------------------------------------\n\nMostly just some questions and small comments.  Please respond to the questions before landing, but r=me.\n\nI noticed a visual glitch when triggering a debugger statement while the inspector is opened.  The message with \"Debugger is paused.  Some features like mouse selection will not work.\" slides down for a second then back up.  It's a visual polish item, but can you file a follow up to fix that?\n\n::: devtools/client/debugger/content/reducers/sources.js\n@@ +19,5 @@\n>    case constants.ADD_SOURCE:\n>      emitChange('source', action.source);\n>      return mergeIn(state, ['sources', action.source.actor], action.source);\n>  \n> +  case constants.LOAD_SOURCES:\n\nWhy is this needed?\n\n::: devtools/client/debugger/debugger-controller.js\n@@ +304,5 @@\n>      // emit individual `newSource` notifications, which trigger\n>      // separate actions, so this won't do anything other than force\n>      // the server to traverse sources.\n> +    this.dispatch(actions.loadSources()).then(() => {\n> +      // If the engine is already paused, update the UI to represent the\n\nHow is the pause state UI related to loading sources?  Could this code happen on it's own outside of the promise resolution?\n\n@@ -401,5 @@\n> -      this.connectThread();\n> -\n> -      if (aThreadClient.paused) {\n> -        aThreadClient.resume(res => {\n> -          this._ensureResumptionOrder(res)\n\nThere are two places that got removed where _ensureResumptionOrder was called - are they not needed anymore?  It also used to guard resuming on `if (aThreadClient.paused)` but in attach-thread.js it resumes unconditionally.  Is this OK?\n\n::: devtools/client/debugger/test/mochitest/browser_dbg_break-unselected.js\n@@ +1,5 @@\n> +/* Any copyright is dedicated to the Public Domain.\n> +   http://creativecommons.org/publicdomain/zero/1.0/ */\n> +\n> +/**\n> + * Test setting breakpoints on an eval script\n\nThis comment needs to be updated to match what the tests is doing\n\n@@ +24,5 @@\n> +      // Wait until it's actually fully loaded\n> +      yield toolbox.loadTool(\"jsdebugger\");\n> +\n> +      const panel = toolbox.getCurrentPanel();\n> +      const actions = bindActionCreators(panel);\n\nNit: `actions` and `constants` are unused\n\n::: devtools/client/debugger/test/mochitest/browser_dbg_bug-896139.js\n@@ +21,5 @@\n> +\n> +    let Sources = win.DebuggerView.Sources;\n> +    yield waitForDebuggerEvents(panel, win.EVENTS.SOURCE_SHOWN);\n> +    if (Sources.selectedItem.attachment.source.url.indexOf(SCRIPT_URL) === -1) {\n> +      Sources.selectedValue = getSourceActor(win.DebuggerView.Sources, EXAMPLE_URL + SCRIPT_URL)\n\nI don't understand this - why is the selectedValue not set correctly already / why can't we still use waitForSourceShown?\n\n::: devtools/client/framework/attach-thread.js\n@@ +21,5 @@\n> +      toolbox.raise();\n> +      toolbox.selectTool(\"jsdebugger\");\n> +    }\n> +  }\n> +  else if (event === \"resumed\") {\n\nNit: please move the else up onto the same line as brace\n\n::: devtools/client/framework/toolbox.js\n@@ +1963,5 @@\n>      // Destroy the profiler connection\n>      outstanding.push(this.destroyPerformance());\n>  \n> +    // Detach the thread\n> +    detachThread(this._threadClient);\n\nThere is a potential race here if destroy is called before the thread is finished being attached.  This isn't something we handle very well generally in the toolbox now, but I have a feeling we should yield on opening before starting a destroy.  This could be done in a follow up since it might end up being a fair amount of work\n\n::: devtools/client/webide/test/test_runtime.html\n@@ +17,5 @@\n>      <script type=\"application/javascript;version=1.8\">\n>        window.onload = function() {\n>          SimpleTest.waitForExplicitFinish();\n>  \n> +        const { DebuggerServer } = require(\"devtools/server/main\");\n\nIs this change intentional?\n\n::: devtools/server/actors/script.js\n@@ +677,5 @@\n>    onReconfigure: function (aRequest) {\n>      if (this.state == \"exited\") {\n>        return { error: \"wrongState\" };\n>      }\n> +    const options = aRequest.options || {};\n\nI'm not sure about this file - Nick has reviewed it, right?", "author": "bgrinstead@mozilla.com", "id": 11048650, "time": "2016-01-05T21:37:25Z"}, {"text": "Thanks for the review!\n\n(In reply to Brian Grinstead [:bgrins] from comment #98)\n> Comment on attachment 8703856\n> 1132501.patch\n> \n> Review of attachment 8703856:\n> -----------------------------------------------------------------\n> \n> Mostly just some questions and small comments.  Please respond to the\n> questions before landing, but r=me.\n> \n> I noticed a visual glitch when triggering a debugger statement while the\n> inspector is opened.  The message with \"Debugger is paused.  Some features\n> like mouse selection will not work.\" slides down for a second then back up. \n> It's a visual polish item, but can you file a follow up to fix that?\n\nOh, interesting. I will file a follow up and look at that very soon. It looks like the inspector shows that message when it's highlighted and the debugger is paused? So the expected behavior is that the message stays up?\n\n> \n> ::: devtools/client/debugger/content/reducers/sources.js\n> @@ +19,5 @@\n> >    case constants.ADD_SOURCE:\n> >      emitChange('source', action.source);\n> >      return mergeIn(state, ['sources', action.source.actor], action.source);\n> >  \n> > +  case constants.LOAD_SOURCES:\n> \n> Why is this needed?\n\nThe source loading behavior before was a little weird: when you attach the debugger, you get `newSource` notifications for all future sources that come into existence. So when you reload the page, you'll get a dump of `newSource` notifications, which triggers the `ADD_SOURCE` action and adds a single source.\n\nBut what about the initial list of sources when the tools open? Previously, we would call the `sources` RDP command which gets the current list of sources. This forces all the sources to *be* created, and the server actually sends us a bunch of individual `newSource` packets. So even though we got a big list of sources from the `sources` RDP request, we already received all of them as individual `newSource` notifications. We just ignored the result of the `LOAD_SOURCES` action for optimization.\n \nYeah. Super non-intuitive.\n\nNow, the `sources` RDP request will most likely *not* trigger a flood of `newSource` notifications because the backend has probably already created them (because it was attached earlier, and something else could have requested specific sources to sourcemap or something). So we need to actually use the result of the `LOAD_SOURCES` action and \"merge in\" all of the source into our sources state.\n\nThat makes a lot more sense code-wise, anyway. We still might duplicate work (we had already added the source to our state because we also got a `newSource` notification), but all of this only happens when the toolbox initially loads, so the duplicate work isn't a huge deal.\n\nThis code will be a good bit cleaner when we use React to render the sources, because I can forego all the `emitChange` calls which is most of the code.\n\n> \n> ::: devtools/client/debugger/debugger-controller.js\n> @@ +304,5 @@\n> >      // emit individual `newSource` notifications, which trigger\n> >      // separate actions, so this won't do anything other than force\n> >      // the server to traverse sources.\n> > +    this.dispatch(actions.loadSources()).then(() => {\n> > +      // If the engine is already paused, update the UI to represent the\n> \n> How is the pause state UI related to loading sources?  Could this code\n> happen on it's own outside of the promise resolution?\n\nThe engine might pause before the debugger UI is even created. We need to see if that's the case, and put the UI in the position of \"paused at this location\".\n\nWe need to wait until the sources are loaded because the `this.StackFrames._onPaused(\"paused\", pausedPacket);` call manually triggers a UI update to select the right source. We can't select a source until it's loaded into the UI.\n\nWhen we switch out sources with a React component we probably don't need to put this much code here, and could declaratively select a source before it even exists in the UI. Hm, we might be able to do that now actually. I'd rather clean this code up after landing it, if that's ok.\n\n> @@ -401,5 @@\n> > -      this.connectThread();\n> > -\n> > -      if (aThreadClient.paused) {\n> > -        aThreadClient.resume(res => {\n> > -          this._ensureResumptionOrder(res)\n> \n> There are two places that got removed where _ensureResumptionOrder was\n> called - are they not needed anymore?  It also used to guard resuming on `if\n> (aThreadClient.paused)` but in attach-thread.js it resumes unconditionally. \n> Is this OK?\n\nGood questions. For the latter, I think it's ok to unconditionally resume. The problem before (maybe?) was that the user could somehow request a resume before everything was done loading. Now, we block the entire toolbox opening on the resume, so it should be deterministic. I haven't noticed any test failures regarding this, and I like keeping this straight-forward unless there's a good reason.\n\nAbout `_ensureResumptionOrder`, the only checks I removed were the once for initially attaching the thread. Seems like we should also check that when resuming in other places in the debugger... But I think you're right. I should check for the `wrongOrder` return value in attach-thread.js and display a warning if we hit that.\n\n> \n> ::: devtools/client/debugger/test/mochitest/browser_dbg_break-unselected.js\n> @@ +1,5 @@\n> > +/* Any copyright is dedicated to the Public Domain.\n> > +   http://creativecommons.org/publicdomain/zero/1.0/ */\n> > +\n> > +/**\n> > + * Test setting breakpoints on an eval script\n> \n> This comment needs to be updated to match what the tests is doing\n> \n> @@ +24,5 @@\n> > +      // Wait until it's actually fully loaded\n> > +      yield toolbox.loadTool(\"jsdebugger\");\n> > +\n> > +      const panel = toolbox.getCurrentPanel();\n> > +      const actions = bindActionCreators(panel);\n> \n> Nit: `actions` and `constants` are unused\n> \n> ::: devtools/client/debugger/test/mochitest/browser_dbg_bug-896139.js\n> @@ +21,5 @@\n> > +\n> > +    let Sources = win.DebuggerView.Sources;\n> > +    yield waitForDebuggerEvents(panel, win.EVENTS.SOURCE_SHOWN);\n> > +    if (Sources.selectedItem.attachment.source.url.indexOf(SCRIPT_URL) === -1) {\n> > +      Sources.selectedValue = getSourceActor(win.DebuggerView.Sources, EXAMPLE_URL + SCRIPT_URL)\n> \n> I don't understand this - why is the selectedValue not set correctly already\n> / why can't we still use waitForSourceShown?\n\nIt's not a very well-written test. Basically, there are 2 sources, the HTML and the single JS source. It's not deterministic which one gets selected. Honestly, I can't remember exactly why, because it always *should* load it in the same order, and it should choose the first one in the list, but something was happening. It was probably related to GC issues, like the HTML source was GCed too quickly so it didn't even show up.\n\nWe wait for a source to be displayed, and if it's not the right one, we just make sure to select the one we want.\n\nIn most tests, we use `debugger` to actually break in the script that we want shown, and then we can just wait for that specific source to be shown.\n\nI'd rather not get bogged down in cleaning up too many tests... But I agree we should make this test better at some point.\n\n> \n> ::: devtools/client/framework/attach-thread.js\n> @@ +21,5 @@\n> > +      toolbox.raise();\n> > +      toolbox.selectTool(\"jsdebugger\");\n> > +    }\n> > +  }\n> > +  else if (event === \"resumed\") {\n> \n> Nit: please move the else up onto the same line as brace\n> \n> ::: devtools/client/framework/toolbox.js\n> @@ +1963,5 @@\n> >      // Destroy the profiler connection\n> >      outstanding.push(this.destroyPerformance());\n> >  \n> > +    // Detach the thread\n> > +    detachThread(this._threadClient);\n> \n> There is a potential race here if destroy is called before the thread is\n> finished being attached.  This isn't something we handle very well generally\n> in the toolbox now, but I have a feeling we should yield on opening before\n> starting a destroy.  This could be done in a follow up since it might end up\n> being a fair amount of work\n\nAgreed, seems like it could be destroyed before the `open` promise finishes. I can file follow-up to make sure it gets looked into.\n\n> \n> ::: devtools/client/webide/test/test_runtime.html\n> @@ +17,5 @@\n> >      <script type=\"application/javascript;version=1.8\">\n> >        window.onload = function() {\n> >          SimpleTest.waitForExplicitFinish();\n> >  \n> > +        const { DebuggerServer } = require(\"devtools/server/main\");\n> \n> Is this change intentional?\n\nYep, I ended up not needing to change that test but it was erroring before because it was referencing `DebuggerServer` in the cleanup code but it was importing it below it.\n\n> \n> ::: devtools/server/actors/script.js\n> @@ +677,5 @@\n> >    onReconfigure: function (aRequest) {\n> >      if (this.state == \"exited\") {\n> >        return { error: \"wrongState\" };\n> >      }\n> > +    const options = aRequest.options || {};\n> \n> I'm not sure about this file - Nick has reviewed it, right?\n\nYes, I think it's OK the way it is. I renamed the `TabSources` method to make it clear that it's not a full `reconfigure`.", "author": "jlong@mozilla.com", "id": 11049092, "time": "2016-01-05T23:43:39Z"}, {"text": "See bug 1132501 for visual glitch\n\nSee bug 1237110 for `destroy` waiting until the toolbox is fully opened", "author": "jlong@mozilla.com", "id": 11049124, "time": "2016-01-05T23:49:20Z"}, {"text": "(In reply to James Long (:jlongster) from comment #99)\n> Thanks for the review!\n> \n> (In reply to Brian Grinstead [:bgrins] from comment #98)\n> > Comment on attachment 8703856\n> > 1132501.patch\n> > \n> > Review of attachment 8703856:\n> > -----------------------------------------------------------------\n> > \n> > Mostly just some questions and small comments.  Please respond to the\n> > questions before landing, but r=me.\n> > \n> > I noticed a visual glitch when triggering a debugger statement while the\n> > inspector is opened.  The message with \"Debugger is paused.  Some features\n> > like mouse selection will not work.\" slides down for a second then back up. \n> > It's a visual polish item, but can you file a follow up to fix that?\n> \n> Oh, interesting. I will file a follow up and look at that very soon. It\n> looks like the inspector shows that message when it's highlighted and the\n> debugger is paused? So the expected behavior is that the message stays up?\n\nI think the expected behavior is that the message goes away, but not in such a slow way.  The message is expected to be visible only when the inspector is opened but since we switch to debugger panel it should go away.  Maybe even just preventing the slide animation when it closes, or in the situation where it hasn't finished opening before it goes away.  We may end up revisiting this UI altogether with a sort of overlay over the page when paused.", "author": "bgrinstead@mozilla.com", "id": 11049154, "time": "2016-01-05T23:55:57Z"}, {"text": "(In reply to Brian Grinstead [:bgrins] from comment #101)\n> \n> I think the expected behavior is that the message goes away, but not in such\n> a slow way.  The message is expected to be visible only when the inspector\n> is opened but since we switch to debugger panel it should go away.  Maybe\n> even just preventing the slide animation when it closes, or in the situation\n> where it hasn't finished opening before it goes away.  We may end up\n> revisiting this UI altogether with a sort of overlay over the page when\n> paused.\n\nYeah! I've talked to Helen about that. I think that would be cool, and we could even have some interactions on the page and description about why it's paused.\n\nAlso about the resumption order, I definitely need to implement it in this patch. It looks the debugger handles it right now, and I should probably just make `attach-thread.js` own that functionality (always checking the return value of the resume request). Although the debugger shows a debugger-specific overlay, so I need to think about this.", "author": "jlong@mozilla.com", "id": 11049206, "time": "2016-01-06T00:06:29Z"}, {"text": "Created attachment 8704775\n1132501.patch\n\nTweak patched based on review. Not many changes, and try run looks good.", "author": "jlong@mozilla.com", "id": 11052056, "time": "2016-01-06T19:47:10Z"}, {"text": "https://hg.mozilla.org/integration/fx-team/rev/256e3e81fed7", "author": "pulsebot@bots.tld", "id": 11052065, "time": "2016-01-06T19:51:18Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/256e3e81fed7", "author": "cbook@mozilla.com", "id": 11053946, "time": "2016-01-07T11:08:42Z"}, {"text": "*** Bug 1231258 has been marked as a duplicate of this bug. ***", "author": "jlong@mozilla.com", "id": 11056661, "time": "2016-01-07T23:33:33Z"}, {"text": "*** Bug 1237636 has been marked as a duplicate of this bug. ***", "author": "epinal99-bugzilla2@yahoo.fr", "id": 11064977, "time": "2016-01-11T18:10:40Z"}, {"text": "In the dupe bug 1237636, a user gave a testcase to verify it's fixed.\nSTR:\n1) Load http://theapsgroup.github.io/firefox-43-endless-parsing/index.html\n2) Open dev tools (F12)\n3) Select the Debugger tab\n4) Press F5 to refresh\n5) After the browser tab finished to spin, click on the Console tab.\nResult:\n\"script tag\" \n\"empty.js\"\n\"end of body\"\n6) Repeat steps 3 to 5\n\nWhen the bug appears, the browser tab never stops spinning and \"end of body\" is not displayed.", "author": "epinal99-bugzilla2@yahoo.fr", "id": 11065004, "time": "2016-01-11T18:15:33Z"}, {"text": "Is this really x86 Mac OS X only? It seems it caused bug 1258154 at least on Windows 64 bit.", "author": "oriol-bugzilla@hotmail.com", "id": 11261547, "time": "2016-03-20T01:07:43Z"}, {"text": "(In reply to Oriol from comment #109)\n> Is this really x86 Mac OS X only? It seems it caused bug 1258154 at least on\n> Windows 64 bit.\n\nNo, the platform fields are often out of date since it defaults to the platform the user who filed the bug", "author": "bgrinstead@mozilla.com", "id": 11261575, "time": "2016-03-20T01:39:40Z"}, {"text": "It looks like the commits in this bug caused a regression, see bug 1259831.", "author": "jujjyl@gmail.com", "id": 11278556, "time": "2016-03-25T21:01:30Z"}, {"text": "Let's discuss on the other bug.", "author": "jlong@mozilla.com", "id": 11278584, "time": "2016-03-25T21:08:23Z"}, {"text": "[bugday-20160323]\n\nStatus: RESOLVED,FIXED -> VERIFIED\n\nComments:\nSuccessful.\n\nComponent: \nName \t\t\tFirefox\nVersion \t\t46.0b4\nBuild ID \t\t20160322075646\nUpdate Channel \t        beta\nUser Agent \t\tMozilla/5.0 (Windows NT 6.1; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0\nOS                      Windows 7 SP1 x86_64\n\nActual Results: \nAs expected\n\nExpected Results: \nDebugger has started as soon as console opens.", "author": "ram.nath241089@gmail.com", "id": 11297210, "time": "2016-04-03T20:24:52Z"}], "id": 1132501, "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2016-07-07T16:04:50Z", "cf_platform_rel": "---", "product": "Firefox", "cf_status_firefox_esr52": "---", "blocks": [1163991, 1225492, 956087, 1147988, 1177279, 1231258], "qa_contact": "", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1207868", "https://bugzilla.mozilla.org/show_bug.cgi?id=1227317", "https://bugzilla.mozilla.org/show_bug.cgi?id=1236316"], "cf_fx_iteration": "---", "component": "Developer Tools: Debugger", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "Firefox 46", "is_cc_accessible": true, "cf_status_firefox46": "fixed", "url": "", "creator_detail": {"email": "jlong@mozilla.com", "id": 402289, "name": "jlong@mozilla.com", "real_name": "James Long (:jlongster)"}, "whiteboard": "[polish-backlog][difficulty=hard] ", "mentors": [], "cc_detail": [{"email": "bgrinstead@mozilla.com", "id": 476442, "name": "bgrinstead@mozilla.com", "real_name": "Brian Grinstead [:bgrins]"}, {"email": "bruant.d@gmail.com", "id": 365126, "name": "bruant.d@gmail.com", "real_name": "David Bruant"}, {"email": "editedredx@gmail.com", "id": 430630, "name": "editedredx@gmail.com", "real_name": "Ralph Leermakers"}, {"email": "epinal99-bugzilla2@yahoo.fr", "id": 337567, "name": "epinal99-bugzilla2@yahoo.fr", "real_name": "Loic"}, {"email": "esigra@gmail.com", "id": 13568, "name": "esigra@gmail.com", "real_name": ""}, {"email": "fayolle-florent@orange.fr", "id": 454981, "name": "fayolle-florent@orange.fr", "real_name": "Florent Fayolle"}, {"email": "jlong@mozilla.com", "id": 402289, "name": "jlong@mozilla.com", "real_name": "James Long (:jlongster)"}, {"email": "jordan@jsantell.com", "id": 464691, "name": "jordan@jsantell.com", "real_name": "Jordan Santell [:jsantell] [@jsantell]"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "jujjyl@gmail.com", "id": 467991, "name": "jujjyl@gmail.com", "real_name": "Jukka Jyl\u00e4nki"}, {"email": "kwierso@gmail.com", "id": 308534, "name": "kwierso@gmail.com", "real_name": "Wes Kocher (:KWierso)"}, {"email": "mjzffr@gmail.com", "id": 501532, "name": "mjzffr@gmail.com", "real_name": "Maja Frydrychowicz (:maja_zf) (away on March 12 and 15)"}, {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, {"email": "oriol-bugzilla@hotmail.com", "id": 541576, "name": "oriol-bugzilla@hotmail.com", "real_name": "Oriol Brufau [:Oriol]"}, {"email": "past@mozilla.com", "id": 363318, "name": "past@mozilla.com", "real_name": "Panos Astithas [:past] (please ni?)"}, {"email": "poirot.alex@gmail.com", "id": 283262, "name": "poirot.alex@gmail.com", "real_name": "Alexandre Poirot [:ochameau]"}, {"email": "sime.vidas@gmail.com", "id": 470350, "name": "sime.vidas@gmail.com", "real_name": "\u0160ime Vidas"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "resolution": "FIXED", "op_sys": "Mac OS X", "cf_fx_points": "---", "history": [{"changes": [{"removed": "", "field_name": "depends_on", "added": "1130214"}], "who": "jlong@mozilla.com", "when": "2015-02-12T16:35:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bgrinstead@mozilla.com"}, {"removed": "", "field_name": "blocks", "added": "956087"}], "who": "bgrinstead@mozilla.com", "when": "2015-02-12T16:48:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jryans@gmail.com)"}], "who": "jlong@mozilla.com", "when": "2015-02-24T22:12:06Z"}, {"changes": [{"removed": "needinfo?(jryans@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jryans@gmail.com", "when": "2015-02-25T00:11:07Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1137384"}], "who": "jlong@mozilla.com", "when": "2015-02-26T19:41:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fayolle-florent@orange.fr"}], "who": "fayolle-florent@orange.fr", "when": "2015-05-15T18:10:33Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1147988, 1177279"}], "who": "jlong@mozilla.com", "when": "2015-09-28T21:47:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8667064, "added": "review?(bgrinstead@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2015-09-29T01:47:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jsantell@mozilla.com"}], "who": "jlong@mozilla.com", "when": "2015-09-29T01:48:22Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "jlong@mozilla.com"}], "who": "jlong@mozilla.com", "when": "2015-09-29T01:48:33Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8667064, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bgrinstead@mozilla.com)", "attachment_id": 8667064, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8667066, "added": "review?(bgrinstead@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2015-09-29T01:49:41Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8667066, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bgrinstead@mozilla.com)", "attachment_id": 8667066, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8667069, "added": "review?(bgrinstead@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2015-09-29T02:11:52Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8667069, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bgrinstead@mozilla.com)", "attachment_id": 8667069, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8667343, "added": "review?(bgrinstead@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2015-09-29T15:54:06Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8667343, "added": "review-"}], "who": "jryans@gmail.com", "when": "2015-09-29T16:16:49Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8667343, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bgrinstead@mozilla.com)", "attachment_id": 8667343, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8667475, "added": "review?(jryans@gmail.com)"}], "who": "jlong@mozilla.com", "when": "2015-09-29T19:29:52Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8667475, "added": "feedback+"}], "who": "jryans@gmail.com", "when": "2015-09-29T20:51:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "esigra@gmail.com"}], "who": "esigra@gmail.com", "when": "2015-09-29T21:05:30Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8667475, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-09-30T19:14:44Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfitzgerald@mozilla.com"}], "who": "nfitzgerald@mozilla.com", "when": "2015-09-30T19:25:10Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8668042, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-10-01T22:06:51Z"}, {"changes": [{"removed": "", "field_name": "whiteboard", "added": "[polish-backlog][difficulty=hard] "}], "who": "jlong@mozilla.com", "when": "2015-10-02T15:55:12Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8668688, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-10-14T18:38:14Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8673824, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-10-15T15:49:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bruant.d@gmail.com"}], "who": "bruant.d@gmail.com", "when": "2015-10-25T11:04:57Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1224280"}], "who": "jlong@mozilla.com", "when": "2015-11-12T18:06:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8686703, "added": "review?(nfitzgerald@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2015-11-12T18:08:52Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8686703, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(nfitzgerald@mozilla.com)", "attachment_id": 8686703, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8686704, "added": "review?(nfitzgerald@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2015-11-12T18:11:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfitzgerald@mozilla.com)", "attachment_id": 8686704, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-11-12T18:19:34Z"}, {"changes": [{"removed": "1224280", "field_name": "depends_on", "added": ""}], "who": "jlong@mozilla.com", "when": "2015-11-12T20:55:11Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8674297, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8686704, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-11-13T23:56:26Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8687454, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-11-16T22:48:18Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1225492"}], "who": "jlong@mozilla.com", "when": "2015-11-17T15:26:35Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8688132, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-11-17T18:10:47Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "checkin-needed"}], "who": "jlong@mozilla.com", "when": "2015-11-17T18:11:34Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1207868"}], "who": "nfitzgerald@mozilla.com", "when": "2015-11-18T21:08:36Z"}, {"changes": [{"removed": "checkin-needed", "field_name": "keywords", "added": ""}], "who": "jlong@mozilla.com", "when": "2015-11-18T21:26:38Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jlong@mozilla.com, wkocher@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jlong@mozilla.com)"}], "who": "kwierso@gmail.com", "when": "2015-11-18T22:34:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "past@mozilla.com"}], "who": "past@mozilla.com", "when": "2015-11-20T15:49:46Z"}, {"changes": [{"removed": "needinfo?(jlong@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jlong@mozilla.com", "when": "2015-11-20T19:51:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "poirot.alex@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(poirot.alex@gmail.com)"}], "who": "jlong@mozilla.com", "when": "2015-11-20T19:52:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mjzffr@gmail.com"}], "who": "mjzffr@gmail.com", "when": "2015-11-23T16:36:06Z"}, {"changes": [{"removed": "needinfo?(poirot.alex@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "poirot.alex@gmail.com", "when": "2015-11-23T16:52:40Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8688539, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-11-23T22:37:36Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1227317"}], "who": "jlong@mozilla.com", "when": "2015-11-23T22:38:20Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1113930"}], "who": "jlong@mozilla.com", "when": "2015-11-24T04:09:30Z"}, {"changes": [{"removed": "1113930", "field_name": "depends_on", "added": "1224822"}], "who": "jlong@mozilla.com", "when": "2015-11-24T04:11:16Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1231258"}], "who": "yfdyh000@gmail.com", "when": "2015-12-12T02:19:25Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1163991"}], "who": "jordan@jsantell.com", "when": "2015-12-14T04:47:36Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8691051, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-12-17T19:12:01Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1113930"}], "who": "jlong@mozilla.com", "when": "2015-12-22T04:25:37Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1232709"}], "who": "jlong@mozilla.com", "when": "2015-12-22T19:32:55Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1234756"}], "who": "jlong@mozilla.com", "when": "2015-12-23T04:41:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8701662, "added": "review?(bgrinstead@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2015-12-24T02:06:06Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8701662, "added": "feedback?(nfitzgerald@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2015-12-24T02:10:35Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8699554, "added": "1"}], "who": "jlong@mozilla.com", "when": "2015-12-24T18:36:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(nfitzgerald@mozilla.com)", "attachment_id": 8701662, "added": ""}], "who": "nfitzgerald@mozilla.com", "when": "2015-12-28T17:38:01Z"}, {"changes": [{"removed": "1232709", "field_name": "depends_on", "added": ""}], "who": "jlong@mozilla.com", "when": "2015-12-28T17:57:17Z"}, {"changes": [{"removed": "Turn on the debugger whenever the console is opened", "field_name": "summary", "added": "Turn on the debugger whenever the devtools are opened"}], "who": "jlong@mozilla.com", "when": "2016-01-04T15:40:44Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8701662, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bgrinstead@mozilla.com)", "attachment_id": 8701662, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8703856, "added": "review?(bgrinstead@mozilla.com)"}], "who": "jlong@mozilla.com", "when": "2016-01-04T22:59:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bgrinstead@mozilla.com)", "attachment_id": 8703856, "added": "review+"}], "who": "bgrinstead@mozilla.com", "when": "2016-01-05T21:37:25Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8703856, "added": "1"}], "who": "jlong@mozilla.com", "when": "2016-01-06T19:47:10Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "Firefox 46"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-01-07 03:08:42"}, {"removed": "---", "field_name": "cf_status_firefox46", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2016-01-07T11:08:42Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "sime.vidas@gmail.com"}], "who": "jlong@mozilla.com", "when": "2016-01-07T23:33:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "editedredx@gmail.com"}], "who": "epinal99-bugzilla2@yahoo.fr", "when": "2016-01-11T18:10:40Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "epinal99-bugzilla2@yahoo.fr"}], "who": "epinal99-bugzilla2@yahoo.fr", "when": "2016-01-11T18:15:33Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1236316"}], "who": "bgrinstead@mozilla.com", "when": "2016-01-11T21:32:05Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1258154"}], "who": "oriol-bugzilla@hotmail.com", "when": "2016-03-20T00:59:07Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "oriol-bugzilla@hotmail.com"}], "who": "oriol-bugzilla@hotmail.com", "when": "2016-03-20T01:07:43Z"}, {"changes": [{"removed": "1258154", "field_name": "depends_on", "added": ""}], "who": "oriol-bugzilla@hotmail.com", "when": "2016-03-20T01:48:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jujjyl@gmail.com"}], "who": "jujjyl@gmail.com", "when": "2016-03-25T21:01:30Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1237795"}], "who": "ryanvm@gmail.com", "when": "2016-07-07T16:04:50Z"}]}