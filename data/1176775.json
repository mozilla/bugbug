{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "mats@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8653087}, {"creator": "mats@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8653089}, {"creator": "mats@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-10-13T23:52:53Z", "type_id": 4, "creation_date": "2015-10-01T01:46:36Z", "id": 1263175, "setter": "dholbert@mozilla.com"}], "content_type": "text/plain", "id": 8668206}, {"creator": "mats@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8668208}, {"creator": "mats@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8668531}, {"creator": "mats@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-10-24T01:12:30Z", "type_id": 4, "creation_date": "2015-10-18T16:27:11Z", "id": 1274541, "setter": "dholbert@mozilla.com"}], "content_type": "text/plain", "id": 8675426}, {"creator": "mats@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8675427}, {"creator": "dholbert@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8677122}, {"creator": "dholbert@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8677133}, {"creator": "mats@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8677456}, {"creator": "mats@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/png", "id": 8677458}, {"creator": "mats@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-10-24T01:13:06Z", "type_id": 4, "creation_date": "2015-10-23T14:02:55Z", "id": 1278563, "setter": "dholbert@mozilla.com"}], "content_type": "text/plain", "id": 8678130}, {"creator": "mats@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8678131}], "classification": "Components", "creator": "mats@mozilla.com", "cc": ["cbook@mozilla.com", "dholbert@mozilla.com"], "depends_on": [1163435, 1218178], "creation_time": "2015-06-23T00:07:44Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "[css-grid] Implement \"Implied Minimum Size of Grid Items\" (special min-width/height:auto behavior)", "id": 1176775, "assigned_to_detail": {"email": "mats@mozilla.com", "id": 5168, "name": "mats@mozilla.com", "real_name": "Mats Palmgren (:mats)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_status_firefox45": "fixed", "cf_has_regression_range": "---", "assigned_to": "mats@mozilla.com", "comment_count": 38, "comments": [{"text": "http://dev.w3.org/csswg/css-grid/#min-size-auto\n\nFlexbox spec is identical afaict:\nhttp://dev.w3.org/csswg/css-flexbox/#min-size-auto\nbut afaict its implementation is integrated into the reflow so I don't\nsee anything there that I can reuse.  Daniel, please let me know if\nI missed something.\n\nFor Grid we can't do that since we need to resolve column/row sizes\nup front before starting to reflow items for real.", "author": "mats@mozilla.com", "id": 10415090, "time": "2015-06-23T00:07:44Z"}, {"text": "(In reply to Mats Palmgren (:mats) from comment #0)\n> http://dev.w3.org/csswg/css-grid/#min-size-auto\n> \n> Flexbox [...] afaict its implementation is integrated into the reflow so I don't\n> see anything there that I can reuse.\n\nCorrect; the flex-item min-[width|height]:auto resolution is implemented in nsFlexContainerFrame.cpp, during reflow, largely in PartiallyResolveAutoMinSize and MeasureFlexItemContentHeight. [which will soon be renamed with s/Height/BSize/]\n\n> For Grid we can't do that since we need to resolve column/row sizes\n> up front before starting to reflow items for real.\n\n(I'm assuming \"can't do that\" means \"can't resolve min-[width|height]:auto during nsGridContainerFrame::Reflow)\n\nIs this because \"min-width\" on the grid items must be resolved for our GetPrefISize()/GetMinISize() implementation?", "author": "dholbert@mozilla.com", "id": 10421426, "time": "2015-06-25T06:52:12Z"}, {"text": "(In reply to Daniel Holbert [:dholbert] from comment #1)\n> Is this because \"min-width\" on the grid items must be resolved for our\n> GetPrefISize()/GetMinISize() implementation?\n\nWell, not just that.  Grid items contributes to the sizing of the tracks\nthey span, and each track can have have many items contributing to its size.\nIt's an indirect model, much like table layout.  It's only after processing\nall items that the track sizes are known and only then can you calculate\nthe CB to reflow the item.  (Bug 1151212, bug 1176619 and bug 1176621\nimplements the various steps in sizing the tracks.)", "author": "mats@mozilla.com", "id": 10426133, "time": "2015-06-26T19:45:27Z"}, {"text": "Created attachment 8653087\nfix\n\nThis extends MinSizeContributionForAxis so that it calculates all the\ndefinite values needed for https://drafts.csswg.org/css-grid/#min-size-auto\nI.e. when we have either:\n* a definite min-width\n* min-width:auto + overflow!=visible (treated as min-width:0)\n* min-width:auto + overflow:visible + a definite width, this returns\n  the \"specified/transferred size\"\n(or s/width/height/ when that gives the isize)\n\nIn all other cases NS_UNCONSTRAINEDSIZE is returned.\n\nThen MinSize is extended to take the std::min of that and the\n\"content size\" part (i.e. the result of ContentContribution).\n\nA new flag (MIN_INTRINSIC_ISIZE) is added to IntrinsicForAxis\nso that it uses min-width|height instead of width|height.\nThis is for calculating the contribution of for example\nmin-width:-moz-min-content etc.\n\n(The division of work between nsLayoutUtils and the Grid code is to keep\nthe ContentContribution call on the Grid side so that we can optimize\nthat (avoiding reflows) at some point.)", "author": "mats@mozilla.com", "id": 10662954, "time": "2015-08-26T21:24:38Z"}, {"text": "Created attachment 8653089\ntests", "author": "mats@mozilla.com", "id": 10662963, "time": "2015-08-26T21:27:03Z"}, {"text": "Created attachment 8668206\nfix\n\nSee comment 3.", "author": "mats@mozilla.com", "id": 10797352, "time": "2015-10-01T01:46:36Z"}, {"text": "Created attachment 8668208\ntests", "author": "mats@mozilla.com", "id": 10797356, "time": "2015-10-01T01:47:57Z"}, {"text": "Created attachment 8668531\ntests\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=823bd00dca64", "author": "mats@mozilla.com", "id": 10799559, "time": "2015-10-01T17:18:51Z"}, {"text": "Comment on attachment 8668206\nfix\n\nReview of attachment 8668206:\n-----------------------------------------------------------------\n\n::: layout/base/nsLayoutUtils.cpp\n@@ +4726,5 @@\n> +  nscoord* fixedMinSize = nullptr;\n> +  if (style->GetUnit() == eStyleUnit_Auto) {\n> +    if (aFrame->StyleDisplay()->mOverflowX == NS_STYLE_OVERFLOW_VISIBLE) {\n> +      style = aAxis == eAxisHorizontal ? &stylePos->mWidth\n> +        : &stylePos->mHeight;\n\nTwo things:\n (1) This assignment a bit hard to read - please indent the \":\" so that the two options are at the same level of indentation (so this looks like the first \"style = [...]\" assignment that you've got above this).  That, or add a newline before the \"?\" (with the same goal -- having the options at the same level of indentation).\n\n (2) This whole chunk (for eStyleUnit_Auto considering 'overflow') is only applicable for grid items & flex items, I think.  Really, I think this whole function should only be called for grid or flex items, right?  Since it kind of revolves around this chunk.  (Right now we only call this for grid items, but it's not obviously grid-specific in its naming/documentation.)  Could you mention this restriction in its documentation, and add an assertion that aFrame->IsFlexOrGridItem() towards the beginning? (maybe replacing the aFrame->GetParent() assertion)\n\n@@ +4728,5 @@\n> +    if (aFrame->StyleDisplay()->mOverflowX == NS_STYLE_OVERFLOW_VISIBLE) {\n> +      style = aAxis == eAxisHorizontal ? &stylePos->mWidth\n> +        : &stylePos->mHeight;\n> +      if (GetAbsoluteCoord(*style, minSize)) {\n> +        // We have a definite width/height.  This is the \"specified size\" /\n\nI don't think GetAbsoluteCoord() is the right way to check for \"definite-ness\".  In particular, GetAbsoluteCoord fails for percentages & calc(%), but percentages *do* count as definite as long as we've got a definite percent-basis, per\n https://drafts.csswg.org/css-sizing-3/#definite\n\nBecause of this, right now I think this code would treat a grid item with e.g. \"min-width:auto; width: 30%\" as having an undefined \"specified size\" [using terminology from https://drafts.csswg.org/css-grid/#min-size-auto ], and we'll end up returning NS_UNCONSTRAINEDSIZE and having the caller treat this as a content-based sizing.  But really it may have a definite size, depending on whether or not it's got a valid percent basis for its 30%.\n\nI'm assuming this could make us misrender -- but if I'm wrong & you're sure this is actually OK [e.g. if we can't possibly have a valid percent basis if we get here, or we'll handle it correctly elsewhere], then we probably need to explain/clarify why this is OK in a code-comment here.\n\n::: layout/base/nsLayoutUtils.h\n@@ +1340,5 @@\n>     * This considers the child's 'min-width' property (or 'min-height' if the\n>     * given axis is vertical), and its padding, border, and margin in the\n> +   * corresponding dimension.  If the 'min-' property is 'auto' (and 'overflow'\n> +   * is 'visible') then it uses the corresponding 'width'/'height' instead if\n> +   * it's definite to calculate the \"specified / transferred size\" for:\n\nThis sentence is hard to parse, particularly around \"...instead if it's definite to calculate...\".\n\nMaybe put \"if it's definite\" in parentheses?  Or, list all of the if's (including definite-ness of width/height) at the beginning of the sentence, rather than having that one requirement being an afterthought.\n\n::: layout/generic/nsGridContainerFrame.cpp\n@@ +2036,5 @@\n> +  // transferred size\" for min-width:auto if overflow == visible (as min-width:0\n> +  // otherwise), or NS_UNCONSTRAINEDSIZE for other min-width intrinsic values\n> +  // (which results in always taking the \"content size\" part below).\n> +  nscoord sz = nsLayoutUtils::MinSizeContributionForAxis(axis, aRC, aChild,\n> +                                                      nsLayoutUtils::MIN_ISIZE);\n\nThe slighlt-deindentation-to-avoid-going-over-80-cols seems a bit bogus here.  Can you just add a newline after \"=\", so that the whole MinSizeContributionForAxis expression can be legitimately de-indented & fit more cleanly?\n\n@@ +2045,5 @@\n> +    // Now calculate the \"content size\" part and return whichever is smaller.\n> +    MOZ_ASSERT(unit != eStyleUnit_Enumerated || sz == NS_UNCONSTRAINEDSIZE);\n> +    sz = std::min(sz, ContentContribution(aChild, aRS, aRC, aCBWM, aAxis,\n> +                                          nsLayoutUtils::MIN_ISIZE,\n> +                                          nsLayoutUtils::MIN_INTRINSIC_ISIZE));\n\nThe similar-enum-naming here frightens me a bit.  If I \"accidentally\" replace MIN_INTRINSIC_ISIZE with MIN_ISIZE here (a typo that I fully expect someone to make at some point in the future when using this API), this still compiles just fine.  That's problematic.\n\nTo protect against this, could you upgrade IntrinsicISizeType into an enum class? (That's the type of MIN_ISIZE, which is a true enum, not a \"flags\" list).  That way it won't let itself be accidentally coerced to a uint32_t flag, and my example typo above would fail to compile. (Might be worth doing this upgrading in its own patch & maybe on its own bug).", "author": "dholbert@mozilla.com", "id": 10810671, "time": "2015-10-05T23:17:31Z"}, {"text": "Comment on attachment 8668206\nfix\n\nReview of attachment 8668206:\n-----------------------------------------------------------------\n\nMarking this r- for now, since there's still a bit left here, particularly for the GetAbsoluteCoord concern in my previous comment.\n\nI went over this again (since I hadn't made it quite through before, but now I think I have), and I've got two additional review notes:\n\n::: layout/base/nsLayoutUtils.cpp\n@@ +4490,5 @@\n>    const nsStyleCoord& styleMinISize =\n>      horizontalAxis ? stylePos->mMinWidth : stylePos->mMinHeight;\n> +  const nsStyleCoord& styleISize =\n> +    (aFlags & MIN_INTRINSIC_ISIZE) ? styleMinISize :\n> +    (horizontalAxis ? stylePos->mWidth : stylePos->mHeight);\n\nSo, this piece of code (the only place where we react to this new flag) is a little confusing, because:\n * This flag *says* \"get my min intrinsic size\" (a content-based thing)\n * ...but in practice, it just makes us use \"min-width\" in place of \"width\". And that's not really an \"intrinsic\" / \"content-based\" thing to do.\n\nHypothetically if someone called this method & passed this flag for a frame that has \"min-width: 10px\", then we'd just go through this function as-normal except we'd be pretending we have \"width:10px\", and we wouldn't do anything special for the contents (not as a result of the flag at least).\n\nHappily, right now, it turns out that styleMinISize *must* be something intrinsic-flavored here (\"auto\" or an enum value), but that's only because of the guards you have around the one place where you're passing this flag.  So my hypothetical about \"min-width:10px\" can't actually happen in practice.  But, that's not at all clear at this point in the code, and we could easily run into this sort of trouble in the future, if we add new callers that have different sets of guards & pass this flag.\n\nSO: If we've been passed the MIN_INTRINSIC_ISIZE flag, I think we need to really do one or both of the following:\n\n (1) Point styleISize at a dedicated local nsStyleCoord (or a lazily-constructed Maybe<nsStyleCoord>) which is *explicitly* set to \"auto\".  Don't depend on styleMinISize being something intrinsic-flavored -- let's just use a dummy variable that clearly has that value.\n\n...and/or:\n (2) Assert that styleMinISize is something intrinsic-flavored (if we depend on that, or simply want to sanity-check that).  (If you like, this could mean we don't need (1), though I still like (1)'s explicitness.)\n\n@@ +4732,5 @@\n> +        // We have a definite width/height.  This is the \"specified size\" /\n> +        // \"transferred size\" cases in:\n> +        // https://drafts.csswg.org/css-grid/#min-size-auto\n> +        fixedMinSize = &minSize;\n> +      }\n\nThe code-comment here says this might be the \"transferred size\", but I don't think it is. In fact, I don't think we calculate the transferred size anywhere right now (though this function's documentation & the comment at the callsite says we do). (This is MinSizeContributionForAxis btw.)\n\nThe \"transferred size\" is supposed to be derived from the perpendicular axis (i.e. from the \"height\", if we're resolving min-width:auto).  And I don't see us doing anything like that -- we only have code that inspects the same-axis size property right now.\n\n(Please correct me if I'm just overlooking it.)\n\nI think the \"transferred size\" computation code would need to go inside of a new \"else\" clause that would be chained off of our existing \"Do we have a specified size in this axis?\" check (which currently is a GetAbsoluteCoord call, though that needs to change per comment 8).  We'd put it in this \"else\" because, per the chart at https://drafts.csswg.org/css-grid/#min-size-auto , we only really care about the \"transferred size\" when the \"specified size\" is undefined.", "author": "dholbert@mozilla.com", "id": 10835615, "time": "2015-10-13T23:52:53Z"}, {"text": "Created attachment 8675426\nfix\n\n(In reply to Daniel Holbert [:dholbert] from comment #8)\n>  (1) This assignment a bit hard to read - please indent the \":\" \n\nFixed.\n\n> Could you mention this restriction in its documentation, \n> and add an assertion that\n> aFrame->IsFlexOrGridItem() towards the beginning? (maybe replacing the\n> aFrame->GetParent() assertion)\n\nSure.  The code here doesn't depend on the frame type though,\nbut I agree it would be good to catch any accidental use.\n\n> I don't think GetAbsoluteCoord() is the right way to check for\n> \"definite-ness\".  In particular, GetAbsoluteCoord fails for percentages &\n> calc(%), but percentages *do* count as definite as long as we've got a\n> definite percent-basis, per\n>  https://drafts.csswg.org/css-sizing-3/#definite\n\nGood point, but the percent-basis for a grid item is the size of its\ngrid area, which is unknown at the time 4.4 is applied (it's that size\nthat we're trying to determine!).  I think \"unknown\" counts as \"indefinite\"\nin this context so a percentage 'width' counts as indefinite and we should\nuse the \"content size\" instead per 4.4.\n\nCompare for example\nlayout/reftests/w3c-css/submitted/values3/calc-width-block-intrinsic-1.html\nwhich is a very similar test for blocks.  Note that the blocks with\npercent-calc() are 200px, which is the min-content size, so the explicitly\nspecified 'width' has no effect due to the percentage. (except for the one\nwith an explicit \"0%\" but I think zero percent counts as non-percentage and\nis therefore definite)\n\nI did find a couple of other issues while investigating this though.\n\nFirst, 'min-width:<percentage>' wasn't handled correctly.  We got\nNS_UNCONSTRAINEDSIZE back from MinSizeContributionForAxis() and then\nMinSize() simply returned that, oops.  So *for 'min-width'*\nthe GetAbsoluteCoord() is not enough; MinSizeContributionForAxis\nneeds to handle percentage explicitly (treat it as zero).\n\nSecondly, I didn't forwarded the wrong max-width/height style\nin the call to AddIntrinsicSizeOffset.\n\n> To protect against this, could you upgrade IntrinsicISizeType\n> into an enum class?\n\nSure.  That hides these symbols though and given our archaic 80-column\nrule I didn't even try replacing every use with\nnsLayoutUtils::IntrinsicISizeType::*_ISIZE\nso I introduced a couple of \"static const\" synonyms there so that\nwe can continue to use nsLayoutUtils::*_ISIZE.\n\n\n(In reply to Daniel Holbert [:dholbert] from comment #9)\n> > +  const nsStyleCoord& styleISize =\n> > +    (aFlags & MIN_INTRINSIC_ISIZE) ? styleMinISize :\n> > +    (horizontalAxis ? stylePos->mWidth : stylePos->mHeight);\n> \n> So, this piece of code (the only place where we react to this new flag) is a\n> little confusing, because:\n>  * This flag *says* \"get my min intrinsic size\" (a content-based thing)\n>  * ...but in practice, it just makes us use \"min-width\" in place of \"width\".\n> And that's not really an \"intrinsic\" / \"content-based\" thing to do.\n\nIt's only supposed to be used for min-width/height 'auto' and the enums\n'min-content', 'fit-content' etc.  The spec calls them \"intrinsic sizes\":\nhttps://drafts.csswg.org/css-sizing-3/#width-height-keywords\n\nFeel free to suggest a better name.\n\n>  (2) Assert that styleMinISize is something intrinsic-flavored \n\nI added an assertion.\n\n> The code-comment here says this might be the \"transferred size\", but I don't\n> think it is. In fact, I don't think we calculate the transferred size\n> anywhere right now\n\nOops, I was calling IntrinsicForAxis() here at some point (which does\nhandle it) but that didn't work out, then I simply forgot about it.\n\nI would prefer to add this in a follow-up bug though if you don't mind.\nIt doesn't affect items that doesn't have an intrinsic ratio and only\nwhen there's an explicit auto/definite combo for those that does, like\n\"width:auto; height:20px\".  I don't think that (somewhat rare) case\nneeds to block the current patch from landing.  I'll fix this soon\nthough while we still have this fresh in our minds.  OK?", "author": "mats@mozilla.com", "id": 10848992, "time": "2015-10-18T16:27:11Z"}, {"text": "Created attachment 8675427\ntests\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=cc6a599e1f9d", "author": "mats@mozilla.com", "id": 10848993, "time": "2015-10-18T16:28:18Z"}, {"text": "(In reply to Mats Palmgren (:mats) from comment #10)\n> > I don't think GetAbsoluteCoord() is the right way to check for\n> > \"definite-ness\".  In particular, GetAbsoluteCoord fails for percentages &\n> > calc(%), but percentages *do* count as definite as long as we've got a\n> > definite percent-basis, per\n> >  https://drafts.csswg.org/css-sizing-3/#definite\n> \n> Good point, but the percent-basis for a grid item is the size of its\n> grid area, which is unknown at the time 4.4 is applied\n\nI think you might be focusing on cases where we're intrinsically sizing a grid based on its items -- but I'm focusing on cases where we're simply resolving \"min-width:auto\" on grid items during layout.  I agree that the percent basis may be unknown in the former case, but I think it is (or can be) *known* in the latter case.  Can't we have explicitly-sized grid areas? If so, I'd think a grid item with \"min-width:auto; width: 25%\" should be able to resolve that percentage when resolving its min-width:auto.\n\n> Compare for example\n> layout/reftests/w3c-css/submitted/values3/calc-width-block-intrinsic-1.html\n> which is a very similar test for blocks.\n\nIt's similar test to intrinsic-sizing-of-the-grid, I think.  But it's not similar for simply resolving percentages to compute \"min-width:auto\" during layout.\n * In calc-width-block-intrinsic-1.html, the % width is *being resolved against* something which is being intrinsically sized (a float).\n...whereas:\n * During \"min-width:auto\" resolution for a grid item, the % width is *on* something which is being intrinsically sized (a grid item).  And its %-basis (grid area) could have an explicit size, I think.\n\n> so I introduced a couple of \"static const\" synonyms there so that\n> we can continue to use nsLayoutUtils::*_ISIZE.\n\nSounds good.\n\n> It's only supposed to be used for min-width/height 'auto' and the enums\n> 'min-content', 'fit-content' etc.  The spec calls them \"intrinsic sizes\":\n> https://drafts.csswg.org/css-sizing-3/#width-height-keywords\n> \n> Feel free to suggest a better name.\n\n(My objection wasn't about the name, but rather that we had no guarantee that the name was accurate. With the assertion that you added (addressing my suggestion labeled \"(2)\"), that's better now, I think.  Thanks!)\n\n> > The code-comment here says this might be the \"transferred size\", but I don't\n> > think it is. In fact, I don't think we calculate the transferred size\n> > anywhere right now\n> \n> Oops, I was calling IntrinsicForAxis() here at some point (which does\n> handle it) but that didn't work out, then I simply forgot about it.\n> \n> I would prefer to add this in a follow-up bug though if you don't mind.\n\nThat's fine, but please adjust the comment in MinSizeContributionForAxis to reflect current reality. Right now it says:\n  // [...] \"This is the \"specified size\" /\n  // \"transferred size\"\n...but the quantity used there isn't ever the transferred size, right now at least. So maybe drop that from the comment, and at least add an XXX comment somewhere saying that we need to consider the transferred size. (ideally w/ a bug number, if you're filing a followup for that)", "author": "dholbert@mozilla.com", "id": 10860725, "time": "2015-10-21T18:54:59Z"}, {"text": "(In reply to Daniel Holbert [:dholbert] from comment #12)\n> Can't we have explicitly-sized grid areas?\n\nNot really.  The size of an item's grid area is derived from the size\nof the tracks the item spans and the spacing between those tracks\ndue to gutters/alignment, so the size of grid areas can't possibly\nbe known during track sizing.  It would be a circular dependency.\n\nThis code is only called during track sizing, which is invoked from\nintrinsic sizing and reflow of the container.  It's not invoked\nduring reflow of the item.  \"min-width:auto; width: 25%\" have its\nusual meaning when setting up the nsHTMLReflowState to reflow\nthe item, the used value for 'min-width' is zero, and the used value\nfor the 'width' is 25%  of the grid area size, which is known at that\npoint.", "author": "mats@mozilla.com", "id": 10861029, "time": "2015-10-21T20:20:27Z"}, {"text": "Thanks, that makes sense.\n\n(In reply to Mats Palmgren (:mats) from comment #13)\n> This code is only called during track sizing, which is invoked from\n> intrinsic sizing and reflow of the container.\n\nHmm, this part worries me though.  What if we have e.g. a single track in each dimension, with a small explicit sizing function (like say \"10px\"), and a single grid item in that grid area with lots of content (like say \"aaaaaaaaaaaaaaaaaa\")?  I'd expect that, by default, that single grid item should honor its min-width:auto and be sized to be the width of its content (\"aaaaaaaaa...\") rather than the size that's imposed on it by its tracks.\n\nBut if we don't consider min-width:auto after track sizing, then I'm not sure that'd happen.", "author": "dholbert@mozilla.com", "id": 10861153, "time": "2015-10-21T20:51:39Z"}, {"text": "Created attachment 8677122\ntestcase to exercise \"min-width:auto\" on a grid item with wide content\n\nIn other words: it sounds like maybe this patch makes us consider \"min-width:auto\" for grid intrinsic-sizing and track-sizing purposes, but not for actual grid-item sizing purposes -- correct?  If so, I think that's a pretty key missing piece.\n\nHere's a testcase to demonstrate this, with a grid whose tracks are all 50px wide & 50px tall. The second grid item has wide content, so (by virtue of \"min-width:auto\") that item should be as wide as its content. In Chrome 48 (w/ Experimental Web Platform Features enabled), it is that wide -- but in mozilla-central (with this patch attached & the grid pref tweaked), it's not.", "author": "dholbert@mozilla.com", "id": 10861345, "time": "2015-10-21T21:32:00Z"}, {"text": "Hmm, I think you're right.  We need to apply 4.4 also when setting up the nsHTMLReflowState\nfor reflowing the item.  Good catch!", "author": "mats@mozilla.com", "id": 10861397, "time": "2015-10-21T21:45:41Z"}, {"text": "Created attachment 8677133\ntestcase where min-width:auto's influence is clamped by specified sizes\n\n...and here's a testcase where we should notice the \"specified size\" from the item's definite width (in one case, a percent-width resolved against an explicitly-sized grid area), and that should reduce our resolved \"min-width:auto\".\n\nWe render this testcase correctly right now (aside from a percent-resolution bug, for which I filed bug 1217206).  I'm posting it here because we should be sure not to break this testcase when fixing my previous testcase.", "author": "dholbert@mozilla.com", "id": 10861459, "time": "2015-10-21T22:10:23Z"}, {"text": "Cool, glad we're on the same page. Thanks!", "author": "dholbert@mozilla.com", "id": 10861468, "time": "2015-10-21T22:13:26Z"}, {"text": "And just to be clear, my concerns about percentages being definite [& resolved against definite grid area sizes] do apply to this new missing piece.  If we don't take that into account, I think we may break the second testcase that I just attached.\n\nSo I think we do really need to take definite-percent-values into account in the min-width:auto resolution code -- we'll need to pass in a percent basis, or a reflow state where the percent \"width\" has already been resolved, or something like that.  (And we can stifle that during track-sizing by e.g. passing in NS_UNCONSTRAINEDSIZE for the percent-basis, or a null reflow state pointer, or whatever makes sense.)", "author": "dholbert@mozilla.com", "id": 10861489, "time": "2015-10-21T22:20:30Z"}, {"text": "Created attachment 8677456\nCombined test, with BSize tests added\n\nI merged your two tests and added BSize variations.", "author": "mats@mozilla.com", "id": 10863444, "time": "2015-10-22T13:45:37Z"}, {"text": "Created attachment 8677458\nscreenshot\n\nSo does this look correct to you?\n(This is with the percent-patches also applied.)", "author": "mats@mozilla.com", "id": 10863453, "time": "2015-10-22T13:48:47Z"}, {"text": "Yup, that looks right. Thanks!", "author": "dholbert@mozilla.com", "id": 10863613, "time": "2015-10-22T14:30:24Z"}, {"text": "Created attachment 8678130\ngrid-item-minimal-width-in-reflow\n\nThis adds the missing piece for reflow.\n(I'll fold this into the first part before landing.)", "author": "mats@mozilla.com", "id": 10867498, "time": "2015-10-23T14:02:55Z"}, {"text": "Created attachment 8678131\ntests\n\nAdded tests that covers the missing piece.  Also in vertical writing-mode.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=bf40a4f8221c", "author": "mats@mozilla.com", "id": 10867504, "time": "2015-10-23T14:04:50Z"}, {"text": "FTR: Note that the tests here depend on percentage working correctly (bug 1163435).", "author": "mats@mozilla.com", "id": 10867670, "time": "2015-10-23T14:47:29Z"}, {"text": "Comment on attachment 8678130\ngrid-item-minimal-width-in-reflow\n\nReview of attachment 8678130:\n-----------------------------------------------------------------\n\nI think this takes care of it for the block axis, but section 4.4. \"Implied Minimum Size of Grid Items\" applies in both axes, IIUC.  Do we need a followup to implement this for the block axis?  (e.g. to resolve \"min-height:auto\" on grid items in a constrained-height grid area, in a document with english text & default \"writing-mode\")\n\n::: layout/generic/nsFrame.cpp\n@@ +4362,5 @@\n>      result.ISize(aWM) = std::min(maxISize, result.ISize(aWM));\n>    }\n>  \n> +  bool isGridItem = (parentFrameType == nsGkAtoms::gridContainerFrame &&\n> +                     !(GetStateBits() & NS_FRAME_OUT_OF_FLOW));\n\nConsider putting this up next to the \"isFlexItem\" declaration, since the two expressions are near-identical. (and it's easier to see/verify that they're the same if they're side-by-side.  And it'll be more likely that changes to one expression are also made to the other expression, if they're side-by-side).\n\n@@ +4372,5 @@\n>        nsLayoutUtils::ComputeISizeValue(aRenderingContext, this,\n>          aCBSize.ISize(aWM), boxSizingAdjust.ISize(aWM), boxSizingToMarginEdgeISize,\n>          minISizeCoord);\n>    } else {\n> +    // Treat \"min-width: auto\" as 0, except for flex/grid items.\n\nThe \"except for flex/grid items\" doesn't seem right here, since you only check \"if (MOZ_UNLIKELY(isGridItem))\".\n\n@@ +4381,5 @@\n>      minISize = 0;\n> +    if (MOZ_UNLIKELY(isGridItem)) {\n> +      // This implements \"Implied Minimum Size of Grid Items\".\n> +      // https://drafts.csswg.org/css-grid/#min-size-auto\n> +      minISize = std::min(maxISize, GetMinISize(aRenderingContext));\n\nSeems like the logic around this section could be structured a little better, to make the flow clearer and to avoid doing an unnecessary \"minISize = 0\" assignment which we later stomp on.\n\nI think this clause should be refactored into the following (starting at the existing \"} else {\" right above this section):\n\n    } else if (MOZ_UNLIKELY(isGridItem)) {\n      // Resolve \"min-width: auto\" as \"Implied Minimum Size of Grid Items\".\n      [grid-specific code]\n    } else {\n      // Treat \"min-width: auto\" as 0.\n      minISize = 0;\n    }\n\n@@ +4384,5 @@\n> +      // https://drafts.csswg.org/css-grid/#min-size-auto\n> +      minISize = std::min(maxISize, GetMinISize(aRenderingContext));\n> +      if (stylePos->ISize(aWM).IsCoordPercentCalcUnit()) {\n> +        minISize = std::min(minISize, result.ISize(aWM));\n> +      }\n\nSo, despite the code-comment, this doesn't fully implement https://drafts.csswg.org/css-grid/#min-size-auto -- it's missing the \"transferred size\" piece, right?\n\nSimilar to end of comment 12, could you file a bug on implementing the \"transferred size\" piece of min-width:auto, and drop an XXX comment here indicating that that's missing?", "author": "dholbert@mozilla.com", "id": 10869478, "time": "2015-10-24T00:05:16Z"}, {"text": "(In reply to Daniel Holbert [:dholbert] from comment #26)\n> > +    // Treat \"min-width: auto\" as 0, except for flex/grid items.\n> \n> The \"except for flex/grid items\" doesn't seem right here, since you only\n> check \"if (MOZ_UNLIKELY(isGridItem))\".\n\n(Expanding on this slightly: we actually treat ALL min-width values as 0 here for flex items, including \"min-width:auto\".  That's because the flexbox layout algorithm does \"min-width\" clamping at a specific spot later in the flex layout algorithm, and if we apply the clamping at this point, it'll mess up the results and may make the element flex more than it should.\n\nA simple example is e.g. a flex item like:\n   <div style=\"flex: 1 auto; min-width: 200px\">a</div>.\nThat flex item needs to start out at its content size (the width of \"a\"), and flex from there.  If it happens to flex to something >=200px, all is well. If it flexes to something smaller than that, then the flexbox layout algorithm clamps it to 200px and re-resolves other flexible lengths with this item frozen.  If we respected its \"min-width\" in nsFrame::ComputeSize, though, then the flex item would *start out* at 200px and grow from there, which means it'd get a head-start & would get extra space that it doesn't deserve when space is plentiful, and we'd produce the wrong layout. To prevent this, we disable \"min-width\" *entirely* for flex items, and only apply it at the right point during flex-container reflow.)\n\n\ntl;dr: please drop 'flex' from that comment.", "author": "dholbert@mozilla.com", "id": 10869491, "time": "2015-10-24T00:14:58Z"}, {"text": "Comment on attachment 8675426\nfix\n\nMain patch is r=me, with:\n - code-comments updated / XXX'd to reflect current reality RE \"transferred size\", per end of comment 12.\n - followup folded in (w/ feedback in comment 26 considered/addressed)", "author": "dholbert@mozilla.com", "id": 10869579, "time": "2015-10-24T01:12:30Z"}, {"text": "Comment on attachment 8678130\ngrid-item-minimal-width-in-reflow\n\n(marking followup r+, w/ feedback in comment 26.)", "author": "dholbert@mozilla.com", "id": 10869581, "time": "2015-10-24T01:13:06Z"}, {"text": "(In reply to Daniel Holbert [:dholbert] from comment #26)\n> I think this takes care of it for the block axis, but section 4.4. \"Implied\n> Minimum Size of Grid Items\" applies in both axes, IIUC.\n\nI'm sure you mean inline axis, and yes 4.4 applies to both axis.\n\n> Do we need a followup to implement this for the block axis?\n\ncss-sizing says it's equal to max-content size:\nhttps://drafts.csswg.org/css-sizing/#min-content-block-size\nAnd we're always reflowing items with unconstrained available height\ncurrently (to avoid fragmentation), so I think that means we get\nthe correct results.  Did you spot a case where we don't?\n\n> > +      // https://drafts.csswg.org/css-grid/#min-size-auto\n> > +      minISize = std::min(maxISize, GetMinISize(aRenderingContext));\n> > +      if (stylePos->ISize(aWM).IsCoordPercentCalcUnit()) {\n> > +        minISize = std::min(minISize, result.ISize(aWM));\n> > +      }\n> Similar to end of comment 12, could you file a bug on implementing the\n> \"transferred size\" piece of min-width:auto, and drop an XXX comment here\n> indicating that that's missing?\n\nRight, I'll file a bug and add a XXX comment here.\n(We currently have the same layout as Chrome, but it's wrong.)", "author": "mats@mozilla.com", "id": 10870092, "time": "2015-10-24T16:49:23Z"}, {"text": "(In reply to Mats Palmgren (:mats) from comment #30)\n> (In reply to Daniel Holbert [:dholbert] from comment #26)\n> > > +      // https://drafts.csswg.org/css-grid/#min-size-auto\n> > > +      minISize = std::min(maxISize, GetMinISize(aRenderingContext));\n> > > +      if (stylePos->ISize(aWM).IsCoordPercentCalcUnit()) {\n> > > +        minISize = std::min(minISize, result.ISize(aWM));\n> > > +      }\n> > Similar to end of comment 12, could you file a bug on implementing the\n> > \"transferred size\" piece of min-width:auto, and drop an XXX comment here\n> > indicating that that's missing?\n> \n> Right, I'll file a bug and add a XXX comment here.\n> (We currently have the same layout as Chrome, but it's wrong.)\n\nActually, no, I don't think nsFrame::ComputeSize should ever\nbe called for frames that have an intrinsic ratio because it\nsimply can't handle that (for anything, not just grid items).\n\nInstead, frame subclasses that has an intrinsic ratio should override\nComputeSize and call nsLayoutUtils::ComputeSizeWithIntrinsicDimensions\ninstead which does handle it.  E.g. nsImageFrame:\nhttp://mxr.mozilla.org/mozilla-central/source/layout/generic/nsImageFrame.cpp?rev=36e9b7333038#807\n\nI added an assertion about that and it passed:\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=eeaa37f22eda\n\nSo I'll add that assertion instead here, and deal with adding\ngrid item specific code to ComputeSizeWithIntrinsicDimensions\nin bug 1218178.", "author": "mats@mozilla.com", "id": 10870733, "time": "2015-10-25T16:54:05Z"}, {"text": "(In reply to Mats Palmgren (:mats) from comment #30)\n> > Do we need a followup to implement this for the block axis?\n> [...] we're always reflowing items with unconstrained available height\n> currently (to avoid fragmentation), so I think that means we get\n> the correct results.  Did you spot a case where we don't?\n\nAh, thanks. (No, I didn't spot a case.)\n\nCan you make sure there's a testcase for this?  (Something like the testcase I attached here earlier, but with the grid item's content being tall instead of wide, e.g. a paragraph of text.)  It'd pass trivially right now, but it may stop doing so when we add fragmentation support (at which point we'll actually need special-case code to handle \"min-height:auto\" in a horizontal writing-mode).\n\n(Maybe one of your testcases already covers this.)\n\n(In reply to Mats Palmgren (:mats) from comment #31)\n> Actually, no, I don't think nsFrame::ComputeSize should ever\n> be called for frames that have an intrinsic ratio because it\n> simply can't handle that (for anything, not just grid items).\n[...]\n> \n> So I'll add that assertion instead here, and deal with adding\n> grid item specific code to ComputeSizeWithIntrinsicDimensions\n> in bug 1218178.\n\nThanks!", "author": "dholbert@mozilla.com", "id": 10870794, "time": "2015-10-25T18:21:39Z"}, {"text": "(In reply to Daniel Holbert [:dholbert] from comment #26)\n> Consider putting this up next to the \"isFlexItem\" declaration,\n\nSure.\n\n> The \"except for flex/grid items\" doesn't seem right here, since you only\n> check \"if (MOZ_UNLIKELY(isGridItem))\".\n\nFair enough, I removed the \"flex\".\n\n> Seems like the logic around this section could be structured a little\n> better, to make the flow clearer and to avoid doing an unnecessary \"minISize\n> = 0\" assignment which we later stomp on.\n\nFixed, thanks.", "author": "mats@mozilla.com", "id": 10899610, "time": "2015-11-03T20:52:49Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/91269e0c3c2d\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/fa7ad766c217", "author": "mats@mozilla.com", "id": 10899897, "time": "2015-11-03T21:47:44Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/91269e0c3c2d\nhttps://hg.mozilla.org/mozilla-central/rev/fa7ad766c217", "author": "cbook@mozilla.com", "id": 10901675, "time": "2015-11-04T11:21:28Z"}, {"text": "https://hg.mozilla.org/releases/mozilla-b2g44_v2_5/rev/91269e0c3c2d\nhttps://hg.mozilla.org/releases/mozilla-b2g44_v2_5/rev/fa7ad766c217", "author": "cbook@mozilla.com", "id": 10902205, "time": "2015-11-04T14:55:05Z"}, {"text": "(In reply to Carsten Book [:Tomcat] from comment #36)\n> https://hg.mozilla.org/releases/mozilla-b2g44_v2_5/rev/91269e0c3c2d\n> https://hg.mozilla.org/releases/mozilla-b2g44_v2_5/rev/fa7ad766c217\n\nbacked this out on request from mats from b2g v2.5 in http://hg.mozilla.org/releases/mozilla-b2g44_v2_5/rev/0869ace8c965", "author": "cbook@mozilla.com", "id": 10906308, "time": "2015-11-05T13:37:20Z"}], "cf_last_resolved": "2015-11-04T11:21:28Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2017-09-05T22:00:07Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [616605, 1194446, 1316534, 1000592, 1255393], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "Layout", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla45", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "mats@mozilla.com", "id": 5168, "name": "mats@mozilla.com", "real_name": "Mats Palmgren (:mats)"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "cbook@mozilla.com", "id": 277293, "name": "cbook@mozilla.com", "real_name": "Carsten Book [:Tomcat]"}, {"email": "dholbert@mozilla.com", "id": 278074, "name": "dholbert@mozilla.com", "real_name": "Daniel Holbert [:dholbert]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [{"status": "+", "name": "in-testsuite", "modification_date": "2015-11-03T21:47:44Z", "type_id": 37, "creation_date": "2015-11-03T21:47:44Z", "id": 1285716, "setter": "mats@mozilla.com"}], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "dholbert@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(dholbert@mozilla.com)"}], "who": "mats@mozilla.com", "when": "2015-06-23T00:07:44Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1000592"}], "who": "mats@mozilla.com", "when": "2015-06-23T00:08:55Z"}, {"changes": [{"removed": "needinfo?(dholbert@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "dholbert@mozilla.com", "when": "2015-06-25T06:52:12Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1194446"}], "who": "mats@mozilla.com", "when": "2015-08-13T20:41:19Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "mats@mozilla.com"}], "who": "mats@mozilla.com", "when": "2015-08-26T21:24:38Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8668206, "added": "review?(dholbert@mozilla.com)"}], "who": "mats@mozilla.com", "when": "2015-10-01T01:46:36Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8653087, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8653089, "added": "1"}], "who": "mats@mozilla.com", "when": "2015-10-01T01:47:57Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8668208, "added": "1"}], "who": "mats@mozilla.com", "when": "2015-10-01T17:18:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8668206, "added": "review-"}], "who": "dholbert@mozilla.com", "when": "2015-10-13T23:52:53Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8668206, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8675426, "added": "review?(dholbert@mozilla.com)"}], "who": "mats@mozilla.com", "when": "2015-10-18T16:27:11Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8668531, "added": "1"}], "who": "mats@mozilla.com", "when": "2015-10-18T16:28:18Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8677122, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8677133, "added": "1"}], "who": "mats@mozilla.com", "when": "2015-10-22T13:45:37Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(dholbert@mozilla.com)"}], "who": "mats@mozilla.com", "when": "2015-10-22T13:48:47Z"}, {"changes": [{"removed": "needinfo?(dholbert@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "dholbert@mozilla.com", "when": "2015-10-22T14:30:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8678130, "added": "review?(dholbert@mozilla.com)"}], "who": "mats@mozilla.com", "when": "2015-10-23T14:02:55Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8675427, "added": "1"}], "who": "mats@mozilla.com", "when": "2015-10-23T14:04:50Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1163435"}], "who": "mats@mozilla.com", "when": "2015-10-23T14:47:29Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8675426, "added": "review+"}], "who": "dholbert@mozilla.com", "when": "2015-10-24T01:12:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dholbert@mozilla.com)", "attachment_id": 8678130, "added": "review+"}], "who": "dholbert@mozilla.com", "when": "2015-10-24T01:13:06Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1218178"}], "who": "mats@mozilla.com", "when": "2015-10-25T14:16:07Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "in-testsuite+"}], "who": "mats@mozilla.com", "when": "2015-11-03T21:47:44Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla45"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-11-04 03:21:28"}, {"removed": "---", "field_name": "cf_status_firefox45", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2015-11-04T11:21:28Z"}, {"changes": [{"removed": "---", "field_name": "cf_status_b2g_2_5", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2015-11-04T14:55:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cbook@mozilla.com"}, {"removed": "fixed", "field_name": "cf_status_b2g_2_5", "added": "---"}], "who": "cbook@mozilla.com", "when": "2015-11-05T13:37:20Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1255393"}], "who": "mats@mozilla.com", "when": "2016-03-10T12:50:13Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1316534"}], "who": "dholbert@mozilla.com", "when": "2017-09-05T22:00:07Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}