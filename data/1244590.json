{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-24T06:20:34Z", "type_id": 4, "creation_date": "2016-05-23T08:28:51Z", "id": 1398438, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752104}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-24T09:35:14Z", "type_id": 4, "creation_date": "2016-05-23T08:28:51Z", "id": 1398439, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752105}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-30T02:52:17Z", "type_id": 4, "creation_date": "2016-05-30T02:52:17Z", "id": 1402395, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752106}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-30T04:33:48Z", "type_id": 4, "creation_date": "2016-05-30T02:52:36Z", "id": 1402396, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752107}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-27T06:46:04Z", "type_id": 4, "creation_date": "2016-05-26T19:06:41Z", "id": 1401293, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752108}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-06-03T00:39:52Z", "type_id": 4, "creation_date": "2016-06-02T10:53:02Z", "id": 1404711, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752109}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-16T04:24:27Z", "type_id": 4, "creation_date": "2016-05-13T09:08:59Z", "id": 1393505, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752110}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-25T12:03:12Z", "type_id": 4, "creation_date": "2016-05-23T08:28:51Z", "id": 1398444, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752111}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-06-06T04:27:20Z", "type_id": 4, "creation_date": "2016-06-03T03:46:14Z", "id": 1405322, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752112}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-16T04:39:44Z", "type_id": 4, "creation_date": "2016-05-13T09:08:59Z", "id": 1393508, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8752113}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-30T00:04:00Z", "type_id": 4, "creation_date": "2016-05-30T00:04:00Z", "id": 1402384, "setter": "bbirtles@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8755339}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8755340}, {"creator": "boris.chiou@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8755341}], "classification": "Components", "creator": "motozawa@mozilla-japan.org", "cc": ["bbirtles@mozilla.com", "boris.chiou@gmail.com", "cmills@mozilla.com", "hikezoe@mozilla.com", "jwalden+bmo@mit.edu", "jypenator@gmail.com", "kchang@mozilla.com"], "depends_on": [1211783, 1276550, 1276573, 1277740], "creation_time": "2016-02-01T02:40:18Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "implement KeyframeEffectReadOnly spacing modes", "id": 1244590, "assigned_to_detail": {"email": "boris.chiou@gmail.com", "id": 500786, "name": "boris.chiou@gmail.com", "real_name": "Boris Chiou [:boris] (disappeared)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "boris.chiou@gmail.com", "comment_count": 238, "comments": [{"text": "", "author": "motozawa@mozilla-japan.org", "id": 11124181, "time": "2016-02-01T02:40:18Z"}, {"text": "I have a problem about the grammar of paced({ident}). Should the format of ident be 'marinLeft' or 'margin-left'? We use 'marginLeft' in the keyframe list, so should we use the same format in paced() function?", "author": "boris.chiou@gmail.com", "id": 11384362, "time": "2016-05-05T10:27:54Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #1)\n> I have a problem about the grammar of paced({ident}). Should the format of\n> ident be 'marinLeft' or 'margin-left'? We use 'marginLeft' in the keyframe\n> list, so should we use the same format in paced() function?\n\nIn my current implementation, I use 'margin-left' as the expected value, so I can use nsCSSProps::LookupProperty() to get the property id easily.", "author": "boris.chiou@gmail.com", "id": 11385250, "time": "2016-05-05T16:17:11Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #1)\n> I have a problem about the grammar of paced({ident}). Should the format of\n> ident be 'marinLeft' or 'margin-left'? We use 'marginLeft' in the keyframe\n> list, so should we use the same format in paced() function?\n\nI *think* 'margin-left' is probably better here (since it's in a string, and we only use the camelCase when it's an JS identifier; and because we'll likely expose this syntax to CSS some day).", "author": "bbirtles@mozilla.com", "id": 11386992, "time": "2016-05-05T23:32:20Z"}, {"text": "Hi Brian,\n\nLet's check Issue 24 [1], applying spacing to Keyframes if context element is null.\nI use StyleAnimationValue::ComputeDistance() to calculate the cumulative distance between each pair of paceable Keyframes, so if the target element (context element) is null (and no style context), I have to handle these three cases properly:\n\n1. When creating null-target effect whose spacing mode is \"paced\":\nMy thought - Apply distribute spacing to all Keyframes directly.\n\n2. When setting a target to null:\nMy thought - Do nothing. We still use the original computed offsets. (Or should we apply distribute spacing if original spacing mode is paced?)\n\n3. When setting a new valid target:\nMy thought - Just use this new target as the context element and re-calculate the computed offsets.\n\nHow do you think about these? Thanks.\n\n[1] https://w3c.github.io/web-animations/#issue-bff293c9", "author": "boris.chiou@gmail.com", "id": 11396269, "time": "2016-05-10T11:18:19Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #4)\n> Let's check Issue 24 [1], applying spacing to Keyframes if context element\n> is null.\n> I use StyleAnimationValue::ComputeDistance() to calculate the cumulative\n> distance between each pair of paceable Keyframes, so if the target element\n> (context element) is null (and no style context), I have to handle these\n> three cases properly:\n> \n> 1. When creating null-target effect whose spacing mode is \"paced\":\n> My thought - Apply distribute spacing to all Keyframes directly.\n\nYes, I think falling back to distribute spacing is the best thing to do. We already use 'distribute' spacing unconditionally when merging frames in [1] and we fall back to 'distribute' when the paced property is not available so I think it's the correct thing to do here too.\n\n[1] https://w3c.github.io/web-animations/#processing-a-frames-argument\n\n> 2. When setting a target to null:\n> My thought - Do nothing. We still use the original computed offsets. (Or\n> should we apply distribute spacing if original spacing mode is paced?)\n\nI think we should apply distribute spacing in this case. This makes the API stateless in this regard (i.e. it shouldn't matter than you previously attached this effect to an element with a certain font-size).\n\n> 3. When setting a new valid target:\n> My thought - Just use this new target as the context element and\n> re-calculate the computed offsets.\n\nYes. That sounds correct.\n\n> How do you think about these? Thanks.\n\nI will work on the spec changes (I have a long list of spec changes I'm working on now!) but please add web-platform-tests for these.\n\nThanks!", "author": "bbirtles@mozilla.com", "id": 11398593, "time": "2016-05-10T23:32:10Z"}, {"text": "Some CSS properties are not supported neither for StyleAnimationValue::ComputeDistance() nor paced spacing yet, e.g. transform [1]. In these cases, I think we should also fall back to distribute spacing. Do we have a bug to trace them? I guess I have to file a bug for them.\n\n[1] https://dxr.mozilla.org/mozilla-central/rev/3461f3cae78495f100a0f7d3d2e0b89292d3ec02/layout/style/StyleAnimationValue.cpp#864-872", "author": "boris.chiou@gmail.com", "id": 11402379, "time": "2016-05-12T03:57:50Z"}, {"text": "Hi Brian,\n\nIf we have duplicated Keyframes or the distance of a pair CSS propertry values are 0.0.\ne.g.\n\n  var anim = div.animate([ { marginLeft: '0px' },\n                           { marginLeft: '0px' },\n                           { marginLeft: '100px' , offset: 0.5},\n                           { marginLeft: '50px'} ],\n                         { duration: 1000, spacing: 'paced(margin-left)' });\n\nanim.effect.frame[0].computedOffset = 0.0;\nanim.effect.frame[1].computedOffset = 0.0; // 0.0 or 0.25 ?\nanim.effect.frame[2].computedOffset = 0.5;\nanim.effect.frame[3].computedOffset = 1.0;\n\nWhat is the expected computed offset of the duplicated Keyframe in paced spacing mode?\n\nThanks.", "author": "boris.chiou@gmail.com", "id": 11402618, "time": "2016-05-12T06:39:20Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #7)\n>   var anim = div.animate([ { marginLeft: '0px' },\n>                            { marginLeft: '0px' },\n>                            { marginLeft: '100px' , offset: 0.5},\n>                            { marginLeft: '50px'} ],\n>                          { duration: 1000, spacing: 'paced(margin-left)' });\n\nAnother similar case is\n\n  var anim = div.animate([ { marginLeft: '0px' },\n                           { marginLeft: '0px' },\n                           { marginLeft: '100px' },\n                           { marginLeft: '50px' } ],\n                         { duration: 1000, spacing: 'paced(margin-left)' });\n\nanim.effect.frame[0].computedOffset = 0.0\nanim.effect.frame[1].computedOffset = 0.0   // This is 0.0, right?\nanim.effect.frame[2].computedOffset = 0.667\nanim.effect.frame[3].computedOffset = 1.0", "author": "boris.chiou@gmail.com", "id": 11402636, "time": "2016-05-12T06:46:26Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #7)\n> Hi Brian,\n> \n> If we have duplicated Keyframes or the distance of a pair CSS propertry\n> values are 0.0.\n> e.g.\n> \n>   var anim = div.animate([ { marginLeft: '0px' },\n>                            { marginLeft: '0px' },\n>                            { marginLeft: '100px' , offset: 0.5},\n>                            { marginLeft: '50px'} ],\n>                          { duration: 1000, spacing: 'paced(margin-left)' });\n> \n> anim.effect.frame[0].computedOffset = 0.0;\n> anim.effect.frame[1].computedOffset = 0.0; // 0.0 or 0.25 ?\n> anim.effect.frame[2].computedOffset = 0.5;\n> anim.effect.frame[3].computedOffset = 1.0;\n> \n> What is the expected computed offset of the duplicated Keyframe in paced\n> spacing mode?\n\nWhy wouldn't it be 0.0?", "author": "bbirtles@mozilla.com", "id": 11402792, "time": "2016-05-12T08:07:26Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #9)\n> Why wouldn't it be 0.0?\n\nI think the spec there says it should be:\n\n   offset|paced A| + (offset|paced B| \u2212 offset|paced A|) \u00d7 dist|k| / dist|paced B|\n   = 0.0 + (0.5 - 0.0) * 0 / 100\n   = 0.0 + 0.5 * 0\n   = 0.0", "author": "bbirtles@mozilla.com", "id": 11402816, "time": "2016-05-12T08:16:40Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #8)\n> Another similar case is\n> \n>   var anim = div.animate([ { marginLeft: '0px' },\n>                            { marginLeft: '0px' },\n>                            { marginLeft: '100px' },\n>                            { marginLeft: '50px' } ],\n>                          { duration: 1000, spacing: 'paced(margin-left)' });\n> \n> anim.effect.frame[0].computedOffset = 0.0\n> anim.effect.frame[1].computedOffset = 0.0   // This is 0.0, right?\n> anim.effect.frame[2].computedOffset = 0.667\n> anim.effect.frame[3].computedOffset = 1.0\n\nSo, according to the spec we have:\n\npacedA = frame[0]\npacedB = frame[3]\n\ndist|paced B| = 150\n\nFor frame[1]\n\n  computedOffset = offset|paced A| + (offset|paced B| \u2212 offset|paced A|) \u00d7 dist|k| / dist|paced B|\n                 = 0.0 + (1.0 - 0.0) * 0.0 / 150\n                 = 0.0 + 1 * 0.0\n                 = 0.0\n\nFor frame[2]\n\n  computedOffset = offset|paced A| + (offset|paced B| \u2212 offset|paced A|) \u00d7 dist|k| / dist|paced B|\n                 = 0.0 + (1.0 - 0.0) * 100 / 150\n                 = 0.0 + 1 * 0.667\n                 = 0.667", "author": "bbirtles@mozilla.com", "id": 11402833, "time": "2016-05-12T08:20:49Z"}, {"text": "OK. Thanks.\n\nBTW, there is still a special case:\n\n   var anim = div.animate([ { marginLeft: '0px' },\n                            { marginLeft: '0px' },\n                            { marginLeft: '0px' },\n                            { marginLeft: '0px' } ],\n                          { duration: 1000, spacing: 'paced(margin-left)' });\n\nThe cumulative distance of |Paced B| would be 0, so I think we have to fall it back to distribute spacing.", "author": "boris.chiou@gmail.com", "id": 11402859, "time": "2016-05-12T08:30:44Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #12)\n> OK. Thanks.\n> \n> BTW, there is still a special case:\n> \n>    var anim = div.animate([ { marginLeft: '0px' },\n>                             { marginLeft: '0px' },\n>                             { marginLeft: '0px' },\n>                             { marginLeft: '0px' } ],\n>                           { duration: 1000, spacing: 'paced(margin-left)' });\n> \n> The cumulative distance of |Paced B| would be 0, so I think we have to fall\n> it back to distribute spacing.\n\nYeah, dist|paced B| will be zero so the division is undefined. I guess distribute spacing makes the most sense here. I've updated the spec to include this.[1]\n\n[1] https://github.com/w3c/web-animations/commit/ea84078dbc9fd2ccb759c3ef5096a24ec3a1f604", "author": "bbirtles@mozilla.com", "id": 11405792, "time": "2016-05-13T01:06:51Z"}, {"text": "Created attachment 8752104\nBug 1244590 - Part 1: Introduce KeyframeEffectParams.\n\nAdd two new files, KeyframeEffectOptionsData.h/cpp, and define the basic data\nmembers of IterationCompositeOperation, CompositeOperation, and Spacing mode.\nAlso, add one more argument, Maybe<KeyframeEffectOptionsData>, to the\nconstructors of KeyframeEffect(ReadOnly).\n\nReview commit: https://reviewboard.mozilla.org/r/51507/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/51507/", "author": "boris.chiou@gmail.com", "id": 11406458, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752105\nBug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor.\n\nStore IterationCompositeOperation, CompositeOperation, and spacing mode from the\nconstructor API.\n\nReview commit: https://reviewboard.mozilla.org/r/51509/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/51509/", "author": "boris.chiou@gmail.com", "id": 11406459, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nWe only support spacing mode from Web Animations API, so add a simple parser and\nuse it only from the API. In this patch, parse spacing mode from the constructor\nand throw TypeError if we don't support this CSS Property. (e.g. We can not find\na valid property or it is a short-hand property.)\n\nReview commit: https://reviewboard.mozilla.org/r/51511/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/51511/", "author": "boris.chiou@gmail.com", "id": 11406460, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nRename it to ApplySpacing, and let it handle both distribute and paced mode.\n\nReview commit: https://reviewboard.mozilla.org/r/51549/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/51549/", "author": "boris.chiou@gmail.com", "id": 11406461, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nWhen we apply paced spacing, we have to check if there are still null computed\noffsets after applying paced spacing to paceable Keyframes because the\ncalculation of distance may be failed or some Keyframes are not paceable in\nthe specific range. Therefore, using Maybe<double> would be easier to check it.\n\nReview commit: https://reviewboard.mozilla.org/r/51505/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/51505/", "author": "boris.chiou@gmail.com", "id": 11406462, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nCalculate the paced spacing for each Keyframes by the context element. Use the\nalgorithm in the spec.\n\nReview commit: https://reviewboard.mozilla.org/r/51809/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/51809/", "author": "boris.chiou@gmail.com", "id": 11406463, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nUse a help function to wrap GetStyleContextForElement, so ApplySpacing can reuse\nthe nsStyleContext we get.\n\nReview commit: https://reviewboard.mozilla.org/r/51895/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/51895/", "author": "boris.chiou@gmail.com", "id": 11406464, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nHandle these cases:\n1. When creating null-target effect whose spacing mode is \"paced\":\n - Fall back to distribute spacing.\n\n2. When setting a target to null:\n - Apply distribute spacing.\n\n3. When setting a new valid target:\n - Use this new target as the context element and re-calculate the computed\n   offsets.\n\nReview commit: https://reviewboard.mozilla.org/r/52137/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/52137/", "author": "boris.chiou@gmail.com", "id": 11406465, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview commit: https://reviewboard.mozilla.org/r/52139/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/52139/", "author": "boris.chiou@gmail.com", "id": 11406466, "time": "2016-05-13T09:08:59Z"}, {"text": "Created attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview commit: https://reviewboard.mozilla.org/r/52151/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/52151/", "author": "boris.chiou@gmail.com", "id": 11406467, "time": "2016-05-13T09:08:59Z"}, {"text": "Hi, Brian,\n\nI haven't implemented writable spacing. Part 1 ~ Part 10 are for read-only spacing mode. I think we could review them first. Thanks.", "author": "boris.chiou@gmail.com", "id": 11406495, "time": "2016-05-13T09:11:54Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review49369\n\n::: dom/animation/KeyframeUtils.cpp:495\n(Diff revision 1)\n> +      // d) Fill non-assigned computed offsets in (Paced A, Paced B).\n> +      for (size_t k = pA + 1; k < pB; ++k) {\n> +        if (aKeyframes[k].mComputedOffset) {\n> +          continue;\n> +        }\n> +\n> +        size_t startIdx = k - 1;\n> +        size_t endIdx = k + 1;\n> +        while (!aKeyframes[endIdx].mComputedOffset && endIdx < pB) {\n> +          ++endIdx;\n> +        }\n> +        ApplyDistributingOffset(aKeyframes, startIdx, endIdx);\n> +        k = endIdx + 1;\n> +      }\n\nI'm thinking do we have any way to skip this step. Maybe we can use a counter,\n\ne.g. uint32_t assignedKeyframes = aKeyframes.length,\n\nand then minus one if we assign a mComputedOffset each time. If assignedKeyframes == 0 at this step, we could skip this loop, or early return if all the mComputedOffsets are assigned in the loop.", "author": "boris.chiou@gmail.com", "id": 11406518, "time": "2016-05-13T09:23:35Z"}, {"text": "Comment on attachment 8752104\nBug 1244590 - Part 1: Introduce KeyframeEffectParams.\n\nhttps://reviewboard.mozilla.org/r/51507/#review49588\n\nThanks for looking into this. I'd like to look at this again with the changes made since I think it will change quite a lot.\n\n::: dom/animation/KeyframeEffect.h:24\n(Diff revision 1)\n>  #include \"mozilla/ComputedTiming.h\"\n>  #include \"mozilla/ComputedTimingFunction.h\"\n>  #include \"mozilla/EffectCompositor.h\"\n>  #include \"mozilla/LayerAnimationInfo.h\" // LayerAnimations::kRecords\n>  #include \"mozilla/Maybe.h\"\n>  #include \"mozilla/OwningNonNull.h\"      // OwningNonNull<...>\n\nNit: While you're touching this file, can you remove this no-longer-needed include? Thanks.\n\n::: dom/animation/KeyframeEffect.h:197\n(Diff revision 1)\n>  {\n>  public:\n>    KeyframeEffectReadOnly(nsIDocument* aDocument,\n>                           const Maybe<OwningAnimationTarget>& aTarget,\n> -                         const TimingParams& aTiming);\n> +                         const TimingParams& aTiming,\n> +                         const Maybe<KeyframeEffectOptionsData>& aOptions);\n\nBased on the changes to KeyframeEffectOptionsData mentioned below, I think this object will be sufficiently lightweight that we can just always pass a const reference to one (i.e. no need for Maybe).\n\n::: dom/animation/KeyframeEffect.h:239\n(Diff revision 1)\n>  \n>    IterationCompositeOperation IterationComposite() const;\n>    CompositeOperation Composite() const;\n> -  void GetSpacing(nsString& aRetVal) const {\n> -    aRetVal.AssignLiteral(\"distribute\");\n> +  void GetSpacing(nsString& aRetVal) const\n> +  {\n> +    aRetVal = mEffectOptions.mSpacing;\n\nLater on I'm suggesting we store an enum and nsCSSProperty pair to represent the spacing mode. Let's add a method to serialize those parameters to KeyframeEffectOptionsData and call that here.\n\n::: dom/animation/KeyframeEffectOptionsData.h:19\n(Diff revision 1)\n> +namespace dom {\n> +\n> +enum class IterationCompositeOperation : uint32_t;\n> +enum class CompositeOperation : uint32_t;\n> +\n> +struct KeyframeEffectOptionsData\n\nI wonder if we can call this KeyframeEffectParams? To make up with TimingParams?\n\n::: dom/animation/KeyframeEffectOptionsData.h:21\n(Diff revision 1)\n> +enum class IterationCompositeOperation : uint32_t;\n> +enum class CompositeOperation : uint32_t;\n> +\n> +struct KeyframeEffectOptionsData\n> +{\n> +  KeyframeEffectOptionsData();\n\nAs mentioned below, if we use member initializers, I think we can drop this.\n\n::: dom/animation/KeyframeEffectOptionsData.h:23\n(Diff revision 1)\n> +  explicit KeyframeEffectOptionsData(\n> +    const Maybe<KeyframeEffectOptionsData>& aOptions);\n\nIf we make the changes suggested earlier, I think we can drop this. (In general, I think it's a bit odd to have a class with a constructor that take a Maybe<> version of itself. The probably suggests we should be doing something differently elsewhere.)\n\n::: dom/animation/KeyframeEffectOptionsData.h:26\n(Diff revision 1)\n> +  IterationCompositeOperation mIterationComposite;\n> +  CompositeOperation mComposite;\n\nIt might be better to leave these out until we need them and just add a // FIXME comment for this?\n\n::: dom/animation/KeyframeEffectOptionsData.h:28\n(Diff revision 1)\n> +  explicit KeyframeEffectOptionsData(\n> +    const Maybe<KeyframeEffectOptionsData>& aOptions);\n> +\n> +  IterationCompositeOperation mIterationComposite;\n> +  CompositeOperation mComposite;\n> +  nsString mSpacing = NS_LITERAL_STRING(\"distribute\");\n\nLet's just make this an enum and an nsCSSProperty?\n\nAnd initialize them here to 'distribute' and eCSSProperty_UNKNOWN. Then we don't need a constructor at all.", "author": "bbirtles@mozilla.com", "id": 11410008, "time": "2016-05-16T00:43:47Z"}, {"text": "Comment on attachment 8752105\nBug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor.\n\nhttps://reviewboard.mozilla.org/r/51509/#review49590\n\nThis is mostly fine but I think it will change a lot based on the changes to part 1 so I'd like to look at it again.\n\n::: dom/animation/KeyframeEffect.cpp:701\n(Diff revision 1)\n> +static const KeyframeEffectOptions&\n> +GetAsEffectOptions(const UnrestrictedDoubleOrKeyframeEffectOptions& aOptions)\n> +{\n> +  MOZ_ASSERT(aOptions.IsKeyframeEffectOptions());\n> +  return aOptions.GetAsKeyframeEffectOptions();\n> +}\n\nWhat is the reasoning behind putting these methods here?\n\nI think it might make more sense to declare them just before we use them?\n\n::: dom/animation/KeyframeEffect.cpp:702\n(Diff revision 1)\n>  KeyframeEffectReadOnly::~KeyframeEffectReadOnly()\n>  {\n>  }\n>  \n> +static const KeyframeEffectOptions&\n> +GetAsEffectOptions(const UnrestrictedDoubleOrKeyframeEffectOptions& aOptions)\n\nThis naming is a bit awkward: GetAsEffectOptions vs GetEffectOptions further down.\n\nHow about:\n\n* KeyframeEffectOptionsFromUnion()\n* KeyframeEffectParamsFromUnion()\n\n::: dom/animation/KeyframeEffect.cpp:719\n(Diff revision 1)\n> +  Maybe<KeyframeEffectOptionsData> result;\n> +  if (!aOptions.IsUnrestrictedDouble()) {\n> +    const KeyframeEffectOptions& options = GetAsEffectOptions(aOptions);\n> +    result.emplace(options);\n> +  }\n> +  return result;\n\nBased on my feedback to part 1, I think this will change quite a bit. We'll probably want to do the parsing here and return a KeyframeEffectParams object.\n\nWe'll also like need to pass in an ErrorResult object so we can report parse errors.", "author": "bbirtles@mozilla.com", "id": 11410023, "time": "2016-05-16T00:58:36Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nhttps://reviewboard.mozilla.org/r/51511/#review49592\n\n::: dom/animation/KeyframeEffectOptionsData.h:31\n(Diff revision 1)\n> +  bool ParseSpacing(nsIDocument* aDoc, ErrorResult& aRv);\n> +\n\nLet's make this a static method like we do with TimingParams. It can return the spacing mode and property and then we can call this to check for errors before setting up the object (similar to what we do in TimingParamsFromOptionsUnion).\n\n(I think the pattern of having a partially-initialized object where mSpacing is filled-in but the other parameters are not, and then calling ParseSpacing isn't ideal. It means the mSpacing can be out-of-sync with the other members.)\n\n::: dom/animation/KeyframeEffectOptionsData.h:36\n(Diff revision 1)\n> +  // We use SpacingMode and nsCSSProperty pair to know which property should\n> +  // be paced. mSpacing is the original string.\n> +  enum class SpacingMode\n> +  {\n> +    distribute,\n> +    paced\n> +  };\n> +  SpacingMode mSpacingMode = SpacingMode::distribute;\n> +  nsCSSProperty mPacedProperty = eCSSProperty_UNKNOWN;\n\nYes, this is more like what I had in mind in part 1. I don't think we need to store the original string, however. We can serialize from the parsed properties as needed.\n\n::: dom/animation/KeyframeEffectOptionsData.cpp:50\n(Diff revision 1)\n> +KeyframeEffectOptionsData::ParseSpacing(nsIDocument* aDoc,\n> +                                        ErrorResult& aRv)\n> +{\n> +  // 1. distribute\n> +  if (mSpacing.EqualsLiteral(\"distribute\")) {\n> +    return true;\n\nProbably we should just make the return type void here and require that the caller checks aRv.Failed(). That's better than having two different means of reporting failure (because then we avoid the situation where, e.g. we return false, but !aRv.Failed()).\n\n::: dom/animation/KeyframeEffectOptionsData.cpp:53\n(Diff revision 1)\n> +  // 2. paced(css-property).\n> +  // e.g. \"paced(margin-left)\"  is accepted,\n> +  //      \"paced(marginLeft)\"   is not accepted.\n> +  //      \"paced()\"             is not accepted.\n> +  //      \"paced( margin-left)\" is not accepted.\n> +  nsString regex(NS_LITERAL_STRING(\"paced\\\\([a-z-]+\\\\)\"));\n> +  if (nsContentUtils::IsPatternMatching(mSpacing, regex, aDoc)) {\n\nI don't think we want to use regexs here. Their performance is typically not good, and it's really easy to fall off a performance cliff any time you tweak it.\n\nI was thinking we should probably follow CSS parsing rules here (e.g. recognize and ignore comments etc.) but it doesn't look like that's particularly easy to do. We can't reuse nsCSSScanner for example. So we'd probably need to modify nsCSSParser to support this.\n\nSo, for now, I think we can just say this attribute doesn't support CSS parsing rules. \n\nInstead, we can just do some manual parsing like we do in dom/smil/nsSMILParserUtils.cpp. (I think we try to use iterators and aStr.BeginReading etc. but I notice we're also using ranged pointers there a bit.)\n\nIf we later introduce animation-spacing etc. then we can add it to the CSS parser then and support CSS comments etc. from the API.", "author": "bbirtles@mozilla.com", "id": 11410037, "time": "2016-05-16T01:26:33Z"}, {"text": "https://reviewboard.mozilla.org/r/51507/#review49598\n\n::: dom/animation/KeyframeEffectOptionsData.h:13\n(Diff revision 1)\n> +namespace mozilla {\n> +namespace dom {\n\nOh, one more note, I don't think this needs to be in the dom namespace. I think our approach so far is to only put objects exposed through the API there.", "author": "bbirtles@mozilla.com", "id": 11410051, "time": "2016-05-16T01:34:46Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nhttps://reviewboard.mozilla.org/r/51549/#review49600\n\n::: dom/animation/KeyframeEffect.cpp:470\n(Diff revision 1)\n>    if (KeyframesEqualIgnoringComputedOffsets(aFrames, mFrames)) {\n>      return;\n>    }\n>  \n>    mFrames = Move(aFrames);\n> -  KeyframeUtils::ApplyDistributeSpacing(mFrames);\n> +  KeyframeUtils::ApplySpacing(mFrames, mEffectOptions.mSpacingMode);\n\nWhen I added this line, it was only intended to be temporary. I wonder if we need to do spacing in SetFrames?\n\nWe only *need* the computed offsets to be filled-in when:\n\na) We compose style\nb) We get a call to GetKeyframes\n\nHowever, we need to update computed offsets whenever the style context changes in which case UpdateProperties will be called so we could just apply spacing there.\n\nHowever, we might get a call to GetKeyframes when we don't have a style context so we *could* do something like:\n\n* In SetFrames just use distribute spacing (it's fairly cheap and always works).\n* In UpdateProperties apply the correct spacing.\n\nDoes that work?\n\nThis here is fine for now, but the above might be slightly simpler/cheaper, I'm not sure.\n\n::: dom/animation/KeyframeUtils.h:55\n(Diff revision 1)\n>    GetKeyframesFromObject(JSContext* aCx,\n>                           JS::Handle<JSObject*> aFrames,\n>                           ErrorResult& aRv);\n>  \n>    /**\n> -   * Fills in the mComputedOffset member of each keyframe in the given array\n> +   * Fills in the mComputedOffset member of each keyframe in the given array.\n\n... 'using the specified spacing mode.'\n\nYou also need to document the additional aSpacingMode parameter.\n\n::: dom/animation/KeyframeUtils.h:57\n(Diff revision 1)\n>  \n>    /**\n> -   * Fills in the mComputedOffset member of each keyframe in the given array\n> +   * Fills in the mComputedOffset member of each keyframe in the given array.\n> -   * using the \"distribute\" spacing algorithm.\n>     *\n>     * http://w3c.github.io/web-animations/#distribute-keyframe-spacing-mode\n\nThis is no longer correct.\n\n::: dom/animation/KeyframeUtils.cpp:1142\n(Diff revision 1)\n> +static void\n> +ApplyDistributingOffset(nsTArray<Keyframe>& aKeyframes,\n> +                        size_t aStartIdx, size_t aEndIdx)\n\nHow about we call this DistributeRange and pass a mozilla::Range ?", "author": "bbirtles@mozilla.com", "id": 11410103, "time": "2016-05-16T02:39:28Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nhttps://reviewboard.mozilla.org/r/51505/#review49606\n\nI wonder if it would be simpler/cheaper to just set mComputedOffset to -1 to represent this (we can define a constant like UNRESOLVED_OFFSET to this)? Maybe it doesn't matter. I'll have another look after we decide what to do with the next patch. What do you think?\n\nAt very least, I'd want to make this patch assert that mComputedOffset is filled-in when we get a call to GetKeyframes (not just use valueOr(0.0)).", "author": "bbirtles@mozilla.com", "id": 11410136, "time": "2016-05-16T03:09:57Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nhttps://reviewboard.mozilla.org/r/51809/#review49602\n\nWe need to work out what should happen for shorthands. Is it reasonably to want to pace 'margin'? Unfortunately, I think it might be since often properties get \"promoted\" from longhands to shorthands so if we say that the paced property must be a longhand, content will stop working.\n\nThat, unfortunately complicates this a lot and probably means the spec needs to be changed.\n\nIn any case, I think we should try to use KeyframeEffectReadOnly::mProperties rather than recalculating the StyleAnimationValues using ComputeValues. The reasons are:\n\n* We should probably use the values in mProperties since they will be up to date and reflect what we'll actually animate\n* If mProperties is empty we shouldn't do pacing anyway\n* It saves recalculating values which we already have available\n* mProperties is arranged by property so we don't need to cache the paced property.\n* Whenever we update mProperties we need to re-apply paced spacing so there's a natural connection there\n\nI haven't looked through the rest of the algorithms yet since I think this patch will change quite a bit based on what we do here.\n\nI think what we might end up doing, however, is, for the case of a shorthand, looking up the component properties and doing some sort of squared distance calculation for all the longhand components (like we do for color here: https://www.w3.org/TR/SVG11/animate.html#complexDistances).\n\nThe tricky bit is how to define whether or not a keyframe has the paced property. We could say any keyframe having any of the longhand components counts but then what value would we use for the missing components? I think we might define it as any keyframe specifying *all* the longhand components. I need to think about it a bit more. What do you think?\n\n::: dom/animation/KeyframeEffect.h:118\n(Diff revision 1)\n> +        mPacedPropertyValue.emplace(pair);\n> +        return;\n> +      }\n> +    }\n> +  }\n> +  bool IsPaceable() const { return static_cast<bool>(mPacedPropertyValue); }\n\nIs the static_cast necessary? Doesn't operator bool()[1] does that for us?\n\n[1] https://dxr.mozilla.org/mozilla-central/rev/4a8ed77f6bb573f20980056bf8c1dadd125c1a85/mfbt/Maybe.h#154\n\n::: dom/animation/KeyframeEffect.cpp:471\n(Diff revision 1)\n> +  if (mEffectOptions.mSpacingMode == SpacingMode::paced && aStyleContext) {\n> +    // Cache paced property at each frame.\n> +    for (Keyframe& frame : mFrames) {\n> +      frame.UpdatePacedPropertyValue(mEffectOptions.mPacedProperty);\n> +    }\n> +    // If we have aStyleContext, mTarget must be non-null.\n> +    KeyframeUtils::ApplySpacing(mFrames, SpacingMode::paced,\n> +                                mTarget->mElement, aStyleContext);\n> +  } else {\n> +    // Fall back to distribute spacing.\n> +    KeyframeUtils::ApplySpacing(mFrames, SpacingMode::distribute);\n> +  }\n\nAs mentioned in part 4, we need to re-apply spacing when the style context changes, i.e. UpdateProperties not in SetFrames.\n\n::: dom/animation/KeyframeUtils.h:56\n(Diff revision 1)\n>                           JS::Handle<JSObject*> aFrames,\n>                           ErrorResult& aRv);\n>  \n>    /**\n>     * Fills in the mComputedOffset member of each keyframe in the given array.\n> +   * We need dom::Element and nsStyleContext only if the spacing mode is paced.\n\nHow about, \"If dom::Element or nsStyleContext are null, paced spacing mode falls back to distribute spacing made (as per spec).\"\n\n::: dom/animation/KeyframeUtils.h:62\n(Diff revision 1)\n>     *\n>     * http://w3c.github.io/web-animations/#distribute-keyframe-spacing-mode\n>     *\n> -   * @param keyframes The set of keyframes to adjust.\n> +   * @param aKeyframes The set of keyframes to adjust.\n> +   * @param aSpacingMode The applied spacing mode to aKeyframes.\n> +   * @param aElement the context element.\n\nThe context element for resolving paced property values against.\n\n::: dom/animation/KeyframeUtils.cpp:1221\n(Diff revision 1)\n> +ApplyPacedOffset(nsTArray<Keyframe>& aKeyframes,\n> +                 size_t aPacedA, size_t aPacedB,\n\nCan we call this PaceRange and pass a mozilla::Range?\n\n::: dom/animation/KeyframeUtils.cpp:1244\n(Diff revision 1)\n> +  nsTArray<PropertyStyleAnimationValuePair> values;\n> +  if (!StyleAnimationValue::ComputeValues(property,\n> +        CSSEnabledState::eForAllContent, aElement, aStyleContext,\n> +        aKeyframes[aPacedA].mPacedPropertyValue->mValue, false, values)) {\n\nThis isn't right. ComputeValues() returns an array of values but we're only ever looking at the first one. We need to decide how shorthands should work.", "author": "bbirtles@mozilla.com", "id": 11410137, "time": "2016-05-16T03:10:04Z"}, {"text": "https://reviewboard.mozilla.org/r/51507/#review49588\n\n> Based on the changes to KeyframeEffectOptionsData mentioned below, I think this object will be sufficiently lightweight that we can just always pass a const reference to one (i.e. no need for Maybe).\n\nOK. I will use const ref in the constructors.\n\n> I wonder if we can call this KeyframeEffectParams? To make up with TimingParams?\n\nOK. I will rename it.\n\n> If we make the changes suggested earlier, I think we can drop this. (In general, I think it's a bit odd to have a class with a constructor that take a Maybe<> version of itself. The probably suggests we should be doing something differently elsewhere.)\n\nOK. It makes sense to drop them.\n\n> It might be better to leave these out until we need them and just add a // FIXME comment for this?\n\nOK. I will add a // FIXME and drop these definitions.\n\n> Let's just make this an enum and an nsCSSProperty?\n> \n> And initialize them here to 'distribute' and eCSSProperty_UNKNOWN. Then we don't need a constructor at all.\n\nOK. I will use enum and nsCSSProperty directly and add a method to serialize those parameters. Thanks.", "author": "boris.chiou@gmail.com", "id": 11410146, "time": "2016-05-16T03:25:09Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nhttps://reviewboard.mozilla.org/r/51895/#review49626\n\n::: dom/animation/KeyframeEffect.h:395\n(Diff revision 1)\n>    void RequestRestyle(EffectCompositor::RestyleType aRestyleType);\n>  \n> +  // We need to be careful to *not* call this when we are updating the style\n> +  // context. That's because calling GetStyleContextForElement when we are in\n> +  // the process of building a style context may trigger various forms of\n> +  // infinite recursion.\n\nWe should probably mention what this does, e.g.\n\"Looks up the style context associated with the target element, if any.\"\n\nWe should also mention that if aDoc is not specified, we will use the owner doc of the target element.\n\nNormally we try to avoid default parameters, but maybe it's ok here.\n\n::: dom/animation/KeyframeEffect.cpp:699\n(Diff revision 1)\n> +already_AddRefed<nsStyleContext>\n> +KeyframeEffectReadOnly::GetTargetStyleContext(nsIDocument* aDoc)\n> +{\n\nThe order in the .cpp file doesn't seem to match the order in the .h file.\n\n::: dom/animation/KeyframeEffect.cpp:713\n(Diff revision 1)\n> +  nsIAtom* pseudo = mTarget->mPseudoType < CSSPseudoElementType::Count ?\n> +                    nsCSSPseudoElements::GetPseudoAtom(mTarget->mPseudoType) :\n> +                    nullptr;\n\nWhile we're touching this, we should move the ? and : to the next line. I'm pretty sure Moz coding-style is:\n\nnsIAtom* pseudo = mTarget->mPseudoType < CSSPseudoElementType::Count\n                  ? nsCSSPseudoElements::GetPseudoAtom(mTarget->mPseudoType)\n                  : nullptr;", "author": "bbirtles@mozilla.com", "id": 11410236, "time": "2016-05-16T04:24:27Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nhttps://reviewboard.mozilla.org/r/52137/#review49610\n\n::: dom/animation/KeyframeEffect.cpp:1480\n(Diff revision 1)\n> +    if (mEffectOptions.mSpacingMode == SpacingMode::paced && styleContext) {\n> +      KeyframeUtils::ApplySpacing(mFrames, SpacingMode::paced,\n> +                                  mTarget->mElement, styleContext);\n> +    } else {\n> +      // No style context, so fall back to distribute spacing.\n> +      KeyframeUtils::ApplySpacing(mFrames, SpacingMode::distribute);\n> +    }\n> +\n>      if (styleContext) {\n>        UpdateProperties(styleContext);\n>      }\n\nAs discussed in previous patches I think we should make UpdateProperties update spacing. In the case where styleContext is null, however, we need to apply distribute spacing.\n\n::: dom/animation/KeyframeUtils.cpp:453\n(Diff revision 1)\n>               (aSpacingMode == dom::SpacingMode::paced && aElement &&\n>                aStyleContext),\n>               \"Paced spacing mode should have valid context element and \"\n>               \"style context\");\n>  \n> +  // We should clean up the computed offset first if using paced spacing.\n\n// Reset the computed offsets if using paced spacing.", "author": "bbirtles@mozilla.com", "id": 11410237, "time": "2016-05-16T04:25:31Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nhttps://reviewboard.mozilla.org/r/52139/#review49604\n\n::: testing/web-platform/meta/MANIFEST.json:35408\n(Diff revision 1)\n> +            \"path\": \"web-animations/keyframe-effect/spacingMode.html\",\n> +            \"url\": \"/web-animations/keyframe-effect/spacingMode.html\"\n\nThe attribute is just called 'spacing'.\n\nAlso, we should probably put these tests in:\n\n  animation-model/keyframe-effects/spacing-keyframes.html\n\nAs suggested in [1]\n\n[1] https://github.com/w3c/web-platform-tests/blob/master/web-animations/README.md\n\n::: testing/web-platform/tests/web-animations/keyframe-effect/spacingMode.html:119\n(Diff revision 1)\n> +  var slots = frames.length - 1;\n> +  assert_equals(frames[1].computedOffset, 1.0 / slots, '2nd frame offset');\n> +  assert_equals(frames[2].computedOffset, 2.0 / slots, '3rd frame offset');\n> +}, 'Test falling back to distribute spacing mode if all paced property value ' +\n> +   'are not changed');\n> +\n\nI think there are a few more tests needed including:\n\n* Specifying a paced property that is not used anywhere.\n  * Perhaps even one for a property that is not supported / doesn't exist.\n* Various parsing tests -- e.g. that adding extra spaces triggers an error (this is actually really important because it's a common source of interop issues).\n* Specifying a paced property that appears on only some keyframes.\n  * Various combinations of this with fixed and missing offsets. There are some tricky cases here I think.\n* Specifying a shorthand property as a paced property (e.g. 'margin')\n\nAlso, maybe this belongs in the next patch, but we need to test when the style context changes things like font-size and the dimension against which percentages are resolved. e.g. when you have values for margin-left of 3em, 50%, 4em etc.", "author": "bbirtles@mozilla.com", "id": 11410241, "time": "2016-05-16T04:31:17Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nhttps://reviewboard.mozilla.org/r/52151/#review49628\n\nLooks good to me although please re-request review if you decide to add the tests mentioned in the review for part 9 to this.\n\nAlso, we will need to:\n* Move the tests from spacingMode.html to the test file mentioned in part 9\n* Do a big s/getFrames/getKeyframes/g and s/frames/keyframes/g", "author": "bbirtles@mozilla.com", "id": 11410247, "time": "2016-05-16T04:39:45Z"}, {"text": "Oh, we also need to test that distance works as expected when mixing % values and px values for margin-left. (It should work, since the common unit will become 'calc' and we're able to calculate distances for calc values.)", "author": "bbirtles@mozilla.com", "id": 11410263, "time": "2016-05-16T05:08:42Z"}, {"text": "https://reviewboard.mozilla.org/r/51509/#review49590\n\n> What is the reasoning behind putting these methods here?\n> \n> I think it might make more sense to declare them just before we use them?\n\nConvertTarget is also used by KeyframeEffectReadOnly::ConstructKeyframeEffect(), so I put these functions before ConvertTarget() according to the order of usage.\n\n> Based on my feedback to part 1, I think this will change quite a bit. We'll probably want to do the parsing here and return a KeyframeEffectParams object.\n> \n> We'll also like need to pass in an ErrorResult object so we can report parse errors.\n\nI agree. I will pass in an ErrorResult object and leave a comment which says \"do parsing here in part 3\".", "author": "boris.chiou@gmail.com", "id": 11410265, "time": "2016-05-16T05:12:09Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #38)\n> Oh, we also need to test that distance works as expected when mixing %\n> values and px values for margin-left. (It should work, since the common unit\n> will become 'calc' and we're able to calculate distances for calc values.)\n\nSure. I will add them into part 9.", "author": "boris.chiou@gmail.com", "id": 11410267, "time": "2016-05-16T05:13:22Z"}, {"text": "https://reviewboard.mozilla.org/r/51511/#review49592\n\n> I don't think we want to use regexs here. Their performance is typically not good, and it's really easy to fall off a performance cliff any time you tweak it.\n> \n> I was thinking we should probably follow CSS parsing rules here (e.g. recognize and ignore comments etc.) but it doesn't look like that's particularly easy to do. We can't reuse nsCSSScanner for example. So we'd probably need to modify nsCSSParser to support this.\n> \n> So, for now, I think we can just say this attribute doesn't support CSS parsing rules. \n> \n> Instead, we can just do some manual parsing like we do in dom/smil/nsSMILParserUtils.cpp. (I think we try to use iterators and aStr.BeginReading etc. but I notice we're also using ranged pointers there a bit.)\n> \n> If we later introduce animation-spacing etc. then we can add it to the CSS parser then and support CSS comments etc. from the API.\n\nOK. Let me check nsSMILParserUtils.cpp first and try to add some manual parsing into KeyframeEffectParams.h", "author": "boris.chiou@gmail.com", "id": 11410280, "time": "2016-05-16T05:28:47Z"}, {"text": "https://reviewboard.mozilla.org/r/51549/#review49600\n\n> When I added this line, it was only intended to be temporary. I wonder if we need to do spacing in SetFrames?\n> \n> We only *need* the computed offsets to be filled-in when:\n> \n> a) We compose style\n> b) We get a call to GetKeyframes\n> \n> However, we need to update computed offsets whenever the style context changes in which case UpdateProperties will be called so we could just apply spacing there.\n> \n> However, we might get a call to GetKeyframes when we don't have a style context so we *could* do something like:\n> \n> * In SetFrames just use distribute spacing (it's fairly cheap and always works).\n> * In UpdateProperties apply the correct spacing.\n> \n> Does that work?\n> \n> This here is fine for now, but the above might be slightly simpler/cheaper, I'm not sure.\n\nOK. I will try to do this.\n\n> How about we call this DistributeRange and pass a mozilla::Range ?\n\nCool. I can try it.", "author": "boris.chiou@gmail.com", "id": 11410550, "time": "2016-05-16T08:45:30Z"}, {"text": "https://reviewboard.mozilla.org/r/51505/#review49606\n\nI agree. I just need a special value to check if a computed offset is _null_ or assigned to 0 intentionally.", "author": "boris.chiou@gmail.com", "id": 11410552, "time": "2016-05-16T08:45:47Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review49602\n\nI.\nIf we want to reuse the StyleAnimationValues in mProperties, we have to build segments first, and then apply paced spacing, so the order is:\n1. SetKeyframes\n  a. Apply distribute spacing forcely\n2. UpdateProperties\n  a. Build segments\n  b. Apply paced spacing by the current segments (in mProperties) because we can reuse the StyleAnimationValues.\n  \nMy question is: The mFromKey and mToKey of each segment are assigned from Keyframe::mComputedOffsets, so if we apply paced spacing in the last step, the mFromKey and ToKey of each segement are not correct until we call UpdateProperties() next time. Is this acceptable?\n\nII.\nFor the shorthand, it is really a big problem. As you mentioned, the missing components are the problem. If there is any missing component in a keyframe, we cannot calculate the diff between this keyframe and others easily. Maybe we could add some restrictions.\n\ne.g.\n1)\n[ { marginLeft: '0px' },\n  { marginRight: '-20px' },\n  { marginTop: '100px' } ],\n{ duration: 1000, spacing: 'paced(margin)' }\n\nFall back to distribute spacing because there is no common longhand component of magin.\n\n2)\n[ { marginLeft: '0px' },\n  { marginLeft: '10px', marginRight: '-20px' },\n  { marginLeft: '20px', marginTop: '100px' } ],\n{ duration: 1000, spacing: 'paced(margin)' }\n\nWe can calculate the distance by margin-left.\n\n3)\n[ { marginLeft: '0px', marginRight: '0px' },\n  { marginLeft: '10px', marginRight: '-20px' },\n  { marginLeft: '20px', marginRight: '100px', marginTop: '100px' } ],\n{ duration: 1000, spacing: 'paced(margin)' }\n\nWe can calculate the distance by sqrt(diff(margin-left) * diff(margin-left) + diff(margin-right) * diff(margin-right)).\n\nDoes it make sense?\n\n> Is the static_cast necessary? Doesn't operator bool()[1] does that for us?\n> \n> [1] https://dxr.mozilla.org/mozilla-central/rev/4a8ed77f6bb573f20980056bf8c1dadd125c1a85/mfbt/Maybe.h#154\n\nIf we return mPacedPropertyValue directly, I got this error:\n\nerror: no viable conversion from returned value of type 'const Maybe<mozilla::PropertyValuePair>' to function return type 'bool'\n\nTherefore, I add the static_cast<bool>.", "author": "boris.chiou@gmail.com", "id": 11411819, "time": "2016-05-16T17:20:47Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review49602\n\nSorry, I forgot to consider partially paced. I should think about it more.", "author": "boris.chiou@gmail.com", "id": 11412112, "time": "2016-05-16T19:03:17Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #44)\n> https://reviewboard.mozilla.org/r/51809/#review49602\n> \n> I.\n> If we want to reuse the StyleAnimationValues in mProperties, we have to\n> build segments first, and then apply paced spacing, so the order is:\n> 1. SetKeyframes\n>   a. Apply distribute spacing forcely\n> 2. UpdateProperties\n>   a. Build segments\n>   b. Apply paced spacing by the current segments (in mProperties) because we\n> can reuse the StyleAnimationValues.\n>   \n> My question is: The mFromKey and mToKey of each segment are assigned from\n> Keyframe::mComputedOffsets, so if we apply paced spacing in the last step,\n> the mFromKey and ToKey of each segement are not correct until we call\n> UpdateProperties() next time. Is this acceptable?\n\nOh, good point. Hmm, I'm not sure how that should work then. I guess we need to do something like:\n\n1. SetKeyframes\n   a. Apply distribute spacing\n2. UpdateProperties\n   a. Apply actual spacing mode\n      If spacing mode is paced, calculate actual computed values at this point.\n        This includes taking care to ignore invalid values, expanding shorthands etc.\n   b. KeyframeUtils::GetAnimationPropertiesFromKeyframes\n\nSo there will be some redundancy between (a) and (b) but it's probably ok. We can factor out common code in KeyframeUtils (I imagine (a) will happen in KeyframeUtils), and this will only happen when we use paced timing (rare) and only when we update properties (hopefully fairly rare).\n\n> II.\n> For the shorthand, it is really a big problem. As you mentioned, the missing\n> components are the problem. If there is any missing component in a keyframe,\n> we cannot calculate the diff between this keyframe and others easily. Maybe\n> we could add some restrictions.\n> \n> e.g.\n> 1)\n> [ { marginLeft: '0px' },\n>   { marginRight: '-20px' },\n>   { marginTop: '100px' } ],\n> { duration: 1000, spacing: 'paced(margin)' }\n> \n> Fall back to distribute spacing because there is no common longhand\n> component of magin.\n\nYes, I think so.\n\n> 2)\n> [ { marginLeft: '0px' },\n>   { marginLeft: '10px', marginRight: '-20px' },\n>   { marginLeft: '20px', marginTop: '100px' } ],\n> { duration: 1000, spacing: 'paced(margin)' }\n> \n> We can calculate the distance by margin-left.\n\nI don't know if this is right. I think we will need to require all components.\n\n> 3)\n> [ { marginLeft: '0px', marginRight: '0px' },\n>   { marginLeft: '10px', marginRight: '-20px' },\n>   { marginLeft: '20px', marginRight: '100px', marginTop: '100px' } ],\n> { duration: 1000, spacing: 'paced(margin)' }\n> \n> We can calculate the distance by sqrt(diff(margin-left) * diff(margin-left)\n> + diff(margin-right) * diff(margin-right)).\n> \n> Does it make sense?\n\nYes, but I don't think that will give the correct result when some of the components are missing.", "author": "bbirtles@mozilla.com", "id": 11412974, "time": "2016-05-16T23:47:50Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #46)\n> 2. UpdateProperties\n>    a. Apply actual spacing mode\n>       If spacing mode is paced, calculate actual computed values at this point.\n>         This includes taking care to ignore invalid values, expanding\n> shorthands etc.\n>    b. KeyframeUtils::GetAnimationPropertiesFromKeyframes\n> \n> So there will be some redundancy between (a) and (b) but it's probably ok.\n> We can factor out common code in KeyframeUtils (I imagine (a) will happen in\n> KeyframeUtils), and this will only happen when we use paced timing (rare)\n> and only when we update properties (hopefully fairly rare).\n\nOK. I will try to factor out the calculation of StyleAnimationValues in ApplySpacing() and GetAnimationPropertiesFromKeyframes(). After finishing the calculation of StyleAnimationValue, pass it (an array, I guess), to both functions, so we can reuse it. Maybe more parts could be factored out, so I should go through them again.\n\n\nAbout the shorthand case, in this phase we only support paced if users define _all_ components of the specific shorthand property (or use shorthand in the keyframes directly).\ne.g. All the paceable keyframes should have all components; otherwise, we fall it back to distribute spacing.\nSo,\n> [ { marginLeft: '0px' },\n>   { marginLeft: '10px', marginRight: '-20px' },\n>   { marginLeft: '20px', marginTop: '100px' } ],\n> { duration: 1000, spacing: 'paced(margin)' }\nwill fall back to distribute, and\n> [ { marginLeft: '0px', marginRight: '0px' },\n>   { marginLeft: '10px', marginRight: '-20px' },\n>   { marginLeft: '20px', marginRight: '100px', marginTop: '100px' } ],\n> { duration: 1000, spacing: 'paced(margin)' }\nalso falls back to distribute.\n\nOnly\n  [ { marginLeft: '0px', marginRight: '0px', marginTop: 'xxx', marginBottom: 'xxx' },\n    { marginLeft: '10px', marginRight: '-20px', marginTop: 'xxx', marginBottom: 'xxx' },\n    { marginLeft: '20px', marginRight: '100px', marginTop: '100px', marginBottom: 'xxx' } ],\n  { duration: 1000, spacing: 'paced(margin)' }\nuses paced spacing.", "author": "boris.chiou@gmail.com", "id": 11413266, "time": "2016-05-17T03:01:52Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #47)\n> (In reply to Brian Birtles (:birtles) from comment #46)\n> > 2. UpdateProperties\n> >    a. Apply actual spacing mode\n> >       If spacing mode is paced, calculate actual computed values at this point.\n> >         This includes taking care to ignore invalid values, expanding\n> > shorthands etc.\n> >    b. KeyframeUtils::GetAnimationPropertiesFromKeyframes\n> > \n> > So there will be some redundancy between (a) and (b) but it's probably ok.\n> > We can factor out common code in KeyframeUtils (I imagine (a) will happen in\n> > KeyframeUtils), and this will only happen when we use paced timing (rare)\n> > and only when we update properties (hopefully fairly rare).\n> \n> OK. I will try to factor out the calculation of StyleAnimationValues in\n> ApplySpacing() and GetAnimationPropertiesFromKeyframes(). After finishing\n> the calculation of StyleAnimationValue, pass it (an array, I guess), to both\n> functions, so we can reuse it. Maybe more parts could be factored out, so I\n> should go through them again.\n\nThanks. Don't worry too much about getting the right factoring of methods first time around. I can give some suggestions during review. Firstly, let's just see if we can get this to do something sensible.\n\n> About the shorthand case, in this phase we only support paced if users\n> define _all_ components of the specific shorthand property (or use shorthand\n> in the keyframes directly).\n> e.g. All the paceable keyframes should have all components; otherwise, we\n> fall it back to distribute spacing.\n> So,\n> > [ { marginLeft: '0px' },\n> >   { marginLeft: '10px', marginRight: '-20px' },\n> >   { marginLeft: '20px', marginTop: '100px' } ],\n> > { duration: 1000, spacing: 'paced(margin)' }\n> will fall back to distribute, and\n> > [ { marginLeft: '0px', marginRight: '0px' },\n> >   { marginLeft: '10px', marginRight: '-20px' },\n> >   { marginLeft: '20px', marginRight: '100px', marginTop: '100px' } ],\n> > { duration: 1000, spacing: 'paced(margin)' }\n> also falls back to distribute.\n> \n> Only\n>   [ { marginLeft: '0px', marginRight: '0px', marginTop: 'xxx', marginBottom:\n> 'xxx' },\n>     { marginLeft: '10px', marginRight: '-20px', marginTop: 'xxx',\n> marginBottom: 'xxx' },\n>     { marginLeft: '20px', marginRight: '100px', marginTop: '100px',\n> marginBottom: 'xxx' } ],\n>   { duration: 1000, spacing: 'paced(margin)' }\n> uses paced spacing.\n\nRight. I think that's what we want.\n\nI think it's reasonable to be able to pace:\n\n  [ { margin: '10px' },\n    { margin: '0px' },\n    { margin: '20px' } ]\n\nAnd, like I mentioned, we have a habit of promoting longhands to shorthands so it's good if we can support shorthands.\n\nHowever, if we have:\n\n  [ { margin: '10px' },\n    { marginLeft: '0px' },\n    { marginTop: '5px' },\n    { margin: '10px' },\n    { margin: '20px' } ]\n\nWhat is the expected result? I'm not really sure.", "author": "bbirtles@mozilla.com", "id": 11413451, "time": "2016-05-17T05:41:18Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #48)\n> However, if we have:\n> \n>   [ { margin: '10px' },\n>     { marginLeft: '0px' },\n>     { marginTop: '5px' },\n>     { margin: '10px' },\n>     { margin: '20px' } ]\n> \n> What is the expected result? I'm not really sure.\n\nAll five keyframes are paceable, but we cannot calculate the distances of \"1st & 2nd\", \"2nd & 3rd\", and \"3rd & 4th\". Therefore, I prefer to fall it back to distribute spacing. (Ha, so many restrictions for shorthand, but I found falling back to distribute makes implementation easier.)", "author": "boris.chiou@gmail.com", "id": 11418009, "time": "2016-05-18T09:50:17Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #49)\n> (In reply to Brian Birtles (:birtles) from comment #48)\n> > However, if we have:\n> > \n> >   [ { margin: '10px' },\n> >     { marginLeft: '0px' },\n> >     { marginTop: '5px' },\n> >     { margin: '10px' },\n> >     { margin: '20px' } ]\n> > \n> > What is the expected result? I'm not really sure.\n> \n> All five keyframes are paceable, but we cannot calculate the distances of\n> \"1st & 2nd\", \"2nd & 3rd\", and \"3rd & 4th\". Therefore, I prefer to fall it\n> back to distribute spacing. (Ha, so many restrictions for shorthand, but I\n> found falling back to distribute makes implementation easier.)\n\nOr as you mentioned in comment 32, we should treat those keyframes which don't specify *all* the longhand components as not paceable, so only apply paced spacing to the 4th keyframe (with Paced A is the 1st keyframe and Paced B is the 5th keyframe). Therefore, we need a definition of _paceable_ for shorthand property. What do other editors think?", "author": "boris.chiou@gmail.com", "id": 11418116, "time": "2016-05-18T10:55:52Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #50)\n> (In reply to Boris Chiou [:boris]  from comment #49)\n> > (In reply to Brian Birtles (:birtles) from comment #48)\n> > > However, if we have:\n> > > \n> > >   [ { margin: '10px' },\n> > >     { marginLeft: '0px' },\n> > >     { marginTop: '5px' },\n> > >     { margin: '10px' },\n> > >     { margin: '20px' } ]\n> > > \n> > > What is the expected result? I'm not really sure.\n> > \n> > All five keyframes are paceable, but we cannot calculate the distances of\n> > \"1st & 2nd\", \"2nd & 3rd\", and \"3rd & 4th\". Therefore, I prefer to fall it\n> > back to distribute spacing. (Ha, so many restrictions for shorthand, but I\n> > found falling back to distribute makes implementation easier.)\n> \n> Or as you mentioned in comment 32, we should treat those keyframes which\n> don't specify *all* the longhand components as not paceable, so only apply\n> paced spacing to the 4th keyframe (with Paced A is the 1st keyframe and\n> Paced B is the 5th keyframe). Therefore, we need a definition of _paceable_\n> for shorthand property. What do other editors think?\n\nYeah, that's my thinking. Paceable keyframe = \"The keyframe specifies the paced property. If the paced property is a shorthand property, then the keyframe specifies all the shorthand components for which there is a non-trivial definition of distance with a value for which we can calculate a meaningful distance\" ?\n\nSo, if we have marginLeft: 'auto' I wonder if we should treat that keyframe as paceable for 'margin'? I suspect we shouldn't?", "author": "bbirtles@mozilla.com", "id": 11420683, "time": "2016-05-19T00:39:12Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #51)\n> Yeah, that's my thinking. Paceable keyframe = \"The keyframe specifies the\n> paced property. If the paced property is a shorthand property, then the\n> keyframe specifies all the shorthand components for which there is a\n> non-trivial definition of distance with a value for which we can calculate a\n> meaningful distance\" ?\n\nYeah, I think I try this way. Only keyframes specifying all components (sub-properties) are paceable if the paced property is shorthand. The meaningful distance of a shorthand property should be calculated by all components.\n\n> \n> So, if we have marginLeft: 'auto' I wonder if we should treat that keyframe\n> as paceable for 'margin'? I suspect we shouldn't?\n\nHa, I also think we shouldn't.\n\nThanks.", "author": "boris.chiou@gmail.com", "id": 11420929, "time": "2016-05-19T03:29:35Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #38)\n> Oh, we also need to test that distance works as expected when mixing %\n> values and px values for margin-left. (It should work, since the common unit\n> will become 'calc' and we're able to calculate distances for calc values.)\n\nWhen I was writing this test case, I got this problem:\n\ne.g.\ndiv.style.width = '100px';\nvar anim = div.animate([ { marginLeft: '0px' },\n                         { marginLeft: '-20%' }, // 100px * -20% = -20px\n                         { marginLeft: '100px' },\n                         { marginLeft: '50px' } ],\n                       { duration: 100 * MS_PER_SEC,\n                         spacing: 'paced(margin-left)' });\n\nThe cumulative distances are [0, 20, 140, 190]. (We use app unit during calculation, but I list by css pixel unit.)\nI think users expect the computed offsets are:\n[0, 20/190, 140/190, 1] = [0, 0.105, 0.737, 1].\n\nBut according to the current implementation of StyleAnimationValue::ComputedDistance(),\ndist of 1st & 2nd (eUnit_Calc [1]): sqrt(0 * 0 + 0.2 * 0.2) = 0.2.\ndist of 2nd & 3rd (eUnit_Calc)    : sqrt(100 * 100 + 0.2 * 0.2) = 100.0002. (we use css pixel unit if unit is eUnit_Calc. [2])\ndist of 3rd & 4th (eUnit_Coord)   : 3000 (app unit).\n\nso the cumulative distances are [0, 0.2, 100.2002, 3100.2002].\nAnd the actual computed offsets are:\n[0, 0.2/3100.2002, 100.2002/3100.2002, 1] = [0, 0.00006451, 0.03232, 1]. They are not correct.\n\nIf we mix % values and pixel values, the summation of distances may have problems. (i.e. Looks like we cannot add them by |+| directly.) StyleAnimationValue::ComputeDistance() returns the distance of type |double|, instead of type |StyleAnimationValue|, so we lost the information of original unit. Therefore, I think we cannot mix the |double| distances which calculated from different common units because the proportion is not correct. Do you have any suggestion for this?\n\nFor example, do I have to go through all the StyleAnimationValues of each keyframe and convert them into eUnit_Calc if necessary first? However, even if I change them into eUnit_Calc, the answer is still not the same as the expected one because we don't convert the % values into pixel values while calculating the distance of two eUnit_Calc values.\n\n\n[1] We use the square-root of sum of squares as the final distance of eUnit_Calc.\n    https://dxr.mozilla.org/mozilla-central/rev/c4449eab07d39e20ea315603f1b1863eeed7dcfe/layout/style/StyleAnimationValue.cpp#592\n\n[2] When we calculate the distance of eUnit_Calc, we extract the coord value, and then convert it from app unit to css unit.\n    https://dxr.mozilla.org/mozilla-central/rev/c4449eab07d39e20ea315603f1b1863eeed7dcfe/layout/style/StyleAnimationValue.cpp#332", "author": "boris.chiou@gmail.com", "id": 11422764, "time": "2016-05-19T16:18:16Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #53)\n> (In reply to Brian Birtles (:birtles) from comment #38)\n> > Oh, we also need to test that distance works as expected when mixing %\n> > values and px values for margin-left. (It should work, since the common unit\n> > will become 'calc' and we're able to calculate distances for calc values.)\n> \n> When I was writing this test case, I got this problem:\n> \n> e.g.\n> div.style.width = '100px';\n> var anim = div.animate([ { marginLeft: '0px' },\n>                          { marginLeft: '-20%' }, // 100px * -20% = -20px\n>                          { marginLeft: '100px' },\n>                          { marginLeft: '50px' } ],\n>                        { duration: 100 * MS_PER_SEC,\n>                          spacing: 'paced(margin-left)' });\n> \n> The cumulative distances are [0, 20, 140, 190]. (We use app unit during\n> calculation, but I list by css pixel unit.)\n> I think users expect the computed offsets are:\n> [0, 20/190, 140/190, 1] = [0, 0.105, 0.737, 1].\n> \n> But according to the current implementation of\n> StyleAnimationValue::ComputedDistance(),\n> dist of 1st & 2nd (eUnit_Calc [1]): sqrt(0 * 0 + 0.2 * 0.2) = 0.2.\n> dist of 2nd & 3rd (eUnit_Calc)    : sqrt(100 * 100 + 0.2 * 0.2) = 100.0002.\n> (we use css pixel unit if unit is eUnit_Calc. [2])\n> dist of 3rd & 4th (eUnit_Coord)   : 3000 (app unit).\n\nYeah, we only have computed values, not used values at this point.\n\nI wonder if we have any code depending on this particular implementation. I think only SMIL uses ComputeDistance at the moment? And most SVG attributes don't support calc (yet) so I wonder if we can change this behavior to resolve used values in this case.", "author": "bbirtles@mozilla.com", "id": 11424116, "time": "2016-05-20T00:07:37Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #54)\n> Yeah, we only have computed values, not used values at this point.\n> \n> I wonder if we have any code depending on this particular implementation. I\n> think only SMIL uses ComputeDistance at the moment? And most SVG attributes\n> don't support calc (yet) so I wonder if we can change this behavior to\n> resolve used values in this case.\n\nI checked dxr and looks like both SMIL and nsDOMWindowUtils::ComputeAnimationDistance use ComputeDistance. And test_transitions_per_property also use it [2]! If we want to revise ComputeDistance for eUnit_Calc, we have to make sure these test cases [3] would be passed.\n\n[1] https://dxr.mozilla.org/mozilla-central/rev/1806d405c8715949b39fa3a4fc142d14a60df590/dom/base/nsDOMWindowUtils.cpp#2539\n[2] https://dxr.mozilla.org/mozilla-central/rev/1806d405c8715949b39fa3a4fc142d14a60df590/layout/style/test/test_transitions_per_property.html#1049\n[3] https://dxr.mozilla.org/mozilla-central/rev/1806d405c8715949b39fa3a4fc142d14a60df590/layout/style/test/test_transitions_per_property.html#1263\n\nMy idea is:\nWe have to convert the calc value into length (coord) value, so we could calculate the cumulative distances correctly. Therefore, we need a way to resolve the % values in ComputeDistance for different CSS properties.", "author": "boris.chiou@gmail.com", "id": 11424393, "time": "2016-05-20T03:23:50Z"}, {"text": "I believe nsDOMWindowUtils::ComputeAnimationDistance is only provided so we can write unit tests for that function. I don't think it's used by add-ons / browser-chrome etc. If that's the case it shouldn't prevent us from changing the behavior.", "author": "bbirtles@mozilla.com", "id": 11424424, "time": "2016-05-20T03:36:14Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #56)\n> I believe nsDOMWindowUtils::ComputeAnimationDistance is only provided so we\n> can write unit tests for that function. I don't think it's used by add-ons /\n> browser-chrome etc. If that's the case it shouldn't prevent us from changing\n> the behavior.\n\nOK. I will add an extra patch to change ComputeDistance for eUnit_Calc (convert computed values to used values).", "author": "boris.chiou@gmail.com", "id": 11424440, "time": "2016-05-20T03:40:51Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #54)\n> I wonder if we can change this behavior to\n> resolve used values in this case.\n\nI think getting used values in StyleAnimationValue may be not easy. We could get the used values in the frame tree by GetUsed{Margin, Border, Padding...}. However, there are so many different css properties supporting both length and percentage, do we have a specific API to get the used value according to the css property? Just like GetComputedStyle() and GetPropertyValue() ?", "author": "boris.chiou@gmail.com", "id": 11424957, "time": "2016-05-20T09:11:56Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #54)\n> I wonder if we have any code depending on this particular implementation. I\n> think only SMIL uses ComputeDistance at the moment? And most SVG attributes\n> don't support calc (yet) so I wonder if we can change this behavior to\n> resolve used values in this case.\n\nResolving used values here may not be easy. There are so many different css properties supporting both length and percentage. e.g. fontSize, margin, padding, etc. If we have to convert a specific calc value into used value, we have to get the reference value first (e.g. parent's width for margin-left, parent's font-size for fontSize, or parent's specific css value for others). It looks like we have to write a huge function to calculate the calc values for different css properties. I wonder if we have another easy way to calculate the computed offsets if we use mix units.", "author": "boris.chiou@gmail.com", "id": 11425092, "time": "2016-05-20T10:11:44Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #59)\n> (In reply to Brian Birtles (:birtles) from comment #54)\n> > I wonder if we have any code depending on this particular implementation. I\n> > think only SMIL uses ComputeDistance at the moment? And most SVG attributes\n> > don't support calc (yet) so I wonder if we can change this behavior to\n> > resolve used values in this case.\n> \n> Resolving used values here may not be easy. There are so many different css\n> properties supporting both length and percentage. e.g. fontSize, margin,\n> padding, etc. If we have to convert a specific calc value into used value,\n> we have to get the reference value first (e.g. parent's width for\n> margin-left, parent's font-size for fontSize, or parent's specific css value\n> for others). It looks like we have to write a huge function to calculate the\n> calc values for different css properties. I wonder if we have another easy\n> way to calculate the computed offsets if we use mix units.\n\nOh. I found we convert font-size into pixel values if we use % values. Looks like only position-related data are needed to be calculated from calc/% value into pixel value.\ne.g.\n    case eCSSProperty_left:\n    case eCSSProperty_right:\n    case eCSSProperty_top:\n    case eCSSProperty_bottom:\n    case eCSSProperty_margin_left:\n    case eCSSProperty_margin_right:\n    case eCSSProperty_margin_top:\n    case eCSSProperty_margin_bottom:\n    case eCSSProperty_padding_left:\n    case eCSSProperty_padding_right:\n    case eCSSProperty_padding_top:\n    case eCSSProperty_padding_bottom:\n\nFor the xxx_left, xxx_right values, we need to get the width of its parent element, and for the xxx_top, xxx_bottom values, we need to get the height of its parent element. For other css properties, we just use the corresponding value of its parent element's css property as the reference value. However, how do we calculate if the reference value is still a calc/percent value?", "author": "boris.chiou@gmail.com", "id": 11427515, "time": "2016-05-21T10:13:41Z"}, {"text": "Yeah, you're right. Depending on layout is probably a bad idea. I think we'd be creating a cyclic dependency since the positions of the keyframe offsets could also affect layout. Maybe we just have to stick with the awkward behavior in comment 53.", "author": "bbirtles@mozilla.com", "id": 11428335, "time": "2016-05-22T23:56:22Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #61)\n> Yeah, you're right. Depending on layout is probably a bad idea. I think we'd\n> be creating a cyclic dependency since the positions of the keyframe offsets\n> could also affect layout. Maybe we just have to stick with the awkward\n> behavior in comment 53.\n\nOK, thanks. I will stick with the behavior in comment 53. For other cases, I will fall back to the original distance calculation for eUnit_Calc (i.e. sqrt(|length diff| * |length diff| + |percent diff| * |percent diff|)).", "author": "boris.chiou@gmail.com", "id": 11428731, "time": "2016-05-23T02:43:55Z"}, {"text": "Created attachment 8755339\nBug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.\n\nWe want to reuse the StyleAnimationValues of properties of each keyframe when\napplying spacing and building animation property segments, so refactor this\npart.\n\nReview commit: https://reviewboard.mozilla.org/r/54414/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/54414/", "author": "boris.chiou@gmail.com", "id": 11429472, "time": "2016-05-23T08:28:51Z"}, {"text": "Created attachment 8755340\nMozReview Request: Bug 1244590 - Part 12: Revise ComputeDistance for eUnit_Calc.\n\nReview commit: https://reviewboard.mozilla.org/r/54416/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/54416/", "author": "boris.chiou@gmail.com", "id": 11429473, "time": "2016-05-23T08:28:51Z"}, {"text": "Created attachment 8755341\nMozReview Request: Bug 1244590 - Part 13: Test for different units.\n\nReview commit: https://reviewboard.mozilla.org/r/54418/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/54418/", "author": "boris.chiou@gmail.com", "id": 11429474, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752104\nBug 1244590 - Part 1: Introduce KeyframeEffectParams.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51507/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429475, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752105\nBug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51509/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429476, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51511/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429477, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51549/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429478, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51505/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429479, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429480, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429481, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429482, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429483, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429484, "time": "2016-05-23T08:28:51Z"}, {"text": "Comment on attachment 8755340\nMozReview Request: Bug 1244590 - Part 12: Revise ComputeDistance for eUnit_Calc.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54416/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429694, "time": "2016-05-23T10:34:01Z"}, {"text": "Comment on attachment 8755341\nMozReview Request: Bug 1244590 - Part 13: Test for different units.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54418/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11429695, "time": "2016-05-23T10:34:01Z"}, {"text": "Comment on attachment 8752104\nBug 1244590 - Part 1: Introduce KeyframeEffectParams.\n\nhttps://reviewboard.mozilla.org/r/51507/#review51312\n\n::: dom/animation/KeyframeEffect.h:25\n(Diff revision 2)\n>  #include \"mozilla/ComputedTimingFunction.h\"\n>  #include \"mozilla/EffectCompositor.h\"\n> +#include \"mozilla/KeyframeEffectParams.h\"\n>  #include \"mozilla/LayerAnimationInfo.h\" // LayerAnimations::kRecords\n>  #include \"mozilla/Maybe.h\"\n> -#include \"mozilla/OwningNonNull.h\"      // OwningNonNull<...>\n> +#include \"mozilla/OwningNonNull.h\"\n\nI thought we were going to remove this include? (The OwningNonNull one) It's not referenced in this header file right?\n\n::: dom/animation/KeyframeEffectParams.h:23\n(Diff revision 2)\n> +  void GetSpacing(nsAString& aSpacing) const\n> +  {\n\nDo you think GetSpacingAsString would be more clear?", "author": "bbirtles@mozilla.com", "id": 11431724, "time": "2016-05-24T06:20:34Z"}, {"text": "Comment on attachment 8752105\nBug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor.\n\nhttps://reviewboard.mozilla.org/r/51509/#review51380", "author": "bbirtles@mozilla.com", "id": 11432059, "time": "2016-05-24T09:35:15Z"}, {"text": "https://reviewboard.mozilla.org/r/51507/#review51312\n\n> I thought we were going to remove this include? (The OwningNonNull one) It's not referenced in this header file right?\n\nYes, you're right. Looks like I forgot to remove this while changing the type of mTiming.\n\n> Do you think GetSpacingAsString would be more clear?\n\nOK. Looks better.", "author": "boris.chiou@gmail.com", "id": 11432077, "time": "2016-05-24T09:44:58Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nhttps://reviewboard.mozilla.org/r/51511/#review51390\n\nThis is heading in the right direction but I think it can be made simpler. More importantly, however, we need to work out how to handle unrecognized properties. Should they really throw? The spec doesn't say they should. If we should keep them then we'll need to store the unrecognized property string so we can serialize it again.\n\nI'll have a think about it. Please let me know if you have any suggestions.\n\n::: dom/animation/KeyframeEffectParams.cpp:9\n(Diff revision 2)\n> + * License, v. 2.0. If a copy of the MPL was not distributed with this\n> + * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n> +\n> +#include \"mozilla/KeyframeEffectParams.h\"\n> +\n> +#include \"mozilla/RangedPtr.h\"\n\nDon't we need to include ReadableUtils.h for StringBeginsWith etc.?\n\n::: dom/animation/KeyframeEffectParams.cpp:13\n(Diff revision 2)\n> +\n> +#include \"mozilla/RangedPtr.h\"\n> +\n> +namespace mozilla {\n> +\n> +#define PACED_PREFIX NS_LITERAL_STRING(\"paced\")\n\nCan we just make this a static local variable in ParseSpacing? Like:\n\n  static const nsLiteralString kPacedPrefix = NS_LITERAL_STRING(\"paced(\");\n\n::: dom/animation/KeyframeEffectParams.cpp:15\n(Diff revision 2)\n> +static const nsDependentSubstring\n> +TrimWhitespace(const nsAString& aString)\n> +{\n> +  RangedPtr<const char16_t> start(aString.Data(), aString.Length());\n> +  RangedPtr<const char16_t> end(aString.Data() + aString.Length(),\n> +                                aString.Data(), aString.Length());\n> +\n> +  // Skip whitespace characters at the beginning\n> +  while (start != end && *start == ' ') {\n> +    ++start;\n> +  }\n> +\n> +  // Skip whitespace characters at the end.\n> +  while (end != start) {\n> +    --end;\n> +    if (*end != ' ') {\n> +      // Step back to the last non-whitespace character.\n> +      ++end;\n> +      break;\n> +    }\n> +  }\n> +\n> +  return Substring(start.get(), end.get());\n> +}\n\nI think we can probably do without this.\n\nFor a start, I don't think ' ' is enough. If we're going to do this, we should probably use a whitespace list like: https://dxr.mozilla.org/mozilla-central/rev/16663eb3dcfa759f25b5e27b101bc79270c156f2/dom/base/nsContentUtils.h#403\n\nHowever, that should really be spec'ed. But currently the spec doesn't say anything about ignoring leading and trailing whitespace. We should just reject ' distribute' and add web-platform-tests to make sure all UAs reject leading/trailing whitespace.\n\n::: dom/animation/KeyframeEffectParams.cpp:40\n(Diff revision 2)\n> +/* static */ void\n> +KeyframeEffectParams::ParseSpacing(const nsAString& aSpacing,\n> +                                   SpacingMode& aSpacingMode,\n> +                                   nsCSSProperty& aPacedProperty,\n> +                                   ErrorResult& aRv)\n\nConsidering that we always fail with the same error (especially after we drop the trimming behavior), it seems like it would be simpler to just make this return a bool and have the call site fill in an ErrorResult object as needed.\n\nHowever, see my comments below. We need to decide what to do about unrecognized properties. If we treat them differently, then we probably need to pass an ErrorResult object after all.\n\n::: dom/animation/KeyframeEffectParams.cpp:53\n(Diff revision 2)\n> +    // Throw the original string to let the user know white spaces or\n> +    // empty string is not acceptable.\n> +    aRv.ThrowTypeError<dom::MSG_INVALID_SPACING_MODE_ERROR>(aSpacing);\n> +  }\n> +\n> +  // 1. distribute spacing.\n\nWe should quote the grammar that we're trying to parse:\n\n> distribute | paced({ident})\n> https://w3c.github.io/web-animations/#dom-keyframeeffectreadonly-spacing\n\n::: dom/animation/KeyframeEffectParams.cpp:59\n(Diff revision 2)\n> +  // 2. paced spacing, paced(css-property).\n> +  // e.g. \"paced(margin-left)\"  is accepted,\n> +  //      \"paced(marginLeft)\"   is not accepted.\n> +  //      \"paced()\"             is not accepted.\n> +  //      \"paced( margin-left)\" is not accepted.\n\nNit: Not sure we need this comment if we quote the grammar above.\n\n::: dom/animation/KeyframeEffectParams.cpp:71\n(Diff revision 2)\n> +  RangedPtr<const char16_t> end(spacing.Data() + spacing.Length(),\n> +                                spacing.Data(), spacing.Length());\n\nCan't we just make this:\n\n  const char16_t* const end = spacing.EndReading();\n\n::: dom/animation/KeyframeEffectParams.cpp:74\n(Diff revision 2)\n> +  if (*iter++ != '(') {\n> +    aRv.ThrowTypeError<dom::MSG_INVALID_SPACING_MODE_ERROR>(spacing);\n> +    return;\n> +  }\n\nWhy not just check for StringBeginsWidth(spacing, NS_LITERAL_STRING(\"paced(\")) above, then we can skip this check?\n\n::: dom/animation/KeyframeEffectParams.cpp:79\n(Diff revision 2)\n> +  RangedPtr<const char16_t> tokenEnd(iter);\n> +  while (tokenEnd != end && *tokenEnd != ')') {\n> +    ++tokenEnd;\n> +  }\n> +\n> +  if (tokenEnd == end) {\n> +    aRv.ThrowTypeError<dom::MSG_INVALID_SPACING_MODE_ERROR>(spacing);\n> +    return;\n> +  }\n> +\n> +  const nsAString& token = Substring(iter.get(), tokenEnd.get());\n\nI'm not sure this is quite right. We should be consuming an ident here. Basically something along the lines of:\n\n  https://drafts.csswg.org/css-syntax-3/#consume-an-ident-like-token\n\nWhich, in this case, probably just means correctly handling escapes. Unfortunately, I guess that means we need to build up another string buffer to write the unescaped value into.\n\n::: dom/animation/KeyframeEffectParams.cpp:96\n(Diff revision 2)\n> +    nsCSSProps::LookupProperty(token, CSSEnabledState::eForAllContent);\n> +  if (aPacedProperty == eCSSProperty_UNKNOWN) {\n> +    aRv.ThrowTypeError<dom::MSG_INVALID_SPACING_MODE_ERROR>(spacing);\n> +    return;\n> +  }\n> +\n\nI notice that LookupProperty can also return eCSSPropertyExtra_variable. I guess we should just reject that.\n\nThis ties back to the open issue in the spec, \"Need to define what happens above when {ident} is not recognized.\"[1]\n\nIn this implementation we will throw, but I wonder if we should make spec this to:\n\n* throw if the supplied value does not match the grammar\n* fall back to distribute if the property is not recognized (preferably with a console warning). This would include variables.\n\nNote that if we're going to do that, however, we'll probably need to store the variable token so that we can serialize it again.\n\nWhat do you think we should do here?\n\n[1] https://w3c.github.io/web-animations/#dom-keyframeeffectreadonly-spacing\n\n::: dom/animation/KeyframeEffectParams.cpp:99\n(Diff revision 2)\n> +    return;\n> +  }\n> +\n> +  iter += token.Length();\n> +\n> +  // Skip check ')' because we did already.\n\nNit: If possible, I think this would be more clear if we just consume the ident, then check that the next character is ), then check that we are at the end.\n\n(Also, depending on what we do about unrecognized properties, we might need to be careful to check that the supplied string matches the expected grammar *before* checking that the supplied property is recognized.)", "author": "bbirtles@mozilla.com", "id": 11432243, "time": "2016-05-24T11:46:52Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nhttps://reviewboard.mozilla.org/r/51549/#review51402\n\nThis is mostly fine but I'd like to see what you think of some of the proposed simplifications.\n\n::: dom/animation/KeyframeEffect.cpp:470\n(Diff revision 2)\n>    if (KeyframesEqualIgnoringComputedOffsets(aKeyframes, mKeyframes)) {\n>      return;\n>    }\n>  \n>    mKeyframes = Move(aKeyframes);\n> -  KeyframeUtils::ApplyDistributeSpacing(mKeyframes);\n> +  // Apply distribute spacing directly in SetFrames().\n\nI think this comment is supposed to say something like:\n\n  // Apply distribute spacing irrespective of the spacing mode. We will apply\n  // the specified spacing mode when we generate computed animation property\n  // values from the keyframes since both operations require a style context\n  // and need to be performed whenever the style context changes.\n\n::: dom/animation/KeyframeUtils.h:58\n(Diff revision 2)\n>  \n>    /**\n>     * Fills in the mComputedOffset member of each keyframe in the given array\n> -   * using the \"distribute\" spacing algorithm.\n> +   * using the specified spacing mode.\n>     *\n> -   * http://w3c.github.io/web-animations/#distribute-keyframe-spacing-mode\n> +   * http://w3c.github.io/web-animations/#spacing-keyframes\n\nNit: Can we update the URL to use https at the same time? Thanks.\n\n::: dom/animation/KeyframeUtils.h:61\n(Diff revision 2)\n> -   * using the \"distribute\" spacing algorithm.\n> +   * using the specified spacing mode.\n>     *\n> -   * http://w3c.github.io/web-animations/#distribute-keyframe-spacing-mode\n> +   * http://w3c.github.io/web-animations/#spacing-keyframes\n>     *\n> -   * @param keyframes The set of keyframes to adjust.\n> +   * @param aKeyframes The set of keyframes to adjust.\n> +   * @param aSpacingMode The applied spacing mode to aKeyframes.\n\nNit: 'The spacing mode to apply'\n\nHow does this work? Surely we need to provide the paced property too?\n\n::: dom/animation/KeyframeUtils.cpp:389\n(Diff revision 2)\n> +static void\n> +ApplyDistributingOffset(const Range<Keyframe>& aDistributeRange);\n\nCan we call this function DistributeRange? (The argument can still be called aKeyframes)\n\n::: dom/animation/KeyframeUtils.cpp:467\n(Diff revision 2)\n>    Keyframe& lastElement = aKeyframes.LastElement();\n>    lastElement.mComputedOffset = lastElement.mOffset.valueOr(1.0);\n>    if (aKeyframes.Length() > 1) {\n>      Keyframe& firstElement = aKeyframes[0];\n>      firstElement.mComputedOffset = firstElement.mOffset.valueOr(0.0);\n>    }\n\nThis is a very minor point, but would this work as:\n\n  if (aKeyframes.Length() > 1) {\n    Keyframe& firstElement = aKeyframes[0];\n    firstElement.mComputedOffset = firstElement.mOffset.valueOr(0.0);\n    // We will fill in the last keyframe's offset below\n  } else {\n    Keyframe& lastElement = aKeyframes.LastElement();\n    lastElement.mComputedOffset = lastElement.mOffset.valueOr(1.0);\n  }\n\nThe reason, is that otherwise it's a bit confusing as to why we use valueOr(1.0) twice.\n\nWhat do you think?\n\n::: dom/animation/KeyframeUtils.cpp:475\n(Diff revision 2)\n>    size_t i = 0;\n>    while (i < aKeyframes.Length() - 1) {\n> -    double start = aKeyframes[i].mComputedOffset;\n> +    // Find the frame A (index i) and frame B (index j).\n>      size_t j = i + 1;\n>      while (aKeyframes[j].mOffset.isNothing() && j < aKeyframes.Length() - 1) {\n>        ++j;\n>      }\n> -    double end = aKeyframes[j].mOffset.valueOr(1.0);\n> -    size_t n = j - i;\n> -    for (size_t k = 1; k < n; ++k) {\n> -      double offset = start + double(k) / n * (end - start);\n> -      aKeyframes[i + k].mComputedOffset = offset;\n> +    aKeyframes[j].mComputedOffset = aKeyframes[j].mOffset.valueOr(1.0);\n> +\n> +    // Fill computed offsets in (A, B)\n> +    if (aSpacingMode == SpacingMode::distribute) {\n> +      ApplyDistributingOffset(Range<Keyframe>(&aKeyframes[i], j - i + 1));\n> +    } else {\n> +      // TODO\n> +      MOZ_ASSERT(false, \"not implement yet\");\n>      }\n>      i = j;\n> -    aKeyframes[j].mComputedOffset = end;\n>    }\n>  }\n\nI'm curious if this would be more simple using iterators, e.g. something like:\n\n  const Keyframe* const last = aKeyframes.cend() - 1;\n  const Keyframe* keyframeA  = aKeyframes.begin();\n\n  while (keyframeA != last) {\n    // Find keyframe A and keyframe B to apply spacing *between*.\n    const Keyframe* keyframeB = a + 1;\n    while (keyframeB->mOffset.isNothing() && ++keyframeB != last);\n\n    keyframeB->mComputedOffset = keyframeB->mOffset.valueOr(1.0);\n\n    if (aSpacingMode == SpacingMode::distribute) {\n      DistributeRange(Range<Keyframe>(keyframeA, keyframeB - keyframeA + 1);\n    } else {\n      // TODO\n      MOZ_ASSERT(false, \"not implement yet\");\n    }\n    keyframeA = keyframeB;\n  }\n\nI guess it depends on what you do with this function in later patches, but assuming the above is right, it seems like it avoids some math and double-naming (e.g. frame A at index i) and is closer to what the spec does.\n\n(That said, using a loop without a body is probably not allowed according to our coding style so you'll need to tweak at least that.)\n\n::: dom/animation/KeyframeUtils.cpp:477\n(Diff revision 2)\n>    }\n>  \n>    // Fill in remaining missing offsets.\n>    size_t i = 0;\n>    while (i < aKeyframes.Length() - 1) {\n> -    double start = aKeyframes[i].mComputedOffset;\n> +    // Find the frame A (index i) and frame B (index j).\n\n// Find frame A (index i) and frame B (index j) *between* which we will apply spacing\n\n::: dom/animation/KeyframeUtils.cpp:1193\n(Diff revision 2)\n> +/**\n> + * Apply evenly distributing computed offsets in (A, B). We should pass the\n> + * range keyframes in [A, B] and use A, B to calculate computed offsets in\n> + * (A, B).\n> + *\n> + * @param aDistributeRange The set of keyframes.\n\n\"The sequence of keyframes between whose endpoints we should apply distribute spacing\"?\n\nI think in future we'll need to make this take *two* ranges: the range to use for spacing and the range of keyframes to adjust. But this is fine for now.\n\n::: dom/animation/KeyframeUtils.cpp:1199\n(Diff revision 2)\n> + */\n> +static void\n> +ApplyDistributingOffset(const Range<Keyframe>& aDistributeRange)\n> +{\n> +  const size_t n = aDistributeRange.length() - 1;\n> +  const double start = aDistributeRange[0].mComputedOffset;\n\nCan we call this startOffset?", "author": "bbirtles@mozilla.com", "id": 11432391, "time": "2016-05-24T13:43:27Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nhttps://reviewboard.mozilla.org/r/51505/#review51414\n\nThis looks good but I want to check about the kComputedOffsetNotSet value.\n\n::: dom/animation/KeyframeEffect.h:110\n(Diff revision 2)\n>      mPropertyValues = Move(aOther.mPropertyValues);\n>      return *this;\n>    }\n>  \n>    Maybe<double>                 mOffset;\n> -  double                        mComputedOffset = 0.0;\n> +  double                        mComputedOffset = -1.0;\n\nCould we add 'static const double kComputedOffsetNotSet = -1.0' to Keyframe and compare against that instead of -1.0?\n\n::: dom/animation/KeyframeEffect.cpp:1031\n(Diff revision 2)\n> -    keyframeDict.mComputedOffset.Construct(keyframe.mComputedOffset);\n> +    MOZ_ASSERT(keyframe.mComputedOffset != -1.0, \"Invalid computed offset\");\n> +    keyframeDict.mComputedOffset.Construct(\n> +      keyframe.mComputedOffset == -1.0 ? 0.0 : keyframe.mComputedOffset);\n\nWe've just asserted that mComputedOffset is not -1.0 so we don't need to check it again.", "author": "bbirtles@mozilla.com", "id": 11432400, "time": "2016-05-24T13:47:33Z"}, {"text": "https://reviewboard.mozilla.org/r/51511/#review51390\n\n> Can we just make this a static local variable in ParseSpacing? Like:\n> \n>   static const nsLiteralString kPacedPrefix = NS_LITERAL_STRING(\"paced(\");\n\nSure.\n\n> I think we can probably do without this.\n> \n> For a start, I don't think ' ' is enough. If we're going to do this, we should probably use a whitespace list like: https://dxr.mozilla.org/mozilla-central/rev/16663eb3dcfa759f25b5e27b101bc79270c156f2/dom/base/nsContentUtils.h#403\n> \n> However, that should really be spec'ed. But currently the spec doesn't say anything about ignoring leading and trailing whitespace. We should just reject ' distribute' and add web-platform-tests to make sure all UAs reject leading/trailing whitespace.\n\nOK. I will remove this part, so we don't accept leading/trailing whitespace. (And add some test cases, of course.)\n\n> We should quote the grammar that we're trying to parse:\n> \n> > distribute | paced({ident})\n> > https://w3c.github.io/web-animations/#dom-keyframeeffectreadonly-spacing\n\nOK. I will add them.\n\n> Nit: Not sure we need this comment if we quote the grammar above.\n\nAfter quoting the grammer, I will remove this because developers can refer to the spec.\n\n> Can't we just make this:\n> \n>   const char16_t* const end = spacing.EndReading();\n\nWe can use EndReading(). Actually, either RangePtr or StartBeginWith/EndReading works in this case. We mix the usage of RangePtr and StartBeginWith/EndReading in SMIL parser, so I just chose one of them. The reason I chose RangePtr is I think it may be safer. However, the readibility is better if using StartBeginWith/EndReading. I will try this.\n\n> Why not just check for StringBeginsWidth(spacing, NS_LITERAL_STRING(\"paced(\")) above, then we can skip this check?\n\nHa, yes. we should check \"paced(\" directly.\n\n> I'm not sure this is quite right. We should be consuming an ident here. Basically something along the lines of:\n> \n>   https://drafts.csswg.org/css-syntax-3/#consume-an-ident-like-token\n> \n> Which, in this case, probably just means correctly handling escapes. Unfortunately, I guess that means we need to build up another string buffer to write the unescaped value into.\n\nOK. I will try to consume an ident token here. (Maybe adding a ConsumeIdentToken() function which also handles escapes for this case.)\n\n> I notice that LookupProperty can also return eCSSPropertyExtra_variable. I guess we should just reject that.\n> \n> This ties back to the open issue in the spec, \"Need to define what happens above when {ident} is not recognized.\"[1]\n> \n> In this implementation we will throw, but I wonder if we should make spec this to:\n> \n> * throw if the supplied value does not match the grammar\n> * fall back to distribute if the property is not recognized (preferably with a console warning). This would include variables.\n> \n> Note that if we're going to do that, however, we'll probably need to store the variable token so that we can serialize it again.\n> \n> What do you think we should do here?\n> \n> [1] https://w3c.github.io/web-animations/#dom-keyframeeffectreadonly-spacing\n\nI agree. If the property is not reconized, we should print a warning and fall back to distribue.\ne.g. \"paced(cabbage)\" // cabbage is not a css property, so we should pring a warning and use distribute spacing. (I should also fix the test cases for this change in part 10.)\n\nHowever, as you mentioned, we should store the unreconized property string, so we have to add one more data member in KeyframeEffectParams.h. If mPacedProperty is eCSSProperty_UNKNOWN, we should use the unreconized string, in GetSpacingAsSteing(). If mPacedProperty is a valid property, the data member would be an empty string.", "author": "boris.chiou@gmail.com", "id": 11432419, "time": "2016-05-24T13:56:47Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #84)\n> > Can't we just make this:\n> > \n> >   const char16_t* const end = spacing.EndReading();\n> \n> We can use EndReading(). Actually, either RangePtr or\n> StartBeginWith/EndReading works in this case. We mix the usage of RangePtr\n> and StartBeginWith/EndReading in SMIL parser, so I just chose one of them.\n> The reason I chose RangePtr is I think it may be safer. However, the\n> readibility is better if using StartBeginWith/EndReading. I will try this.\n\nI'm suggesting you can use both. I think RangePtr can be compared with a raw pointer.\n\nFor the end pointer, if we use \"const char16_t* const end\" it can't be updated so we don't need to range check it. We can still use a RangePtr for the iterator.\n\n> I agree. If the property is not reconized, we should print a warning and\n> fall back to distribue.\n> e.g. \"paced(cabbage)\" // cabbage is not a css property, so we should pring a\n> warning and use distribute spacing. (I should also fix the test cases for\n> this change in part 10.)\n\nOk great, let's do that. I filed https://github.com/w3c/web-animations/issues/152 to get this added to the spec.\n\n> However, as you mentioned, we should store the unreconized property string,\n> so we have to add one more data member in KeyframeEffectParams.h. If\n> mPacedProperty is eCSSProperty_UNKNOWN, we should use the unreconized\n> string, in GetSpacingAsSteing(). If mPacedProperty is a valid property, the\n> data member would be an empty string.\n\nSounds good. Of course, we only need to store the actual property name (not the \"paced()\" part).", "author": "bbirtles@mozilla.com", "id": 11432429, "time": "2016-05-24T14:05:25Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #82)\n> I'm curious if this would be more simple using iterators, e.g. something\n> like:\n> \n>   const Keyframe* const last = aKeyframes.cend() - 1;\n>   const Keyframe* keyframeA  = aKeyframes.begin();\n> \n>   while (keyframeA != last) {\n>     // Find keyframe A and keyframe B to apply spacing *between*.\n>     const Keyframe* keyframeB = a + 1;\n>     while (keyframeB->mOffset.isNothing() && ++keyframeB != last);\n> \n>     keyframeB->mComputedOffset = keyframeB->mOffset.valueOr(1.0);\n> \n>     if (aSpacingMode == SpacingMode::distribute) {\n>       DistributeRange(Range<Keyframe>(keyframeA, keyframeB - keyframeA + 1);\n>     } else {\n>       // TODO\n>       MOZ_ASSERT(false, \"not implement yet\");\n>     }\n>     keyframeA = keyframeB;\n>   }\n> \n> I guess it depends on what you do with this function in later patches, but\n> assuming the above is right, it seems like it avoids some math and\n> double-naming (e.g. frame A at index i) and is closer to what the spec does.\n\nLooking into part 7, I think this is probably worth trying. However, we should use RangedPtr for keyframeA and keyframeB. All these indices get pretty complicated in part 7 so it would be good to have some additional checks that we're not pointing to out-of-range memory. I also think it might make the code simpler.", "author": "bbirtles@mozilla.com", "id": 11432495, "time": "2016-05-24T14:41:21Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #85) \n> Ok great, let's do that. I filed\n> https://github.com/w3c/web-animations/issues/152 to get this added to the\n> spec.\n\nHi, do you know how to produce a js console warning? Looks like aRv.Throw() will throw an exception and then aRv.Failed() makes me return nullptr, so I shouldn't use Throw(). Or use SuppressException() to suppress it for this case? Thanks.", "author": "boris.chiou@gmail.com", "id": 11433220, "time": "2016-05-24T19:51:23Z"}, {"text": "https://reviewboard.mozilla.org/r/51549/#review51402\n\n> Nit: 'The spacing mode to apply'\n> \n> How does this work? Surely we need to provide the paced property too?\n\nYes. I add paced property in the next patch.\n\n> Can we call this function DistributeRange? (The argument can still be called aKeyframes)\n\nOops. Ha, looks like I misunderstand your meaning in the previous review. OK. I will revise this.\n\n> This is a very minor point, but would this work as:\n> \n>   if (aKeyframes.Length() > 1) {\n>     Keyframe& firstElement = aKeyframes[0];\n>     firstElement.mComputedOffset = firstElement.mOffset.valueOr(0.0);\n>     // We will fill in the last keyframe's offset below\n>   } else {\n>     Keyframe& lastElement = aKeyframes.LastElement();\n>     lastElement.mComputedOffset = lastElement.mOffset.valueOr(1.0);\n>   }\n> \n> The reason, is that otherwise it's a bit confusing as to why we use valueOr(1.0) twice.\n> \n> What do you think?\n\nOK. This is better. Thanks.\n\n> Can we call this startOffset?\n\nYes, of course.", "author": "boris.chiou@gmail.com", "id": 11434077, "time": "2016-05-24T23:29:13Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #86)\n> Looking into part 7, I think this is probably worth trying. However, we\n> should use RangedPtr for keyframeA and keyframeB. All these indices get\n> pretty complicated in part 7 so it would be good to have some additional\n> checks that we're not pointing to out-of-range memory. I also think it might\n> make the code simpler.\n\nOK. I will try RangedPtr<Keyframe> in both part 4 and part 7.", "author": "boris.chiou@gmail.com", "id": 11434097, "time": "2016-05-24T23:36:23Z"}, {"text": "https://reviewboard.mozilla.org/r/51505/#review51414\n\n> Could we add 'static const double kComputedOffsetNotSet = -1.0' to Keyframe and compare against that instead of -1.0?\n\nSounds great. Thanks.\n\n> We've just asserted that mComputedOffset is not -1.0 so we don't need to check it again.\n\nOK. I see.", "author": "boris.chiou@gmail.com", "id": 11434103, "time": "2016-05-24T23:37:26Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #89)\n> (In reply to Brian Birtles (:birtles) from comment #86)\n> > Looking into part 7, I think this is probably worth trying. However, we\n> > should use RangedPtr for keyframeA and keyframeB. All these indices get\n> > pretty complicated in part 7 so it would be good to have some additional\n> > checks that we're not pointing to out-of-range memory. I also think it might\n> > make the code simpler.\n> \n> OK. I will try RangedPtr<Keyframe> in both part 4 and part 7.\n\nBTW. RangedPtr doesn't support operator->(), so if I want to access the member of RangedPtr<T>::mPtr, I have to use operator*(), e.g. (*keyframeA).mOffset, instead of keyframeA->mOffset. We may file a bug for this feature after landing this.", "author": "boris.chiou@gmail.com", "id": 11434278, "time": "2016-05-25T00:22:49Z"}, {"text": "I'm going through parts 6 and 7 and my two biggest concerns are:\n\n* Storing the paceable properties on Keyframes feels awkward. It's really only needed while calculating pacing and it's clobbered every time we do that so there doesn't seem to be any value in keeping it around. It also introduces an awkward dependency between KeyframeEffect and KeyframeUtils, i.e. KeyframeEffect has to make sure to update these members before calling ApplySpacing. Instead, the information about which keyframes are paceable etc. should just be some temporary state stored while doing spacing.\n\n* Passing back an array of arrays from CalculateAnimationValues seems a bit odd somehow. This is a pretty minor point, though.\n\nCurrently what I'm thinking is that so long as we're using parallel arrays for the set of Keyframes and the set of \"animation values\" we should just create another parallel array inside ApplySpacing to store the paced keyframe data.\n\nThe tricky part, however, is that we only need to provide those \"animation values\" to ApplySpacing when doing paced spacing mode. The same is true for the paced property too. I wonder if we should just have:\n\n  void\n  ApplySpacing(nsTArray<Keyframe>& aKeyframes,\n               SpacingMode aSpacingMode,\n               nsCSSProperty aPacedProperty,\n               const ComputedKeyframeValuesArray& aComputedValues);\n\n  void ApplyDistributeSpacing(nsTArray<Keyframe>& aKeyframes)\n  {\n    static ComputedKeyframeValuesArray emptyArray;\n    ApplySpacing(aKeyframes, SpacingMode::distribute,\n                 eCSSProperty_UNKNOWN, emptyArray);\n  }\n  \nI'll follow up later with specific suggestions in the reviews.", "author": "bbirtles@mozilla.com", "id": 11435845, "time": "2016-05-25T09:34:03Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #87)\n> (In reply to Brian Birtles (:birtles) from comment #85) \n> > Ok great, let's do that. I filed\n> > https://github.com/w3c/web-animations/issues/152 to get this added to the\n> > spec.\n> \n> Hi, do you know how to produce a js console warning? Looks like aRv.Throw()\n> will throw an exception and then aRv.Failed() makes me return nullptr, so I\n> shouldn't use Throw(). Or use SuppressException() to suppress it for this\n> case? Thanks.\n\nPerhaps nsContentUtils::ReportToConsole? Perhaps you can avoid touching the ErrorResult and, at the call site, if the paced property is unknown / variable and spacing mode is paced, report the error to the console there. Of course, if there are multiple call sites it might be better to report the console error inside ParseSpacing (we'll need to pass a document in, I guess).", "author": "bbirtles@mozilla.com", "id": 11435869, "time": "2016-05-25T09:43:47Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #91)\n> (In reply to Boris Chiou [:boris]  from comment #89)\n> > (In reply to Brian Birtles (:birtles) from comment #86)\n> > > Looking into part 7, I think this is probably worth trying. However, we\n> > > should use RangedPtr for keyframeA and keyframeB. All these indices get\n> > > pretty complicated in part 7 so it would be good to have some additional\n> > > checks that we're not pointing to out-of-range memory. I also think it might\n> > > make the code simpler.\n> > \n> > OK. I will try RangedPtr<Keyframe> in both part 4 and part 7.\n> \n> BTW. RangedPtr doesn't support operator->(), so if I want to access the\n> member of RangedPtr<T>::mPtr, I have to use operator*(), e.g.\n> (*keyframeA).mOffset, instead of keyframeA->mOffset. We may file a bug for\n> this feature after landing this.\n\nYou can use keyframeA.get()->mOffset I think, but that's a bit awkward.\n\nJeff, is there any reason RangedPtr doesn't provide operator-> ?", "author": "bbirtles@mozilla.com", "id": 11435876, "time": "2016-05-25T09:47:49Z"}, {"text": "I just noticed Tab's comment[1], \"unrecognized values should be rejected and use the default value\". I wonder if that means that for unsupported properties, we don't need to store the property name as a string--i.e. whether it would be ok to just store distribute as the spacing mode.\n\n[1] https://github.com/w3c/web-animations/issues/152#issuecomment-221363108", "author": "bbirtles@mozilla.com", "id": 11435885, "time": "2016-05-25T09:51:21Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #92)\n> I'm going through parts 6 and 7 and my two biggest concerns are:\n> \n> * Storing the paceable properties on Keyframes feels awkward. It's really\n> only needed while calculating pacing and it's clobbered every time we do\n> that so there doesn't seem to be any value in keeping it around. It also\n> introduces an awkward dependency between KeyframeEffect and KeyframeUtils,\n> i.e. KeyframeEffect has to make sure to update these members before calling\n> ApplySpacing. Instead, the information about which keyframes are paceable\n> etc. should just be some temporary state stored while doing spacing.\n> \n> * Passing back an array of arrays from CalculateAnimationValues seems a bit\n> odd somehow. This is a pretty minor point, though.\n> \n> Currently what I'm thinking is that so long as we're using parallel arrays\n> for the set of Keyframes and the set of \"animation values\" we should just\n> create another parallel array inside ApplySpacing to store the paced\n> keyframe data.\n> \n> The tricky part, however, is that we only need to provide those \"animation\n> values\" to ApplySpacing when doing paced spacing mode. The same is true for\n> the paced property too. I wonder if we should just have:\n> \n>   void\n>   ApplySpacing(nsTArray<Keyframe>& aKeyframes,\n>                SpacingMode aSpacingMode,\n>                nsCSSProperty aPacedProperty,\n>                const ComputedKeyframeValuesArray& aComputedValues);\n> \n>   void ApplyDistributeSpacing(nsTArray<Keyframe>& aKeyframes)\n>   {\n>     static ComputedKeyframeValuesArray emptyArray;\n>     ApplySpacing(aKeyframes, SpacingMode::distribute,\n>                  eCSSProperty_UNKNOWN, emptyArray);\n>   }\n>   \n> I'll follow up later with specific suggestions in the reviews.\n\nYes, I agree. Putting these data into Keyframe is weird. Your suggestion is better. Using another parallel arrays is OK for now, but if we use RangedPtr<Keyframe>, we lost the indexes for mapping between Keyframes and ComputedKeyframeValuesArray, so I think we might still use indexes, i.e. i (frame A), j (frame B), and use the indexes to create two Range<>s, i.e. Range<Keyframes> and Range<ComputedKeyframeValueArray>, for calculation in PaceRange().", "author": "boris.chiou@gmail.com", "id": 11435940, "time": "2016-05-25T10:27:15Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #93)\n> Perhaps nsContentUtils::ReportToConsole? Perhaps you can avoid touching the\n> ErrorResult and, at the call site, if the paced property is unknown /\n> variable and spacing mode is paced, report the error to the console there.\n> Of course, if there are multiple call sites it might be better to report the\n> console error inside ParseSpacing (we'll need to pass a document in, I\n> guess).\n\nYes, good. Looks like we only one call site (i.e. in ConstructKeyframeEffet) now, so I will check the condition and call nsContentUtils::ReportToConsole() in ConstructKeyframeEffect(). Thanks.", "author": "boris.chiou@gmail.com", "id": 11435952, "time": "2016-05-25T10:31:08Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #95)\n> I just noticed Tab's comment[1], \"unrecognized values should be rejected and\n> use the default value\". I wonder if that means that for unsupported\n> properties, we don't need to store the property name as a string--i.e.\n> whether it would be ok to just store distribute as the spacing mode.\n> \n> [1] https://github.com/w3c/web-animations/issues/152#issuecomment-221363108\n\nI'm not sure, but if so, we don't need to store the unrecognized property string, and the code looks better. :)", "author": "boris.chiou@gmail.com", "id": 11435961, "time": "2016-05-25T10:35:12Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #98)\n> (In reply to Brian Birtles (:birtles) from comment #95)\n> > I just noticed Tab's comment[1], \"unrecognized values should be rejected and\n> > use the default value\". I wonder if that means that for unsupported\n> > properties, we don't need to store the property name as a string--i.e.\n> > whether it would be ok to just store distribute as the spacing mode.\n> > \n> > [1] https://github.com/w3c/web-animations/issues/152#issuecomment-221363108\n> \n> I'm not sure, but if so, we don't need to store the unrecognized property\n> string, and the code looks better. :)\n\nI think it also means it's possible to feature-detect if a browser supports the property (otherwise the only indication is a console warning). Perhaps it might be even better still to check if the property has an animation type != none and store \"distribute\" if *either* it's not a recognized property or if it has an animation type of none (and, for shorthands, I guess \"has an animation type of none\" means \"all of the component shorthands have an animation type of none\" -- fortunately we already has IsAnimatableProperty for that: https://hg.mozilla.org/mozilla-central/rev/8d85de1a5c24#l1.55)", "author": "bbirtles@mozilla.com", "id": 11436011, "time": "2016-05-25T11:14:42Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #99)\n> I think it also means it's possible to feature-detect if a browser supports\n> the property (otherwise the only indication is a console warning). Perhaps\n> it might be even better still to check if the property has an animation type\n> != none and store \"distribute\" if *either* it's not a recognized property or\n> if it has an animation type of none (and, for shorthands, I guess \"has an\n> animation type of none\" means \"all of the component shorthands have an\n> animation type of none\" -- fortunately we already has IsAnimatableProperty\n> for that: https://hg.mozilla.org/mozilla-central/rev/8d85de1a5c24#l1.55)\n\nOK. Lets try this. I will also use KeyframeUtils::IsAnimatableProperty() to check it. If the paced property is not recognized or IsAnimatableProperty() returns false, we fall it back to distribute, so GetSpacingAsString() return \"distribute\", not the unrecognized paced property string.", "author": "boris.chiou@gmail.com", "id": 11436036, "time": "2016-05-25T11:39:21Z"}, {"text": "Comment on attachment 8755339\nBug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.\n\nhttps://reviewboard.mozilla.org/r/54414/#review51678\n\n::: dom/animation/KeyframeUtils.h:30\n(Diff revision 1)\n> +using KeyframeAnimValues = nsTArray<nsTArray<PropertyStyleAnimationValuePair>>;\n> +\n\nCan we call this ComputedKeyframeValuesArray and give it a comment describing what it is?\n\ne.g. \"Represents the set of property-value pairs on an array of Keyframes when converted to computed values\".\n\nOr perhaps it would be simpler to just typedef the inner-type?\n\ne.g.\n\n// Represents the set of property-value pairs on a Keyframe converted to\n// computed values.\nusing ComputedKeyframeValues = nsTArray<PropertyStyleAnimationValuePair>;\n\nThen we can pass nsTArray<ComputedKeyframeValues> around.\n\nAlso, we need to forward-declare PropertyStyleAnimationValuePair. (And we really should include StyleAnimationValue.h in KeyframeUtils.cpp. It seems like we don't yet.)\n\n::: dom/animation/KeyframeUtils.h:61\n(Diff revision 1)\n>    /**\n> +   * Calculate the StyleAnimationValues of properties of each keyframe.\n> +   * This involves expanding shorthand properties into longhand properties,\n> +   * removing the duplicated properties for each keyframe, and creating an\n> +   * array of |property:computed value| pairs for each keyframe.\n> +   *\n\nWe should expand this comment to say *why* we do this.\n\ne.g.\n\nThese computed values are used *both* when computing the final set of per-property animation values (see GetAnimationPropertiesFromKeyframes) as well when applying paced spacing. By returning these values here, we allow the result to be re-used in both operations.\n\n::: dom/animation/KeyframeUtils.h:65\n(Diff revision 1)\n> +   * @return The set of nsTArray<PropertyStyleAnimationValuePair>. The length\n> +   *   should be the same as aFrames.\n\nThis comment will need to be updated. Also \"will be the same\" rather than \"should be the same\".\n\n::: dom/animation/KeyframeUtils.h:69\n(Diff revision 1)\n> +   * @param aStyleContext The style context to use when computing values.\n> +   * @return The set of nsTArray<PropertyStyleAnimationValuePair>. The length\n> +   *   should be the same as aFrames.\n> +   */\n> +  static KeyframeAnimValues\n> +  CalculateAnimationValues(const nsTArray<Keyframe>& aFrames,\n\nCan we call this GetComputedKeyframeValues?\n\n::: dom/animation/KeyframeUtils.h:82\n(Diff revision 1)\n> -  static void ApplySpacing(nsTArray<Keyframe>& aKeyframes,\n> +  static void\n> +  ApplySpacing(nsTArray<Keyframe>& aKeyframes,\n> -                           SpacingMode aSpacingMode);\n> +               SpacingMode aSpacingMode);\n\nSorry, I've probably made this mistake too many times, but according to our coding style the type should go on the same line as the function name (unless it doesn't fit).\n\nhttps://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style#Classes\n\n::: dom/animation/KeyframeUtils.h:92\n(Diff revision 1)\n>     * @param aFrames The input keyframes.\n> +   * @param aValues The calculated StyleAnimatioValues of properties of each\n\nWe are now referring to keyframes as \"keyframes\" (not \"frames\") wherever possible (to avoid confusion with animation frames, as in requestAnimationFrame).\n\nCan we name these parameters:\n\n* aKeyframes\n* aComputedValues\n\n?\n\n::: dom/animation/KeyframeUtils.h:93\n(Diff revision 1)\n> +   * @param aValues The calculated StyleAnimatioValues of properties of each\n> +   *   keyframe.\n\nThis comment has a typo. Also, perhaps we could say something like:\n\n@param aComputedValues The computed keyframe values (as returned by GetComputedKeyframeValues) used to fill in the individual AnimationPropertySegment objects. Although these values could be calculated from |aKeyframes|, passing them in as a separate parameter allows the result of GetComputedKeyframeValues to be re-used both here and in ApplySpacing.\n\n::: dom/animation/KeyframeUtils.cpp:503\n(Diff revision 1)\n> -    const nsTArray<Keyframe>& aFrames)\n>  {\n>    MOZ_ASSERT(aStyleContext);\n>    MOZ_ASSERT(aElement);\n>  \n> -  nsTArray<KeyframeValueEntry> entries;\n> +  // The length should be the same as aFrames.\n\n(Not sure we need this comment?)\n\n::: dom/animation/KeyframeUtils.cpp:504\n(Diff revision 1)\n> +  const size_t len = aFrames.Length();\n> +  KeyframeAnimValues result;\n> +  result.SetLength(len);\n>  \n> -  for (const Keyframe& frame : aFrames) {\n> +  for (size_t i = 0; i < len; ++i) {\n\nCan we just use SetCapacity and then keep the range-based for loop?\n\n::: dom/animation/KeyframeUtils.cpp:551\n(Diff revision 1)\n> +        result[i].AppendElement(value);\n> +        propertiesOnThisKeyframe.AddProperty(value.mProperty);\n> +      }\n> +    }\n> +  }\n> +  return result;\n\nCan we add an assertion here that result.Length() == aKeyframes.Length()\n\n::: dom/animation/KeyframeUtils.cpp:559\n(Diff revision 1)\n> +/* static */ nsTArray<AnimationProperty>\n> +KeyframeUtils::GetAnimationPropertiesFromKeyframes(\n> +  const nsTArray<Keyframe>& aFrames,\n> +  const KeyframeAnimValues& aValues)\n> +{\n> +  MOZ_ASSERT(aFrames.Length() == aValues.Length(), \"Array length mismatch\");\n\nI wonder if it's even worth adding an #ifdef DEBUG block where we call GetComputedKeyframeValues and check that its contents equal aComputedValues?\n\n::: dom/animation/KeyframeUtils.cpp:561\n(Diff revision 1)\n> +  const nsTArray<Keyframe>& aFrames,\n> +  const KeyframeAnimValues& aValues)\n> +{\n> +  MOZ_ASSERT(aFrames.Length() == aValues.Length(), \"Array length mismatch\");\n> +\n> +  nsTArray<KeyframeValueEntry> entries;\n\nWe could call SetCapacity on entries too to avoid unnecessary allocations?\n\n::: dom/animation/KeyframeUtils.cpp\n(Diff revision 1)\n> -        MOZ_ASSERT(frame.mComputedOffset != -1.0, \"Invalid computed offset\");\n> -        entry->mOffset = frame.mComputedOffset;\n> +      entry->mOffset = frame.mComputedOffset;\n\nI think this assertion is still valid? We should have computed the computed offsets by now, right?", "author": "bbirtles@mozilla.com", "id": 11436040, "time": "2016-05-25T11:41:57Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nhttps://reviewboard.mozilla.org/r/51809/#review51680\n\nAs mentioned in comment 92, I think we should try to avoid storing mPacedPropertyAnimValue on Keyframe and make up a parallel array inside ApplySpacing (or some function called from ApplySpacing).\n\nA few other minor comments below although I'll wait to see the next revision before looking at the algorithms in detail.\n\n::: dom/animation/KeyframeEffect.cpp:518\n(Diff revision 2)\n> +  const nsCSSProperty longhandList[] = {aProperty, eCSSProperty_UNKNOWN};\n> +  const nsCSSProperty* propList = &longhandList[0];\n> +  if (nsCSSProps::IsShorthand(aProperty)) {\n> +    propList = nsCSSProps::SubpropertyEntryFor(aProperty);\n> +  }\n\nJust a thought, would it be possible to build up an nsCSSPropertySet containing the longhand components?\n\nIf we do that, then I think we could change the code below from:\n\n  for each keyframe {\n    for each longhand property {\n      for each property {\n        // check it matches\n      }\n    }\n  }\n\nto:\n\n  for each keyframe {\n    for each property {\n      check it is in the nsCSSPropertySet\n    }\n  }\n\n::: dom/animation/KeyframeEffect.cpp:561\n(Diff revision 2)\n> +      // Cache the paced property and its StyleAnimationValues, so we don't have\n> +      // to search them each time.\n> +      UpdateKeyframePacedPropertyAnimValues(mKeyframes, keyframeAnimValues,\n> +                                            mEffectOptions.mPacedProperty);\n> +      KeyframeUtils::ApplySpacing(mKeyframes, SpacingMode::paced,\n> +                                  mEffectOptions.mPacedProperty);\n\nAs mentioned in comment 92, I think we should probably be able to merge together into ApplySpacing.\n\n::: dom/animation/KeyframeUtils.cpp:390\n(Diff revision 2)\n> -ApplyDistributingOffset(const Range<Keyframe>& aDistributeRange);\n> +ApplyDistributingOffset(const Range<Keyframe>& aDistributeRange,\n> +                        size_t aPacedA = 0, size_t aPacedB = 0);\n\nI wonder if we can pass two ranges here? The spacing range and range to adjust?\n\n::: dom/animation/KeyframeUtils.cpp:394\n(Diff revision 2)\n> +ApplyPacedOffset(const Range<Keyframe>& aPaceRange,\n> +                 nsCSSProperty aProperty);\n\nI think we can call this PaceRange (and call the parameter aKeyframes)\n\n::: dom/animation/KeyframeUtils.cpp:506\n(Diff revision 2)\n> +      size_t pA = i;\n> +      while (pA <= j && !aKeyframes[pA].IsPaceable()) {\n> +        ++pA;\n> +      }\n> +      size_t pB = j;\n> +      while (pB >= i && !aKeyframes[pB].IsPaceable()) {\n> +        if (pB == 0) {\n> +          // pB is unsigned, so avoid overflow.\n> +          break;\n> +        }\n> +        --pB;\n> +      }\n> +      // If no Paced A (which also means no Paced B), let both refer to B\n> +      if (pA == j + 1) {\n> +        pA = pB = j;\n> +      }\n\nI'd like to see how far we can get with using iterators instead of indices although we will probably need one or two indices.\n\n(When finding corresponding elements in parallel arrays we might be able to use pointer arithmetic to, e.g. find an index such as iter - aKeyframes.begin() / iter - range.start().)\n\n::: dom/animation/KeyframeUtils.cpp:1280\n(Diff revision 2)\n> +    // Skip (Paced A, Paced B).\n> +    if (aPacedA < i && i < aPacedB) {\n> +      continue;\n> +    }\n\nIf possible it would be neater to express the parameters to this in terms of the spacing range and the range to adjust since that matches the spec better (and since this method is not really related to paced timing).\n\n::: dom/animation/KeyframeUtils.cpp:1314\n(Diff revision 2)\n> +\n> +  // a) Calculate cumulative dist in [Paced A, Paced B].\n> +  //    Cumulative distance array stores the cumulative distances in\n> +  //    [Paced A, Paced B]. If the Keyframe is not paceable, just copy the\n> +  //    cumulative distance from the previous one.\n> +  std::vector<double> cumulativeDist(len, 0.0);\n\nAny reason we are using vector here?", "author": "bbirtles@mozilla.com", "id": 11436059, "time": "2016-05-25T12:01:50Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nhttps://reviewboard.mozilla.org/r/52137/#review51682", "author": "bbirtles@mozilla.com", "id": 11436062, "time": "2016-05-25T12:03:12Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nhttps://reviewboard.mozilla.org/r/52139/#review51684\n\nI think the tests for TypeError and default handling should go under:\n\n  interfaces/KeyframeEffectReadOnly/spacing.html\n\nWhile the tests for the offsets should go in this file.\n\nWe should also add tests for:\n\n* The default value of spacing\n* Whitespace handling: \" paced(margin-left)\", \"paced(margin-left) \", \"paced( margin-left)\", \"paced(margin-left )\"\n* CSS variables specified as paced properties (behaves like an unrecognized property)\n* Non-animatable properties (e.g. animation-duration)\n* Non-animatable shorthand properties (e.g. animation)\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:14\n(Diff revision 2)\n> +  assert_throws(new TypeError, function() {\n> +    var anim = createDiv(t).animate([ { marginLeft: '0px' },\n> +                                      { marginLeft: '-20px' },\n> +                                      { marginLeft: '100px' },\n> +                                      { marginLeft: '50px' } ],\n> +                                    { duration: 100 * MS_PER_SEC,\n> +                                      spacing: 'dist' });\n> +  });\n\nCould we write this as just:\n\n  assert_throws(new TypeError, function() {\n    createDiv(t).animate(null, { spacing: 'dist' });\n  });\n\nLikewise for following tests.\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:31\n(Diff revision 2)\n> +    var anim = createDiv(t).animate([ { marginLeft: '0px' },\n> +                                      { marginLeft: '-20px' },\n> +                                      { marginLeft: '100px' },\n> +                                      { marginLeft: '50px' } ],\n> +                                    { duration: 100 * MS_PER_SEC,\n> +                                      spacing: 'pace(margin-left)' });\n\nI'm not sure if this adds anything of the 'dist' test?\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:42\n(Diff revision 2)\n> +    var anim = createDiv(t).animate([ { marginLeft: '0px' },\n> +                                      { marginLeft: '-20px' },\n> +                                      { marginLeft: '100px' },\n> +                                      { marginLeft: '50px' } ],\n> +                                    { duration: 100 * MS_PER_SEC,\n> +                                      spacing: 'paced(cabbage)' });\n\nAs discussed, we'll need to make this simply fall back to using 'distribute'\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:68\n(Diff revision 2)\n> +test(function(t) {\n> +  var anim = createDiv(t).animate([ { marginLeft: '0px' },\n> +                                    { marginLeft: '-20px' },\n> +                                    { marginLeft: '100px' },\n> +                                    { marginLeft: '50px' } ],\n> +                                  { duration: 100 * MS_PER_SEC,\n> +                                    spacing: 'distribute' });\n> +\n> +  assert_equals(anim.effect.spacing, 'distribute', 'spacing mode');\n> +\n> +  var frames = anim.effect.getKeyframes();\n> +  var slots = frames.length - 1;\n> +  assert_equals(frames[0].computedOffset, 0.0, '1st frame offset');\n> +  assert_equals(frames[1].computedOffset, 1.0 / slots, '2nd frame offset');\n> +  assert_equals(frames[2].computedOffset, 2.0 / slots, '3rd frame offset');\n> +  assert_equals(frames[3].computedOffset, 1.0, 'last frame offset');\n> +}, 'Test distribute spacing without specific offsets');\n\nIn terms of making each test as simple as possible, could we split this into two tests? One that checks that anim.effect.spacing is set correctly, and one that checks that the offsets are set as expected?\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:92\n(Diff revision 2)\n> +  var anim = createDiv(t).animate([ { marginLeft: '0px' },\n> +                                    { marginLeft: '-20px' },\n> +                                    { marginLeft: '100px', offset: 0.5 },\n> +                                    { marginLeft: '50px' } ],\n> +                                  { duration: 100 * MS_PER_SEC,\n> +                                    spacing: 'distribute' });\n\nNit: Once we have a test that the default spacing mode is set correctly, we can drop this line\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:172\n(Diff revision 2)\n> +  var frames = anim.effect.getKeyframes();\n> +  var slots = frames.length - 1;\n> +  assert_equals(frames[1].computedOffset, 1.0 / slots, '2nd frame offset');\n> +  assert_equals(frames[2].computedOffset, 2.0 / slots, '3rd frame offset');\n> +}, 'Test falling back to distribute spacing if all paced property value ' +\n> +   'are not changed');\n\ns/are not changed/are equal/\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:207\n(Diff revision 2)\n> +}, 'Test paced spacing if a paced property that appears on only some ' +\n> +   'keyframes with a specific offset');\n\nI think we need a few more variations of this:\n\n* Where there are at least two keyframes without offsets and without the paced property before the first paceable keyframe and after the last paceable keyframe to check that we actually do distribute spacing for those keyframes.\n\n* Likewise but between paceable keyframes.\n  e.g. paceable,\n       not paceable,\n       not paceable,\n       paceable,\n       not paceable,\n       paceable\n\nI suspect there may be others.\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:283\n(Diff revision 2)\n> +                '2nd frame offset using distribute spacing');\n> +  assert_equals(frames[2].computedOffset, frames[3].computedOffset * 2 / 3,\n> +                '3rd frame offset using distribute spacing');\n> +  assert_equals(frames[3].computedOffset, 100 / 150,\n> +                '4th frame offset using paced spacing');\n> +}, 'Test paced spacing only for keyframes specifying all some components, ' +\n\nall longhand components?", "author": "bbirtles@mozilla.com", "id": 11436079, "time": "2016-05-25T12:21:15Z"}, {"text": "Comment on attachment 8755340\nMozReview Request: Bug 1244590 - Part 12: Revise ComputeDistance for eUnit_Calc.\n\nhttps://reviewboard.mozilla.org/r/54416/#review51686\n\nI didn't think we were going to do this but you seemed to work it out. And I think the cyclic dependency I was concerned about it probably not an issue after all. Still I think heycam or dbaron would be a better reviewer for this so perhaps you could request review from them after rebasing on top of the changes on the underlying patches?", "author": "bbirtles@mozilla.com", "id": 11436094, "time": "2016-05-25T12:51:17Z"}, {"text": "Comment on attachment 8755341\nMozReview Request: Bug 1244590 - Part 13: Test for different units.\n\nhttps://reviewboard.mozilla.org/r/54418/#review51688\n\nThis looks fine to me, but it probably makes sense to get whoever you ask to review part 12 to review this so they can see the result you are trying to achieve and suggest any additional test cases that need to be covered.", "author": "bbirtles@mozilla.com", "id": 11436100, "time": "2016-05-25T12:58:50Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #105)\n> I didn't think we were going to do this but you seemed to work it out. And I\n> think the cyclic dependency I was concerned about it probably not an issue\n> after all. Still I think heycam or dbaron would be a better reviewer for\n> this so perhaps you could request review from them after rebasing on top of\n> the changes on the underlying patches?\n\nOK. After getting r+ on part 1 ~ part 11, I will ask them about this issue. Thanks.", "author": "boris.chiou@gmail.com", "id": 11436106, "time": "2016-05-25T13:03:41Z"}, {"text": "Updated the spec to cover unrecognized/non-animatable properties: https://github.com/w3c/web-animations/commit/bc38f6e02b35678f2861bd716dfb73f4d2a7bf50", "author": "bbirtles@mozilla.com", "id": 11436227, "time": "2016-05-25T14:34:41Z"}, {"text": "https://reviewboard.mozilla.org/r/54414/#review51678\n\n> Can we call this ComputedKeyframeValuesArray and give it a comment describing what it is?\n> \n> e.g. \"Represents the set of property-value pairs on an array of Keyframes when converted to computed values\".\n> \n> Or perhaps it would be simpler to just typedef the inner-type?\n> \n> e.g.\n> \n> // Represents the set of property-value pairs on a Keyframe converted to\n> // computed values.\n> using ComputedKeyframeValues = nsTArray<PropertyStyleAnimationValuePair>;\n> \n> Then we can pass nsTArray<ComputedKeyframeValues> around.\n> \n> Also, we need to forward-declare PropertyStyleAnimationValuePair. (And we really should include StyleAnimationValue.h in KeyframeUtils.cpp. It seems like we don't yet.)\n\nOK. I will declare this:\nusing ComputedKeyframeValues = nsTArray<PropertyStyleAnimationValuePair>;\n\n> Can we just use SetCapacity and then keep the range-based for loop?\n\nOK. I can use range-based for loop here and pass |len| as the argument to the nsTArray constructor which treats it as the initial capacity length.\n\n> I wonder if it's even worth adding an #ifdef DEBUG block where we call GetComputedKeyframeValues and check that its contents equal aComputedValues?\n\nIf we keep this assertion and add an assertion as above, I think it might be enough for now.\n\n> We could call SetCapacity on entries too to avoid unnecessary allocations?\n\nYes. The actual capacity may larger than aKeyframe.Length() because we may have one or more properties for each keyframe. I can set capacity to aKeyframe.Length() to reduce some uncessary allocations.\n\n> I think this assertion is still valid? We should have computed the computed offsets by now, right?\n\nYes. At lease we applied distribute spacing already.", "author": "boris.chiou@gmail.com", "id": 11436506, "time": "2016-05-25T16:44:18Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review51680\n\n> Just a thought, would it be possible to build up an nsCSSPropertySet containing the longhand components?\n> \n> If we do that, then I think we could change the code below from:\n> \n>   for each keyframe {\n>     for each longhand property {\n>       for each property {\n>         // check it matches\n>       }\n>     }\n>   }\n> \n> to:\n> \n>   for each keyframe {\n>     for each property {\n>       check it is in the nsCSSPropertySet\n>     }\n>   }\n\nOK. I will try to use nsCSSPropertySet.\n\n> I wonder if we can pass two ranges here? The spacing range and range to adjust?\n\nOK. I would like to pass two Range<>s, one for spacing range, and one for _Not adjusted_ range because we apply distribute spacing to (A, Paced A], [Paced B, B).", "author": "boris.chiou@gmail.com", "id": 11439884, "time": "2016-05-26T06:21:45Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #110)\n> > I wonder if we can pass two ranges here? The spacing range and range to adjust?\n> \n> OK. I would like to pass two Range<>s, one for spacing range, and one for\n> _Not adjusted_ range because we apply distribute spacing to (A, Paced A],\n> [Paced B, B).\n\nWhy don't we just call it twice? It seems that would be a more simple API and closer to the spec?", "author": "bbirtles@mozilla.com", "id": 11439950, "time": "2016-05-26T07:09:55Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #111)\n> Why don't we just call it twice? It seems that would be a more simple API\n> and closer to the spec?\n\nOK. I will try it. The second argument is the range to adjust and we call DistribueRange() twice for (A, PacedA] and [Paced B, B). Thanks.", "author": "boris.chiou@gmail.com", "id": 11439987, "time": "2016-05-26T07:23:59Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #104)\n> Comment on attachment 8752112\n> MozReview Request: Bug 1244590 - Part 10: Test for creating animations with\n> a specific spacing mode.\n> \n> https://reviewboard.mozilla.org/r/52139/#review51684\n> \n> I think the tests for TypeError and default handling should go under:\n> \n>   interfaces/KeyframeEffectReadOnly/spacing.html\n> \n> While the tests for the offsets should go in this file.\n> \n> We should also add tests for:\n> \n> * The default value of spacing\n> * Whitespace handling: \" paced(margin-left)\", \"paced(margin-left) \", \"paced(\n> margin-left)\", \"paced(margin-left )\"\n> * CSS variables specified as paced properties (behaves like an unrecognized\n> property)\n> * Non-animatable properties (e.g. animation-duration)\n> * Non-animatable shorthand properties (e.g. animation)\n\nOK, so I should put the tests into\n1. interfaces/KeyframeEffectReadOnly/spacing.html\n  a) Basic handling for distribute and paced (including different combinations of shorthand and longhand properties)\n  b) Parser related tests (including using CSS variables, and non-animatable properties.\n2. animation-model/keyframe-effects/spacing-keyframes.html\n  a) all tests with specific offsets.\n\nBTW, all the tests related to SetTarget(), I will put them into \"interfaces/KeyframeEffect/setTarget.html\" (part 11).\n\nThanks.", "author": "boris.chiou@gmail.com", "id": 11440225, "time": "2016-05-26T09:40:47Z"}, {"text": "Comment on attachment 8752104\nBug 1244590 - Part 1: Introduce KeyframeEffectParams.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51507/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441929, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752105\nBug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51509/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441930, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51511/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441931, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51549/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441932, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51505/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441933, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8755339\nBug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54414/diff/1-2/", "author": "boris.chiou@gmail.com", "id": 11441934, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441935, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441936, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441937, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441938, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441939, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8755340\nMozReview Request: Bug 1244590 - Part 12: Revise ComputeDistance for eUnit_Calc.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54416/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441940, "time": "2016-05-26T19:06:41Z"}, {"text": "Comment on attachment 8755341\nMozReview Request: Bug 1244590 - Part 13: Test for different units.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54418/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11441941, "time": "2016-05-26T19:06:41Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #120)\n> Comment on attachment 8752109\n> MozReview Request: Bug 1244590 - Part 7: Calculate paced spacing.\n> \n> Review request updated; see interdiff:\n> https://reviewboard.mozilla.org/r/51809/diff/2-3/\n\nHi, Brian,\nSome functions/codes could be simpler, but I think you may want to check the result after using iterators.", "author": "boris.chiou@gmail.com", "id": 11441956, "time": "2016-05-26T19:14:57Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #116)\n> Comment on attachment 8752106\n> MozReview Request: Bug 1244590 - Part 3: Parse spacing.\n> \n> Review request updated; see interdiff:\n> https://reviewboard.mozilla.org/r/51511/diff/2-3/\n\nSorry, I would like to update this because I should simplify \"ConsumeIdentToken()\". Thanks.", "author": "boris.chiou@gmail.com", "id": 11443125, "time": "2016-05-27T03:04:56Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51511/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443147, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51549/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443148, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51505/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443149, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8755339\nBug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54414/diff/2-3/", "author": "boris.chiou@gmail.com", "id": 11443150, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443151, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443152, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443153, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443154, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443155, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8755340\nMozReview Request: Bug 1244590 - Part 12: Revise ComputeDistance for eUnit_Calc.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54416/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443156, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8755341\nMozReview Request: Bug 1244590 - Part 13: Test for different units.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54418/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443157, "time": "2016-05-27T03:25:07Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nhttps://reviewboard.mozilla.org/r/51511/#review52378\n\n::: dom/animation/KeyframeEffect.cpp:730\n(Diff revision 4)\n> +                              nsAString& aUnrecognizedProperty,\n> +                              bool& aHasUnrecognizedProperty,\n\nCan we call this aInvalidPacedProperty and just check if IsEmpty() is true rather than passing a bool as well?\n\n::: dom/animation/KeyframeEffectParams.h:40\n(Diff revision 4)\n> +   * @param [out] aUnrecognizedProperty The unrecognized property string\n> +   *                                    if we can't recognized the css property\n> +   *                                    in aSpacing.\n> +   * @param [out] aReportUnrecognized The flag for checking if we should report\n> +   *                                  the unrecognized property which could be\n> +   *                                  an empty string.\n\nAs mentioned earlier, let's drop aReportUnrecognized and just pass back aUnrecognizedProperty (after renaming it to aInvalidPacedProperty).\n\nIf we get 'paced()' then '' is not an <ident> so we should throw a type error (i.e. set aRv).\n\nWe can truncate the string at the start of the function or simply assert that is empty.\n\nFor the parameter description, something like \"A string that, if we parsed a string of the form 'paced(<ident>)' where <ident> is not a recognized animatable property, will be set to <ident>.\"\n\n::: dom/animation/KeyframeEffectParams.cpp:15\n(Diff revision 4)\n> +// This is a simplified version of consuming ident token, which means we don't\n> +// decode special escapes, and we use the last paired ')' as the end of this\n> +// token if it exists.\n> +static void\n> +ConsumeIdentToken(RangedPtr<const char16_t>& aStart,\n> +                  const char16_t* const aEnd,\n> +                  nsAString& aResult)\n> +{\n> +  RangedPtr<const char16_t> iter = aStart;\n> +  size_t skipRightParenCount = 0;\n> +  bool escape = false;\n> +  aResult.Truncate();\n> +\n> +  while (iter != aEnd) {\n> +    if (*iter == '(') {\n> +      ++skipRightParenCount;\n> +    } else if (*iter == ')') {\n> +      if (skipRightParenCount > 0) {\n> +        --skipRightParenCount;\n> +      } else {\n> +        break;\n> +      }\n> +    }\n> +\n> +    if (!escape && *iter == '\\\\') {\n> +      escape = true;\n> +    } else {\n> +      aResult.Append(*iter);\n> +      escape = false;\n> +    }\n> +\n> +    ++iter;\n> +  }\n> +\n> +  aStart = iter;\n> +}\n\nWhy do we do the paren-counting? Idents don't allow parens, right?\n\nAs I understand it, all we really need to do here is:\n\n1. Check the first 1~3 code points are allowed: https://drafts.csswg.org/css-syntax-3/#check-if-three-code-points-would-start-an-identifier\n\n2. Walk through the string and:\n   a. If the character is not a name character (https://drafts.csswg.org/css-syntax-3/#name-code-point) return\n   b. If it's '\\':\n      If the next character doesn't exist or is a newline (https://drafts.csswg.org/css-syntax-3/#newline but doing the equivalent preprocessing here) return. Otherwise, append the next character and continue\n   c. Append the next character\n\nDoes that sound right?\n\n::: dom/animation/KeyframeEffectParams.cpp:19\n(Diff revision 4)\n> +\n> +// This is a simplified version of consuming ident token, which means we don't\n> +// decode special escapes, and we use the last paired ')' as the end of this\n> +// token if it exists.\n> +static void\n> +ConsumeIdentToken(RangedPtr<const char16_t>& aStart,\n\nNit: Call this aIter since it won't represent the start once we return?\n\n::: dom/animation/KeyframeEffectParams.cpp:62\n(Diff revision 4)\n> +  if (aSpacing.IsEmpty()) {\n> +    aRv.ThrowTypeError<dom::MSG_INVALID_SPACING_MODE_ERROR>(aSpacing);\n> +    return;\n> +  }\n> +\n\nI don't think we need this, right?\n\n::: dom/animation/KeyframeEffectParams.cpp:100\n(Diff revision 4)\n> +  if (*iter++ != ')') {\n> +    aRv.ThrowTypeError<dom::MSG_INVALID_SPACING_MODE_ERROR>(aSpacing);\n> +    return;\n> +  }\n> +\n> +  if (iter != end) {\n> +    aRv.ThrowTypeError<dom::MSG_INVALID_SPACING_MODE_ERROR>(aSpacing);\n> +    return;\n> +  }\n\nIs this first check safe? Don't we first need to check that iter != end?\n\n(ConsumeIdent should be written to return with iter pointing to the first character that is *not* part of the ident token.)\n\nPerhaps we can combine the checks:\n\n  if (end - iter != 1 || *iter != ')') {\n    ...\n  }\n\n::: dom/animation/KeyframeUtils.h:86\n(Diff revision 4)\n> +\n> +  /**\n> +   * Check if the property or, for shorthands, one or more of\n> +   * its subproperties, is animatable.\n> +   *\n> +   * @param aProperty The property we check.\n\nNit: \"The property to check\"\n\n::: dom/locales/en-US/chrome/dom/dom.properties:230\n(Diff revision 4)\n>  # LOCALIZATION NOTE: Do not translate \"ServiceWorker\". %1$S is the ServiceWorker scope URL. %2$S is an error string.\n>  PushMessageDecryptionFailure=The ServiceWorker for scope \u2018%1$S\u2019 encountered an error decrypting a push message: \u2018%2$S\u2019. For help with encryption, please see https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API#Encryption\n>  # LOCALIZATION NOTE: %1$S is the type of a DOM event. 'passive' is a literal parameter from the DOM spec.\n>  PreventDefaultFromPassiveListenerWarning=Ignoring \u2018preventDefault()\u2019 call on event of type \u2018%1$S\u2019 from a listener registered as \u2018passive\u2019.\n> +# LOCALIZATION NOTE: %1$S is the unrecongnized property string.\n> +UnrecognizedPacedProperty=The paced property '%1$S' is unrecognized.\n\nI think this should be UnanimatablePacedProperty and the string should be:\n\nPaced property \u2018%1S\u2019 is not an animatable property.\n\n(Note: We seem to use smart quotes \u2018\u2019 in this file.)", "author": "bbirtles@mozilla.com", "id": 11443277, "time": "2016-05-27T05:26:57Z"}, {"text": "https://reviewboard.mozilla.org/r/51511/#review52378\n\n> As mentioned earlier, let's drop aReportUnrecognized and just pass back aUnrecognizedProperty (after renaming it to aInvalidPacedProperty).\n> \n> If we get 'paced()' then '' is not an <ident> so we should throw a type error (i.e. set aRv).\n> \n> We can truncate the string at the start of the function or simply assert that is empty.\n> \n> For the parameter description, something like \"A string that, if we parsed a string of the form 'paced(<ident>)' where <ident> is not a recognized animatable property, will be set to <ident>.\"\n\nOK. 'paced()' is what my question here. Thanks for your clarifiation. If it is a type error, then we can drop the flag. Thanks.\n\n> Why do we do the paren-counting? Idents don't allow parens, right?\n> \n> As I understand it, all we really need to do here is:\n> \n> 1. Check the first 1~3 code points are allowed: https://drafts.csswg.org/css-syntax-3/#check-if-three-code-points-would-start-an-identifier\n> \n> 2. Walk through the string and:\n>    a. If the character is not a name character (https://drafts.csswg.org/css-syntax-3/#name-code-point) return\n>    b. If it's '\\':\n>       If the next character doesn't exist or is a newline (https://drafts.csswg.org/css-syntax-3/#newline but doing the equivalent preprocessing here) return. Otherwise, append the next character and continue\n>    c. Append the next character\n> \n> Does that sound right?\n\nSorry, I though we should handle this case \"paced(abd())\", which reports a warning like this: \"Paced property 'acd()' is not an animatable property\".\nI will remove the parens part and refine the handling of escapes. Thanks.\n\n> Is this first check safe? Don't we first need to check that iter != end?\n> \n> (ConsumeIdent should be written to return with iter pointing to the first character that is *not* part of the ident token.)\n> \n> Perhaps we can combine the checks:\n> \n>   if (end - iter != 1 || *iter != ')') {\n>     ...\n>   }\n\nYes. I should check |end| first. Thanks.", "author": "boris.chiou@gmail.com", "id": 11443299, "time": "2016-05-27T05:51:35Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #141)\n> Sorry, I though we should handle this case \"paced(abd())\", which reports a\n> warning like this: \"Paced property 'acd()' is not an animatable property\".\n> I will remove the parens part and refine the handling of escapes. Thanks.\n\nYeah, \"paced(abd())\" doesn't conform to the grammar so it should throw.", "author": "bbirtles@mozilla.com", "id": 11443311, "time": "2016-05-27T06:04:47Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nhttps://reviewboard.mozilla.org/r/51549/#review52390\n\n::: dom/animation/KeyframeUtils.cpp:478\n(Diff revision 4)\n> -  size_t i = 0;\n> -  while (i < aKeyframes.Length() - 1) {\n> -    double start = aKeyframes[i].mComputedOffset;\n> -    size_t j = i + 1;\n> -    while (aKeyframes[j].mOffset.isNothing() && j < aKeyframes.Length() - 1) {\n> -      ++j;\n> +  const Keyframe* const last = aKeyframes.cend() - 1;\n> +  RangedPtr<Keyframe> keyframeA(aKeyframes.begin(), aKeyframes.Length());\n> +  while (keyframeA != last) {\n> +    // Find frame A and frame B *between* which we will apply spacing.\n> +    RangedPtr<Keyframe> keyframeB = keyframeA + 1;\n> +    while ((*keyframeB).mOffset.isNothing() && keyframeB != last) {\n\nI wonder if keyframeB.get()->mOffset would be more clear?\n\n(Then, if we implement operator->() we can just do s/.get()//)\n\n::: dom/animation/KeyframeUtils.cpp:1185\n(Diff revision 4)\n>    return !propertiesWithFromValue.Equals(properties) ||\n>           !propertiesWithToValue.Equals(properties);\n>  }\n>  \n> +/**\n> + * Apply evenly distributing computed offsets in (A, B). We should pass the\n\nNit: Evenly distribute the computed offsets...", "author": "bbirtles@mozilla.com", "id": 11443363, "time": "2016-05-27T06:43:50Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nhttps://reviewboard.mozilla.org/r/51505/#review52392", "author": "bbirtles@mozilla.com", "id": 11443366, "time": "2016-05-27T06:46:05Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nhttps://reviewboard.mozilla.org/r/51549/#review52394\n\n::: dom/animation/KeyframeUtils.cpp:476\n(Diff revision 4)\n>  \n>    // Fill in remaining missing offsets.\n> -  size_t i = 0;\n> -  while (i < aKeyframes.Length() - 1) {\n> -    double start = aKeyframes[i].mComputedOffset;\n> -    size_t j = i + 1;\n> +  const Keyframe* const last = aKeyframes.cend() - 1;\n> +  RangedPtr<Keyframe> keyframeA(aKeyframes.begin(), aKeyframes.Length());\n> +  while (keyframeA != last) {\n> +    // Find frame A and frame B *between* which we will apply spacing.\n\nNit: s/ frame/ keyframe/g\n\nAlso a few lines down.", "author": "bbirtles@mozilla.com", "id": 11443368, "time": "2016-05-27T06:47:00Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51511/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443779, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51549/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443780, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51505/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443781, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8755339\nBug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54414/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11443782, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443783, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443784, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443785, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443786, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443787, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8755340\nMozReview Request: Bug 1244590 - Part 12: Revise ComputeDistance for eUnit_Calc.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54416/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443788, "time": "2016-05-27T10:25:36Z"}, {"text": "Comment on attachment 8755341\nMozReview Request: Bug 1244590 - Part 13: Test for different units.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54418/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11443789, "time": "2016-05-27T10:25:36Z"}, {"text": "Remove part 12 and part 13 because I decide to move them into a new bug.", "author": "boris.chiou@gmail.com", "id": 11443831, "time": "2016-05-27T10:45:18Z"}, {"text": "(In reply to Boris Chiou [:boris]  from comment #157)\n> Remove part 12 and part 13 because I decide to move them into a new bug.\n\nFile Bug 1276193.", "author": "boris.chiou@gmail.com", "id": 11443857, "time": "2016-05-27T11:01:05Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11446053, "time": "2016-05-28T06:41:40Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11446054, "time": "2016-05-28T06:41:40Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11446055, "time": "2016-05-28T06:41:40Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11446056, "time": "2016-05-28T06:41:40Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11446057, "time": "2016-05-28T06:41:40Z"}, {"text": "(In reply to Brian Birtles (:birtles, high review load) from comment #92)\n>   void ApplyDistributeSpacing(nsTArray<Keyframe>& aKeyframes)\n>   {\n>     static ComputedKeyframeValuesArray emptyArray;\n>     ApplySpacing(aKeyframes, SpacingMode::distribute,\n>                  eCSSProperty_UNKNOWN, emptyArray);\n>   }\n\nAn interesting thing:\nusing 'static nsTArray<...> emptyArray' causes 8 bytes leaked on nsTArray_base, so I will remove |static| from this statement.", "author": "boris.chiou@gmail.com", "id": 11446596, "time": "2016-05-29T08:04:40Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/6-7/", "author": "boris.chiou@gmail.com", "id": 11446597, "time": "2016-05-29T08:12:02Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/6-7/", "author": "boris.chiou@gmail.com", "id": 11446598, "time": "2016-05-29T08:12:02Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/6-7/", "author": "boris.chiou@gmail.com", "id": 11446599, "time": "2016-05-29T08:12:02Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/6-7/", "author": "boris.chiou@gmail.com", "id": 11446600, "time": "2016-05-29T08:12:02Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/6-7/", "author": "boris.chiou@gmail.com", "id": 11446601, "time": "2016-05-29T08:12:02Z"}, {"text": "Comment on attachment 8755339\nBug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.\n\nhttps://reviewboard.mozilla.org/r/54414/#review52768\n\nr=me with comments addressed\n\n::: dom/animation/KeyframeUtils.cpp\n(Diff revision 4)\n> -        MOZ_ASSERT(frame.mComputedOffset != Keyframe::kComputedOffsetNotSet,\n> -                   \"Invalid computed offset\");\n\nI thought your comment in comment 109 meant we could keep this assertion?", "author": "bbirtles@mozilla.com", "id": 11446985, "time": "2016-05-30T00:04:00Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review52772\n\nI think there's a bit too much +1, -1, .get() etc. in the code quick makes it hard to read and, in some cases, error prone. I think there's a few things we can do.\n\nFirstly, we should add operator->() to RangedPtr. We haven't gotten a response from Jeff yet so I think the best thing is just to file the bug, make the patch and request review.\n\nSecondly, a lot of the complexity seems to come about because we use mozilla::Range and that takes a raw pointer and a length and we are mostly dealing with RangedPtrs. Using Range is preferable to a pair of RangedPtrs because it ensures they are in the correct order and have the same range. I think we could probably do one of two things:\n\na) Stop using mozilla::Range and just pass RangedPtrs around. Doing that, however, would mean we'd lose the guarantee that the two pointers are in order and have the same range. If the second pointer is always just a const pointer that we never update then we could just assert the iterator we intend to move is < the end iterator. We couldn't easily assert that the end iterator is in range of the first iterator, however, without adding extra API to RangedPtr.\n\nb) Make mozilla::Range easier to use so that it accepts two RangedPtr arguments and does the necessary order and range checking. Again, we'd probably need to add API to RangedPtr so that we could assert that the end iterator is within the range of the first iterator.\n\nI'm slightly leaning towards (b) I think. I think if we did that, this patch could become simpler and easier to read.\n\n\nAs a related but somewhat separate point, it would be nice if we can make DistributeRange not require the second argument rather than having to pass an empty range when it is not needed. Perhaps we could overload the function with a one-argument version that fills in the second range object using the same logic we currently do to set up filterStart / filterEnd.\n\n\nAlso, see my comments about returning an array of cumulative distances instead of StyleAnimationValues.\n\n::: dom/animation/KeyframeUtils.h:89\n(Diff revision 7)\n>     *\n>     * https://w3c.github.io/web-animations/#spacing-keyframes\n>     *\n>     * @param aKeyframes The set of keyframes to adjust.\n>     * @param aSpacingMode The spacing mode to apply.\n> +   * @param aProperty The paced property.\n\n\"The paced property. Only used when |aSpacingMode| is SpacingMode::paced. In all other cases it is ignored and hence may be any value, e.g. eCSSProperty_UNKNOWN\" ?\n\n::: dom/animation/KeyframeUtils.h:90\n(Diff revision 7)\n> +   * @param aComputedValues The set of computed keyframe values got by\n> +   *   GetComputedKeyframeValues.\n\n\"The set of computed keyframe values as returned by GetComputedKeyframeValues. Only used when |aSpacingMode| is SpacingMode::paced. In all other cases this parameter is unused and may be any value including an empty array.\"\n\n::: dom/animation/KeyframeUtils.h:99\n(Diff revision 7)\n> +   * Fills in the mComputedOffset member of each keyframe in the given array\n> +   * using distribute spacing mode.\n\n\"Wrapper for ApplySpacing to simplify using distribute spacing.\" ?\n\n::: dom/animation/KeyframeUtils.cpp:388\n(Diff revision 7)\n> -DistributeRange(const Range<Keyframe>& aKeyframes);\n> +DistributeRange(const Range<Keyframe>& aKeyframes,\n> +                const Range<Keyframe>& aFilteredKeyframes);\n\nHow about something like:\n* |aSpacingRange|\n* |aRangeToAdjust|\n?\n\n::: dom/animation/KeyframeUtils.cpp:477\n(Diff revision 7)\n>    }\n>  \n> +  nsTArray<ComputedKeyframeValues> pacedValues;\n> +  if (aSpacingMode == SpacingMode::paced) {\n> +    MOZ_ASSERT(IsAnimatableProperty(aProperty),\n> +               \"Only support animatable property for paced spacing\");\n\n\"Paced property should be animatable\"\n\n::: dom/animation/KeyframeUtils.cpp:519\n(Diff revision 7)\n> +      while (pacedA <= keyframeB && pacedValues[pacedA - begin].IsEmpty()) {\n> +        ++pacedA;\n> +      }\n\nShould this be pacedA < keyframeB ?\n\n::: dom/animation/KeyframeUtils.cpp:523\n(Diff revision 7)\n> +      while (pacedB >= keyframeA && pacedValues[pacedB - begin].IsEmpty()) {\n> +        if (pacedB == keyframeA) {\n> +          break;\n> +        }\n\nShould this be pacedB > keyframeA? Then we wouldn't need the check for pacedB == keyframeA, right?\n\n::: dom/animation/KeyframeUtils.cpp:540\n(Diff revision 7)\n> +      // b) Apply evenly distributing offsets in (keyframe A, Paced A] and\n> +      //    [Paced B, keyframe B).\n> +      DistributeRange(Range<Keyframe>(keyframeA.get(), rangeLen),\n> +                      Range<Keyframe>(keyframeA.get(), pacedA - keyframeA + 1));\n> +      DistributeRange(Range<Keyframe>(keyframeA.get(), rangeLen),\n> +                      Range<Keyframe>(pacedB.get(), keyframeB - pacedB + 1));\n\nIs the +1 here correct? If not, we should try to write a test that will fail if we leave the + 1 here.\n\n::: dom/animation/KeyframeUtils.cpp:542\n(Diff revision 7)\n> +      DistributeRange(Range<Keyframe>(keyframeA.get(), rangeLen),\n> +                      Range<Keyframe>(keyframeA.get(), pacedA - keyframeA + 1));\n> +      DistributeRange(Range<Keyframe>(keyframeA.get(), rangeLen),\n> +                      Range<Keyframe>(pacedB.get(), keyframeB - pacedB + 1));\n> +      // c) Apply paced offsets in (Paced A, Paced B).\n> +      const size_t idx = pacedA - begin;\n\nMaybe call it pacedAIdx? (Or just do the calculation when setting up the range, unless it makes the line-wrapping horrible.)\n\n::: dom/animation/KeyframeUtils.cpp:547\n(Diff revision 7)\n> +      const size_t idx = pacedA - begin;\n> +      const size_t pacedLen = pacedB - pacedA + 1;\n> +      PaceRange(Range<Keyframe>(pacedA.get(), pacedLen),\n> +                Range<ComputedKeyframeValues>(&pacedValues[idx], pacedLen),\n> +                aProperty);\n> +      // d) Fill null computed offsets in (Paced A, Paced B).\n\n\"Fill in any computed offsets in (Paced A, Paced B) that are still not set (e.g. because the keyframe was not paceable, or because the cumulative distance between paceable properties was zero)\"\n\n::: dom/animation/KeyframeUtils.cpp:549\n(Diff revision 7)\n> +      PaceRange(Range<Keyframe>(pacedA.get(), pacedLen),\n> +                Range<ComputedKeyframeValues>(&pacedValues[idx], pacedLen),\n> +                aProperty);\n> +      // d) Fill null computed offsets in (Paced A, Paced B).\n> +      for (RangedPtr<Keyframe> frame = pacedA + 1; frame < pacedB; ++frame) {\n> +        if ((*frame).mComputedOffset != Keyframe::kComputedOffsetNotSet) {\n\nNit: frame.get()->mComputedOffset might be better?\n\n::: dom/animation/KeyframeUtils.cpp:1294\n(Diff revision 7)\n>  static void\n> -DistributeRange(const Range<Keyframe>& aKeyframes)\n> +DistributeRange(const Range<Keyframe>& aKeyframes,\n> +                const Range<Keyframe>& aFilteredKeyframes)\n>  {\n> +  // aFilteredKeyframes could be an empty range. If it is, we should apply\n> +  // distribute spacing to all the keyframes (excluding A and B).\n> +  const RangedPtr<Keyframe> filterStart = aFilteredKeyframes.start()\n> +                                          ? aFilteredKeyframes.start()\n> +                                          : aKeyframes.start() + 1;\n> +  const RangedPtr<Keyframe> filterEnd = aFilteredKeyframes.end()\n> +                                        ? aFilteredKeyframes.end()\n> +                                        : aKeyframes.end() - 1;\n\nSee my earlier comment: I think we should just make an overload of DistributeRange that takes a single range, fills in the range to adjust, then calls this function.\n\n::: dom/animation/KeyframeUtils.cpp:1306\n(Diff revision 7)\n> +                                          ? aFilteredKeyframes.start()\n> +                                          : aKeyframes.start() + 1;\n> +  const RangedPtr<Keyframe> filterEnd = aFilteredKeyframes.end()\n> +                                        ? aFilteredKeyframes.end()\n> +                                        : aKeyframes.end() - 1;\n> +\n\nWe should add an assertion that the range to adjust is within the distribute range.\n\n::: dom/animation/KeyframeUtils.cpp:1321\n(Diff revision 7)\n> + * @param aKeyframes The sequence of keyframes between whose endpoints we should\n> + *   apply paced distribute, [Paced A, Paced B], and both Paced A & Paced B\n> + *   should be paceable.\n\n\"The range of keyframes between whose endpoints we should apply paced spacing. Both endpoints should be paceable, i.e. the corresponding elements in |aPacedValues| should specify all the necessary values for |aPacedProperty|. Within this function, we refer to the start and end points of this range as Paced A and Paced B respectively in keeping with the notation used in the spec.\"\n\n::: dom/animation/KeyframeUtils.cpp:1324\n(Diff revision 7)\n> + * @param aPacedValues The sequence of computed values of the paced property.\n> + *   We get this by GetPacedPropertyKeyframeValues().\n\n\"... as returned by GetPacedPropertyKeyframeValues(). This acts as a parallel range to |aKeyframes|.\"\n\n::: dom/animation/KeyframeUtils.cpp:1331\n(Diff revision 7)\n> + * @param aProperty The paced property.\n> + */\n> +static void\n> +PaceRange(const Range<Keyframe>& aKeyframes,\n> +          const Range<ComputedKeyframeValues>& aPacedValues,\n> +          nsCSSProperty aProperty)\n\nCan we call this |aPacedProperty| ?\n\n::: dom/animation/KeyframeUtils.cpp:1332\n(Diff revision 7)\n> + */\n> +static void\n> +PaceRange(const Range<Keyframe>& aKeyframes,\n> +          const Range<ComputedKeyframeValues>& aPacedValues,\n> +          nsCSSProperty aProperty)\n> +{\n\nAdd an assertion that the length of aKeyframes and aPacedValues is equal.\n\n::: dom/animation/KeyframeUtils.cpp:1333\n(Diff revision 7)\n> +  const size_t len = aKeyframes.length();\n> +  if (len < 3) {\n> +    return;\n> +  }\n\nThis needs a comment, e.g. \"If there is nothing between the end points, there is nothing to space.\"\n\n::: dom/animation/KeyframeUtils.cpp:1344\n(Diff revision 7)\n> +  // a) Calculate cumulative dist in [Paced A, Paced B].\n> +  //    Cumulative distance array stores the cumulative distances in\n> +  //    [Paced A, Paced B]. If the Keyframe is not paceable, just copy the\n> +  //    cumulative distance from the previous one.\n\nAt first I thought we should factor this out into a separate method but actually I wonder if we can actually calculate all the distances in GetPacedPropertyKeyframeValues?\n\nIf we do that, I don't think we even need to return the StyleAnimationValues? All we really need is to know all the computed distances and which keyframes are paceable, right?\n\nFor example, could we simply return a parallel array of doubles representing the cumulative distances across the whole set of keyframes? For non-paceable keyframes we could set the cumulative distance to kNotPaceable = -1. Then we'd still pass a range within that cumulative distances array to PaceRange and PaceRange would need to get the cumulative distance of the first element in that range and subtract that from other cumulative distances in order to get a relative distance.\n\nI think if we do that, this becomes a lot simpler?\n\n::: dom/animation/KeyframeUtils.cpp:1348\n(Diff revision 7)\n> +\n> +  // a) Calculate cumulative dist in [Paced A, Paced B].\n> +  //    Cumulative distance array stores the cumulative distances in\n> +  //    [Paced A, Paced B]. If the Keyframe is not paceable, just copy the\n> +  //    cumulative distance from the previous one.\n> +  nsTArray<double> cumulativeDist(len);\n\nNit: Can we use AutoTArray here with an initial storage of, say, 8? That will save heap allocations when len <= 8 (which is probably most of the time?)\n\n::: dom/animation/KeyframeUtils.cpp:1355\n(Diff revision 7)\n> +    const nsCSSProperty* subp = nsCSSProps::SubpropertyEntryFor(aProperty);\n> +    while (*subp != eCSSProperty_UNKNOWN) {\n\nI think we normally use CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES for this.\n\n::: dom/animation/KeyframeUtils.cpp:1363\n(Diff revision 7)\n> +    if (aPacedValues[i].IsEmpty()) {\n> +      cumulativeDist[i] = cumulativeDist[i - 1];\n> +      continue;\n> +    }\n\nWe should move the comment above about non-paceable keyframes down here.\n\n::: dom/animation/KeyframeUtils.cpp:1374\n(Diff revision 7)\n> +    if (pacedIsShorthand) {\n> +      ComputedKeyframeValues& prePairs = aPacedValues[preIdx];\n> +      ComputedKeyframeValues& curPairs = aPacedValues[i];\n> +\n> +      // Calculate distance.\n> +      // mPacedPropertyAnimValue is sorted, so the components should be aligned.\n\nI don't think this comment makes sense any more?\n\n::: dom/animation/KeyframeUtils.cpp:1437\n(Diff revision 7)\n> +static nsTArray<ComputedKeyframeValues>\n> +GetPacedPropertyKeyframeValues(const nsTArray<ComputedKeyframeValues>& aValues,\n> +                               nsCSSProperty aProperty)\n> +{\n\nSee my comments above. I wonder if we can replace this with a function that returns a cumulative lengths array.\n\n::: dom/animation/KeyframeUtils.cpp:1441\n(Diff revision 7)\n> + */\n> +static nsTArray<ComputedKeyframeValues>\n> +GetPacedPropertyKeyframeValues(const nsTArray<ComputedKeyframeValues>& aValues,\n> +                               nsCSSProperty aProperty)\n> +{\n> +  nsTArray<ComputedKeyframeValues> result;\n\nCan we initialize this to aValues.Length()?\n\n::: dom/animation/KeyframeUtils.cpp:1448\n(Diff revision 7)\n> +    const nsCSSProperty* p = nsCSSProps::SubpropertyEntryFor(aProperty);\n> +    for (; *p != eCSSProperty_UNKNOWN; ++p) {\n\nI think we normally use CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES for this.\n\n::: dom/animation/KeyframeUtils.cpp:1460\n(Diff revision 7)\n> +    propertyCount = 1;\n> +  }\n> +\n> +  // b) Search each component (shorthand) or the longhand property,\n> +  for (const ComputedKeyframeValues& computedValues : aValues) {\n> +    ComputedKeyframeValues* pacedValues = result.AppendElement();\n\nAdd a comment that we add an element even if this frame does not contain the paced property since |result| is a parallel array to |aValues|.\n\n::: dom/animation/KeyframeUtils.cpp:1473\n(Diff revision 7)\n> +      // properties, it should be non-paceable. For longhand, the number of\n> +      // components is always 1.\n> +      pacedValues->Clear();\n> +    }\n> +  }\n> +  return result;\n\nAssert that result.Length() == aValues.Length()", "author": "bbirtles@mozilla.com", "id": 11447404, "time": "2016-05-30T02:10:18Z"}, {"text": "https://reviewboard.mozilla.org/r/54414/#review52768\n\n> I thought your comment in comment 109 meant we could keep this assertion?\n\nOh, Yes. Looks like I drop this line by accident.", "author": "boris.chiou@gmail.com", "id": 11447433, "time": "2016-05-30T02:47:56Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nhttps://reviewboard.mozilla.org/r/51511/#review52786\n\nr=me with comments addressed. I hope we have *lots* of tests for this! (Including all the weird edge cases like \\ before all three types of newline etc.)\n\n::: dom/animation/KeyframeEffectParams.cpp:19\n(Diff revisions 4 - 5)\n>  namespace mozilla {\n>  \n> -// This is a simplified version of consuming ident token, which means we don't\n> -// decode special escapes, and we use the last paired ')' as the end of this\n> -// token if it exists.\n> +static inline bool\n> +IsAlpha(char16_t aCh)\n> +{\n> +  return std::isalpha(static_cast<unsigned char>(aCh)) != 0;\n\nSo isalpha is locale dependent.[1] Maybe it doesn't matter in this case but would it be easier to call this IsLetter and just check if |aCh| is between 0x41 <= aCh <= 0x5A and 0x61 <= aCh <= 0x7A ?\n\n[1] http://en.cppreference.com/w/cpp/string/byte/isalpha\n\n::: dom/animation/KeyframeEffectParams.cpp:25\n(Diff revisions 4 - 5)\n> +}\n> +\n> +static inline bool\n> +IsDigit(char16_t aCh)\n> +{\n> +  return std::isdigit(static_cast<unsigned char>(aCh)) != 0;\n\nSimilarly here? Between 0x30 and 0x39 (inclusive)?\n\nThen we don't need to include cctype.\n\n::: dom/animation/KeyframeEffectParams.cpp:31\n(Diff revisions 4 - 5)\n> +}\n> +\n> +static inline bool\n> +IsNameStartCode(char16_t aCh)\n> +{\n> +  // 0x80 is control code.\n\nNot sure we need this comment\n\n::: dom/animation/KeyframeEffectParams.cpp:52\n(Diff revisions 4 - 5)\n> +}\n> +\n> +static inline bool\n> +IsValidEscape(char16_t aFirst, char16_t aSecond)\n> +{\n> +  return (aFirst == '\\\\') && !IsNewLine(aSecond);\n\nNit: Do we need the () around aFirst == '\\\\' ? Likewise elsewhere in this file.\n\n::: dom/animation/KeyframeEffectParams.cpp:55\n(Diff revisions 4 - 5)\n> +static bool\n> +StartIdent(RangedPtr<const char16_t> aIter,\n> +           const char16_t* const aEnd)\n\nPerhaps call this IsIdentStart?\n\n::: dom/locales/en-US/chrome/dom/dom.properties:229\n(Diff revisions 4 - 5)\n>  RewriteYoutubeEmbedInvalidQuery=Rewriting old-style Youtube Flash embed (%S) to iframe embed (%S). Query was invalid and removed from URL. Please update page to use iframe instead of embed/object, if possible.\n>  # LOCALIZATION NOTE: Do not translate \"ServiceWorker\". %1$S is the ServiceWorker scope URL. %2$S is an error string.\n>  PushMessageDecryptionFailure=The ServiceWorker for scope \u2018%1$S\u2019 encountered an error decrypting a push message: \u2018%2$S\u2019. For help with encryption, please see https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API#Encryption\n>  # LOCALIZATION NOTE: %1$S is the type of a DOM event. 'passive' is a literal parameter from the DOM spec.\n>  PreventDefaultFromPassiveListenerWarning=Ignoring \u2018preventDefault()\u2019 call on event of type \u2018%1$S\u2019 from a listener registered as \u2018passive\u2019.\n> -# LOCALIZATION NOTE: %1$S is the unrecongnized property string.\n> +# LOCALIZATION NOTE: %1S is the unanimatable paced propety.\n\ns/propety/property/\n\n::: dom/locales/en-US/chrome/dom/dom.properties:229\n(Diff revisions 4 - 5)\n> -# LOCALIZATION NOTE: %1$S is the unrecongnized property string.\n> -UnrecognizedPacedProperty=The paced property '%1$S' is unrecognized.\n> +# LOCALIZATION NOTE: %1S is the unanimatable paced propety.\n> +UnanimatablePacedProperty=Paced property \u2018%1S\u2019 is not an animatable property.\n\nShould %1S be %1$S ?", "author": "bbirtles@mozilla.com", "id": 11447437, "time": "2016-05-30T02:52:17Z"}, {"text": "I've given r+ to part 3 and part 6 but there was no corresponding review request in MozReview so I think if you want to be able to use Autoland, you'll have to request review through MozReview for those (otherwise it will probably not let you because it thinks the patches haven't been reviewed).", "author": "bbirtles@mozilla.com", "id": 11447440, "time": "2016-05-30T02:55:13Z"}, {"text": "https://reviewboard.mozilla.org/r/51511/#review52786\n\nOK. I will add more tests for the parser in part 10.\n\n> So isalpha is locale dependent.[1] Maybe it doesn't matter in this case but would it be easier to call this IsLetter and just check if |aCh| is between 0x41 <= aCh <= 0x5A and 0x61 <= aCh <= 0x7A ?\n> \n> [1] http://en.cppreference.com/w/cpp/string/byte/isalpha\n\nOK. We can us IsLetter() and check the code point range directly.\n\n> Nit: Do we need the () around aFirst == '\\\\' ? Likewise elsewhere in this file.\n\nActually, no. I can remove '()'.\n\n> Perhaps call this IsIdentStart?\n\nSure\n\n> Should %1S be %1$S ?\n\nI will update this to use %1$S.", "author": "boris.chiou@gmail.com", "id": 11447450, "time": "2016-05-30T02:59:13Z"}, {"text": "(In reply to Brian Birtles (:birtles, high review load) from comment #94)\n> You can use keyframeA.get()->mOffset I think, but that's a bit awkward.\n> \n> Jeff, is there any reason RangedPtr doesn't provide operator-> ?\n\nHi, Jeff\n\nI file bug 1276550 and cc you.", "author": "boris.chiou@gmail.com", "id": 11447479, "time": "2016-05-30T03:29:32Z"}, {"text": "(In reply to Brian Birtles (:birtles, high review load) from comment #174)\n> I've given r+ to part 3 and part 6 but there was no corresponding review\n> request in MozReview so I think if you want to be able to use Autoland,\n> you'll have to request review through MozReview for those (otherwise it will\n> probably not let you because it thinks the patches haven't been reviewed).\n\nThanks, Brian. I resend the review requests for p3 and p6.", "author": "boris.chiou@gmail.com", "id": 11447481, "time": "2016-05-30T03:31:48Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nhttps://reviewboard.mozilla.org/r/51549/#review52794\n\n::: dom/animation/KeyframeUtils.cpp:461\n(Diff revision 5)\n>  {\n>    if (aKeyframes.IsEmpty()) {\n>      return;\n>    }\n>  \n> -  // If the first or last keyframes have an unspecified offset,\n> +  // If the first keyframes have an unspecified offset, fill it in with 0%.\n\nNit: s/have/has/", "author": "bbirtles@mozilla.com", "id": 11447528, "time": "2016-05-30T04:33:48Z"}, {"text": "https://reviewboard.mozilla.org/r/52139/#review52800\n\nI guess this isn't ready for review since the review flag hasn't been set, but at a glance:\n* I think we need more tests for parsing behavior (different invalid escape sequences, leading space, etc.)\n* We need to test a non-animatable shorthand (e.g. 'animation')\n* Most of the tests that cover the actual spacing operation should go in the animation-model test, not in the interfaces test. That said I didn't look at those tests too closely so I might be missing something.", "author": "bbirtles@mozilla.com", "id": 11447532, "time": "2016-05-30T04:37:23Z"}, {"text": "(In reply to Brian Birtles (:birtles, high review load) from comment #171)\n> b) Make mozilla::Range easier to use so that it accepts two RangedPtr\n> arguments and does the necessary order and range checking. Again, we'd\n> probably need to add API to RangedPtr so that we could assert that the end\n> iterator is within the range of the first iterator.\n> \n> I'm slightly leaning towards (b) I think. I think if we did that, this patch\n> could become simpler and easier to read.\n\nOK. Let's try (b). I will file a bug to add a new constructor which accepts two RangedPtr<T> arguments.", "author": "boris.chiou@gmail.com", "id": 11447561, "time": "2016-05-30T05:13:42Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review52772\n\n> Is the +1 here correct? If not, we should try to write a test that will fail if we leave the + 1 here.\n\nI think we have to '+1'. Range<T>::mEnd is excluded, so 'keyframeB - pacedB + 1' makes Range<T>::mEnd be the element after keyframeB. Therefore, if we add a new constructor for Range<T>, this line may be changed to \"Range<Keyframe>(pacedB.get(), (keyframeB + 1).get());\". We still have to add '+1' in this case.\n\n> At first I thought we should factor this out into a separate method but actually I wonder if we can actually calculate all the distances in GetPacedPropertyKeyframeValues?\n> \n> If we do that, I don't think we even need to return the StyleAnimationValues? All we really need is to know all the computed distances and which keyframes are paceable, right?\n> \n> For example, could we simply return a parallel array of doubles representing the cumulative distances across the whole set of keyframes? For non-paceable keyframes we could set the cumulative distance to kNotPaceable = -1. Then we'd still pass a range within that cumulative distances array to PaceRange and PaceRange would need to get the cumulative distance of the first element in that range and subtract that from other cumulative distances in order to get a relative distance.\n> \n> I think if we do that, this becomes a lot simpler?\n\nYes, all we really need is to know all the computed distances and which keyframes are paceable. Let me try this way. Thanks.", "author": "boris.chiou@gmail.com", "id": 11447631, "time": "2016-05-30T06:54:56Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review52772\n\n> I think we have to '+1'. Range<T>::mEnd is excluded, so 'keyframeB - pacedB + 1' makes Range<T>::mEnd be the element after keyframeB. Therefore, if we add a new constructor for Range<T>, this line may be changed to \"Range<Keyframe>(pacedB.get(), (keyframeB + 1).get());\". We still have to add '+1' in this case.\n\n> 'keyframeB - pacedB + 1' makes Range<T>::mEnd be the element after keyframeB\n\nBut I thought we *don't* want to include keyframeB in the range to update, i.e. keyframeB *is* the end iterator. The comment says we want to adjust the range \"[Paced B, keyframe B)\" i.e. Paced B <= x < keyframe B\n\nIf we add a new constructor for Range<T> it should take a RangedPtr so that we write \"Range<Keyframe>(pacedB, keyframeB)\" (or Range<Keyframe>(pacedB, keyframeB + 1) if we *do* want to include keyframeB in the range).", "author": "bbirtles@mozilla.com", "id": 11447657, "time": "2016-05-30T07:11:04Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review52772\n\n> > 'keyframeB - pacedB + 1' makes Range<T>::mEnd be the element after keyframeB\n> \n> But I thought we *don't* want to include keyframeB in the range to update, i.e. keyframeB *is* the end iterator. The comment says we want to adjust the range \"[Paced B, keyframe B)\" i.e. Paced B <= x < keyframe B\n> \n> If we add a new constructor for Range<T> it should take a RangedPtr so that we write \"Range<Keyframe>(pacedB, keyframeB)\" (or Range<Keyframe>(pacedB, keyframeB + 1) if we *do* want to include keyframeB in the range).\n\nOh yes. You're right. We don't have to apply spacing to keyframeB here. :)", "author": "boris.chiou@gmail.com", "id": 11447664, "time": "2016-05-30T07:17:21Z"}, {"text": "(In reply to Brian Birtles (:birtles) from comment #179)\n> * Most of the tests that cover the actual spacing operation should go in the\n> animation-model test, not in the interfaces test. That said I didn't look at\n> those tests too closely so I might be missing something.\n\nDoes this mean that any combination of paceable/nonpaceable keyframes (with shorthand or longhand paced property) _without_ specific offsets should be put into interfaces test? And other combinations _with_ specific offsets are in animation-model.\n\nIf yes, I will follow this rule. Thanks.", "author": "boris.chiou@gmail.com", "id": 11454141, "time": "2016-06-01T10:49:19Z"}, {"text": "Comment on attachment 8752104\nBug 1244590 - Part 1: Introduce KeyframeEffectParams.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51507/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11454170, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752105\nBug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51509/diff/3-4/", "author": "boris.chiou@gmail.com", "id": 11454171, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51511/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11454172, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51549/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11454173, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51505/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11454174, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8755339\nBug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54414/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11454175, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/7-8/", "author": "boris.chiou@gmail.com", "id": 11454176, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/7-8/", "author": "boris.chiou@gmail.com", "id": 11454177, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/7-8/", "author": "boris.chiou@gmail.com", "id": 11454178, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/7-8/", "author": "boris.chiou@gmail.com", "id": 11454179, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/7-8/", "author": "boris.chiou@gmail.com", "id": 11454180, "time": "2016-06-01T11:11:37Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/8-9/", "author": "boris.chiou@gmail.com", "id": 11454200, "time": "2016-06-01T11:19:31Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/8-9/", "author": "boris.chiou@gmail.com", "id": 11454201, "time": "2016-06-01T11:19:31Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/8-9/", "author": "boris.chiou@gmail.com", "id": 11454202, "time": "2016-06-01T11:19:31Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/8-9/", "author": "boris.chiou@gmail.com", "id": 11454203, "time": "2016-06-01T11:19:31Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/8-9/", "author": "boris.chiou@gmail.com", "id": 11454204, "time": "2016-06-01T11:19:31Z"}, {"text": "(In reply to Boris Chiou [:boris] (away 6/6~6/10) from comment #184)\n> (In reply to Brian Birtles (:birtles) from comment #179)\n> > * Most of the tests that cover the actual spacing operation should go in the\n> > animation-model test, not in the interfaces test. That said I didn't look at\n> > those tests too closely so I might be missing something.\n> \n> Does this mean that any combination of paceable/nonpaceable keyframes (with\n> shorthand or longhand paced property) _without_ specific offsets should be\n> put into interfaces test? And other combinations _with_ specific offsets are\n> in animation-model.\n> \n> If yes, I will follow this rule. Thanks.\n\nThe rule is just to try to match the spec. So, any behavior defined by the \"Applying spacing to keyframes\" procedure in the spec[1], should go in a test that roughly matches the spec's hierarchy, e.g. animation-model/keyframe-effects/spacing-keyframes.html.\n\nIf you're testing things like parse errors, then that's defined alongside the spacing member of the KeyframeEffect interface[2] so it should go in interfaces/KeyframeEffect/spacing.html or something like that.\n\nSometimes it's not entirely clear where to put things but mostly we should try to follow the spec's hierarchy but without adding too many levels of nesting (see [3]).\n\n[1] https://w3c.github.io/web-animations/#applying-spacing-to-keyframes\n[2] https://w3c.github.io/web-animations/#dom-keyframeeffectreadonly-spacing\n[3] https://github.com/w3c/web-platform-tests/blob/master/web-animations/README.md", "author": "bbirtles@mozilla.com", "id": 11456485, "time": "2016-06-01T23:30:54Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nhttps://reviewboard.mozilla.org/r/51809/#review53814\n\nThis is good but I'd like to check once more after some of the suggested simplifications have been made (and with the question about ComputeDistance failing for shorthands answered).\n\n::: dom/animation/KeyframeUtils.cpp:404\n(Diff revision 9)\n> +static void\n> +PaceRange(const Range<Keyframe>& aKeyframes,\n> +          const Range<double>& aCumulativeDist);\n> +\n> +static nsTArray<double>\n> +GetPacedCumulativeDistance(const nsTArray<ComputedKeyframeValues>& aValues,\n\nnit: This should probably be \"Distances\" (plural) since it is returning an array. Perhaps GetCumulativeDistances would be enough?\n\n::: dom/animation/KeyframeUtils.cpp:533\n(Diff revision 9)\n> +      while (pacedB > keyframeA &&\n> +             cumulativeDist[pacedB - begin] == kNotPaceable) {\n> +        --pacedB;\n> +      }\n> +      // As spec says, if there is no paceable keyframe\n> +      // in [keyframe A, keyframe B], we let Paced A and Paced refer to\n\nNit: Paced A and Paced B\n\n::: dom/animation/KeyframeUtils.cpp:538\n(Diff revision 9)\n> +      // in [keyframe A, keyframe B], we let Paced A and Paced refer to\n> +      // keyframe B.\n> +      if (pacedA > pacedB) {\n> +        pacedA = pacedB = keyframeB;\n> +      }\n> +      // b) Apply evenly distributing offsets in (keyframe A, Paced A] and\n\nNit: b) Apply distribute spacing in ...\n\n::: dom/animation/KeyframeUtils.cpp:544\n(Diff revision 9)\n> +      //    [Paced B, keyframe B).\n> +      DistributeRange(Range<Keyframe>(keyframeA, keyframeB + 1),\n> +                      Range<Keyframe>(keyframeA + 1, pacedA + 1));\n> +      DistributeRange(Range<Keyframe>(keyframeA, keyframeB + 1),\n> +                      Range<Keyframe>(pacedB, keyframeB));\n> +      // c) Apply paced offsets in (Paced A, Paced B).\n\nWe should probably add a note explaining why we pass the range [Paced A, Paced B] when the comment says (Paced A, Paced B).\n\ne.g.\n\nApply paced offsets to each paceable keyframe in (Paced A, Paced B). We pass the range [Paced A, Paced B] since PaceRange needs the end points of the range in order to calculate the correct offset.\n\n::: dom/animation/KeyframeUtils.cpp:546\n(Diff revision 9)\n> +                Range<double>(&cumulativeDist[pacedA - begin],\n> +                                              pacedB - pacedA + 1));\n\nNit: Indentation here. I think \"pacedB - paced A + 1\" should sit under &cumulativeDist...\n\n::: dom/animation/KeyframeUtils.cpp:1336\n(Diff revision 9)\n> - * Evenly distribute the computed offsets in (A, B). We should pass the\n> - * range keyframes in [A, B] and use A, B to calculate computed offsets in\n> - * (A, B).\n> + * Evenly distribute the computed offsets in (A, B).\n> + * We pass the range keyframes in [A, B] and use A, B to calculate distributing\n> + * computed offsets in (A, B).\n\nI'm not sure this comment is correct any longer. It should mention the two different ranges we pass in.\n\n::: dom/animation/KeyframeUtils.cpp:1348\n(Diff revision 9)\n> +  MOZ_ASSERT(aRangeToAdjust.start() >= aSpacingRange.start() &&\n> +             aRangeToAdjust.end() <= aSpacingRange.end(),\n> +             \"Out of range\");\n\nIs it ok for aRangeToAdjust.start() == aSpacingRange.start()?\n\n::: dom/animation/KeyframeUtils.cpp:1354\n(Diff revision 9)\n> +  const size_t startIdx = aRangeToAdjust.start() - aSpacingRange.start();\n> +  const size_t endIdx = aRangeToAdjust.end() - aSpacingRange.start();\n> +  for (size_t i = startIdx; i < endIdx; ++i) {\n> +    aSpacingRange[i].mComputedOffset = startOffset + double(i) / n * diffOffset;\n> +  }\n\nWould something like the following be simpler:\n\n  for (auto iter = aRangeToAdjust.start();\n       iter != aRangeToAdjust.end();\n       ++iter) {\n    size_t index = iter - aSpacingRange.start();\n    iter->mComputedOffset = startOffset + double(index) / n * diffOffset;\n  }\n\n::: dom/animation/KeyframeUtils.cpp:1362\n(Diff revision 9)\n> + * Overloading for DistributeRange if we want to apply distribute spacing\n> + * to all keyframes.\n\nOverload of DistributeRange to apply distribute spacing to all keyframes in between the endpoints of the given range.\n\n::: dom/animation/KeyframeUtils.cpp:1378\n(Diff revision 9)\n> +                  Range<Keyframe>(aSpacingRange.start() + 1,\n> +                                  aSpacingRange.end() - 1));\n> +}\n> +\n> +/**\n> + * Apply paced computed offsets in (Paced A, Paced B).\n\nNit: Apply paced spacing to all paceable keyframes in between the endpoints of the given range.\n\n::: dom/animation/KeyframeUtils.cpp:1394\n(Diff revision 9)\n> -  const size_t n = aKeyframes.length() - 1;\n> -  const double startOffset = aKeyframes[0].mComputedOffset;\n> +  MOZ_ASSERT(aKeyframes.length() == aCumulativeDist.length(),\n> +             \"Range length mismatch\");\n\nI think we also need to assert that aKeyframes.start()->mComputedOffset != Keyframe::kComputedOffsetNotSet? And likewise for end() - 1?\n\n::: dom/animation/KeyframeUtils.cpp:1403\n(Diff revision 9)\n> +  const size_t pacedA = 0;\n> +  const size_t pacedB = len - 1;\n> +  MOZ_ASSERT(aCumulativeDist[pacedA] != kNotPaceable &&\n> +               aCumulativeDist[pacedB] != kNotPaceable,\n> +             \"Both Paced A and Paced B should be paceable.\");\n> +\n> +  // If total distance is 0.0, we should fall it back to distribute spacing, so\n> +  // just return.\n> +  if (aCumulativeDist[pacedA] == aCumulativeDist[pacedB]) {\n> +    return;\n> +  }\n> +\n> +  // Apply computed offset.\n> +  const double offsetA = aKeyframes[pacedA].mComputedOffset;\n> +  const double diffOffset = aKeyframes[pacedB].mComputedOffset - offsetA;\n> +  const double previousCumulativeDist = aCumulativeDist[pacedA];\n> +  const double totalDist = aCumulativeDist[pacedB] - previousCumulativeDist;\n> +  for (size_t i = pacedA + 1; i < pacedB; ++i) {\n> +    if (aCumulativeDist[i] == kNotPaceable) {\n> +      continue;\n> +    }\n> +    double currDist = aCumulativeDist[i] - previousCumulativeDist;\n> +    aKeyframes[i].mComputedOffset = offsetA + diffOffset * currDist / totalDist;\n> +  }\n\nI think this could be more simple if we used iterators. Something like:\n\n  const double distA = *(aCumulativeDist.start());\n  const double distB = *(aCumulativeDist.end() - 1);\n  MOZ_ASSERT(*distA != kNotPaceable && distB != kNotPaceable,\n             \"Both Paced A and Paced B should be paceable\");\n\n  // If the total distance is zero, we should fall back to distribute spacing.\n  // The caller will fill-in any keyframes without a computed offset using\n  // distribute spacing so we can just return here.\n  if (distA == distB) {\n    return;\n  }\n\n  const RangedPtr<Keyframe> pacedA = aKeyframes.start();\n  const RangedPtr<Keyframe> pacedB = aKeyframes.end() - 1;\n\n  const double offsetA     = pacedA->mComputedOffset;\n  const double diffOffset  = pacedB->mComputedOffset - offsetA;\n  const double initialDist = distA;\n  const double totalDist   = distB - initialDist;\n\n  for (auto iter = pacedA + 1; iter != pacedB; ++iter) {\n    size_t k = iter - aKeyframes.start();\n    if (aCumulativeDist[k] == kNotPaceable) {\n      continue;\n    }\n\n    double dist = aCumulativeDist[k] - initialDist;\n    iter->mComputedOffset = offsetA + diffOffset * dist / totalDist;\n  }\n\n::: dom/animation/KeyframeUtils.cpp:1432\n(Diff revision 9)\n> +}\n> +\n> +/**\n> + * Get cumulative distances for the paced property.\n> + *\n> + * @param aValues The computed values got by GetComputedKeyframeValues.\n\ns/got by/returned by/\n\n::: dom/animation/KeyframeUtils.cpp:1443\n(Diff revision 9)\n> +  size_t propertyCount = 0;\n> +  nsCSSPropertySet propSet;\n> +  bool pacedIsShorthand = nsCSSProps::IsShorthand(aPacedProperty);\n\nI think this would be a lot easier to follow if we changed the naming.\n\nFor example,\n\npropertyCount -> pacedPropertyCount\npropSet -> pacedPropertySet\npacedIsShorthand -> pacedPropertyIsShorthand (or even just 'isShorthand' might be enough)\n\n::: dom/animation/KeyframeUtils.cpp:1460\n(Diff revision 9)\n> +  }\n> +\n> +  // b) Search each component (shorthand) or the longhand property, and\n> +  //    calculate the cumulative distances of paceable keyframe pairs.\n> +  const size_t len = aValues.Length();\n> +  nsTArray<double> cumulativeDist(len);\n\nNit: Can we call this cumulativeDistances?\n\n(In general it's nice to avoid abbreviations unless they're common or the word is really long.)\n\n::: dom/animation/KeyframeUtils.cpp:1467\n(Diff revision 9)\n> +  // the length of |aValues|.\n> +  cumulativeDist.SetLength(len);\n> +  ComputedKeyframeValues prevPacedValues;\n> +  size_t preIdx = 0;\n> +  for (size_t i = 0; i < len; ++i) {\n> +    // 1. Find computed values of the paced property.\n\nMaybe we don't need the numbering here? We only have two numbers?\n\n::: dom/animation/KeyframeUtils.cpp:1468\n(Diff revision 9)\n> +  cumulativeDist.SetLength(len);\n> +  ComputedKeyframeValues prevPacedValues;\n> +  size_t preIdx = 0;\n> +  for (size_t i = 0; i < len; ++i) {\n> +    // 1. Find computed values of the paced property.\n> +    ComputedKeyframeValues currPacedValues;\n\nCan we call this currentPacedValues (or just pacedValues which should contrast enough to prevPacedValues?)\n\n::: dom/animation/KeyframeUtils.cpp:1475\n(Diff revision 9)\n> +      if (propSet.HasProperty(pair.mProperty)) {\n> +        currPacedValues.AppendElement(pair);\n> +      }\n> +    }\n> +\n> +    // 2. Calculate cumulative distance.\n\nThis comment doesn't describe the code immediately following it so it's a bit hard to read. Perhaps just change the comment to \"Check we have values for all the paceable longhand components\" ?\n\n::: dom/animation/KeyframeUtils.cpp:1483\n(Diff revision 9)\n> +      cumulativeDist[i] = kNotPaceable;\n> +      continue;\n> +    }\n> +\n> +    if (prevPacedValues.IsEmpty()) {\n> +      // This is the first paceable keyframe and its cumulative distance is 0.0.\n\nNit: s/and/so/\n\n::: dom/animation/KeyframeUtils.cpp:1488\n(Diff revision 9)\n> +        for (size_t subIdx = 0; subIdx < propertyCount; ++subIdx) {\n> +          nsCSSProperty subProperty = prevPacedValues[subIdx].mProperty;\n\nI'm not sure if the 'subIdx' / 'subProp' naming is very clear? Perhaps 'propIdx' and 'prop' would be ok?\n\nAlso, we should add a comment to explain what we're doing. Something about applying the square distance formula (or whatever the correct term is) to each of the longhand components.\n\n::: dom/animation/KeyframeUtils.cpp:1493\n(Diff revision 9)\n> +        for (size_t subIdx = 0; subIdx < propertyCount; ++subIdx) {\n> +          nsCSSProperty subProperty = prevPacedValues[subIdx].mProperty;\n> +          MOZ_ASSERT(currPacedValues[subIdx].mProperty == subProperty,\n> +                     \"subProperty mismatch\");\n> +\n> +          // If ComputeDistance() is failed, componentDist is still 0.0, so\n\nNit: If ComputeDistance() fails, componentDist will still be zero...\n\n::: dom/animation/KeyframeUtils.cpp:1494\n(Diff revision 9)\n> +          // there is distance for this component. I believe if one component\n> +          // has no distance, neither do others, so the final dist is still 0.0.\n\nWhy do you believe this? I'm not sure I understand.\n\nDoes it matter if one component fails?\n\n::: dom/animation/KeyframeUtils.cpp:1501\n(Diff revision 9)\n> +          double componentDist = 0.0;\n> +          StyleAnimationValue::ComputeDistance(subProperty,\n> +                                               prevPacedValues[subIdx].mValue,\n> +                                               currPacedValues[subIdx].mValue,\n> +                                               componentDist);\n> +          // FIXME: Any way to avoid overflow?\n\nI don't think we need to worry about this. Do you have any reason to expect we will reach this situation often?\n\n::: dom/animation/KeyframeUtils.cpp:1507\n(Diff revision 9)\n> +        // If ComputeDistance() is failed, dist is still 0.0, so there is no\n> +        // distance between this keyframe pair.\n\nNit: If ComputeDistance() fails, |dist| will remain zero so there will be no distance between the previous paced value and this value.", "author": "bbirtles@mozilla.com", "id": 11456978, "time": "2016-06-02T04:01:16Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review53814\n\n> Is it ok for aRangeToAdjust.start() == aSpacingRange.start()?\n\nIf aRangeToAdjust.start() == aSpacingRange.start(), the index of the first keyframe is 0, so we just copy its mComputedOffset to itself according to the formula[1]. I think it is ok. However, I can remove the equality from the assertion if we want to avoid this redundant calculation and copy.\n\nBTW, now we only have one case for this: if Keyframe A is the only paceable keyframe, i.e. Paced A == Paced B == Keyframe A, aRangeToAdjust.start() will be equal to aSpacingRange.start().\n\n[1] aSpacingRange[0].mComputedOffset = startOffset + 0 / n * diffOffset; // startOffset is equal to aSpacingRange[0].mComputedOffset.\n\n> I think we also need to assert that aKeyframes.start()->mComputedOffset != Keyframe::kComputedOffsetNotSet? And likewise for end() - 1?\n\nOh Yes, I should also add this assertion.\n\n> I think this could be more simple if we used iterators. Something like:\n> \n>   const double distA = *(aCumulativeDist.start());\n>   const double distB = *(aCumulativeDist.end() - 1);\n>   MOZ_ASSERT(*distA != kNotPaceable && distB != kNotPaceable,\n>              \"Both Paced A and Paced B should be paceable\");\n> \n>   // If the total distance is zero, we should fall back to distribute spacing.\n>   // The caller will fill-in any keyframes without a computed offset using\n>   // distribute spacing so we can just return here.\n>   if (distA == distB) {\n>     return;\n>   }\n> \n>   const RangedPtr<Keyframe> pacedA = aKeyframes.start();\n>   const RangedPtr<Keyframe> pacedB = aKeyframes.end() - 1;\n> \n>   const double offsetA     = pacedA->mComputedOffset;\n>   const double diffOffset  = pacedB->mComputedOffset - offsetA;\n>   const double initialDist = distA;\n>   const double totalDist   = distB - initialDist;\n> \n>   for (auto iter = pacedA + 1; iter != pacedB; ++iter) {\n>     size_t k = iter - aKeyframes.start();\n>     if (aCumulativeDist[k] == kNotPaceable) {\n>       continue;\n>     }\n> \n>     double dist = aCumulativeDist[k] - initialDist;\n>     iter->mComputedOffset = offsetA + diffOffset * dist / totalDist;\n>   }\n\nThanks for your suggestion, Brian. I will try to use iterators, just as DistributeRange does.\n\n> I think this would be a lot easier to follow if we changed the naming.\n> \n> For example,\n> \n> propertyCount -> pacedPropertyCount\n> propSet -> pacedPropertySet\n> pacedIsShorthand -> pacedPropertyIsShorthand (or even just 'isShorthand' might be enough)\n\nThanks, Brian. They look great.\n\n> Maybe we don't need the numbering here? We only have two numbers?\n\nOK. I will remove them.\n\n> Why do you believe this? I'm not sure I understand.\n> \n> Does it matter if one component fails?\n\nComputeDistance() returns false if\n1. We haven't implement for this case.\n2. Ther is no common unit.\n3. Other reasons\n\nSo I though we can treat them as 0.0, and continue to calculate other parts to get a distance. However, after thinking more, I think I'm wroing. This may cause problems when this distance is added to other distances (whose components are all calculated correctly). Maybe we can set this keyframe as not paceable, so it will be falled back to distribute spacing?\n\n> I don't think we need to worry about this. Do you have any reason to expect we will reach this situation often?\n\nNo often, I think. Only if the user wants to do something unusual. I will remove this comment.", "author": "boris.chiou@gmail.com", "id": 11457335, "time": "2016-06-02T08:33:14Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review53814\n\n> Thanks for your suggestion, Brian. I will try to use iterators, just as DistributeRange does.\n\nBTW, I found RangedPtr<T>::operator+() is not a const method, so we cannot add a const RangedPtr<T> with an integer, so I will remove the constness from pacedA.\n\n> ComputeDistance() returns false if\n> 1. We haven't implement for this case.\n> 2. Ther is no common unit.\n> 3. Other reasons\n> \n> So I though we can treat them as 0.0, and continue to calculate other parts to get a distance. However, after thinking more, I think I'm wroing. This may cause problems when this distance is added to other distances (whose components are all calculated correctly). Maybe we can set this keyframe as not paceable, so it will be falled back to distribute spacing?\n\nOr just treat the square root distance as zero.", "author": "boris.chiou@gmail.com", "id": 11457680, "time": "2016-06-02T10:05:27Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/9-10/", "author": "boris.chiou@gmail.com", "id": 11457784, "time": "2016-06-02T10:53:02Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/9-10/", "author": "boris.chiou@gmail.com", "id": 11457785, "time": "2016-06-02T10:53:02Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/9-10/", "author": "boris.chiou@gmail.com", "id": 11457786, "time": "2016-06-02T10:53:02Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/9-10/", "author": "boris.chiou@gmail.com", "id": 11457787, "time": "2016-06-02T10:53:02Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/9-10/", "author": "boris.chiou@gmail.com", "id": 11457788, "time": "2016-06-02T10:53:02Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nhttps://reviewboard.mozilla.org/r/51809/#review54208\n\nr=me with the following comments addressed.\n\nLet me know what you think we should do when there is a component where we can't apply spacing. My hunch is we should just ignore it, but let me know what you think.\n\nThanks for all your work on this!\n\n::: dom/animation/KeyframeUtils.cpp:1432\n(Diff revisions 8 - 10)\n>    // Apply computed offset.\n> -  const double offsetA = aKeyframes[pacedA].mComputedOffset;\n> -  const double diffOffset = aKeyframes[pacedB].mComputedOffset - offsetA;\n> -  const double previousCumulativeDist = aCumulativeDist[pacedA];\n> -  const double totalDist = aCumulativeDist[pacedB] - previousCumulativeDist;\n> -  for (size_t i = pacedA + 1; i < pacedB; ++i) {\n> +  const double offsetA     = pacedA->mComputedOffset;\n> +  const double diffOffset  = pacedB->mComputedOffset - offsetA;\n> +  const double initialDist = distA;\n> +  const double totalDist   = distB - initialDist;\n> +  for (auto iter = RangedPtr<Keyframe>(pacedA) + 1; iter != pacedB; ++iter) {\n\n> BTW, I found RangedPtr<T>::operator+() is not a const method, so we cannot\n> add a const RangedPtr<T> with an integer, so I will remove the constness\n> from pacedA.\n\nCan you please file a bug for this? I'm pretty sure that should be const. Thanks.\n\nAnd then can we add a comment here referring to that bug number to explain why we're wrapping the pointer like this.\n\n::: dom/animation/KeyframeUtils.cpp:1515\n(Diff revision 10)\n> +            // If we can not calculate one or more components, it may cause\n> +            // problems when adding it to other cumulative distances, so set\n> +            // |dist| to be zero directly.\n> +            dist = 0.0;\n> +            break;\n\nCan you think of an example where this would be a problem?\n\nFor example, if we have:\n\n  some-shorthand-prop: 2px 3px outside\n  some-shorthand-prop: 5px 10px inside\n\nAnd we discover we can't compute a distance between 'outside' and 'inside', it seems like it might still be ok to just use the distances we can calculate?\n\nWhat do you think?\n\n(If you agree, we could just use 'continue' here I guess. Or, better still just change the check to \"if (StyleAnimationValue::ComputeDistance) ... { dist += componentDistance * componentDistance; }\")", "author": "bbirtles@mozilla.com", "id": 11460123, "time": "2016-06-03T00:39:52Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review54208\n\n> > BTW, I found RangedPtr<T>::operator+() is not a const method, so we cannot\n> > add a const RangedPtr<T> with an integer, so I will remove the constness\n> > from pacedA.\n> \n> Can you please file a bug for this? I'm pretty sure that should be const. Thanks.\n> \n> And then can we add a comment here referring to that bug number to explain why we're wrapping the pointer like this.\n\nOK. I file Bug 1277740, I will add a comment for this. Thanks.\n\n> Can you think of an example where this would be a problem?\n> \n> For example, if we have:\n> \n>   some-shorthand-prop: 2px 3px outside\n>   some-shorthand-prop: 5px 10px inside\n> \n> And we discover we can't compute a distance between 'outside' and 'inside', it seems like it might still be ok to just use the distances we can calculate?\n> \n> What do you think?\n> \n> (If you agree, we could just use 'continue' here I guess. Or, better still just change the check to \"if (StyleAnimationValue::ComputeDistance) ... { dist += componentDistance * componentDistance; }\")\n\nYes, I agree. This is definitely a good case to continue the loop. The problem I mentioned is not easy to happen, so let's continue the loop if we can't compute a distance. I will update this soon. Thanks for your review. :)", "author": "boris.chiou@gmail.com", "id": 11460305, "time": "2016-06-03T03:07:25Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/10-11/", "author": "boris.chiou@gmail.com", "id": 11460369, "time": "2016-06-03T03:46:14Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/10-11/", "author": "boris.chiou@gmail.com", "id": 11460370, "time": "2016-06-03T03:46:14Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/10-11/", "author": "boris.chiou@gmail.com", "id": 11460371, "time": "2016-06-03T03:46:14Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/10-11/", "author": "boris.chiou@gmail.com", "id": 11460372, "time": "2016-06-03T03:46:14Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/10-11/", "author": "boris.chiou@gmail.com", "id": 11460373, "time": "2016-06-03T03:46:14Z"}, {"text": "https://reviewboard.mozilla.org/r/51809/#review54208\n\n> Yes, I agree. This is definitely a good case to continue the loop. The problem I mentioned is not easy to happen, so let's continue the loop if we can't compute a distance. I will update this soon. Thanks for your review. :)\n\nThe problem I metioned is just like:\n [1] some-shorthand-prop: 2px 3px calc(2px + 3%) // or other values which we accept but ComputeDistance cannot handle.\n [2] some-shorthand-prop: 5px 10px 2px\n [3] some-shorthand-prop: 2px 3px 4px\n\nIf the 3rd component cannot be calculated by ComptueDistance() for the keyframe pair [1] and [2], the total cumulative distance is not correct I think. However, this should be fixed in ComputeDistance(), not in the algorithm of applying paced spacing. Therefore, I agree your thought. (Or maybe I'm wrong because it is impossible to happen).", "author": "boris.chiou@gmail.com", "id": 11460764, "time": "2016-06-03T08:58:32Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nhttps://reviewboard.mozilla.org/r/52139/#review54668\n\nThis is excellent work. r=me with comments addressed.\n\nThe only other test I'm not sure if we added was when specifying a paced property that is not provided on *any* of the keyframes. Do we have that?\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:97\n(Diff revision 11)\n> +  var cumDist = [0, 0, 100, 150];\n> +  assert_equals(frames[1].computedOffset, cumDist[1] / cumDist[3],\n> +                '2nd frame offset');\n> +  assert_equals(frames[2].computedOffset, cumDist[2] / cumDist[3],\n> +                '3rd frame offset');\n> +}, 'Test paced spacing if some paced property value are not changed');\n\nPerhaps s/value are not changes/values are equal/ would be easier to understand?\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:259\n(Diff revision 11)\n> +  dist.reduce(function(prev, curr, i) { return cumDist[i] = prev + curr; }, 0);\n> +  assert_approx_equals(frames[1].computedOffset, cumDist[1] / cumDist[3],\n> +                       0.0001, '2nd frame offset');\n> +  assert_approx_equals(frames[2].computedOffset, cumDist[2] / cumDist[3],\n> +                       0.0001, '3rd frame offset');\n> +}, 'Test paced spacing for using shorthand property');\n\nTest paced spacing using shorthand property where only the longhand components are specified\n\n::: testing/web-platform/tests/web-animations/animation-model/keyframe-effects/spacing-keyframes.html:314\n(Diff revision 11)\n> +                'first paceable keyframe from a non-null offset keyframe');\n> +}, 'Test paced spacing only for keyframes specifying all some components, ' +\n> +   'and falling back to distribute spacing for the reset with some specific ' +\n> +   'offsets');\n> +\n> +// FIXME: Test for mixing percent and pixel values.\n\nI think this got split off into a separate bug. Perhaps we should put the bug number here?", "author": "bbirtles@mozilla.com", "id": 11464925, "time": "2016-06-06T04:27:20Z"}, {"text": "https://reviewboard.mozilla.org/r/52139/#review54668\n\nThanks, Brian. Your review is very helpful and you addressed many things I didn't notice.\n\n> The only other test I'm not sure if we added was when specifying a paced property that is not provided on *any* of the keyframes.\n\nI think the anwser is no. I will add one more test in spacing-keyframes.html:\ne.g.\ntest(function(t) {\n  var anim = createDiv(t).animate(null,\n                                  { duration: 100 * MS_PER_SEC,\n                                    spacing: 'paced(margin-left)' });\n\n  var frames = anim.effect.getKeyframes();\n  assert_equals(frames.length, 0, \"empty keyframe list\");\n}, 'Test paced spacing without any keyframe');\n\n> I think this got split off into a separate bug. Perhaps we should put the bug number here?\n\nSure. I will add Bug 1276193 in the comment.", "author": "boris.chiou@gmail.com", "id": 11483301, "time": "2016-06-14T15:18:09Z"}, {"text": "I would like to use other constructors of Range<> (i.e. Range(T* aPtr, size_t aLength)) in part 7 and add Bug 1276573 in the comment, so we can merge this bug ASAP. After landing Bug 1276573, I will file another bug to use the new constructor. Thanks.", "author": "boris.chiou@gmail.com", "id": 11506594, "time": "2016-06-28T03:20:04Z"}, {"text": "Comment on attachment 8752104\nBug 1244590 - Part 1: Introduce KeyframeEffectParams.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51507/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11506822, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752105\nBug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51509/diff/4-5/", "author": "boris.chiou@gmail.com", "id": 11506823, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752106\nBug 1244590 - Part 3: Parse spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51511/diff/6-7/", "author": "boris.chiou@gmail.com", "id": 11506824, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752107\nBug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51549/diff/6-7/", "author": "boris.chiou@gmail.com", "id": 11506825, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752108\nBug 1244590 - Part 5: Make the default value of computed offsets be -1.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51505/diff/6-7/", "author": "boris.chiou@gmail.com", "id": 11506826, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8755339\nBug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/54414/diff/5-6/", "author": "boris.chiou@gmail.com", "id": 11506827, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752109\nBug 1244590 - Part 7: Calculate paced spacing.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51809/diff/11-12/", "author": "boris.chiou@gmail.com", "id": 11506828, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752110\nBug 1244590 - Part 8: Rewrite GetStyleContext code.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/51895/diff/11-12/", "author": "boris.chiou@gmail.com", "id": 11506829, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752111\nBug 1244590 - Part 9: Update spacing in SetTarget.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52137/diff/11-12/", "author": "boris.chiou@gmail.com", "id": 11506830, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/11-12/", "author": "boris.chiou@gmail.com", "id": 11506831, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/11-12/", "author": "boris.chiou@gmail.com", "id": 11506832, "time": "2016-06-28T06:38:57Z"}, {"text": "Comment on attachment 8752112\nBug 1244590 - Part 10: Test for creating animations with a specific spacing mode.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52139/diff/12-13/", "author": "boris.chiou@gmail.com", "id": 11506841, "time": "2016-06-28T06:44:47Z"}, {"text": "Comment on attachment 8752113\nBug 1244590 - Part 11: Test for different targets.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/52151/diff/12-13/", "author": "boris.chiou@gmail.com", "id": 11506842, "time": "2016-06-28T06:44:47Z"}, {"text": "Pushed by bchiou@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/7526bb22d3a5\nPart 1: Introduce KeyframeEffectParams. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/eedb4ecfeb3b\nPart 2: Retrieve KeyframeEffectOptions from constructor. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/3d6aab557fc8\nPart 3: Parse spacing. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/02de18e88fc7\nPart 4: Rewrite ApplyDistributeSpacing. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/cfcc3a1a3cad\nPart 5: Make the default value of computed offsets be -1. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/8755ef376a4c\nPart 6: Refactor the calculation of StyleAnimationValue. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/4609f300a921\nPart 7: Calculate paced spacing. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/6bd91e7fed52\nPart 8: Rewrite GetStyleContext code. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/04b5585125ad\nPart 9: Update spacing in SetTarget. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/166e184b73cd\nPart 10: Test for creating animations with a specific spacing mode. r=birtles\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/981f75fa50d2\nPart 11: Test for different targets. r=birtles", "author": "pulsebot@bots.tld", "id": 11507193, "time": "2016-06-28T10:06:34Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/7526bb22d3a5\nhttps://hg.mozilla.org/mozilla-central/rev/eedb4ecfeb3b\nhttps://hg.mozilla.org/mozilla-central/rev/3d6aab557fc8\nhttps://hg.mozilla.org/mozilla-central/rev/02de18e88fc7\nhttps://hg.mozilla.org/mozilla-central/rev/cfcc3a1a3cad\nhttps://hg.mozilla.org/mozilla-central/rev/8755ef376a4c\nhttps://hg.mozilla.org/mozilla-central/rev/4609f300a921\nhttps://hg.mozilla.org/mozilla-central/rev/6bd91e7fed52\nhttps://hg.mozilla.org/mozilla-central/rev/04b5585125ad\nhttps://hg.mozilla.org/mozilla-central/rev/166e184b73cd\nhttps://hg.mozilla.org/mozilla-central/rev/981f75fa50d2", "author": "cbook@mozilla.com", "id": 11507731, "time": "2016-06-28T14:11:56Z"}, {"text": "Looks like this has been dropped from the latest spec, so I'll hold off on adding anything to the docs.\n\nIs it being replaced by something else instead?", "author": "cmills@mozilla.com", "id": 12101427, "time": "2017-02-27T20:31:13Z"}, {"text": "No, it's been dropped outright. Google didn't want to implement it and it's less necessary given the way the CSS Motion path module has been specified.", "author": "bbirtles@mozilla.com", "id": 12102013, "time": "2017-02-27T23:24:00Z"}], "cf_last_resolved": "2016-06-28T14:11:56Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2017-02-27T23:24:00Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1272549, 1274944, 1276193, 1286150, 1286151, 1286196, 1317914], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "DOM: Animation", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla50", "cf_status_firefox47": "---", "cf_status_firefox46": "---", "cf_status_thunderbird_esr52": "---", "url": "https://w3c.github.io/web-animations/#spacing-keyframes", "creator_detail": {"email": "motozawa@mozilla-japan.org", "id": 562221, "name": "motozawa@mozilla-japan.org", "real_name": "Ryo Motozawa [:ryo]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bbirtles@mozilla.com", "id": 165012, "name": "bbirtles@mozilla.com", "real_name": "Brian Birtles (:birtles)"}, {"email": "boris.chiou@gmail.com", "id": 500786, "name": "boris.chiou@gmail.com", "real_name": "Boris Chiou [:boris] (disappeared)"}, {"email": "cmills@mozilla.com", "id": 475085, "name": "cmills@mozilla.com", "real_name": "Chris Mills (Mozilla, MDN editor) [:cmills]"}, {"email": "hikezoe@mozilla.com", "id": 131213, "name": "hikezoe@mozilla.com", "real_name": "Hiroyuki Ikezoe (:hiro)"}, {"email": "jwalden+bmo@mit.edu", "id": 83595, "name": "jwalden+bmo@mit.edu", "real_name": "Jeff Walden [:Waldo]"}, {"email": "jypenator@gmail.com", "id": 248150, "name": "jypenator@gmail.com", "real_name": "Jean-Yves Perrier [:teoli]"}, {"email": "kchang@mozilla.com", "id": 453207, "name": "kchang@mozilla.com", "real_name": "Ken Chang[:kenkai]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "cf_qa_whiteboard": "", "history": [{"changes": [{"removed": "", "field_name": "depends_on", "added": "1211783"}], "who": "motozawa@mozilla-japan.org", "when": "2016-02-01T02:43:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "hiikezoe@mozilla-japan.org"}, {"removed": "implement spacing modes", "field_name": "summary", "added": "implement KeyframeEffect spacing modes"}], "who": "hikezoe@mozilla.com", "when": "2016-02-01T04:55:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "boris.chiou@gmail.com"}], "who": "boris.chiou@gmail.com", "when": "2016-04-27T10:24:23Z"}, {"changes": [{"removed": "https://w3c.github.io/web-animations/#keyframe-spacing-mode", "field_name": "url", "added": "https://w3c.github.io/web-animations/#spacing-keyframes"}], "who": "boris.chiou@gmail.com", "when": "2016-05-03T09:30:45Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "boris.chiou@gmail.com"}], "who": "boris.chiou@gmail.com", "when": "2016-05-04T06:43:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bbirtles@mozilla.com"}], "who": "boris.chiou@gmail.com", "when": "2016-05-04T06:44:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kchang@mozilla.com"}], "who": "kchang@mozilla.com", "when": "2016-05-05T16:18:54Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}], "who": "boris.chiou@gmail.com", "when": "2016-05-12T06:41:44Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1272549"}], "who": "boris.chiou@gmail.com", "when": "2016-05-13T02:54:55Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752104, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752105, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752106, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752107, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752108, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752109, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752110, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752111, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752112, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752113, "added": "review?(bbirtles@mozilla.com)"}], "who": "boris.chiou@gmail.com", "when": "2016-05-13T09:08:59Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752104, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T00:43:46Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752105, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T00:58:36Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752106, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T01:26:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752107, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T02:39:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752108, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T03:09:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752109, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T03:10:04Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752110, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T04:24:27Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752111, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T04:25:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752112, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T04:31:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752113, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-16T04:39:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8755339, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 1: Introduce KeyframeEffectOptionsData.", "attachment_id": 8752104, "added": "MozReview Request: Bug 1244590 - Part 1: Introduce KeyframeEffectParams."}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752104, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752105, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752106, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752107, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 5: Use Maybe<double> for Keyframe::mComputedOffset.", "attachment_id": 8752108, "added": "MozReview Request: Bug 1244590 - Part 5: Make the default value of computed offsets be -1."}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752108, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 6: Calculate paced spacing.", "attachment_id": 8752109, "added": "MozReview Request: Bug 1244590 - Part 7: Calculate paced spacing."}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752109, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 7: Rewrite GetStyleContext code.", "attachment_id": 8752110, "added": "MozReview Request: Bug 1244590 - Part 8: Rewrite GetStyleContext code."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 8: Update spacing in SetTarget.", "attachment_id": 8752111, "added": "MozReview Request: Bug 1244590 - Part 9: Update spacing in SetTarget."}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752111, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 9: Test for creating animations with a specific spacing mode.", "attachment_id": 8752112, "added": "MozReview Request: Bug 1244590 - Part 10: Test for creating animations with a specific spacing mode."}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752112, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 10: Test for different targets.", "attachment_id": 8752113, "added": "MozReview Request: Bug 1244590 - Part 11: Test for different targets."}], "who": "boris.chiou@gmail.com", "when": "2016-05-23T08:28:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8755340, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8755341, "added": "review?(bbirtles@mozilla.com)"}], "who": "boris.chiou@gmail.com", "when": "2016-05-23T10:34:01Z"}, {"changes": [{"removed": "implement KeyframeEffect spacing modes", "field_name": "summary", "added": "implement KeyframeEffectReadOnly spacing modes"}], "who": "boris.chiou@gmail.com", "when": "2016-05-23T10:44:08Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1274944"}], "who": "boris.chiou@gmail.com", "when": "2016-05-23T10:49:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752104, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-24T06:20:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752105, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-24T09:35:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752106, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-24T11:46:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752107, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-24T13:43:27Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752108, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-24T13:47:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jwalden+bmo@mit.edu"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jwalden+bmo@mit.edu)"}], "who": "bbirtles@mozilla.com", "when": "2016-05-25T09:47:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8755339, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-25T11:41:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752109, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-25T12:01:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752111, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-25T12:03:12Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752112, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-25T12:21:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8755340, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-25T12:51:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8755341, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-25T12:58:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752106, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752107, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752108, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8755339, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752109, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752112, "added": "review?(bbirtles@mozilla.com)"}], "who": "boris.chiou@gmail.com", "when": "2016-05-26T19:06:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752106, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-27T05:26:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752107, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-27T06:43:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752108, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-27T06:46:04Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8752107, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-05-27T06:47:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8755339, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752109, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752112, "added": ""}], "who": "boris.chiou@gmail.com", "when": "2016-05-27T10:25:36Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8755340, "added": "1"}], "who": "boris.chiou@gmail.com", "when": "2016-05-27T10:43:58Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8755341, "added": "1"}], "who": "boris.chiou@gmail.com", "when": "2016-05-27T10:44:00Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1276193"}], "who": "boris.chiou@gmail.com", "when": "2016-05-27T10:55:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8755339, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-30T00:04:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752106, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-30T02:52:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752107, "added": "review?(bbirtles@mozilla.com)"}], "who": "boris.chiou@gmail.com", "when": "2016-05-30T02:52:36Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1276550"}], "who": "boris.chiou@gmail.com", "when": "2016-05-30T03:27:47Z"}, {"changes": [{"removed": "1276550", "field_name": "depends_on", "added": ""}, {"removed": "needinfo?(jwalden+bmo@mit.edu)", "field_name": "flagtypes.name", "added": ""}], "who": "boris.chiou@gmail.com", "when": "2016-05-30T03:29:32Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1276550"}], "who": "boris.chiou@gmail.com", "when": "2016-05-30T03:33:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752107, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-05-30T04:33:48Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1276573"}], "who": "boris.chiou@gmail.com", "when": "2016-05-30T07:31:23Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752109, "added": "review?(bbirtles@mozilla.com)"}], "who": "boris.chiou@gmail.com", "when": "2016-06-01T11:11:37Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752109, "added": ""}], "who": "bbirtles@mozilla.com", "when": "2016-06-02T04:01:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752109, "added": "review?(bbirtles@mozilla.com)"}], "who": "boris.chiou@gmail.com", "when": "2016-06-02T10:53:02Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752109, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-06-03T00:39:52Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1277740"}], "who": "boris.chiou@gmail.com", "when": "2016-06-03T02:48:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752112, "added": "review?(bbirtles@mozilla.com)"}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 11: Test for different targets.", "attachment_id": 8752113, "added": "Bug 1244590 - Part 11: Test for different targets."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 7: Calculate paced spacing.", "attachment_id": 8752109, "added": "Bug 1244590 - Part 7: Calculate paced spacing."}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752109, "added": "review?(boris.chiou@gmail.com)"}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 8: Rewrite GetStyleContext code.", "attachment_id": 8752110, "added": "Bug 1244590 - Part 8: Rewrite GetStyleContext code."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 9: Update spacing in SetTarget.", "attachment_id": 8752111, "added": "Bug 1244590 - Part 9: Update spacing in SetTarget."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 10: Test for creating animations with a specific spacing mode.", "attachment_id": 8752112, "added": "Bug 1244590 - Part 10: Test for creating animations with a specific spacing mode."}], "who": "boris.chiou@gmail.com", "when": "2016-06-03T03:46:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(boris.chiou@gmail.com)", "attachment_id": 8752109, "added": ""}], "who": "boris.chiou@gmail.com", "when": "2016-06-03T03:50:23Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bbirtles@mozilla.com)", "attachment_id": 8752112, "added": "review+"}], "who": "bbirtles@mozilla.com", "when": "2016-06-06T04:27:20Z"}, {"changes": [{"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 1: Introduce KeyframeEffectParams.", "attachment_id": 8752104, "added": "Bug 1244590 - Part 1: Introduce KeyframeEffectParams."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor.", "attachment_id": 8752105, "added": "Bug 1244590 - Part 2: Retrieve KeyframeEffectOptions from constructor."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 3: Parse spacing.", "attachment_id": 8752106, "added": "Bug 1244590 - Part 3: Parse spacing."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 4: Rewrite ApplyDistributeSpacing.", "attachment_id": 8752107, "added": "Bug 1244590 - Part 4: Rewrite ApplyDistributeSpacing."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 5: Make the default value of computed offsets be -1.", "attachment_id": 8752108, "added": "Bug 1244590 - Part 5: Make the default value of computed offsets be -1."}, {"field_name": "attachments.description", "removed": "MozReview Request: Bug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue.", "attachment_id": 8755339, "added": "Bug 1244590 - Part 6: Refactor the calculation of StyleAnimationValue."}], "who": "boris.chiou@gmail.com", "when": "2016-06-28T06:38:57Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla50"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-06-28 14:11:56"}, {"removed": "---", "field_name": "cf_status_firefox50", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2016-06-28T14:11:56Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1286150"}], "who": "boris.chiou@gmail.com", "when": "2016-07-12T06:03:38Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1286151"}], "who": "boris.chiou@gmail.com", "when": "2016-07-12T06:09:59Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1286196"}], "who": "boris.chiou@gmail.com", "when": "2016-07-12T10:16:44Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1317914"}], "who": "boris.chiou@gmail.com", "when": "2016-11-16T07:15:24Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "dev-doc-needed"}, {"removed": "", "field_name": "cc", "added": "jypenator@gmail.com"}], "who": "jypenator@gmail.com", "when": "2016-11-16T14:51:30Z"}, {"changes": [{"removed": "dev-doc-needed", "field_name": "keywords", "added": ""}, {"removed": "", "field_name": "cc", "added": "cmills@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bbirtles@mozilla.com)"}], "who": "cmills@mozilla.com", "when": "2017-02-27T20:31:13Z"}, {"changes": [{"removed": "needinfo?(bbirtles@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "bbirtles@mozilla.com", "when": "2017-02-27T23:24:00Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}