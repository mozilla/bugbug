{"cf_tracking_thunderbird_esr52": "---", "cf_tracking_firefox60": "---", "attachments": [], "cf_tracking_firefox62": "---", "creator": "billjm05@gmail.com", "mentors_detail": [], "depends_on": [1197420, 1449775], "cf_status_firefox_esr60": "---", "cf_user_story": "", "history": [{"changes": [{"removed": "UNCONFIRMED", "field_name": "status", "added": "NEW"}, {"removed": "", "field_name": "cc", "added": "kmaglione+bmo@mozilla.com"}, {"removed": "0", "field_name": "is_confirmed", "added": "1"}], "who": "kmaglione+bmo@mozilla.com", "when": "2016-02-05T19:20:37Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1215028"}], "who": "kmaglione+bmo@mozilla.com", "when": "2016-02-05T19:21:58Z"}, {"changes": [{"removed": "", "field_name": "whiteboard", "added": "[design-decision-needed] triaged"}], "who": "sescalante@mozilla.com", "when": "2016-05-09T16:50:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mkdante381@gmail.com"}], "who": "mkdante381@gmail.com", "when": "2016-05-20T14:23:59Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "samuel.lauren@iki.fi"}], "who": "samuel.lauren@iki.fi", "when": "2016-06-29T15:14:02Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "umbecono@yahoo.com"}], "who": "umbecono@yahoo.com", "when": "2016-06-29T21:45:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "amckay@mozilla.com"}, {"removed": "[design-decision-needed] triaged", "field_name": "whiteboard", "added": "[design-decision-approved] triaged"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-07-27T18:38:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tarek@mozilla.com"}], "who": "tarek@mozilla.com", "when": "2016-08-11T17:02:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "pag77@mail.ru"}], "who": "pag77@mail.ru", "when": "2016-08-16T07:10:27Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "brunoaiss@gmail.com"}], "who": "brunoaiss@gmail.com", "when": "2016-08-24T19:30:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "frfxtst@gmail.com"}], "who": "frfxtst@gmail.com", "when": "2016-09-07T15:27:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "alj62888@yahoo.com"}], "who": "alj62888@yahoo.com", "when": "2016-09-13T20:00:29Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1219940"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-09-30T21:36:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "g.maone@informaction.com"}], "who": "g.maone@informaction.com", "when": "2016-09-30T22:53:27Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P2"}, {"removed": "WebExtensions: Untriaged", "field_name": "component", "added": "WebExtensions: General"}, {"removed": "", "field_name": "depends_on", "added": "1197420"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-10-07T21:30:41Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1310316"}], "who": "mixedpuppy@gmail.com", "when": "2016-10-14T20:14:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kazz@asamuzak.jp"}], "who": "kazz@asamuzak.jp", "when": "2016-11-03T23:31:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "brade@comcast.net, mcs@pearlcrescent.com"}], "who": "mcs@pearlcrescent.com", "when": "2016-11-28T20:22:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "vleett@yandex.ru"}], "who": "vleett@yandex.ru", "when": "2016-12-06T16:15:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "suhanprabhu@gmail.com"}], "who": "suhanprabhu@gmail.com", "when": "2016-12-08T09:17:10Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1118289"}], "who": "brade@comcast.net", "when": "2016-12-14T15:44:28Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1323414"}], "who": "kmaglione+bmo@mozilla.com", "when": "2016-12-15T19:49:56Z"}, {"changes": [{"removed": "---", "field_name": "cf_blocking_webextensions", "added": "+"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-12-20T22:38:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "from_bugzilla2@ssokolow.com"}], "who": "from_bugzilla2@ssokolow.com", "when": "2016-12-21T04:37:27Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mossroy@mossroy.fr"}], "who": "mossroy@mossroy.fr", "when": "2016-12-23T14:48:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cr0ydon@outlook.com"}], "who": "cr0ydon@outlook.com", "when": "2017-01-10T14:52:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "danny0838+bz@gmail.com"}], "who": "aswan@mozilla.com", "when": "2017-01-22T17:38:28Z"}, {"changes": [{"removed": "+", "field_name": "cf_blocking_webextensions", "added": "?"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-01-25T21:17:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "crimsteam@gmail.com"}], "who": "crimsteam@gmail.com", "when": "2017-02-07T00:58:51Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fdsc@yandex.ru"}], "who": "aswan@mozilla.com", "when": "2017-02-11T15:40:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jamy023@gmail.com"}], "who": "jamy023@gmail.com", "when": "2017-02-19T10:29:29Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2017-02-19T22:11:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "paolo.mozmail@amadzone.org"}], "who": "mcastelluccio@mozilla.com", "when": "2017-02-19T22:11:51Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(billjm05@gmail.com)"}], "who": "fdsc@yandex.ru", "when": "2017-02-23T01:50:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tomica@gmail.com"}], "who": "tomica@gmail.com", "when": "2017-02-24T18:30:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "emmanuel@engelhart.org"}], "who": "emmanuel@engelhart.org", "when": "2017-03-01T15:20:44Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dqeswn@gmail.com"}], "who": "dqeswn@gmail.com", "when": "2017-03-12T16:08:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "pmariojo@gmail.com"}], "who": "pmariojo@gmail.com", "when": "2017-03-14T10:32:00Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "akos@szederjei.eu"}], "who": "akos@szederjei.eu", "when": "2017-03-15T22:45:02Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1215059"}], "who": "yfdyh000@gmail.com", "when": "2017-03-26T16:43:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "danielherrsoftware@gmail.com"}], "who": "danielherrsoftware@gmail.com", "when": "2017-03-28T20:42:47Z"}, {"changes": [{"removed": "?", "field_name": "cf_blocking_webextensions", "added": "---"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-03-29T18:16:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "eros_uk@yahoo.co.uk"}], "who": "eros_uk@yahoo.co.uk", "when": "2017-04-07T17:16:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "script@vollbio.de"}], "who": "script@vollbio.de", "when": "2017-04-11T21:11:16Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "rob@robwu.nl"}], "who": "rob@robwu.nl", "when": "2017-04-13T15:58:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dennis.lissov@gmail.com"}], "who": "dennis.lissov@gmail.com", "when": "2017-04-18T22:00:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ashpool@xecut.net"}], "who": "ashpool@xecut.net", "when": "2017-04-26T13:01:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "johnp@gmx.de"}], "who": "johnp@gmx.de", "when": "2017-04-26T21:03:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ajfhajf@yandex.ru"}], "who": "ajfhajf@yandex.ru", "when": "2017-04-27T09:01:57Z"}, {"changes": [{"removed": "frfxtst@gmail.com", "field_name": "cc", "added": ""}], "who": "frfxtst@gmail.com", "when": "2017-04-28T10:53:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "trent@trentlarson.com"}], "who": "trent@trentlarson.com", "when": "2017-04-29T01:36:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ehumphries@mozilla.com"}], "who": "ehumphries@mozilla.com", "when": "2017-05-01T20:15:40Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(ehumphries@mozilla.com)"}], "who": "johnp@gmx.de", "when": "2017-05-01T22:58:47Z"}, {"changes": [{"removed": "needinfo?(ehumphries@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "ehumphries@mozilla.com", "when": "2017-05-01T23:12:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "thorbw@gmail.com"}], "who": "thorbw@gmail.com", "when": "2017-05-26T01:54:02Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "pwd.mozilla@yahoo.co.uk"}], "who": "pwd.mozilla@yahoo.co.uk", "when": "2017-07-08T17:06:46Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dietrich@mozilla.com"}], "who": "dietrich@mozilla.com", "when": "2017-07-26T07:28:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "marsjaninzmarsa@gmail.com"}], "who": "marsjaninzmarsa@gmail.com", "when": "2017-08-02T12:32:56Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bruant.d@gmail.com"}], "who": "bruant.d@gmail.com", "when": "2017-08-10T11:05:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla.mozilla.org@infinite-source.de"}], "who": "bugzilla.mozilla.org@infinite-source.de", "when": "2017-08-11T17:09:49Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nightson1988@gmail.com"}], "who": "nightson1988@gmail.com", "when": "2017-08-12T13:35:11Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1322442"}], "who": "bugzilla-mozilla-20000923@james-ross.co.uk", "when": "2017-08-13T12:53:20Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla-mozilla-20000923@james-ross.co.uk"}], "who": "bugzilla-mozilla-20000923@james-ross.co.uk", "when": "2017-08-13T13:15:44Z"}, {"changes": [{"removed": "1322442", "field_name": "blocks", "added": ""}], "who": "yfdyh000@gmail.com", "when": "2017-08-13T13:47:35Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1322442"}], "who": "bugzilla-mozilla-20000923@james-ross.co.uk", "when": "2017-08-13T14:34:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "yfdyh000@gmail.com"}], "who": "yfdyh000@gmail.com", "when": "2017-08-13T18:15:29Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcote@mozilla.com"}, {"removed": "", "field_name": "restrict_comments", "added": "1"}], "who": "mcote@mozilla.com", "when": "2017-08-14T18:23:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Virtual@teknik.io"}], "who": "Virtual@teknik.io", "when": "2017-08-23T08:17:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "timbugzilla@gmail.com"}], "who": "timbugzilla@gmail.com", "when": "2017-08-24T03:16:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "antoine.mozilla@gmail.com"}], "who": "antoine.mozilla@gmail.com", "when": "2017-09-27T03:51:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Tobias.Marty@gmx.de"}], "who": "Tobias.Marty@gmx.de", "when": "2017-09-27T16:15:29Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "reqqxn@gmail.com"}], "who": "reqqxn@gmail.com", "when": "2017-09-27T19:59:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla@guardian.cc"}], "who": "bugzilla@guardian.cc", "when": "2017-10-10T16:32:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fdsfgs@krutt.org"}], "who": "fdsfgs@krutt.org", "when": "2017-11-06T18:56:32Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amckay@mozilla.com)"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-11-17T22:09:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla@basson.at"}], "who": "kmaglione+bmo@mozilla.com", "when": "2017-11-28T00:11:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "s1375422@mvrht.net"}], "who": "VYV03354@nifty.ne.jp", "when": "2017-11-29T07:28:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "perpleks@yandex.ru"}], "who": "perpleks@yandex.ru", "when": "2017-11-29T07:36:55Z"}, {"changes": [{"removed": "needinfo?(amckay@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "andy+bugzilla@mckay.pub", "when": "2017-11-30T23:43:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "100@pokemori.jp"}], "who": "100@pokemori.jp", "when": "2018-01-09T23:09:40Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "botond@mozilla.com"}], "who": "botond@mozilla.com", "when": "2018-01-27T02:22:32Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "grahamperrin@gmail.com"}], "who": "grahamperrin@gmail.com", "when": "2018-01-27T10:16:14Z"}, {"changes": [{"removed": "P2", "field_name": "priority", "added": "P3"}], "who": "andy+bugzilla@mckay.pub", "when": "2018-02-01T00:21:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "samuel@sieb.net"}], "who": "samuel@sieb.net", "when": "2018-02-06T23:11:14Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "brettz9@yahoo.com"}], "who": "brettz9@yahoo.com", "when": "2018-03-07T02:59:46Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1449775"}], "who": "martijn.martijn@gmail.com", "when": "2018-03-28T23:01:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "hansenm@ergovia.de"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-04-24T21:41:36Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1435798"}], "who": "rFobic@gmail.com", "when": "2018-05-07T20:50:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "lidel@lidel.org"}], "who": "lidel@lidel.org", "when": "2018-05-25T09:45:59Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "msdobrescu@gmail.com"}], "who": "msdobrescu@gmail.com", "when": "2018-05-25T17:03:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "clarencewashington003@gmail.com"}], "who": "clarencewashington003@gmail.com", "when": "2018-05-31T19:33:07Z"}], "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "100@pokemori.jp", "id": 608361, "name": "100@pokemori.jp", "real_name": "100\u306e\u4eba"}, {"email": "ajfhajf@yandex.ru", "id": 559449, "name": "ajfhajf@yandex.ru", "real_name": ""}, {"email": "akos@szederjei.eu", "id": 591110, "name": "akos@szederjei.eu", "real_name": "Akos Szederjei"}, {"email": "alj62888@yahoo.com", "id": 577594, "name": "alj62888@yahoo.com", "real_name": "al"}, {"email": "andy+bugzilla@mckay.pub", "id": 397635, "name": "andy+bugzilla@mckay.pub", "real_name": "Andy McKay"}, {"email": "antoine.mozilla@gmail.com", "id": 333996, "name": "antoine.mozilla@gmail.com", "real_name": "Antoine Turmel [:GeekShadow]"}, {"email": "ashpool@xecut.net", "id": 594362, "name": "ashpool@xecut.net", "real_name": ""}, {"email": "botond@mozilla.com", "id": 474533, "name": "botond@mozilla.com", "real_name": "Botond Ballo [:botond]"}, {"email": "brade@comcast.net", "id": 1678, "name": "brade@comcast.net", "real_name": "Kathleen :Brade"}, {"email": "brettz9@yahoo.com", "id": 230200, "name": "brettz9@yahoo.com", "real_name": "Brett Zamir"}, {"email": "bruant.d@gmail.com", "id": 365126, "name": "bruant.d@gmail.com", "real_name": "David Bruant"}, {"email": "brunoaiss@gmail.com", "id": 399973, "name": "brunoaiss@gmail.com", "real_name": "brunoais"}, {"email": "bugzilla-mozilla-20000923@james-ross.co.uk", "id": 18057, "name": "bugzilla-mozilla-20000923@james-ross.co.uk", "real_name": "James Ross"}, {"email": "bugzilla.mozilla.org@infinite-source.de", "id": 176019, "name": "bugzilla.mozilla.org@infinite-source.de", "real_name": "The 8472"}, {"email": "bugzilla@basson.at", "id": 102037, "name": "bugzilla@basson.at", "real_name": "Ben Basson"}, {"email": "bugzilla@guardian.cc", "id": 295246, "name": "bugzilla@guardian.cc", "real_name": "G\u00b5\u00e5r\u00d0\u00ef\u00e5\u00f1"}, {"email": "clarencewashington003@gmail.com", "id": 423021, "name": "clarencewashington003@gmail.com", "real_name": ""}, {"email": "cr0ydon@outlook.com", "id": 517385, "name": "cr0ydon@outlook.com", "real_name": "Croydon"}, {"email": "crimsteam@gmail.com", "id": 478577, "name": "crimsteam@gmail.com", "real_name": "Arkadiusz Michalski (Spirit)"}, {"email": "danielherrsoftware@gmail.com", "id": 565872, "name": "danielherrsoftware@gmail.com", "real_name": "Daniel Herr"}, {"email": "danny0838@gmail.com", "id": 420740, "name": "danny0838@gmail.com", "real_name": "Danny Lin"}, {"email": "dennis.lissov@gmail.com", "id": 383577, "name": "dennis.lissov@gmail.com", "real_name": "Denis Lisov"}, {"email": "dietrich@mozilla.com", "id": 213632, "name": "dietrich@mozilla.com", "real_name": "Dietrich Ayala (:dietrich)"}, {"email": "dqeswn@gmail.com", "id": 335344, "name": "dqeswn@gmail.com", "real_name": "avada"}, {"email": "ehumphries@mozilla.com", "id": 554394, "name": "ehumphries@mozilla.com", "real_name": "Emma Humphries, Bugmaster \u2615\ufe0f (she/her) [:emceeaich] (UTC-8) needinfo? me"}, {"email": "emmanuel@engelhart.org", "id": 200315, "name": "emmanuel@engelhart.org", "real_name": "Emmanuel Engelhart"}, {"email": "eros_uk@yahoo.co.uk", "id": 512314, "name": "eros_uk@yahoo.co.uk", "real_name": "erosman"}, {"email": "fdsc@yandex.ru", "id": 508027, "name": "fdsc@yandex.ru", "real_name": ""}, {"email": "fdsfgs@krutt.org", "id": 605028, "name": "fdsfgs@krutt.org", "real_name": "soredake"}, {"email": "from_bugzilla2@ssokolow.com", "id": 305790, "name": "from_bugzilla2@ssokolow.com", "real_name": "Stephan Sokolow"}, {"email": "g.maone@informaction.com", "id": 151994, "name": "g.maone@informaction.com", "real_name": "Giorgio Maone [:mao]"}, {"email": "grahamperrin@gmail.com", "id": 258142, "name": "grahamperrin@gmail.com", "real_name": "Graham Perrin"}, {"email": "hansenm@ergovia.de", "id": 616425, "name": "hansenm@ergovia.de", "real_name": "Michael"}, {"email": "jamy023@gmail.com", "id": 589381, "name": "jamy023@gmail.com", "real_name": ""}, {"email": "johnp@gmx.de", "id": 386893, "name": "johnp@gmx.de", "real_name": "Johannes Pfrang [:johnp]"}, {"email": "kazz@asamuzak.jp", "id": 469653, "name": "kazz@asamuzak.jp", "real_name": "Kazumasa Hasegawa (Kazz)"}, {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, {"email": "lidel@lidel.org", "id": 535729, "name": "lidel@lidel.org", "real_name": "Marcin Rataj"}, {"email": "marsjaninzmarsa@gmail.com", "id": 470481, "name": "marsjaninzmarsa@gmail.com", "real_name": "Kuba Niewiarowski"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "mcote@mozilla.com", "id": 395743, "name": "mcote@mozilla.com", "real_name": "Mark C\u00f4t\u00e9 [:mcote]"}, {"email": "mcs@pearlcrescent.com", "id": 4418, "name": "mcs@pearlcrescent.com", "real_name": "Mark Smith [:mcs]"}, {"email": "mkdante381@gmail.com", "id": 525577, "name": "mkdante381@gmail.com", "real_name": ""}, {"email": "mossroy@mossroy.fr", "id": 432800, "name": "mossroy@mossroy.fr", "real_name": "Mossroy"}, {"email": "msdobrescu@gmail.com", "id": 268994, "name": "msdobrescu@gmail.com", "real_name": "Mihai Dobrescu"}, {"email": "nightson1988@gmail.com", "id": 415888, "name": "nightson1988@gmail.com", "real_name": "NightsoN Blaze"}, {"email": "pag77@mail.ru", "id": 518780, "name": "pag77@mail.ru", "real_name": "Oleksandr"}, {"email": "paolo.mozmail@amadzone.org", "id": 332229, "name": "paolo.mozmail@amadzone.org", "real_name": ":Paolo Amadini"}, {"email": "perpleks@yandex.ru", "id": 585706, "name": "perpleks@yandex.ru", "real_name": ""}, {"email": "pmariojo@gmail.com", "id": 519388, "name": "pmariojo@gmail.com", "real_name": ""}, {"email": "pwd.mozilla@yahoo.co.uk", "id": 369453, "name": "pwd.mozilla@yahoo.co.uk", "real_name": "Paul [pwd]"}, {"email": "reqqxn@gmail.com", "id": 602235, "name": "reqqxn@gmail.com", "real_name": "Re Qu"}, {"email": "rob@robwu.nl", "id": 447061, "name": "rob@robwu.nl", "real_name": "Rob Wu [:robwu]"}, {"email": "s1375422@mvrht.net", "id": 607187, "name": "s1375422@mvrht.net", "real_name": "localfile"}, {"email": "samuel.lauren@iki.fi", "id": 448066, "name": "samuel.lauren@iki.fi", "real_name": ""}, {"email": "samuel@sieb.net", "id": 14762, "name": "samuel@sieb.net", "real_name": "Samuel Sieb"}, {"email": "script@vollbio.de", "id": 82646, "name": "script@vollbio.de", "real_name": ""}, {"email": "suhanprabhu@gmail.com", "id": 584920, "name": "suhanprabhu@gmail.com", "real_name": "Suhan Prabhu"}, {"email": "tarek@mozilla.com", "id": 385707, "name": "tarek@mozilla.com", "real_name": "Tarek Ziad\u00e9 (:tarek)"}, {"email": "thorbw@gmail.com", "id": 593359, "name": "thorbw@gmail.com", "real_name": ""}, {"email": "timbugzilla@gmail.com", "id": 437905, "name": "timbugzilla@gmail.com", "real_name": ""}, {"email": "Tobias.Marty@gmx.de", "id": 572549, "name": "Tobias.Marty@gmx.de", "real_name": "TMart"}, {"email": "tomica@gmail.com", "id": 445095, "name": "tomica@gmail.com", "real_name": "Tomislav Jovanovic :zombie"}, {"email": "trent@trentlarson.com", "id": 593053, "name": "trent@trentlarson.com", "real_name": ""}, {"email": "umbecono@yahoo.com", "id": 558093, "name": "umbecono@yahoo.com", "real_name": "Nancy Grossman"}, {"email": "Virtual@teknik.io", "id": 342842, "name": "Virtual@teknik.io", "real_name": "Virtual_ManPL [:Virtual] - (please needinfo? me - so I will see your comment/reply/question/etc.)"}, {"email": "vleett@yandex.ru", "id": 584790, "name": "vleett@yandex.ru", "real_name": "vleet"}, {"email": "yfdyh000@gmail.com", "id": 398515, "name": "yfdyh000@gmail.com", "real_name": "YF (Yang)"}], "cf_last_resolved": null, "cf_tracking_firefox61": "---", "votes": 46, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 117, "comments": [{"text": "User Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36\n\nSteps to reproduce:\n\nN/A\n\n\nActual results:\n\nN/A\n\n\nExpected results:\n\nN/A", "author": "billjm05@gmail.com", "id": 11142284, "time": "2016-02-05T19:19:44Z"}, {"text": "I'm confused. How will this differ from the Filesystem API implementation of bug 1265767?", "author": "umbecono@yahoo.com", "id": 11512503, "time": "2016-06-29T21:45:21Z"}, {"text": "It's undecided at this point.", "author": "kmaglione+bmo@mozilla.com", "id": 11512513, "time": "2016-06-29T21:50:49Z"}, {"text": "This seems like a good idea with multiple use cases and there's been a few suggestions how we could do it. The first stage would probably be something like:\n* implement the Blink Filesystem APIs (as noted in bug 1265767)\n* make it a permission that a developer has to request\n* limit the reading and writing to an add-on specific sandbox in the developers profile\n\nOnce we've got that done, we could move on to the next stage which would be allowing an add-on to read and write from any directory that the user would approve. Because it would require user approval we'd need some UX and security review to ensure that we can limit malicious activity.", "author": "andy+bugzilla@mckay.pub", "id": 11579657, "time": "2016-07-27T18:38:11Z"}, {"text": "We'd at the very least need required permission support for this. Its probably an optional permission so add as depending on that one.", "author": "andy+bugzilla@mckay.pub", "id": 11769677, "time": "2016-10-07T21:30:41Z"}, {"text": "What permit is required? when it will be implemented for the Nightly?", "author": "pag77@mail.ru", "id": 11793434, "time": "2016-10-18T08:30:58Z"}, {"text": "*** Bug 1320518 has been marked as a duplicate of this bug. ***", "author": "kmaglione+bmo@mozilla.com", "id": 11889116, "time": "2016-11-27T01:31:05Z"}, {"text": "Any news or updates on this CRITICAL issue of WebExtensions?\n\nA lot of useful addons CAN'T be made without ability to read/write local real filesystem.\nLike: SessionManager, Mozilla Archive Format, DownloadThemAll, Places Maintains and etc.\n\nThe feature maybe limited to some folder (e.g. add-on's folder), or with user's manual approval or user's folder choice or something else if needed, but dropping the whole thing is obviously not a right decision, we don't want another quite dull and limited half-a-browser like Chrome, do we?\n\nSo, the question is - When should developers expect filesystem support for the-only-recommended WevExtensions?\nI mean, it's one of the most desired feature (according to votes!) for WebExtensions, that always was in Firefox and is required for many tasks. Is this feature decided to be added soon?", "author": "vleett@yandex.ru", "id": 11907493, "time": "2016-12-06T16:15:30Z"}, {"text": "Hi,\nI have just started contributing to Mozilla and would like to work on this bug. It would be really great if I was given pointers as to how to start working on it.\nThank you :)", "author": "suhanprabhu@gmail.com", "id": 11909843, "time": "2016-12-08T09:17:10Z"}, {"text": "Suhan thanks for wanting to help out. We are happy to have contributors for bugs, but if you are just starting contributing to Mozilla then you might want to start with some easier bugs. Check out this link: https://wiki.mozilla.org/Add-ons/Contribute#Improve_add-ons_in_Firefox, which links to the onboarding and bugs that are mentored and recommended for your first bug.", "author": "andy+bugzilla@mckay.pub", "id": 11910182, "time": "2016-12-08T18:31:29Z"}, {"text": "See also bug 1323414.", "author": "andy+bugzilla@mckay.pub", "id": 11922061, "time": "2016-12-15T19:40:36Z"}, {"text": "*** Bug 1332927 has been marked as a duplicate of this bug. ***", "author": "aswan@mozilla.com", "id": 12000725, "time": "2017-01-22T17:38:28Z"}, {"text": "Dropping down to ? for Firefox 57.\n\nAt this time we think it makes sense to:\n\n* implement a streaming API for downloads, this is basically the proposal on bug 1323414 and would allow add-ons that stream a large amount of data (for example Video Download Helper) to be ported over to WebExtensions. More bugs will be filed for this.\n\n* bug 1331618 allows extensions to store up to 20gb per file into indexeddb and use that as a virtual file system and should meet most storage systems. We might need to add in a library to make this easier to use, or re-use one that already exists.\n\nMost use cases we've found so far would fit into one of the two use cases above. So for the moment I'm dropping this down until we can find more use cases.", "author": "andy+bugzilla@mckay.pub", "id": 12010966, "time": "2017-01-25T21:17:52Z"}, {"text": "(In reply to Andy McKay [:andym] from comment #12)\n> Most use cases we've found so far would fit into one of the two use cases\n> above. So for the moment I'm dropping this down until we can find more use\n> cases.\n\nFor my add-on withExeEditor *1, it is essential that this bug is FIXED by Firefox 57.\nwithExEditor creates a temporary file in the OS's temporary folder for source view, selection view, and text editing, and passes that file path to the text editor.\nAnd when text editing, after user edits text, add-on gets that temporary file and update it in the web page.\n\nApart from this bug remaining, almost all the functionality has already been migrated to WebExtensions (not released yet).\n\n*1 https://addons.mozilla.org/en-US/firefox/addon/withexeditor/", "author": "kazz@asamuzak.jp", "id": 12011604, "time": "2017-01-26T00:52:03Z"}, {"text": "I presume withExeEditor uses native messaging to communicate with a local editor?  If so, the native application could do the filesystem reading and writing...", "author": "aswan@mozilla.com", "id": 12011748, "time": "2017-01-26T02:07:46Z"}, {"text": "(In reply to Andrew Swan [:aswan] from comment #14)\n> I presume withExeEditor uses native messaging to communicate with a local\n> editor?  If so, the native application could do the filesystem reading and\n> writing...\n\nPass whole content instead of file path to the host?", "author": "kazz@asamuzak.jp", "id": 12011751, "time": "2017-01-26T02:16:56Z"}, {"text": "(In reply to Kazumasa Hasegawa (Kazz) from comment #15)\n> Pass whole content instead of file path to the host?\n\nYes.  Are you worried about the size?  Its already data that's been moved across the network and is moving to a file, an extra inter-process copy doesn't seem like a problem...", "author": "aswan@mozilla.com", "id": 12011766, "time": "2017-01-26T02:35:51Z"}, {"text": "(In reply to Andrew Swan [:aswan] from comment #16)\n> Yes.  Are you worried about the size?  Its already data that's been moved\n> across the network and is moving to a file, an extra inter-process copy\n> doesn't seem like a problem...\n\nThanks. I'll think about that.\nIt seems to need total redesign again...", "author": "kazz@asamuzak.jp", "id": 12011769, "time": "2017-01-26T02:43:34Z"}, {"text": "With the proposed approach, how would one go about implementing addons in the vein of ASF (Automatic Save Folder) which need to circumvent the target folder restrictions described in Chrome's download API docs? \n\n(Or would an addon developer just have to ask non-Windows users to set the default download location to the filesystem root and warn Windows users that it's constrained to a single drive?)", "author": "from_bugzilla2@ssokolow.com", "id": 12012068, "time": "2017-01-26T06:37:17Z"}, {"text": "We would like to create a Firefox extension for Kiwix, based on https://github.com/kiwix/kiwix-html5/\nIt's an offline wikipedia reader, that reads its content inside big local files (and they can be very big : http://download.kiwix.org/zim/wikipedia/?C=S;O=D ). These files are usually copied from another media (or downloaded separately).\nIt already works by simply opening the local HTML file. But the user needs to manually select the file(s) each time (through an \"input type=file\").\n\nA browser extension with such filesystem API would allow us to :\n- remember the selected file(s), and re-open them automatically\n- \"package\" the application in a more user-friendly way than a local directory where the users needs to open an HTML file\n\nThe streaming API would be useless for us.\nA local sandboxed storage might technically work, but does not seem adequate to our use-case : the files will probably be too big for that, and the user will (I suppose?) be forced to download them from within the extension itself (instead of copying them offline).", "author": "mossroy@mossroy.fr", "id": 12012638, "time": "2017-01-26T12:37:06Z"}, {"text": "Direct local file system access is useful in may cases:\n\n1. Save addon data in a Dropbox / Google Drive / Box folder so that they can be synced across the web automatically.\n\n2. Specify an \"input\" and an \"output\" directory and perform a batch convert.\n\n3. Flush HTML + CSS + JS files in a specifically folder dynamically so that they can be opened from the  browser.\n\nThese effects cannot be achieved by FileSystem API, indexDB API, streaming API, or downloads API.", "author": "danny0838@gmail.com", "id": 12012801, "time": "2017-01-26T13:45:44Z"}, {"text": ">Andy McKay: So for the moment I'm dropping this down until we can find more use cases.\nWhat does \"dropping this down\" mean exactly (literally)?\n\nThis is this critical issue, WebExtensions can not be offered as the only recommended replacement if they are still so limited.\n\nAs for use cases, here one more: Addon wants to store some files with folders hierarchy in folder/pass, that was set/chosen by user.\nIt could be result of some parsing of page, some script's downloads or math evaluations, doesn't matter.\n\nThe previous extensions API allowed this, and the current - doesn't. It should be fixed, it's critical for such addons, you take what worked and replace with something less functional, it can't end well.\n\nLocal file system access IS MANDATORY, users and developers said that far more than once. It can be limited by permissions, by user manual approval as offered in commends, but it MUST be, otherwise Firefox will become another dull chromish-browser.\nLocal file system access IS MANDATORY. Thank you for your time.", "author": "vleett@yandex.ru", "id": 12013028, "time": "2017-01-26T15:02:48Z"}, {"text": "> Local file system access IS MANDATORY. Thank you for your time.\n\nI have to agree. At its core, there are two gaping holes in the new extension API which have me scrambling to arrange a Firefox exit strategy:\n\n1. The ability for extensions like Automatic Save Folder, downThemAll!, Greasemonkey, savetexttofile, ScrapBook, and TiddlyFox to integrate with the filesystem without going through the aforementioned crippled APIs\n\n2. The ability for Classic Theme Restorer and Stylish to revert enough of Australis to at *least* match Chrome's level of UI native-ness.\n\nGreasemonkey and savetexttofile should be simple fixes with some kind of external helper, so I'm not too worried about them. (I can't be the only userscript developer who iterates on scripts by opening the installed script and using `<Ctrl+S> <Tab> <F5>` to apply changes and my experiments say that it should be possible to force no-dialog saving so an inotify-based helper can pick up the output of a savetexttofile successor and append it to the actual destination file.)\n\nAutomatic Save Folder and downThemAll will be more painful, but I can probably replace them by writing a WebExtensions shim which essentially hijacks all Ctrl+S functionality and pipes the resulting stuff to JDownloader or KGet. (Possibly requiring an XGrabKey+XTest helper to remap my muscle memory if it doesn't have permission to universally hijack Ctrl+S)\n\nScrapBook may be OK if the raw on-disk format of Firefox's IndexedDB is documented enough for me to do I/O on it from outside the way I can with ~/incoming/ffox_scrapbook/\n\nIt's TiddlyFox and Classic Theme Restorer that are the big problems.\n\nTiddlyFox is already a life-support patch for the XPConnect-based save code in TiddlyWiki Classic and, while I really don't want to have to invent some kind of HTTP daemon whose only purpose is to open up a hole in Firefox to restore the ability for an HTML+JS quine to move foo.html to foo.html.backup and then write new foo.html and foo.xml (RSS) files, if I must then I must.\n\nAs for Classic Theme Restorer and the XUL style functionality in Stylish, well, let's just say that Chrome is closer to the browser I want than Australis would be without CTR. (The only use I have for \"lightweight\" theming is to recolor Chrome so it matches my Qt/GTK+ theme.)\n\nWithout Classic Theme Restorer, my exit strategy is looking like it'll be \"migrate as much as possible to Chrome-compatible WebExtensions, migrate the rest to external stuff like the Privoxy HTTP proxy server, install those extensions in Chrome, and then rely on Chrome's UI being closer to what I want while I wait for something like QWebEngine to implement WebExtensions support so it's feasible for me to maintain my own browser frontend.\"", "author": "from_bugzilla2@ssokolow.com", "id": 12013113, "time": "2017-01-26T15:30:54Z"}, {"text": "...and I just realized that I went off on a tangent there. My apologies.\n\nMy original intent in bringing CTR into the mix was to use it as part of an argument as to the degree of importance filesystem-accessing extensions play in my workflow, but I can't remember exactly how.", "author": "from_bugzilla2@ssokolow.com", "id": 12013214, "time": "2017-01-26T16:01:33Z"}, {"text": "After a quick review of Automatic Save Folder, it seems it does not need full filesystem access, it just needs an API to downloads to decide where the file should go. The API could be passed the originating domain or the file name and decide where it gets written. There's some nuance there like, it shouldn't allow overwriting files and there might be permissions we need to prompt the user about there, but seems doable.\n\nSimilarly for saving to a drop box folder, again the ability to run downloads to a specific location, or generate them using downloads.download API gets them into your DropBox folder. Then you can perform any processing of files on the native file system using nativeMessaging.\n\nDownThemAll is not planning on moving to WebExtensions as far as I know (although I'm not the author of that add-on so please don't take that as gospel). \n\nSaveTextToFile can use the downloads API to write a file to a location of the users choosing.", "author": "andy+bugzilla@mckay.pub", "id": 12037829, "time": "2017-02-03T22:34:35Z"}, {"text": "(In reply to Andy McKay [:andym] from comment #24)\n> After a quick review of Automatic Save Folder, it seems it does not need\n> full filesystem access, it just needs an API to downloads to decide where\n> the file should go. The API could be passed the originating domain or the\n> file name and decide where it gets written. There's some nuance there like,\n> it shouldn't allow overwriting files and there might be permissions we need\n> to prompt the user about there, but seems doable.\n\nThat'd definitely be doable for ASF. Heck, a proper WebExtensions API for determining destinations like that would actually be *better* for my use because it would turn ASF into little more than a visual programming frontend for an API I could easily and comfortably script directly.\n\n(There are various situations where ASF falls short currently because it doesn't support matching against selectors in the DOM and I'd like to implement things like \"On 'Save Image As...' on this list of *booru-style image boards, scrape the tags sidebar and map recognized combinations of tags to download folders based on priority ordering.\")\n\n> \n> Similarly for saving to a drop box folder, again the ability to run\n> downloads to a specific location, or generate them using downloads.download\n> API gets them into your DropBox folder. Then you can perform any processing\n> of files on the native file system using nativeMessaging.\n\nWithout overwrite, I have no reason to save into the Dropbox folder. ~/Dropbox isn't inside ~/incoming and, as a Linux user, I see the reliance on native messaging as a MAJOR step backward since I'll probably have to maintain forks of various extensions myself to get Linux support.\n\n...so, again, I'd probably just resort to some hack like setting my default downloads folder to to ~/.downloads_dispatch/ and then using `mount --bind` to outwit any \"don't follow symlinks\" mechanism.\n\nAs for TiddlyFox, Without the ability to either rename or overwrite arbitrary files, it'd be almost useless as anything more than a life-support harness for TiddlyWiki Classic. (TW5 already falls back to opening a save dialog every time you click \"Save\") ...so it would most definitely have to rely on a nativeMessaging helper without an API for that.\n\n(I suppose I could contribute one to them if it comes to that, given that Rust makes it easy to cross-compile to a fully statically-linked musl-libc target. Still, speculatively bundling dozens of different helpers for platforms like my arm-unknown-linux-gnueabi with X11 (my OpenPandora) is inferior to Just Working\u2122 on any platform as soon as someone cross-compiles Firefox itself... but, then, for my OpenPandora, it'd probably just be easier to keep an old Firefox build around.)\n\n> \n> DownThemAll is not planning on moving to WebExtensions as far as I know\n> (although I'm not the author of that add-on so please don't take that as\n> gospel). \n\nYeah. DTA was sort of loud about that.\n\nGiven that Giorgio Maone is more receptive, I'm hoping that FlashGot with either JDownloader or KGet will prove to be a suitable replacement. (Using the \"legacy\" JDownloader API which doesn't require a My.JDownloader account to add URLs is a pre-requisite for JDownloader being considered suitable.)\n\nI've already got a Chromium->JDownloader extension using the \"legacy\" API, so that's covered if I do decide that Firefox's demographic targeting has left me behind.\n\n> \n> SaveTextToFile can use the downloads API to write a file to a location of\n> the users choosing.\n\nThe reason I mentioned SaveTextToFile is that I use it in Append mode only and I don't know of any way to append to files using the downloads API.\n\n(In fact, I use it in append mode so habitually that I forgot to mention that because I forgot it supports anything else.)\n\nGive me an \"append to file\" API and I wouldn't mind spending the 15 minutes or less to replace SaveTextToFile with a webextension that hard-codes my preferred settings and displays a context menu entry that captures the selected text.", "author": "from_bugzilla2@ssokolow.com", "id": 12038031, "time": "2017-02-03T23:49:00Z"}, {"text": "*** Bug 1338780 has been marked as a duplicate of this bug. ***", "author": "aswan@mozilla.com", "id": 12059265, "time": "2017-02-11T15:40:12Z"}, {"text": "In bug 1338780 I gave two scenarios of usage, where necessary overwrite the files and full access to the file system at least in a special directory.\n\nIt should not be implemented with restrictions writed above. Need implementation, writeAtomic relevant in the current context with full access to the extension directory", "author": "fdsc@yandex.ru", "id": 12059320, "time": "2017-02-11T16:43:19Z"}, {"text": "I don't get what problem!\n - First of all we should define protocol for this (local://|fs://);\n - Second there must be unified paths on all platforms, so not this \"C:\\\\...\", \"/home/...\", but this \"local://shared/...\", \"local://secure/...\"\n - Accordingly to the second point there must be logical to physical paths mapping, which user can setup in about://settings\n - In manifest file (of webext) there should be field where developer define all files which he intent to use, for example: \"fs_perms\": {\"read\":[\"local://etc/1.txt\"],\"write\":[\"local://etc/1.txt\"],\"exec\":[\"local://etc/\", \"python\", \"npm\"]}. Any attempts to use not declared file should throw exception, and as option send the claim to AMO.\n - In AMO should be insistent block which in plain language tells what fs permissions this webext is require. And when xpi is downloaded an user push the install button, the should be another warning? for example popup with \"Omg! This extension attempt to override your /etc folder\" (in this stage we already know physical paths which ext will use.\n - Developers should can make self folders where they will store files easy accessible to user. For example \"local://books/\", \"local://pdfs\" etc. For this in fs_perms there should be additional field \"create\". When user install the extension there should be info alert which confirm creation of listed folders in desktop dir of user.\n - There should be \"local://tmp/\" which points to the system/user tmp dir.\n - There should be limits settings in about://settings page. If developer attempt to overcommit limits then he must specify in AMO webext home page that user should increase self limits otherwise his webext will crash when rich limits.\n - If webext require to read system files, then developer should do this through native-messaging to some system utils.\n - There should be opportunity to encrypt files in \"local://secure/\" folder. For example now it will be unencrypted, but we will explain in api docs that files in this folder can be encrypted in the future and developer should put to this folder only that files which should be readable only from his webext and none of others exts/programs/utils. Or he can provide sha/rsa/... keys and files in this folder will be encrypted transparently.\n - Each webext has own \"local://secure/\" folder. So should be dynamic mapping.\n - Should be opportunity to use other protocols. For example \"ftp\", \"sftp\", \"webdav\", \"http\", \"custom\"", "author": "jamy023@gmail.com", "id": 12080648, "time": "2017-02-19T10:29:29Z"}, {"text": "> I don't get what problem!\n\nIn my opinion, you did not read the comments above. For example, #27.\nExtensions need to write and to write in files with unknown in advance names.", "author": "fdsc@yandex.ru", "id": 12082012, "time": "2017-02-20T10:07:06Z"}, {"text": "Yes I read this thread. But from security view override any file in system is ugly. As alternative we can give opportunity to make personal folder for each extension where it can create any what it want names of files and read and write to. For example folders created with \"create\" property of fs_perms field has this omitted perms {\"read\": [\"local://folder/*\"], \"write\": [\"local://folder/*\"]}. Or we can accept specify folder as subject to write permissions ({\"write\":[\"local://etc/\"]}) then in this folder extension can do create rename delete files operations.", "author": "jamy023@gmail.com", "id": 12082520, "time": "2017-02-20T14:06:07Z"}, {"text": "Again, that doesn't help with cases like these:\n\n1. The whole purpose of the TiddlyFox extension is to allow TiddlyWiki HTML files to rename and overwrite themselves\n\n2. SaveTextToFile's append mode is predicated on allowing the user to define an arbitrary file path which will be appended to by selecting some text and then choosing a context menu entry.", "author": "from_bugzilla2@ssokolow.com", "id": 12082538, "time": "2017-02-20T14:12:51Z"}, {"text": "First of all TiddlyWiki not designed to be webextension. If you want, you can use localStorage for this purpose (not append themself but store changes to the some of storage).\nSecondary if you want to make extension based on TiddlyWiki, you can change sources that: In extension package html contain iframe which sourced to the created by extension folder, then in this extension you define command on \"Ctrl+s\" or define page action or browser action which read the iframe content and saves it to the folder. And voila!", "author": "jamy023@gmail.com", "id": 12082580, "time": "2017-02-20T14:32:46Z"}, {"text": "Ok, I was having a hard time making sense of your writing before, but now it's gotten so bad that I'm very worried I've misunderstood you somewhere.\n\nThat said, here's my best attempt...\n\n> First of all TiddlyWiki not designed to be webextension. If you want, you can use localStorage for this purpose (not append themself but store changes to the some of storage).\n\nCompletely unacceptable. I can't turn my localStorage into a URL like http://ssokolow.com/story_ideas.html (a hobby TiddlyWiki of mine) simply by running `rsync`, nor can I drop it onto a thumbdrive for anyone to read with whatever browser they have on hand.\n\n> Secondary if you want to make extension based on TiddlyWiki, you can change sources that: In extension package html contain iframe which sourced to the created by extension folder, then in this extension you define command on \"Ctrl+s\" or define page action or browser action which read the iframe content and saves it to the folder. And voila!\n\nI'm not entirely sure what you're trying to say here, but I'm pretty sure that I'd have to stick to versions of Firefox that allow me to disable extension signing enforcement in order to accomplish it.\n\nAll in all, I get the impression that you're saying something equivalent to \"No, we refuse to support Encrypted Media Extensions and you're not allowed to switch to Chrome for your NetFlix either.\" It's ridiculous and an impractical demand to make.\n\n(And, sure enough, if WebExtensions-only Firefox won't meet my needs, I'll grab the last pre-WebExtensions-only ESR, disable updates, and use that. \"Defining the problem away\" is no way to build a tool that people actually need to use to get work done.)", "author": "from_bugzilla2@ssokolow.com", "id": 12082624, "time": "2017-02-20T14:53:58Z"}, {"text": "Why you are want that TiddlyWiki will be webextension? Just save it where you want and open it when you want by double click on *.html. What problem? It was designed for such use. And no one will take away that opportunity.", "author": "jamy023@gmail.com", "id": 12082662, "time": "2017-02-20T15:07:07Z"}, {"text": "When I click \"Save\", TiddlyWiki Classic is supposed to save changes. It has no fallback mechanism for presenting a download dialog like TiddlyWiki 5.\n\nIt used to save via XULConnect. When that was taken away, they wrote TiddlyFox, a XUL extension which un-breaks the save feature and allows TiddlyWiki 5 to do it without the Save As dialog.\n\nMozilla wants to kill off XUL extensions and replace them with WebExtensions.\n\nThe only way TiddlyFox could allow saving via WebExtensions, currently, is to present a download dialog. \n\nIt's unacceptable for me to have to meddle with a download dialog every time I click Save or to store my TiddlyWikis in some special Firefox-specific place, rather than in the project folders where they currently reside alongside related things.", "author": "from_bugzilla2@ssokolow.com", "id": 12082677, "time": "2017-02-20T15:19:17Z"}, {"text": "Cool it guys, we all want Firefox to be good, flexible, powerful and secure.\n\nLet's try to agree on statement that there CAN BE extensions that NEED to write to local filesystem. The must-have requirement that should be fixed in memory, otherwise this issue will exist for years!\n\nMaybe it should be limited to some fixed folder, maybe with some permission-ask, maybe even with manual allowance via about:config, maybe this extension should be hidden by default on addons.mozilla.org, but let's fix that such extensions CAN and MIGHT be, agree?\n\nIf you agree, than the API to write to local filesystem in some folder is mandatory.\n\nPS. The issue was created more than a YEAR ago, any hope that someone will take responsibility for this task, mozilla-guys?", "author": "vleett@yandex.ru", "id": 12082693, "time": "2017-02-20T15:27:49Z"}, {"text": "PS2: And I agree with Stephan, that saving dialog is not acceptable for some tasks, because the extension might save the results in batch of files, and what the user should do, click 150 times? So the future solution should not be limited to per-file-manual-user-clicking thing like saving dialog.", "author": "vleett@yandex.ru", "id": 12082697, "time": "2017-02-20T15:31:21Z"}, {"text": "You will can map for example \"local://tiddlyFox/\" logical folder (where tiddlywiki future webext will use) to the your \"C://Projects/Wiki/somethingelse\" physical folder by two ways:\n1. In about:config make record \"webext.folders_mapping.tiddlyFox\" = \"C://Projects/Wiki/somethingelse\" (its not real key, it's for example);\n2. Make the system symlink from path where Firefox will want to store files appurtenant to the \"local://tiddlyFox\" to the needed destination.\n\nYou will do it only once and none of confirmation dialogs will be showed when this extension will be write to this folder (save your session). Except only one confirmation dialog (for creating new folder and report what fs actions this ext will do in your pc) when you install this extension.", "author": "jamy023@gmail.com", "id": 12082704, "time": "2017-02-20T15:36:35Z"}, {"text": "(In reply to jamy023 from comment #38)\n> You will can map for example \"local://tiddlyFox/\" logical folder (where\n> tiddlywiki future webext will use) to the your\n> \"C://Projects/Wiki/somethingelse\" physical folder by two ways:\n> 1. In about:config make record \"webext.folders_mapping.tiddlyFox\" =\n> \"C://Projects/Wiki/somethingelse\" (its not real key, it's for example);\n> 2. Make the system symlink from path where Firefox will want to store files\n> appurtenant to the \"local://tiddlyFox\" to the needed destination.\n> \n> You will do it only once and none of confirmation dialogs will be showed\n> when this extension will be write to this folder (save your session). Except\n> only one confirmation dialog (for creating new folder and report what fs\n> actions this ext will do in your pc) when you install this extension.\n\nNot very helpful, because:\n\n1. A lot of users (especially Windows users) have no idea what a symlink is.\n\n2. I'd just end up using `mount --bind` to point `local://tiddlyFox` at `/` in a way that any kind of \"protect you from yourself\" symlink checks wouldn't notice.\n\n2a. The only common root for /media/ssokolow/16GB_Flash, /home/ssokolow/src/ssokolow.com/story_ideas.html, /home/ssokolow/Documents/Critical/tiddlyme.html, and /home/ssokolow/Documents/writing/Non-Fiction/ is the root of the filesystem.\n\n2b. I don't feel like babysitting a bunch of symlinks as I create, move, and rename TiddlyWikis.\n\n3. Running TiddlyWiki off a thumbdrive using a PortableApps copy of Firefox is not uncommon, and that means you can't rely on the drive letter to remain constant. (TiddlyFox just pops up an \"Allow saving?\" dialog the first time you open up a TiddlyWiki on an unrecognized path)", "author": "from_bugzilla2@ssokolow.com", "id": 12082735, "time": "2017-02-20T16:01:23Z"}, {"text": "> 1. A lot of users (especially Windows users) have no idea what a symlink is.\n\nThis users actually have symlink opportunity. This users simply will use original folder which Firefox will made for this extension. Developers of extension can teach this users how map folder to the needed destination through about:config in his AMO webext home page. Or even how to make symlink in Windows.\n \n> 2. I'd just end up using `mount --bind` to point `local://tiddlyFox` at `/`\n> in a way that any kind of \"protect you from yourself\" symlink checks\n> wouldn't notice.\n\nIf you run Firefox as root then maybe true. But usually the system's acl will reject any attempts to override system files. Then extension will not work. You will not get any profit of this trick :)\n\n> 2a. The only common root for /media/ssokolow/16GB_Flash,\n> /home/ssokolow/src/ssokolow.com/story_ideas.html,\n> /home/ssokolow/Documents/Critical/tiddlyme.html, and\n> /home/ssokolow/Documents/writing/Non-Fiction/ is the root of the filesystem.\n\nI don't understand what this mean actually. Maybe you can use that:\nls $HOME/tiddlyFox/\n  ssokolow.com -> /home/ssokolow/src/ssokolow.com/\n  Critical -> /home/ssokolow/Documents/Critical/\n  writing -> /home/ssokolow/Documents/writing/\n\n> 2b. I don't feel like babysitting a bunch of symlinks as I create, move, and\n> rename TiddlyWikis.\n\nOtherwise you will hosting malware software (If webext's will have full filesystem privileges). Remember, webext's will run from your user (ssokolow), and theoretically have choice to look at any file in your home folder. Do you want that other (not tiddlyWiki) extension for example some advertise blocker or so, as payment for itself, collect info about you. Your conversations, bookmarks, web navigation history, passwords, keys from your ssh logins to the ssokolow.com host, bank moneykeepers keys, photos, etc is right paying for that freedom which you beg from us? \n \n> 3. Running TiddlyWiki off a thumbdrive using a PortableApps copy of Firefox\n> is not uncommon, and that means you can't rely on the drive letter to remain\n> constant. (TiddlyFox just pops up an \"Allow saving?\" dialog the first time\n> you open up a TiddlyWiki on an unrecognized path)\n\nAnd what problem? Just don't use manual mapping settings an lookup extension's data in most ease place -> Desktop or Home dir. Any desktop os propagate homedir path. And you can (if you want) tell Firefox to use different home dir, for example on thumbdrive. Developers of portable distribution of Firefox can do it for you.", "author": "jamy023@gmail.com", "id": 12082802, "time": "2017-02-20T16:46:17Z"}, {"text": "> I don't get what problem!\n> - First of all we should define protocol for this (local://|fs://);\n\n\nFireFox must implement very simple functions. The first requirement of security is simplicity.\nYou offered so intricate scheme that they themselves do not understand that it does not implement the use case in comments #27 .\nOr I did not understand. That is, your scheme is so complicated that some of us do not understand what is happening.\n\n\nFrom intricate schemes started the main security problems in architecture.\n\nTherefore, it is easier and safer make implementation the standard and simple operation. Which now supports FireFox.\nIf you want to restrict addons, the user could be asked to give permission for an extension.\n\n\nThe file operation should be implemented through a specially designed file API. Security operations should be implemented through a specially designed security features.", "author": "fdsc@yandex.ru", "id": 12085588, "time": "2017-02-21T18:52:12Z"}, {"text": "(In reply to fdsc from comment #41)\n> > I don't get what problem!\n> > - First of all we should define protocol for this (local://|fs://);\n> \n> \n> FireFox must implement very simple functions. The first requirement of\n> security is simplicity.\n\nWho saying that it's not simple? You? This is very simple and secure scheme.\n\n> You offered so intricate scheme that they themselves do not understand that\n> it does not implement the use case in comments #27 .\n> Or I did not understand. That is, your scheme is so complicated that some of\n> us do not understand what is happening.\n\nThe scheme like my is used for a long time. Remember chrome protocol. And even now in webextensions for access to extensions self files used similar scheme (web-extension://) the difference is it using some hash key for folder name, but mine scheme using human readable folders name. If you don't understand mine scheme how you will go forward? Maybe I can explain how my scheme is working and how it rich a safety? Give me a full usecase and I give you description how you can develop this with my scheme of FS API.\n\n> From intricate schemes started the main security problems in architecture.\n\nAgain: my scheme is not intricate. If it not clear for you it's does not mean that it not clear for others.\n\n> Therefore, it is easier and safer make implementation the standard and\n> simple operation. Which now supports FireFox.\n\nAs I explained before, Firefox using similar operations for a long time. And even more difficult.\n\n> If you want to restrict addons, the user could be asked to give permission\n> for an extension.\n\nMany users don't understand what happened and scared if some dialog windows appearing unexpected. And then they stopped touch the computer and call the support. Or simply accept all and doesn't worry.\n\n> The file operation should be implemented through a specially designed file\n> API. Security operations should be implemented through a specially designed\n> security features.\n\nExamples please. What security features?", "author": "jamy023@gmail.com", "id": 12085766, "time": "2017-02-21T19:43:16Z"}, {"text": "I think you need to add a bug 1215059 in blocks", "author": "fdsc@yandex.ru", "id": 12090713, "time": "2017-02-23T01:50:34Z"}, {"text": "> This is very simple and secure scheme.\n\nOnce again, if your scheme is simple, it does not satisfy the use case from Bug 1338780", "author": "fdsc@yandex.ru", "id": 12090716, "time": "2017-02-23T01:53:21Z"}, {"text": "(In reply to fdsc from comment #44)\n> > This is very simple and secure scheme.\n> \n> Once again, if your scheme is simple, it does not satisfy the use case from\n> Bug 1338780\n\n> 1. The user should be able to provide detailed logs if he gets an error and developer cannot be repeated.\n\nlocal://shared/logs/ for logs\n\n> 2. A developer wants get full user setting the additions. It is easiest to implement if it's possible to export the settings to the file.\n\nlocal://secure/settings.json\n\n>USE CASE 2\nIt is possible to transfer add-on settings between different versions of the add-on or between different user profiles (to set up similar profiles).\n\nlocal://shared/tiddlyFox/settings.json\n\nI think if developer a real developer he can explain to the user how to find \".mozila/firefox/webext_shared_data\" folder in his home folder if he searching files from local://shared/ logical folder. If user needs files from local://secure/ folder then he should find folder of his firefox profile and here he can find \"webext_secure_data\" folder where places folders with human readable names equals to extension names. And it's intricate for you?\n\nAnd this scheme of File Api eliminates of differences in different platforms as well as originality of technology allow developer to not worry about verry old versions of firefox, maybe even not worry about of absents of about:debugging", "author": "jamy023@gmail.com", "id": 12092996, "time": "2017-02-23T18:39:07Z"}, {"text": "> local://shared/logs/ for logs\n\nAnd in order to destroy the entire world you want local://destroyTheWorld\n\nDo you think or just write the names?\n\nIf you are not a developer or you have no qualification, let's not clutter this bug with useless arguments?\n\n\n> I think if developer a real developer he can explain to the user how to find\n\nI think if the developer is a real developer, there is no need to explain to the user how to do the actions that user do not want to do.", "author": "fdsc@yandex.ru", "id": 12095028, "time": "2017-02-24T10:50:31Z"}, {"text": "> And this scheme of File Api eliminates of differences in different platforms as well as originality of technology allow developer to not worry about verry old versions of firefox, maybe even not worry about of absents of about:debugging\n\nIt is not the schemes, but that addition is not able to write and read files. This scheme is just useless, as it does not implement file operations.", "author": "fdsc@yandex.ru", "id": 12095070, "time": "2017-02-24T10:52:31Z"}, {"text": "(In reply to fdsc from comment #46)\n> > local://shared/logs/ for logs\n> \n> And in order to destroy the entire world you want local://destroyTheWorld\n\nIf developer of extension is declare in manifest that he want to create destroyTheWorld folder then he can write to or read form. The user when will install this extension will see that this extension wants ot create that folder on his desktop.\n \n> Do you think or just write the names?\n> \n> If you are not a developer or you have no qualification, let's not clutter\n> this bug with useless arguments?\n\nI am a developer. And you my dear friend, come up the unreal usecases.\n\n> > I think if developer a real developer he can explain to the user how to find\n> \n> I think if the developer is a real developer, there is no need to explain to\n> the user how to do the actions that user do not want to do.\n\nThis your idea that user must send logs and settings to the developer if extension is throw exceptions.\n\n(In reply to fdsc from comment #47)\n> > And this scheme of File Api eliminates of differences in different platforms as well as originality of technology allow developer to not worry about very old versions of firefox, maybe even not worry about of absents of about:debugging\n> \n> It is not the schemes, but that addition is not able to write and read\n> files. This scheme is just useless, as it does not implement file operations.\n\nIt is concept. Which we can use. If you my dear friend don't get yet, then I explain you that new webextension is much more different from old addons and as proof I can give you a quote: \n\nhttp://webextensions-experiments.readthedocs.io/en/latest/new.html\n\nThere are some basic principles around WebExtensions APIs as they currently stand. Any API that wants to get merged into Firefox would need to meet these principles.\n\n    Security: the API should not expose an unacceptable risk to the end user.\n    Privacy: similar to above.\n    Performance: APIs should be async by default and focus on not causing jank, hangs or any sort of bad performance in Firefox.\n    Multi-process: all APIs need to be multi-process aware.\n    Useful: APIs that land in Firefox should be useful since all APIs have a maintenance burden.\n    High level: WebExtensions provide a known public API layer on top of Mozilla code, allowing the underlying code to change quicker and easier.\n    Alternatives: Do alternatives exist for example, WebAPIs?\n\nCompared to legacy Firefox add-ons there is a significant sandbox around WebExtension APIs that is very restrictive. Access to priviledged APIs within Firefox, preferences, arbitrary File System access, socket access and so on are restricted (at the time of writing this documentation). APIs that break out of this sandbox will need very clear justification for why.", "author": "jamy023@gmail.com", "id": 12095247, "time": "2017-02-24T11:56:57Z"}, {"text": "> This your idea that user must send logs and settings to the developer if extension is throw exceptions.\n\nHow this log will be recorded by the extension?\nWrite the example of code that write to log\n\n\n> need to meet these principles.\n\nFirst of all, these APIs should function. If someone thinks that some feature is dangerous, the user must choose if you want it or not. The user and not the developer who chooses.\n\nThe most secure API, that which does not exist.\nI now write the browser without any extensions. Or to do without a browser. After all, it will be safer.", "author": "fdsc@yandex.ru", "id": 12095270, "time": "2017-02-24T12:09:00Z"}, {"text": "(In reply to fdsc from comment #49)\n> > This your idea that user must send logs and settings to the developer if extension is throw exceptions.\n> \n> How this log will be recorded by the extension?\n> Write the example of code that write to log\n\n1) function someOuterFunction(){\n  //some code here\n  try {\n    //some code that may not work\n    dangerousMethod();\n  } catch (error) {\n    fs.appendFile('local://shared/logs/tiddlyFox/erros.log', error.message);\n  }\n  //some code here\n}\n\n2) function someOuterFunction(){\n  //some code here\n\n  //some code that may not work\n  dangerousMethod().then(success, function(error){\n    fs.appendFile('local://shared/logs/tiddlyFox/erros.log', error.message);\n  });\n  //some code here\n}\n\n3) function someOuterFunction(){\n  //some code here\n\n  //some code that may not work\n  var result = dangerousMethod();\n\n  if(result == undefined) {\n    fs.appendFile('local://shared/logs/tiddlyFox/erros.log', runtime.lastError);\n  }\n  //some code here\n}\n\n4) runtime.onUnhandledException = function(error) {\n     fs.appendFile('local://shared/logs/tiddlyFox/erros.log', error.message);\n}\n\nMore questions?\n\n> > need to meet these principles.\n> \n> First of all, these APIs should function.\n\nFirst rule -> don't harm\nSecond rule -> help him if can don't break the first rule\n\n> If someone thinks that some feature is dangerous, the user must choose if you want it or not. The user\n> and not the developer who chooses.\n\nWho knows is it danger or not? Nobody! It can work fine and malicious code can sleep long time, meanwhile this extension will acquire big group of users. And when user will see confirm dialog, he look at extension home page and find: \"over thousand downloads, five stars, no abuse reports\" - ok! this is good extension! Confirm!\n\n> The most secure API, that which does not exist.\n\nDo you propose that we are choose:\n  or make most secure API (that which does not exist)\n  or make most unsecure API (that you beg from us)\n?\n\nWe are choosing middle. \n\n> I now write the browser without any extensions. Or to do without a browser.\n> After all, it will be safer.\n\nYou can still use legacy bootstrapped add-ons if you don't like webextensions", "author": "jamy023@gmail.com", "id": 12095415, "time": "2017-02-24T13:42:58Z"}, {"text": "> More questions?\n\nIt dawned on me. You suggest to make the file API with the limited special scheme \"local\". But the API is generally the same.\nAnd the user can install the appropriate directories and local directories on your computer.\n\nBut do this in FireFox and so it was convenient. That is someone everyone needs to realize, so much so that the user chooses his need. And that it could, if user necessary, to remove all restrictions, as if the extension works with the whole filesystem.\n\nOtherwise it can be very uncomfortable for the user.\n\n\n> You can still use legacy bootstrapped add-ons if you don't like webextensions\n\nAs I understand it, the SDK functionality will be disabled in November.\n\n\n> It can work fine and malicious code can sleep long time\n\nThe user have risks when installing application on your computer. For example, installation a licensed game with a safe driver or even a network card driver.\nWith them, the situation is much worse.\n\n\n> Who knows is it danger or not? Nobody!\n1. AMO gallery editors for gallery extensions.\n2. User. User takes risks when installing any software on his computer. How he decides is his business. We only need to give him information about what he may really need it. The decision is the one who manages risk. Manages the user.\nThe developers of FireFox don't have to solve everything for everyone. People don't like it. People want to live in self mind. No Mozilla mind.\n\n\nWorking with the file system can be limited by means of the operating system if the user is afraid. I do for certain applications.", "author": "fdsc@yandex.ru", "id": 12095591, "time": "2017-02-24T14:38:15Z"}, {"text": ">> And that it could, if user necessary, to remove all restrictions, as if the extension works with the whole filesystem.\n\nUsage scenario: any save files: for example, simple encryption and file conversion.\n\n\nThat is, the user must still have the ability to set \"local\" scheme for this extension as if it was on the entire file system. I am afraid, however, it will be difficult to properly implement. But it will allow the user to find a balance between security and convenience.", "author": "fdsc@yandex.ru", "id": 12095613, "time": "2017-02-24T14:44:37Z"}, {"text": "(In reply to fdsc from comment #51)\n> But do this in FireFox and so it was convenient. That is someone everyone\n> needs to realize, so much so that the user chooses his need. And that it\n> could, if user necessary, to remove all restrictions, as if the extension\n> works with the whole filesystem.\n\n> Otherwise it can be very uncomfortable for the user.\n\nIf user so need to use this danger opportunity, then he can:\n1. stick with \"Nightly\" or \"Firefox developer edition\" and install webexperiment (which has privileged API access) and install the webextension which will requests to webexperiment for privileged actions.\n2. Some portion of time developers can use embedded webextensions. This is hybrid of legacy bootstrapped addon with new webextension in one single addon. This type of privileged add-ons we will support as long as possible so the developers have time to port their addons to new API (and migrate data of course). Two main difference is that you can't use XUL and can't use \"chrome\" module API.\n \n> > You can still use legacy bootstrapped add-ons if you don't like webextensions\n> \n> As I understand it, the SDK functionality will be disabled in November.\n\nI am described the situation above.\n \n> > It can work fine and malicious code can sleep long time\n> \n> The user have risks when installing application on your computer.\n\nOn my computer? Or maybe on self computer?\n\n> For example, installation a licensed game with a safe driver or even a network\n> card driver.\n> With them, the situation is much worse.\n\nIt's not the Mozilla problems. They only want to deliver better product, like Chrome/Opera developers.\n\n> > Who knows is it danger or not? Nobody!\n> 1. AMO gallery editors for gallery extensions.\n\nNo resources for that. You will be volunteer? Even that, who knows, maybe you friend of extension developer and purposely miss the danger extension.\n\n> 2. User. User takes risks when installing any software on his computer. How\n> he decides is his business. We only need to give him information about what\n> he may really need it. The decision is the one who manages risk. Manages the\n> user.\n\nMany users don't read just confirm. And then \"Omg! This browser so slow! It eat all of my RAM! It hang my system....\". Again if some restriction is redundant then we away it. But at this moment you don't give me real justification that full filesystem access is very important for the main part of extensions. Example about tiddlyWiki is very custom, but I am resolve it for you. Example about logs and settings too. Do you have more usecases where full fs access very need?\n\n> The developers of FireFox don't have to solve everything for everyone.\n> People don't like it. People want to live in self mind. No Mozilla mind.\n\nI think it's you trying to solve \"everything for everyone\". Who says that this concept don't cover all usecases? Or you trying to solve just self usecase and never mind about security of others?\n \n> Working with the file system can be limited by means of the operating system\n> if the user is afraid. I do for certain applications.\n\nNo! The reality is so that one system almost nevermind on ACL's (if you specially don't turn on this, what don't do 90% of users of this system), and other type of modern system use same user profile for all applications that user run (any app can see data produced by other app, and even modify). Little better situation with this in modern mobile systems, but we are talking about desktop systems now (if interesting, then I can give the cue that they use similar concept which I propose there).", "author": "jamy023@gmail.com", "id": 12095977, "time": "2017-02-24T16:35:17Z"}, {"text": "(In reply to fdsc from comment #52)\n> >> And that it could, if user necessary, to remove all restrictions, as if the extension works with the whole filesystem.\n> \n> Usage scenario: any save files: for example, simple encryption and file\n> conversion.\n\nOk! I will describe an this usecase. Developer make extension which have page with form on it. In this form there is <input type=\"file\" html component. And declare in manifest file of his extension that will be write to \"local://tmp/megaencryptapp.out\". Then when user open extension he must simply push on input=file button, then system's choose file dialog appears. When user choose and confirm, then content of selected file will appear for js scripts of extension through DOM File API (https://developer.mozilla.org/en/docs/Web/API/File). Then extension do the job on it. When it done, it write result to the \"local://tmp/megaencryptapp.out\" and open next page where will be written \"Success! You can save the result right now by clicking on this <a href=\"local://tmp/megaencryptapp.out\">link</a>\". When user click on this link the standard open/save dialog appear and user can save result where would he like. And voila!\n\n> That is, the user must still have the ability to set \"local\" scheme for this\n> extension as if it was on the entire file system. I am afraid, however, it\n> will be difficult to properly implement. But it will allow the user to find\n> a balance between security and convenience.\n\nCompletely don't get whole paragraph.", "author": "jamy023@gmail.com", "id": 12096070, "time": "2017-02-24T17:03:57Z"}, {"text": "Hello fdsc and jamy,\n\nThank you for your information, I think we have enough information to properly evaluate this proposal at the next meeting.\n\nThere is no reasons for you to continue arguing the points anymore, so I encourage you to end this discussion, as it doesn't seem very productive anymore.  Thank you.", "author": "tomica@gmail.com", "id": 12096381, "time": "2017-02-24T18:30:55Z"}, {"text": "I can just echo fdsc, many plugin depend on file access, TiddlyWikibeing one of them. We need some sort of solution not to loose many useful plugins.", "author": "akos@szederjei.eu", "id": 12149118, "time": "2017-03-15T22:45:02Z"}, {"text": "The easiest way to do this would probably be using the chrome.fileSystem app api. Firefox already added support for those filesystem interfaces for web folder upload. It may be possible to convince Chrome to enable that api for extensions.\n\nhttps://developer.chrome.com/apps/fileSystem", "author": "danielherrsoftware@gmail.com", "id": 12185694, "time": "2017-03-28T20:42:47Z"}, {"text": "I have been keeping an eye on this topic for months. There are many occasions that are not covered by what was suggested earlier. \n\nAs an example, I have an addon that requires some sort of file read (only READ and only for IMAGES) from ContextMenu action. I have been waiting to migrate to WebExtension, once an API becomes available.\n\nIt converts images to Data:URI. There is no problem with remote images but when the image is local (from file system) there is no method to read it in WebExtension in order to convert it to data:URI.\n\nFor example, user drops an image to the browser window. At the moment, my addon can read and convert it and send the data.\nAnother example is when user opens a local file (eg HTML) which includes a local image. That image will have a local src.\n\nIt is worth noting that in my cases, addon does not need access to unknown arbitrary files. I only needs access to files that are already opened by the user and displayed by the browser.\n\nFor my own use, I would be happy with any method that allows me to read that file, even if it is from the browser windows itself or browser cache.\n\n\nA further limitation can be imposed by limiting file access by type/extension as well as separate read and write permissions.\nI would only need READ and only for IMAGE types.\n\nAlso .. ref bug 1266960", "author": "eros_uk@yahoo.co.uk", "id": 12235685, "time": "2017-04-14T11:21:23Z"}, {"text": "(In reply to erosman from comment #58)\n> For example, user drops an image to the browser window. At the moment, my\n> addon can read and convert it and send the data.\n\nThis is you can achieve even now by DOM File API (https://developer.mozilla.org/en/docs/Web/API/File)\nWorking example is http://jsfiddle.net/z3JtC/4/\n\n> Another example is when user opens a local file (eg HTML) which includes a\n> local image. That image will have a local src.\n\nThis is not problem, the canvas \"src\" property can be path relative to the html file path. Don know about windows firefox builds, but in my linux firefox 52.0.1 working fine.\n \nvar canvas = document.getElementById('myCanvas');\nvar context = canvas.getContext('2d');\nvar imageObj = new Image();\n\nimageObj.onload = function() {\n  context.drawImage(imageObj, 69, 50);\n};\nimageObj.src = 'darth-vader.jpg';", "author": "jamy023@gmail.com", "id": 12235774, "time": "2017-04-14T12:50:43Z"}, {"text": "> This is you can achieve even now by DOM File API (https://developer.mozilla.org/en/docs/Web/API/File)\nWorking example is http://jsfiddle.net/z3JtC/4/\n\nThat is not the intension. The intension is NOT to use file input by the user to OPEN the file but use ContextMenu on an already opened image.\n\nUsing New File() with local file (ie file:///.....jpg) will result in error.\n\nSimilarly, using canvas fails with imageObj.src = 'file:///....darth-vader.jpg';\n\nI have even tried fetch and XHR and all fail since access to local file of all these APIs is blocked via match patterns for \"<all_urls>\"", "author": "eros_uk@yahoo.co.uk", "id": 12235791, "time": "2017-04-14T13:04:48Z"}, {"text": "Ok. I see. I am even had experiments with your example yesterday. In webext scripts canvas.toDataURL throw securityError even for image not local but from https. Local images simply produce dataUrl with empty picture (black square). So you only one exit -> when user click on context menu item, you need open new tab (or popup window) where will be html page (from extension) opens in normal (not webext) mode. There you can place script like I am give you in comment 59 (not jsfiddle). This scheme will work", "author": "jamy023@gmail.com", "id": 12237704, "time": "2017-04-15T09:21:56Z"}, {"text": "A filesystem API for WebExtensions is absolutely necessary. We just have to make sure each extension only gets access to the paths the user wants it to. Maybe this will require an additional sophistication of the permission system, but it's necessary. Many add-ons which prevent users from switching to the Chrome-likes depend on the filesystem I/O.\nI'm planning to make a privacy-focused add-on which would enable users not only to delete their browsing data, but to also shred it (i.e. overwrite it with random bytes) so that it's unrecoverable. This feature is wanted by many users choosing to access sensitive data through their browser. Unfortunately I cannot do this through the currently presented WebExtensions APIs, and I don't feel like using legacy deprecated technologies which are going to get discared soon. So I will be watching this issue closely so as to be notified when I can get to work.", "author": "ashpool@xecut.net", "id": 12267190, "time": "2017-04-26T13:01:45Z"}, {"text": "(In reply to ashpool from comment #62)\n> I'm planning to make a privacy-focused add-on which would enable users not\n> only to delete their browsing data, but to also shred it (i.e. overwrite it\n> with random bytes) so that it's unrecoverable. This feature is wanted by\n\nIt's too much for webextension. I think you should don't wait this feature. You probably better to make standalone application which do the job and which user will install in operating system if he need this. For example with electron.io. For example I am as a user will worry about how this (privacy-focused) extension can break my privacy, than about my browsing data will remain in current device, because I am trust Mozillas guys more than someone who published some extension in extension store.\n\nP.S. You should understand that extensions is cool, but main purpose of browser is sites, and browsing should be secure for user", "author": "jamy023@gmail.com", "id": 12267705, "time": "2017-04-26T15:20:03Z"}, {"text": "Session Manager with 250k users also needs this API because it stores saved sessions in a separate folder in Firefox profile. Also, http://forums.mozillazine.org/viewtopic.php?p=14730663#p14730663\n>At this point things don't look good. Web Extenstions don't give access to the API that Session Manager needs to actually save or restore sessions, let alone anything else it does. The only thing Web Extensions currently allows is reopening closed tabs from that current browser session. There is no way to \"save\" the session state and restore it after the browser has been closed and reopened\nIt looks like the developer of this addon didn't try to request the needed APIs for some reason so I decided to leave a comment in this thread in order to pay attention to the fact session manager will die after FF57 is released if the needed APIs are not implemented.", "author": "ajfhajf@yandex.ru", "id": 12270465, "time": "2017-04-27T09:01:57Z"}, {"text": "(In reply to ajfhajf from comment #64)\n> Session Manager with 250k users also needs this API because it stores saved\n> sessions in a separate folder in Firefox profile. Also,\n> http://forums.mozillazine.org/viewtopic.php?p=14730663#p14730663\n> >At this point things don't look good. Web Extenstions don't give access to the API that Session Manager needs to actually save or restore sessions, let alone anything else it does. The only thing Web Extensions currently allows is reopening closed tabs from that current browser session. There is no way to \"save\" the session state and restore it after the browser has been closed and reopened\n> It looks like the developer of this addon didn't try to request the needed\n> APIs for some reason so I decided to leave a comment in this thread in order\n> to pay attention to the fact session manager will die after FF57 is released\n> if the needed APIs are not implemented.\n\nThis is not true at all! I think that developer of this extension dont't request this API because clearly understand that he make a mistake when decided to store data directly to the file system. This is job for databases. And this feature we already have, and he can start to port his extension", "author": "jamy023@gmail.com", "id": 12270514, "time": "2017-04-27T09:20:51Z"}, {"text": "> I think that developer of this extension dont't request this API because clearly understand that he make a mistake when decided to store data directly to the file system\n\n\nI think he clearly understood what he wants.\nHe is not alone keeps the options of add-on in the file system. And, as has been indicated, there are other use cases.\n\nDatabases are generally unsuitable for a normal production use.", "author": "fdsc@yandex.ru", "id": 12272418, "time": "2017-04-27T19:34:13Z"}, {"text": "(In reply to fdsc from comment #66)\n> > I think that developer of this extension dont't request this API because clearly understand that he make a mistake when decided to store data directly to the file system\n> \n> \n> I think he clearly understood what he wants.\n> He is not alone keeps the options of add-on in the file system. And, as has\n> been indicated, there are other use cases.\n> \n> Databases are generally unsuitable for a normal production use.\n\nAny who use filesystem to store data should adopt their add-ons to use other solutions. There are two choices:\n\n- they adopt their add-ons\n- they not adopt and world lost their addons forever\n\nTime of super-privileged extensions is gone. Who is against, that can use old versions or alternative forks. Filesystem will be, but not full and restricted. So we should turn on creative thinking and don't be afraid to redesign old goods", "author": "jamy023@gmail.com", "id": 12272951, "time": "2017-04-27T21:46:31Z"}, {"text": "(In reply to jamy023 from comment #67)\n> (In reply to fdsc from comment #66)\n> > > I think that developer of this extension dont't request this API because clearly understand that he make a mistake when decided to store data directly to the file system\n> > \n> > \n> > I think he clearly understood what he wants.\n> > He is not alone keeps the options of add-on in the file system. And, as has\n> > been indicated, there are other use cases.\n> > \n> > Databases are generally unsuitable for a normal production use.\n> \n> Any who use filesystem to store data should adopt their add-ons to use other\n> solutions. There are two choices:\n> \n> - they adopt their add-ons\n> - they not adopt and world lost their addons forever\n> \n> Time of super-privileged extensions is gone. Who is against, that can use\n> old versions or alternative forks. Filesystem will be, but not full and\n> restricted. So we should turn on creative thinking and don't be afraid to\n> redesign old goods\n\n...or, in cases where we end users don't like that arrogant \"we know better\" attitude, we can concoct our own filesystem-access APIs using either the native messaging API or a localhost HTTP daemon.\n\nThat's what I plan to do if TiddlyFox can't retain its ability to grant single-HTML-file TiddlyWikis the ability to copy file://$CURRENT_URL to file://$CURRENT_URL.backup, overwrite file://$CURRENT_URL, and then overwrite file://$CURRENT_URL_MINUS_EXT.xml if an RSS feed is requested.\n\n(If I have to implement it myself, I'll probably go the HTTP route so I can whip up something small and simple with a UAC-esque UI using Rust, cross-compile to all the major platforms, and then let a single install service multiple browser extensions without a ton of config-file fiddling.)", "author": "from_bugzilla2@ssokolow.com", "id": 12273195, "time": "2017-04-27T23:32:27Z"}, {"text": "(In reply to Stephan Sokolow from comment #68) \n> ...or, in cases where we end users don't like that arrogant \"we know better\"\n> attitude, we can concoct our own filesystem-access APIs using either the\n> native messaging API or a localhost HTTP daemon.\n> \n> That's what I plan to do if TiddlyFox can't retain its ability to grant\n> single-HTML-file TiddlyWikis the ability to copy file://$CURRENT_URL to\n> file://$CURRENT_URL.backup, overwrite file://$CURRENT_URL, and then\n> overwrite file://$CURRENT_URL_MINUS_EXT.xml if an RSS feed is requested.\n> \n> (If I have to implement it myself, I'll probably go the HTTP route so I can\n> whip up something small and simple with a UAC-esque UI using Rust,\n> cross-compile to all the major platforms, and then let a single install\n> service multiple browser extensions without a ton of config-file fiddling.)\n\nNative message API is better. Localhosted HTTP daemon is like use sledgehammer for nailing.\n\nAnd again you can store data in the db and have button with \"Export to file\". Only when button will be pressed then will be opened SaveAs dialog where user can select path where he want to save this wiki. The only one trouble I see is how to continue work when user next time open this file from file explorer (file://...). And from this case there is solution: you can inject content script to \"<all_urls>\". Then when in time of export to file you should place <meta name=\"GENERATOR\" content=\"TiddlyWiki\"> tag in <head> as flag means that content script should work with this page. Next is up to your fantasy.\nThis is all easy but for some reason you can't see this and make horrible solutions in Rust and localhosted http daemons, or beg us full filesystem access.", "author": "jamy023@gmail.com", "id": 12274225, "time": "2017-04-28T10:31:29Z"}, {"text": "> Native message API is better. Localhosted HTTP daemon is like use sledgehammer for nailing.\n\nThat depends on how you're evaluating it. \n\nThe Native Messaging API is clearly designed with an undercurrent of \"make this API a prohibitive hassle to use unless the external component is primary enough to justify having its own full-blown installer.\"\n\nMy evaluation is based on end-user experience and, as such, I'd see the HTTP option as a superior choice because a single, simple install could produce an unofficial API extension that many add-ons (if necessary, unsigned and running via Developer Edition or un-branded builds) could share with little bother.\n\n(Basically, if need be, I'm willing to reinvent an improved version of the popup permission dialog that TiddlyWiki originally had via the XULConnect API for filesystem access.)\n\n> And again you can store data in the db and have button with \"Export to file\"....\n\nYou don't understand my needs.\n\nA TiddlyWiki is a self-contained, structured document, more like a MS Word document in how it's saved, loaded, and shared. Try to imagine how much hue and cry there would be if an update to MS Word suddenly complicated the opening, saving, and sharing of documents like that.\n\nHeck, TiddlyWiki 5 already has a Save As... dialog as a fallback.\n\nEven if I were willing to risk losing up to 24 hours of progress to a saving bug not being countered by wiki_name.html.backup (that did almost happen once) and even for the wikis where I'm not generating an RSS feed, popping up a Save As... dialog every time I hit Save is completely unacceptable.\n\n(Also, TiddlyWiki isn't the only thing I'm thinking of which needs this kind of functionality... it's just the one that's hardest to hand-wave away by saying \"Screw it. I'm turning it into a native app. I can embed Blink in PyQt if need be and use py2exe to bundle it all up for thumbdrive use on the go.\")", "author": "from_bugzilla2@ssokolow.com", "id": 12274252, "time": "2017-04-28T10:50:46Z"}, {"text": "(In reply to Stephan Sokolow from comment #70)\n> (Basically, if need be, I'm willing to reinvent an improved version of the\n> popup permission dialog that TiddlyWiki originally had via the XULConnect\n> API for filesystem access.)\n\nI am understand this.\n\n> > And again you can store data in the db and have button with \"Export to file\"....\n> \n> You don't understand my needs.\n> \n> A TiddlyWiki is a self-contained, structured document, more like a MS Word\n> document in how it's saved, loaded, and shared.\n\nMS Word is only file format. Opening in MS Office suite.\n\n> Try to imagine how much hue and cry there would be if an update to MS Word suddenly complicated the\n> opening, saving, and sharing of documents like that.\n\nI am remember that for working with .doc/.docx docs I must \"OPEN\" it in Office suite then \"SAVE\" (export from RAM to Disk) it then I can share it. What wrong in my solution? (Thing that you call wiki_name.html.backup can be implemented in localStorage)\n\n> Heck, TiddlyWiki 5 already has a Save As... dialog as a fallback.\n> \n> Even if I were willing to risk losing up to 24 hours of progress to a saving\n> bug not being countered by wiki_name.html.backup (that did almost happen\n> once) and even for the wikis where I'm not generating an RSS feed, popping\n> up a Save As... dialog every time I hit Save is completely unacceptable.\n\nNot every time, but only when you going to share (or save to thumbdrive) this wiki. All other time changes will be stored to the database and any time you can comeback and continue work with wiki.\nFor example you export your wiki today (12:00 4/28/2017) then you continue modify this wiki but without exports (all changes collecting in localStorage) then suddenly the electric power goes out (16:00 4/28/2017) until next day (12:00 4/29/2017). You going to continue work with this wiki -> open exported document, content script injected to it, checks if this doc is tiddlywiki exported document (through meta tag), then if true check maybe there is new version of this wiki in localStorage, time of opened doc is 12:00 4/28/2017 but it see that in localstorage there is newer version 16:00 4/28/2017 so it immediately change the content of this doc to the new content from localStorage (not in file but only in DOM). And in some place you can show message says that time to re-export this wiki to file. So saveAs dialog will appear very rarely only before real export to file. Even if user close the browser he can do it without fear that his work will be lost all there, wait for him.\nI think now you clearly understand needed workflow.\n\n> (Also, TiddlyWiki isn't the only thing I'm thinking of which needs this kind of functionality...\n\nTiddlyWiki is very alternative case IMHO. The idea is good but it's value in today world is exaggerated by you. It's cool toy, nothing more. Lets imagine how much time we will lost if this bugzilla would work on TiddlyWiki. I see only one case for it is personal organizer, but then it's not wiki. Wiki is knowledge sharing system. How you can share knowledge from file://...? No way! If you host it in http:// then you better to use normal wikis, because yes you (as owner of host) share knowledge to the people, but they can't share their knowledge through it so this is not wiki, this is static site.\n\n> it's just the one that's hardest to hand-wave away by\n> saying \"Screw it. I'm turning it into a native app. I can embed Blink in\n> PyQt if need be and use py2exe to bundle it all up for thumbdrive use on the\n> go.\")\n\nI see you have much time, you are lucky :)", "author": "jamy023@gmail.com", "id": 12274486, "time": "2017-04-28T13:03:46Z"}, {"text": "(In reply to jamy023 from comment #71)\n\n> TiddlyWiki is very alternative case IMHO. The idea is good but it's value in\n> today world is exaggerated by you. ... Wiki is\n> knowledge sharing system. How you can share knowledge from file://...? No\n> way!\n\nYou are correct that this isn't a very popular use case right now, but I don't believe you are seeing the utility of Stephan's examples.  There is a lot of being done to share data directly, filtered and processed through lightweight pieces of code; end users host their own copies of data and share in ways outside a centralized site, eg. IPFS.  Don't save in a DB and install complicated programs to map back and forth; work directly on the data.  This is an different paradigm, and it'll be great if Mozilla can stay relevant in that world... and even better if Mozilla designs a good solution and becomes the tool of choice.", "author": "trent@trentlarson.com", "id": 12276503, "time": "2017-04-29T01:36:43Z"}, {"text": "(In reply to trent from comment #72)\n> You are correct that this isn't a very popular use case right now, but I\n> don't believe you are seeing the utility of Stephan's examples.  There is a\n> lot of being done to share data directly, filtered and processed through\n> lightweight pieces of code; end users host their own copies of data and\n> share in ways outside a centralized site, eg. IPFS. \n\nI'm not against. Let's they can share! I just explaining to Stephan how to achieve this without direct file access. \n\n> Don't save in a DB and install complicated programs to map back and forth; work directly on the\n> data.  This is an different paradigm, and it'll be great if Mozilla can stay\n> relevant in that world... and even better if Mozilla designs a good solution\n> and becomes the tool of choice.\n\nYou don't get me. There is a couple of DB included in browser. Not needed install any soft, just make TiddlyWiki firefox web extension little bit different from official TiddlyWiki (other words adopt to extension environment)\n\nP.S. Firefox have enough features for comfort working with TiddlyWiki. But you (don't you trent) beg more and more like how Firefox is created exclusively for you or for desktop utility applications.", "author": "jamy023@gmail.com", "id": 12276688, "time": "2017-04-29T09:00:39Z"}, {"text": "(In reply to jamy023 from comment #67)\n> (In reply to fdsc from comment #66)\n\n> Any who use filesystem to store data should adopt their add-ons to use other\n> solutions. There are two choices:\n> \n> - they adopt their add-ons\n> - they not adopt and world lost their addons forever\n>\n\nI repeat. Database completely unusable. At many years. You leave only one choice: to cease writing the workers extensions. Because databases add-on is always off.\nThe defects are not closed for the year. Then it close. Sometimes without a well correcting. And then again it wait a year. And again correct. And again, new defects appear, and wait a year.\nAll this time, that is years and years, extensions are unable to work normally.\n \n> So we should turn on creative thinking and don't be afraid to\n> redesign old goods\n\nThe impression is that this is not need Mozilla for the authors of extensions but need authors for the Mozilla. This is not so.", "author": "fdsc@yandex.ru", "id": 12276771, "time": "2017-04-29T10:47:43Z"}, {"text": "(In reply to Stephan Sokolow from comment #70)\n\n> A TiddlyWiki is a self-contained, structured document, more like a MS Word\n> document in how it's saved, loaded, and shared.\n\nIt may be wise to abandon the browser altogether?\nI see Mozilla porridge will not weld.", "author": "fdsc@yandex.ru", "id": 12276775, "time": "2017-04-29T10:52:46Z"}, {"text": "(In reply to jamy023 from comment #73)\n\n> But you (don't you trent) beg more and more like how Firefox is created\n> exclusively for you or for desktop utility applications.\n\nYes, FireFox made specifically for him. And specifically for me. And specifically for many people who ask for this functionality. And it is already done. FireFox have it.\n\nBut many, many and many jamy023 don't want it. They do not like. These jamy023 so much that here are quite a lot. And they, of course, smarter. Of course, it is for them FireFox has been exclusively created. We respect most many jamy023 and bow before them on his knees. Let them spoil FireFox, which used to be allowed everything, but now it becomes useless dummy.\n\nOh yeah, I forgot. There are a lot jamy023 who will use FireFox. But we, miserable meaningless singles, will not use it.", "author": "fdsc@yandex.ru", "id": 12276786, "time": "2017-04-29T11:05:05Z"}, {"text": "(In reply to fdsc from comment #75)\n> (In reply to Stephan Sokolow from comment #70)\n> \n> > A TiddlyWiki is a self-contained, structured document, more like a MS Word\n> > document in how it's saved, loaded, and shared.\n> \n> It may be wise to abandon the browser altogether?\n> I see Mozilla porridge will not weld.\n\nAlso not feasible.\n\nit's not negotiable that the TiddlyWiki must viewable in read-only mode on a machine with restricted application execution such as a corporate workstation, simply by tossing it on a thumbdrive or a GitHub Pages wiki and loading it in any modern browser.\n\nAbandoning the browser for editing may be an option though, since it started requiring the TiddlyFox extension ages ago anyway. It all depends whether it's easier and more robust to:\n\n1. Replace the browser altogether using something like NW.js (formerly node-webkit) or Qt's QWebEngine\n\n2. Write a special HTTP daemon which serves the wiki up and grants it special filesystem-manipulation powers via a ReST API\n\n3. Write a special HTTP daemon which grants multiple arbitrary Firefox extensions filesystem-manipulation powers by reinventing part of XULConnect user experience over an HTTP API.\n\nTo be honest, #1 isn't very appealing because of how I like to cram things together into a single tabbed window and I'm likely to do #3 rather than #2 out of sheer spite... but then I've always had that anti-authoritarian type of personality that George Carlin characterized as \"Lead, follow, or get out of the way? I obstruct!\"", "author": "from_bugzilla2@ssokolow.com", "id": 12276790, "time": "2017-04-29T11:09:34Z"}, {"text": "(In reply to fdsc from comment #74)\n> I repeat. Database completely unusable. At many years. You leave only one\n> choice: to cease writing the workers extensions. Because databases add-on is\n> always off.\n> The defects are not closed for the year. Then it close. Sometimes without a\n> well correcting. And then again it wait a year. And again correct. And\n> again, new defects appear, and wait a year.\n> All this time, that is years and years, extensions are unable to work\n> normally.\n\nThe situation is changed very soon. All improvements for having one stable api.\n\n\n> > So we should turn on creative thinking and don't be afraid to\n> > redesign old goods\n> \n> The impression is that this is not need Mozilla for the authors of\n> extensions but need authors for the Mozilla. This is not so.\n\nFalse. Mozilla and authors of extensions all both work for simple users (on same side). Today cyber security is very important, because some people play with TiddlyWiki, but other some even don't know about it and even don't want, and both using Firefox, and if for first (tiddlywikis funs) pc is tool for only sharing knowledge, but for others pc is tool for work where they keep secrets or money. We must protect the interests of most users. Just understand this\n\n> But we, miserable meaningless singles, will not use it.\n\nThen your place will be taken by others. And someone other will make extension for TiddlyWiki. Maybe it be useless, but it's more than nothing.\n\n> 1. Replace the browser altogether using something like NW.js (formerly node-webkit) or Qt's QWebEngine\n> 2. Write a special HTTP daemon which serves the wiki up and grants it special filesystem-manipulation powers via a ReST API\n> 3. Write a special HTTP daemon which grants multiple arbitrary Firefox extensions filesystem-manipulation powers by reinventing part of XULConnect user experience over an HTTP API.\n\nUsing included in browser database is bad, and using out of browser localhosted app is good? Right? (facepalm)", "author": "jamy023@gmail.com", "id": 12277114, "time": "2017-04-29T20:07:03Z"}, {"text": "NOTE: this is the second (and last) polite request, please pay attention.\n\n\n    Hello fdsc, jamy, and Stephan,\n \n    Thank you for your input, again.  As I already said, we have enough \n    information to properly evaluate the proposal.\n\n    There is really no reasons for you to continue arguing the points\n    anymore, so I _strongly_ encourage you to end this discussion, as it\n    now seem totally unproductive.  Thank you.", "author": "tomica@gmail.com", "id": 12277139, "time": "2017-04-29T20:54:33Z"}, {"text": "(In reply to Tomislav Jovanovic :zombie from comment #79)\n> NOTE: this is the second (and last) polite request, please pay attention.\n> \n> \n>     Hello fdsc, jamy, and Stephan,\n>  \n>     Thank you for your input, again.  As I already said, we have enough \n>     information to properly evaluate the proposal.\n> \n>     There is really no reasons for you to continue arguing the points\n>     anymore, so I _strongly_ encourage you to end this discussion, as it\n>     now seem totally unproductive.  Thank you.\n\nUnderstood.\n\nI'll end with one piece of advice for jamy023:\n\nI strongly advise you to find someone you can practice your English with. It's been very draining trying to come up with an interpretation of what you've been writing which should be true to your intent, yet can be interpreted in a somewhat mature, reasonable way so I can give you the benefit of the doubt.\n\n(I took a course on productive and critical discourse back in university and the #1 rule is to give the other party the benefit of the doubt when interpreting their intent so you don't wind up arguing with strawman versions of each other rather than addressing the actual points.)", "author": "from_bugzilla2@ssokolow.com", "id": 12277152, "time": "2017-04-29T21:04:37Z"}, {"text": "Tell me please, will WebExtensions support file renaming, writing to files and other operations with files?\nMy addons:\nDownload Manager (S3) - 90,070 users - need: rename file, delete file, read file for count checksum, check to AntiVirus\nhttps://addons.mozilla.org/addon/s3download-statusbar/\n\nTorrent Tornado - 53,535 users - need: create file, write to file, append to the file, read from file, count checksum\nhttps://addons.mozilla.org/addon/torrent-tornado/\n\nAddon by Szalgiris:\nDownload Status Bar -  224,690 users - need: rename file, delete file, read file for count checksum, check to AntiVirus\nhttps://addons.mozilla.org/addon/download-status-bar/", "author": "pag77@mail.ru", "id": 12277185, "time": "2017-04-29T22:27:15Z"}, {"text": "(In reply to Oleksandr from comment #81)\n> Tell me please, will WebExtensions support file renaming, writing to files\n> and other operations with files?\n\nNo.", "author": "andy+bugzilla@mckay.pub", "id": 12279770, "time": "2017-05-01T19:38:53Z"}, {"text": "(In reply to Andy McKay [:andym] from comment #82)\n> (In reply to Oleksandr from comment #81)\n> > Tell me please, will WebExtensions support file renaming, writing to files\n> > and other operations with files?\n> \n> No.\n\nLast year Mozilla promised maximum support and even created a poll - to whom what functions are missing in WebExtensions.\nIt is very unfortunate that some popular addons should die.\nThanks for your reply, Andy!", "author": "pag77@mail.ru", "id": 12279828, "time": "2017-05-01T19:56:47Z"}, {"text": "Hello:\n\nI'm stepping in as a Moderator to remind you that commenting on bugs is subject to Bugzilla's Etiquette and Mozilla's Contributor Guidelines.\n\nArguing or disputing a decision made by a person working on a bug is a violation of our guidelines, so is abuse and bullying. \n\nRemember that people are making decisions about how to deploy limited resources against a deadline.\n\nIf you wish to advocate for or against a Web Extensions API, the place to do that is on the mailing list, not on this bug. \n\nhttps://mail.mozilla.org/listinfo/webextensions-support\n\nThank you.", "author": "ehumphries@mozilla.com", "id": 12279874, "time": "2017-05-01T20:15:40Z"}, {"text": "Is there a reason for this list to only be available to list members? I'd think it'd be a good idea to allow add-on authors to find answers to their questions in the archives instead of letting them stumble around blind like it has happened in this bug.", "author": "johnp@gmx.de", "id": 12280331, "time": "2017-05-01T22:58:47Z"}, {"text": ":johnp, I had the wrong list, it's https://mail.mozilla.org/dev-addons/ and the archives are at https://mail.mozilla.org/pipermail/dev-addons/", "author": "ehumphries@mozilla.com", "id": 12280370, "time": "2017-05-01T23:12:08Z"}, {"text": "FWIW, ChatZilla uses direct access to local files for the following:\n\n- Caching channel lists and some misc other data - I assume this can move to IndexedDB\n- Downloading files using DCC - this needs a prompt-to-save API, which may be covered by the File/FileSystem DOM APIs\n- Logging chat\n- Loading scripts\n\nFor these last two, both key features, I don't see a way forward without this bug or something similar being created.\n\nLogging chat involves creating new files in a user-chosen directory, to be written to over the course of a day, and possibly read back later. The only prompts that would acceptable here are when the user initially selects the directory.\n\nLoading scripts involves recursively enumerating and reading files from one or more directories on startup, so again this will not work without a prompt-free means to do this on each startup.", "author": "bugzilla-mozilla-20000923@james-ross.co.uk", "id": 12561216, "time": "2017-08-13T13:15:44Z"}, {"text": "(In reply to James Ross from comment #87)\n> FWIW, ChatZilla uses direct access to local files for the following:\n> \n> - Caching channel lists and some misc other data - I assume this can move to\n> IndexedDB\n> - Downloading files using DCC - this needs a prompt-to-save API, which may\n> be covered by the File/FileSystem DOM APIs\n> - Logging chat\n> - Loading scripts\n> \n> For these last two, both key features, I don't see a way forward without\n> this bug or something similar being created.\n> \n> Logging chat involves creating new files in a user-chosen directory, to be\n> written to over the course of a day, and possibly read back later. The only\n> prompts that would acceptable here are when the user initially selects the\n> directory.\n> \n> Loading scripts involves recursively enumerating and reading files from one\n> or more directories on startup, so again this will not work without a\n> prompt-free means to do this on each startup.\n\nWhile I don't agree that it's sufficient, the argument has been made that all of that can be accomplished using APIs like IndexedDB.\n\nSpecifically, that the File API (ie. <input type=\"file\"> or drag-and-drop) can allow scripts to be loaded into the DB to install them and the prompt-to-save API can be used to get logs and installed scripts back out when desired.", "author": "from_bugzilla2@ssokolow.com", "id": 12561296, "time": "2017-08-13T15:04:25Z"}, {"text": "I think YF (Yang) was wrong here, removing the obvious problem-block because he just \"thinks\" it's ok to put or get \"files\" in or from \"indexdb\" instead the correct way.\n\nShouldn't the developer know better?\n\n\n>Specifically, that the File API (ie. <input type=\"file\"> or drag-and-drop) can allow scripts \n>to be loaded into the DB to install them and the prompt-to-save API can be used to get \n>logs and installed scripts back out when desired.\nIt's a bad idea to save logs only after manual user's clicks. Have you seen logs to work like that anywhere else? They ARE logs, and any other extension can also need to store some information at least in some allowed folder.\n\n-------------------------------\n\nDear Firefox developers you have a lot of solutions that are good from the security perspective to release file API for extensions, e.g. a lot of ideas were mentioned in this topic. JUST DO IT.\n\nJUST DO THE FILE API FOR EXTENSIONS, BECAUSE IT WAS ALWAYS AVAILABLE FOR DECADES IN FIREFOX.\nIt's necessary. And if it's not than no one will use it (and will put files in indexdb or any other creepy way), what is the problem?\n\nFirefox is already changing from the best browser ever to a dumb one with super-limited extensions and you just pushing it further with this inadequate solution to use indexdb for files instead of files to the dir allowed once by user.\n\nI don't want the best advanced browser to be another Chrome clone. :(\n\nThe issue is 2 years old, still unsolved, 37 upvotes and still nothing done! Except ridiculously forcing offers to use ugly walkarounds except correct way with file access.", "author": "vleett@yandex.ru", "id": 12561374, "time": "2017-08-13T16:29:13Z"}, {"text": "(In reply to vleet from comment #89)\n> I think YF (Yang) was wrong here, removing the obvious problem-block because\n> he just \"thinks\" it's ok to put or get \"files\" in or from \"indexdb\" instead\n> the correct way.\n> \n> Shouldn't the developer know better?\n\nI don't understand what you mean. As rewriting ChatZilla to a WebExtension, using a database instead of reading and writing files directly is a reasonable best practice, so it's not a block bug in my opinion.\n\n> >Specifically, that the File API (ie. <input type=\"file\"> or drag-and-drop) can allow scripts \n> >to be loaded into the DB to install them and the prompt-to-save API can be used to get \n> >logs and installed scripts back out when desired.\n> It's a bad idea to save logs only after manual user's clicks. Have you seen\n> logs to work like that anywhere else? They ARE logs, and any other extension\n> can also need to store some information at least in some allowed folder.\n\nBuilt-in a log viewer (can support save, highlight, etc.) is a viable solution. Direct reading and writing files may bring performance (IndexedDB support cache) and security issues, it is not a good practice for most add-ons.\n\nAbout practice of convert ChatZilla, should be discussed in bug 1322442 rather than here.", "author": "yfdyh000@gmail.com", "id": 12561401, "time": "2017-08-13T16:46:52Z"}, {"text": "(In reply to YF (Yang) from comment #90)\n> (In reply to vleet from comment #89)\n> > I think YF (Yang) was wrong here, removing the obvious problem-block because\n> > he just \"thinks\" it's ok to put or get \"files\" in or from \"indexdb\" instead\n> > the correct way.\n> > \n> > Shouldn't the developer know better?\n> \n> I don't understand what you mean. As rewriting ChatZilla to a WebExtension,\n> using a database instead of reading and writing files directly is a\n> reasonable best practice, so it's not a block bug in my opinion.\nFirst of all, thank you for calm answer on my pushing reply.\nSecondly, not everyone consider it to be reasonably bets practice, you should understand it. Why the filesystem exist available to the user at all? Why GNU/Linux and other *nix-like systems and recently Windows vouch for filesystem configs instead of some binary databases and like registers? Because it's simple, it's cleaner and more user friendly in different cases.\n\nI'm not in position to have any strong vote here, but consider this - you're a extension developer and you want to store logs of your extension in the extensions special folder or user-allowed-once folder (like the secure could work). Why this feature souldn't be available to you? Any security risks? If yes - show these risks to us, if not - please declare to us that this mandatory feature (that was always available in Firefox!) WILL BE DONE FOR SURE.\n\n\n> Direct reading and writing files may bring performance (IndexedDB\n> support cache) and security issues, it is not a good practice for most\n> add-ons.\nFor extensions that require output to the user as files, there is no faster and better way than output to files directly.\n\nAbout security issues - can you please tell more? E.g. I propose it works this way:\nExtension has it's special subfolder (like extensionname/files/) and it is allowed to write/read to it only after user approve during installation or activation of the plugin. But the whole folder and allowed once (optionally), not like click-every-time for every file.\n\nAnd I see this security possible issues here:\n1) The plugin can make some binary file or script with malicious code.\n- But this code won't be executable from the filesystem perspective that support x flags, because extension is not allowed to chmod or chown obviously.\n- There is nobody to run it anyway, otherwise the executing person/script could run some bash/cmd/powershell with malicious commandline command directly.\n- The folder is specific (it's almost sandboxed by available to user to enter). So, it won't be like ngix's folder or something else.\nSo, no worries here.\n\n2) The user puts some of his files (of make a symlink to an external folder) in this folder for some reason and the extension could read and steal the content of it.\n- But it requires user to find this folder and do something with it. The only chance this happens if the user really needs the extension to work with files. So, it's necessary to make file api in this case anyway.\nSo no worries here too.\n\nAny other security issues?\n\n> About practice of convert ChatZilla, should be discussed in bug 1322442\n> rather than here.\nOK, I'm talking about the general point, that extensions should have this feature for sure, not only ChatZilla other, but all, that require it, FileAPI is must-have.", "author": "vleett@yandex.ru", "id": 12561423, "time": "2017-08-13T17:13:40Z"}, {"text": "I agree on the general point that webextension APIs do *a terrible job* at interoperability with operating system primitives. This goes against several unix philosophies (everything is a file; one tool that does a job well and interacts with other specialized tools).\nFilesystems are hugely important to keeping data organized. They provide the ability to have granular backups, integrity, durability, deduplication, compression, encryption, etc.\nSiloing everything into indexedb will either require mozilla to reinvent the filesystem wheel or provide a much inferior experience.\n\nMy understanding is that durable writes (with WAL enabled) to indexedb are expensive, especially if one wanted to continuously append to a Blob (the straight-forward equivalent to O_APPEND writing to a file). While ZFS on the other hand would just CoW the last block of a file.\n\nThis very much smells like a combination of NIH and walled garden.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 12561443, "time": "2017-08-13T17:32:03Z"}, {"text": "(In reply to The 8472 from comment #92)\n> Siloing everything into indexedb will either require mozilla to reinvent the\n> filesystem wheel or provide a much inferior experience.\n\nhttps://developer.mozilla.org/en-US/Add-ons/WebExtensions/Working_with_files#Store_files_data_locally_using_the_IndexedDB_file_storage_library :(\n\n> My understanding is that durable writes (with WAL enabled) to indexedb are\n> expensive, especially if one wanted to continuously append to a Blob (the\n> straight-forward equivalent to O_APPEND writing to a file). While ZFS on the\n> other hand would just CoW the last block of a file.\n\nAt least for ChatZilla, the logs are written whole lines at a time, so they would be separate rows in IndexedDB or similar, rather than a blob-per-file. But this is a non-trivial change for us developers to make and *especially* for users, because we would need to NIH a bunch of standard log operations like searching. It's the users I am really worried about here.", "author": "bugzilla-mozilla-20000923@james-ross.co.uk", "id": 12561452, "time": "2017-08-13T17:40:12Z"}, {"text": "Nobody is trying to force anybody to use indexedDB when it isn't appropriate.\nThe filesystem certainly does make sense for some of the things in comment 87 but as mentioned in comment 88, a bunch of it is already possible today:\nChatzilla logs and downloaded files can be saved to disk using the downloads api -- you can either download them directly to the configured downloads folder or use the \"saveAs\" option to present the user with a file picker dialog to choose where they should go.\nAnd as already mentioned, <input type=\"file\"> or drag-and-drop can be used to get files into the extension.\n\n(In reply to vleet from comment #91)\n> E.g. I propose it works\n> this way:\n> Extension has it's special subfolder (like extensionname/files/) and it is\n> allowed to write/read to it only after user approve during installation or\n> activation of the plugin. But the whole folder and allowed once\n> (optionally), not like click-every-time for every file.\n\nThis idea seems reasonable to me, but UX and security would need to take a pass over it to ensure that it can't be trivially abused by malware to take advantage of less savvy users.  This bug is quite long and unfocused, opening a new bug with that specific proposal would be a helpful step.\n\n(In reply to The 8472 from comment #92)\n> My understanding is that durable writes (with WAL enabled) to indexedb are\n> expensive, especially if one wanted to continuously append to a Blob (the\n> straight-forward equivalent to O_APPEND writing to a file). While ZFS on the\n> other hand would just CoW the last block of a file.\n\nCan you explain more about the use case you have in mind here?", "author": "aswan@mozilla.com", "id": 12561477, "time": "2017-08-13T18:07:11Z"}, {"text": "(In reply to James Ross from comment #93)\n> It's the users I am really worried about here.\n\nThere's more to that statement than you might have considered.\n\nSince the extensions I'm working on are of the \"I'm writing this to scratch my own itch, but I'll share them in case others may benefit\" variety (as I suspect many are), my solution is to simplify development by doing two things which run counter to Mozilla's intent:\n\n1. To simplify the develop-and-deploy process as much as possible (and to express my disapproval), I made the one-time effort to choosing a release channel and user.js config that disables signing enforcement. (Likewise, I added \"--enable-easy-off-store-extension-install\" to my Chrome launcher.)\n\nThat way, there's no online connectivity needed to permanently install an updated version into my browser and sending updates public will be as simple as `git push` once I reach that stage. (I'll just include basic instructions for disabling signing in the README and wash my hands of that aspect of things.)\n\n2. If I want my Firefox to integrate with my desktop, I'm not going to jump through hoops. I'll just write a simple HTTP daemon which exposes the missing APIs, gated through local GTK+ permission prompts.\n\nIf I'm representative of even a small portion of potential Firefox extension developers, that could hurt Firefox's ecosystem a lot.", "author": "from_bugzilla2@ssokolow.com", "id": 12561481, "time": "2017-08-13T18:10:56Z"}, {"text": "(In reply to vleet from comment #91)\n> (In reply to YF (Yang) from comment #90)\n> > (In reply to vleet from comment #89)\n> > > I think YF (Yang) was wrong here, removing the obvious problem-block because\n> > > he just \"thinks\" it's ok to put or get \"files\" in or from \"indexdb\" instead\n> > > the correct way.\n> > > \n> > > Shouldn't the developer know better?\n> > \n> > I don't understand what you mean. As rewriting ChatZilla to a WebExtension,\n> > using a database instead of reading and writing files directly is a\n> > reasonable best practice, so it's not a block bug in my opinion.\n> First of all, thank you for calm answer on my pushing reply.\n> Secondly, not everyone consider it to be reasonably bets practice, you\n> should understand it. Why the filesystem exist available to the user at all?\n> Why GNU/Linux and other *nix-like systems and recently Windows vouch for\n> filesystem configs instead of some binary databases and like registers?\n> Because it's simple, it's cleaner and more user friendly in different cases.\n\nSorry if there is any emotional wording, I am not a native English speaker.\n\n> I'm not in position to have any strong vote here, but consider this - you're\n> a extension developer and you want to store logs of your extension in the\n> extensions special folder or user-allowed-once folder (like the secure could\n> work). Why this feature souldn't be available to you? Any security risks? If\n> yes - show these risks to us, if not - please declare to us that this\n> mandatory feature (that was always available in Firefox!) WILL BE DONE FOR\n> SURE.\n\nI understand your thinking now that you want to vote for this bug to implemented ASAP.\n\nIt is design-decision-approved for now, but the lack of an appropriate patch to reach 57. If it misses 57, the users will have to accept an breaking experience, so I think the files within database and export on demand is a good practice, it's also good for cross-browser implementations. But this thinking may be wrong, because I noticed that Chrome seems to have the file system APIs implementation.\n\n> > Direct reading and writing files may bring performance (IndexedDB\n> > support cache) and security issues, it is not a good practice for most\n> > add-ons.\n> For extensions that require output to the user as files, there is no faster\n> and better way than output to files directly.\n> \n> About security issues - can you please tell more? E.g. I propose it works\n> this way:\n> Extension has it's special subfolder (like extensionname/files/) and it is\n> allowed to write/read to it only after user approve during installation or\n> activation of the plugin. But the whole folder and allowed once\n> (optionally), not like click-every-time for every file.\n> \n> And I see this security possible issues here:\n> 1) The plugin can make some binary file or script with malicious code.\n> - But this code won't be executable from the filesystem perspective that\n> support x flags, because extension is not allowed to chmod or chown\n> obviously.\n> - There is nobody to run it anyway, otherwise the executing person/script\n> could run some bash/cmd/powershell with malicious commandline command\n> directly.\n> - The folder is specific (it's almost sandboxed by available to user to\n> enter). So, it won't be like ngix's folder or something else.\n> So, no worries here.\n> \n> 2) The user puts some of his files (of make a symlink to an external folder)\n> in this folder for some reason and the extension could read and steal the\n> content of it.\n> - But it requires user to find this folder and do something with it. The\n> only chance this happens if the user really needs the extension to work with\n> files. So, it's necessary to make file api in this case anyway.\n> So no worries here too.\n> \n> Any other security issues?\n> \n> > About practice of convert ChatZilla, should be discussed in bug 1322442\n> > rather than here.\n> OK, I'm talking about the general point, that extensions should have this\n> feature for sure, not only ChatZilla other, but all, that require it,\n> FileAPI is must-have.\n\nI presume this bug and APIs is an any directory (after approval) reading and writing instead of reading and writing under profile directory, this is not correct?\n\nIf it is the profile folder only, each add-ons will have a dedicated directory or according to apply for names?", "author": "yfdyh000@gmail.com", "id": 12561489, "time": "2017-08-13T18:15:29Z"}, {"text": "(In reply to Andrew Swan [:aswan] from comment #94)\n> Can you explain more about the use case you have in mind here?\n\nThis was about chatzilla logging. To me logs mean the files on the filesystem are written *live* into a preconfigured log folder (which obviously is not the downloads folder). So that I can |tail -f| them for example.\nPrompting the user for each line is out of the question. And overwriting the whole log for each line is also highly inefficient and confuses things like |less|. O_APPEND and treating files as output streams exist for a reason.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 12561501, "time": "2017-08-13T18:20:56Z"}, {"text": "(In reply to The 8472 from comment #92)\n> My understanding is that durable writes (with WAL enabled) to indexedb are\n> expensive, especially if one wanted to continuously append to a Blob (the\n> straight-forward equivalent to O_APPEND writing to a file).\n\nAnd that in a nutshell is why IndexedDB is always the wrong answer in Firefox. You have IDB implemented as a SQLite database with no tools or docs to access the data from outside the extension.\n\n(In reply to Andrew Swan [:aswan] from comment #94)\n> Chatzilla logs and downloaded files can be saved to disk using the downloads\n> api -- you can either download them directly to the configured downloads\n> folder or use the \"saveAs\" option to present the user with a file picker\n> dialog to choose where they should go.\n\nSayin' it don't make it so. Please explain, step by step, how you'd append successive lines to a log file this way, and how you open the log after restart and continue appending.", "author": "umbecono@yahoo.com", "id": 12561504, "time": "2017-08-13T18:22:17Z"}, {"text": "I don't want to beat a dead horse, so please see comment 84.\n\nThis functionality will be implemented eventually, but not in the Firefox 57 timeframe, and likely not soon after. It's going to require a lot of careful thought to design and implement, and we don't have the time or resources for it at the moment. No amount of argument is going to change that.", "author": "kmaglione+bmo@mozilla.com", "id": 12561555, "time": "2017-08-13T19:20:01Z"}, {"text": "(In reply to Andrew Swan [:aswan] from comment #94)\n> Chatzilla logs and downloaded files can be saved to disk using the downloads\n> api -- you can either download them directly to the configured downloads\n> folder or use the \"saveAs\" option to present the user with a file picker\n> dialog to choose where they should go.\n> And as already mentioned, <input type=\"file\"> or drag-and-drop can be used\n> to get files into the extension.\n\nFor downloads and scripts, this can probably work, but it most certainly does not work for logs - unless you meant storing them in IndexedDB and providing a manual export-one-at-a-time function.\n\nFor those not aware, this use case involves writing to multiple files (one per chat channel), with a new file started each day and appended to throughout the day. I don't see any solution that prompts per-file to be workable here.\n\n(In reply to Kris Maglione [:kmag] from comment #99)\n> This functionality will be implemented eventually, but not in the Firefox 57\n> timeframe, and likely not soon after. It's going to require a lot of careful\n> thought to design and implement, and we don't have the time or resources for\n> it at the moment. No amount of argument is going to change that.\n\nThank you very much for putting some timeline information in here! (I was partially concerned about doing an IndexedDB migration only to have a working filesystem API show up shortly after.)", "author": "bugzilla-mozilla-20000923@james-ross.co.uk", "id": 12561590, "time": "2017-08-13T20:03:53Z"}, {"text": "(In reply to The 8472 from comment #97)\n> (In reply to Andrew Swan [:aswan] from comment #94)\n> > Can you explain more about the use case you have in mind here?\n> \n> This was about chatzilla logging. To me logs mean the files on the\n> filesystem are written *live* into a preconfigured log folder (which\n> obviously is not the downloads folder). So that I can |tail -f| them for\n> example.\n> Prompting the user for each line is out of the question. And overwriting the\n> whole log for each line is also highly inefficient and confuses things like\n> |less|. O_APPEND and treating files as output streams exist for a reason.\n\nAh, I didn't get from the original comment that the requirement is about live logging, thanks for clearing that up.\nThe downloads API does not cover this situation of course, I don't have anything else to add to what Kris already said in comment 99.", "author": "aswan@mozilla.com", "id": 12563381, "time": "2017-08-14T06:51:30Z"}, {"text": "(In reply to The 8472 from comment #97)\n> (In reply to Andrew Swan [:aswan] from comment #94)\n> > Can you explain more about the use case you have in mind here?\n> \n> This was about chatzilla logging. To me logs mean the files on the\n> filesystem are written *live* into a preconfigured log folder (which\n> obviously is not the downloads folder). So that I can |tail -f| them for\n> example.\n> Prompting the user for each line is out of the question. And overwriting the\n> whole log for each line is also highly inefficient and confuses things like\n> |less|. O_APPEND and treating files as output streams exist for a reason.\n\nhttps://developer.mozilla.org/en-US/Add-ons/WebExtensions/Native_messaging is what exactly you want to, but don't understand it. Just mention (on the chatzilla extension page) that for \"logging\" feature users should install some manifest file manually. And also place the link to the Gist or so where users can download this file. And job done! If you don't understand how stdio can be redirected to the plain file this can help http://steve-jansen.github.io/guides/windows-batch-scripting/part-4-stdin-stdout-stderr.html", "author": "jamy023@gmail.com", "id": 12563648, "time": "2017-08-14T09:12:28Z"}, {"text": "(In reply to jamy023 from comment #102)\n> https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Native_messaging\n> is what exactly you want to, but don't understand it.\n\nNative messaging could be a temporary workaround for this application but it is not a suitable long-term solution.", "author": "aswan@mozilla.com", "id": 12563740, "time": "2017-08-14T09:50:15Z"}, {"text": "(In reply to Andrew Swan [:aswan] from comment #103)\n> ... is not a suitable long-term solution.\n\nWhy is not long-term? Can you explain me what this solution is missing?", "author": "jamy023@gmail.com", "id": 12563854, "time": "2017-08-14T10:33:48Z"}, {"text": "(In reply to jamy023 from comment #104)\n> (In reply to Andrew Swan [:aswan] from comment #103)\n> > ... is not a suitable long-term solution.\n> \n> Why is not long-term? Can you explain me what this solution is missing?\n\nIt isn't that something is missing, it is unnecessarily complicated and has unneeded performance overhead.", "author": "aswan@mozilla.com", "id": 12563863, "time": "2017-08-14T10:39:20Z"}, {"text": "(In reply to Andrew Swan [:aswan] from comment #105)\n> ... it is unnecessarily complicated ...\n\nComplicated? At the side of webextension it is same complexity as writing to file. At the side of backend it is driven by OS pipes mechanism. What more simple solution would be? \n\n> ... and has unneeded performance overhead.\n\nCan you prove that will be performance overhead? Even so, for security reasons it's not bad to little overhead. Again - it's a shared web platform, it's very important to protect main part of users than make easy life for webext developers (and also for hackers).", "author": "jamy023@gmail.com", "id": 12564120, "time": "2017-08-14T12:31:30Z"}, {"text": "Sorry, I do not understand the situation... :)\n\n1. Firefox decided to become like Google Chrome and forced all developers to leave XUL and go to WebExtensions\n2. WebExtensions is an almost complete copy of the API from Google Chrome\n3. Google Chrome has methods for working with files: window.requestFileSystem || window.webkitRequestFileSystem\n4. Google Chrome does not delete these methods and does not announce removal in the future\n5. Why does Firefox not want to copy these methods from Google Chrome?", "author": "pag77@mail.ru", "id": 12564287, "time": "2017-08-14T13:23:10Z"}, {"text": "(In reply to Oleksandr from comment #107)\n> Sorry, I do not understand the situation... :)\n> \n> 1. Firefox decided to become like Google Chrome and forced all developers to\n> leave XUL and go to WebExtensions\n\nYes. See also https://wiki.mozilla.org/Add-ons/Terminology.\n\n> 2. WebExtensions is an almost complete copy of the API from Google Chrome\n\nNo, It is based on and draws on Google Chrome Extensions APIs, but improves. https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Chrome_incompatibilities. e.g. https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/proxy with a completely different implementation.\n\n> 3. Google Chrome has methods for working with files:\n> window.requestFileSystem || window.webkitRequestFileSystem\n> 4. Google Chrome does not delete these methods and does not announce removal\n> in the future\n> 5. Why does Firefox not want to copy these methods from Google Chrome?\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/LocalFileSystem written:\n\"The specification is more or less abandonned, failing to get enough traction.\"", "author": "yfdyh000@gmail.com", "id": 12564392, "time": "2017-08-14T14:00:48Z"}, {"text": "(In reply to jamy023 from comment #102)\n> (In reply to The 8472 from comment #97)\n> > (In reply to Andrew Swan [:aswan] from comment #94)\n> > > Can you explain more about the use case you have in mind here?\n> > \n> > This was about chatzilla logging. To me logs mean the files on the\n> > filesystem are written *live* into a preconfigured log folder (which\n> > obviously is not the downloads folder). So that I can |tail -f| them for\n> > example.\n> > Prompting the user for each line is out of the question. And overwriting the\n> > whole log for each line is also highly inefficient and confuses things like\n> > |less|. O_APPEND and treating files as output streams exist for a reason.\n> \n> https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Native_messaging\n> is what exactly you want to\n\nNative messaging requires an external application. If one is going to install an external application then one might as well install a native chat client.\n\nIt is only useful for cases where you already have an external application and simply want to ship a companion addon for that application. The other direction, writing an addon and then requiring a native application to be installed just to get something to work that's about 2 of calls to libc functions to work is too much hassle for users.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 12564505, "time": "2017-08-14T14:38:13Z"}, {"text": "(In reply to Oleksandr from comment #107)\n> Sorry, I do not understand the situation... :)\n> \n> 1. Firefox decided to become like Google Chrome and forced all developers to leave XUL and go to WebExtensions\n\nWhere you find this decision? Abandonment of XUL is just architectural reason related to transition to the multiprocess architecture (read transition to \"Servo\" engine).\n\n> 2. WebExtensions is an almost complete copy of the API from Google Chrome\n\nThis because Chrome Web API is littlebit extended W3C standard API and not vice versa. \n\n> 3. Google Chrome has methods for working with files: window.requestFileSystem || window.webkitRequestFileSystem\n> 4. Google Chrome does not delete these methods and does not announce removal in the future\n> 5. Why does Firefox not want to copy these methods from Google Chrome?\n\n\"In April 2014, it was announced on public-webapps that the Filesystem API spec is not being considered by other browsers. For now, the API is Chrome-specific and it's unlikely to be implemented by other browsers and is no longer being standardized with the W3C.\" https://www.html5rocks.com/en/tutorials/file/filesystem/ sorry, maybe there is more trusted source, but this one explained this more clean way.", "author": "jamy023@gmail.com", "id": 12564654, "time": "2017-08-14T15:23:49Z"}, {"text": "(In reply to The 8472 from comment #109)\n> Native messaging requires an external application. If one is going to\n> install an external application then one might as well install a native chat\n> client.\n> \n> It is only useful for cases where you already have an external application\n> and simply want to ship a companion addon for that application. The other\n> direction, writing an addon and then requiring a native application to be\n> installed just to get something to work that's about 2 of calls to libc\n> functions to work is too much hassle for users.\n\nOne more time: This is only example how they can deliver fullfeatured application through webextnesions if they like to. WebExtensions IS NOT full featured framework or toolkit. And if there needed to store data then do it through IndexedDB or localStrorage. If needed to send some data outside of browser then pls use NativeMessaging. I am mentioned about nativemessaging comment #102 because dude wants to see logs through \"tail -f\" command so I am post example which shows that this possible.", "author": "jamy023@gmail.com", "id": 12564698, "time": "2017-08-14T15:38:42Z"}, {"text": "(In reply to jamy023 from comment #110)\n> (In reply to Oleksandr from comment #107)\n> > 3. Google Chrome has methods for working with files: window.requestFileSystem || window.webkitRequestFileSystem\n> > 4. Google Chrome does not delete these methods and does not announce removal in the future\n> > 5. Why does Firefox not want to copy these methods from Google Chrome?\n> \n> \"In April 2014, it was announced on public-webapps that the Filesystem API\n> spec is not being considered by other browsers. For now, the API is\n> Chrome-specific and it's unlikely to be implemented by other browsers and is\n> no longer being standardized with the W3C.\"\n\nThis argument doesn't make much sense to me.\n\n1) Was XUL standardized with the W3C? And yet it made the Firefox who he is - the best, flexible and powerful open source browser suitable not only for casual users but geeks too with a lot of useful extensions.\n2) The quote you gave us stands that the reason the Filesystem API was not standardized with the W3C is that is wasn't implemented by Firefox developers. You won't do it because you didn't do it? Not a great logic.\n3) Finally, maybe Firefox 57 and next versions MUST support older extensions if developers FAILED to provide good enough alternative at least as powerful as in Chrome, not even speaking about previous versions of Firefox?\nAnd why not implement this Filesystem API before forcing users and developers to stay without their addons on their favourite browser?\n\n2017 comes. Firefox 57 is out as a shadow of Chrome. And Chrome is now the most rich, powerful and advanced browser with wider extension features than Firefox. End of world is coming.\nAt least there are forks or Firefox like \"Pale Moon\" that do not drop their advanced users because \"we know better what you need and what you don't\".\n\nOpera is dead for the same reason by the way, Jamy.", "author": "vleett@yandex.ru", "id": 12565112, "time": "2017-08-14T17:28:51Z"}, {"text": "Just a follow on to explain why comments are now restricted on this bug. \n\nThere were multiple requests to stop commenting on this bug, for example comment 55 and comment 79. At this point this bug has ceased to be providing useful information.\n\nThe fact that Firefox has moved away from allowing file system access in extensions is something that we know affects some add-ons and their users. However, it can't be stressed enough that file system access is a security concern and something Mozilla is trying to limit through initiatives like the sandboxing initiative: https://wiki.mozilla.org/Security/Sandbox#File_System_Restrictions. We've documented some challenges here: https://wiki.mozilla.org/WebExtensions/Filesystem.\n\nWe've provided a library for storing files in indexeddb https://www.npmjs.com/package/idb-file-storage, but for Firefox 57 there is no plan to provide more file system support in WebExtensions.\n\nWe understand that improved file system support is a desirable feature and we will continue to explore options to provide this functionality in a safe and secure manner as the Firefox team plans its future releases.", "author": "andy+bugzilla@mckay.pub", "id": 12589410, "time": "2017-08-22T21:56:49Z"}, {"text": "*** Bug 1421102 has been marked as a duplicate of this bug. ***", "author": "kmaglione+bmo@mozilla.com", "id": 12878408, "time": "2017-11-28T00:11:08Z"}, {"text": "*** Bug 1421468 has been marked as a duplicate of this bug. ***", "author": "VYV03354@nifty.ne.jp", "id": 12882321, "time": "2017-11-29T07:28:05Z"}, {"text": "*** Bug 1456480 has been marked as a duplicate of this bug. ***", "author": "kmaglione+bmo@mozilla.com", "id": 13231017, "time": "2018-04-24T21:41:36Z"}], "id": 1246236, "priority": "P3", "cc": ["100@pokemori.jp", "ajfhajf@yandex.ru", "akos@szederjei.eu", "alj62888@yahoo.com", "andy+bugzilla@mckay.pub", "antoine.mozilla@gmail.com", "ashpool@xecut.net", "botond@mozilla.com", "brade@comcast.net", "brettz9@yahoo.com", "bruant.d@gmail.com", "brunoaiss@gmail.com", "bugzilla-mozilla-20000923@james-ross.co.uk", "bugzilla.mozilla.org@infinite-source.de", "bugzilla@basson.at", "bugzilla@guardian.cc", "clarencewashington003@gmail.com", "cr0ydon@outlook.com", "crimsteam@gmail.com", "danielherrsoftware@gmail.com", "danny0838@gmail.com", "dennis.lissov@gmail.com", "dietrich@mozilla.com", "dqeswn@gmail.com", "ehumphries@mozilla.com", "emmanuel@engelhart.org", "eros_uk@yahoo.co.uk", "fdsc@yandex.ru", "fdsfgs@krutt.org", "from_bugzilla2@ssokolow.com", "g.maone@informaction.com", "grahamperrin@gmail.com", "hansenm@ergovia.de", "jamy023@gmail.com", "johnp@gmx.de", "kazz@asamuzak.jp", "kmaglione+bmo@mozilla.com", "lidel@lidel.org", "marsjaninzmarsa@gmail.com", "mcastelluccio@mozilla.com", "mcote@mozilla.com", "mcs@pearlcrescent.com", "mkdante381@gmail.com", "mossroy@mossroy.fr", "msdobrescu@gmail.com", "nightson1988@gmail.com", "pag77@mail.ru", "paolo.mozmail@amadzone.org", "perpleks@yandex.ru", "pmariojo@gmail.com", "pwd.mozilla@yahoo.co.uk", "reqqxn@gmail.com", "rob@robwu.nl", "s1375422@mvrht.net", "samuel.lauren@iki.fi", "samuel@sieb.net", "script@vollbio.de", "suhanprabhu@gmail.com", "tarek@mozilla.com", "thorbw@gmail.com", "timbugzilla@gmail.com", "Tobias.Marty@gmx.de", "tomica@gmail.com", "trent@trentlarson.com", "umbecono@yahoo.com", "Virtual@teknik.io", "vleett@yandex.ru", "yfdyh000@gmail.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1215028", "https://bugzilla.mozilla.org/show_bug.cgi?id=1323414"], "cf_tracking_thunderbird_esr60": "---", "status": "NEW", "product": "Toolkit", "cf_fx_iteration": "---", "blocks": [1215059, 1322442, 1435798, 1118289, 1219940, 1310316], "qa_contact": "", "creation_time": "2016-02-05T19:19:44Z", "cf_status_firefox_esr52": "---", "component": "WebExtensions: General", "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "billjm05@gmail.com", "id": 562685, "name": "billjm05@gmail.com", "real_name": ""}, "whiteboard": "[design-decision-approved] triaged", "mentors": [], "summary": "Implement local filesystem read/write access.", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [{"requestee": "billjm05@gmail.com", "status": "?", "name": "needinfo", "modification_date": "2017-02-23T01:50:34Z", "type_id": 800, "creation_date": "2017-02-23T01:50:34Z", "id": 1534236, "setter": "fdsc@yandex.ru"}], "last_change_time": "2018-05-31T19:33:07Z", "assigned_to": "nobody@mozilla.org", "is_open": true, "cf_blocking_webextensions": "---", "resolution": "", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}