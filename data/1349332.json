{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "ehsan@mozilla.com", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cf_status_firefox57": "wontfix", "cc_detail": [{"email": "bkelly@mozilla.com", "id": 465500, "name": "bkelly@mozilla.com", "real_name": "Ben Kelly [:bkelly]"}, {"email": "bobbyholley@gmail.com", "id": 313730, "name": "bobbyholley@gmail.com", "real_name": "Bobby Holley (On Leave Until June 11th)"}, {"email": "bzbarsky@mit.edu", "id": 20209, "name": "bzbarsky@mit.edu", "real_name": "Boris Zbarsky [:bz] (Vacation Jun 16-24) (no decent commit message means r-)"}, {"email": "cam@mcc.id.au", "id": 54040, "name": "cam@mcc.id.au", "real_name": "Cameron McCormack (:heycam)"}, {"email": "cpeterson@mozilla.com", "id": 430528, "name": "cpeterson@mozilla.com", "real_name": "Chris Peterson [:cpeterson]"}, {"email": "dbaron@dbaron.org", "id": 3881, "name": "dbaron@dbaron.org", "real_name": "David Baron :dbaron: \u231aUTC-7 (away June 18-21)"}, {"email": "ehsan@mozilla.com", "id": 251051, "name": "ehsan@mozilla.com", "real_name": ":Ehsan Akhgari"}, {"email": "hkirschner@mozilla.com", "id": 427798, "name": "hkirschner@mozilla.com", "real_name": ":Harald Kirschner :digitarald"}, {"email": "jan@ikenmeyer.eu", "id": 580271, "name": "jan@ikenmeyer.eu", "real_name": "Jan Andre Ikenmeyer [:darkspirit]"}, {"email": "mstange@themasta.com", "id": 293943, "name": "mstange@themasta.com", "real_name": "Markus Stange [:mstange]"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "tnikkel@gmail.com", "id": 255010, "name": "tnikkel@gmail.com", "real_name": "Timothy Nikkel (:tnikkel)"}], "cf_last_resolved": "2018-04-27T17:43:34Z", "attachments": [], "votes": 1, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 11, "comments": [{"text": "It would be nice if we had some kind of measurement from the impact that we could get from turning on stylo in the wild.\n\nI have been thinking about how to do this.  My rough understanding of the maximum expected gain we can expect is perfect parallelism across all available cores for the restyling phase.  Bug 1349315 covers a similar probe for WebRender, basing the measurement around the percentage of the rendering pipeline.  For stylo, the number that we are hoping to change, if my understanding is correct, would be GeckoRestyleManager::RebuildAllStyleData() or somewhere like that, and for the expected parallelism, we can use the available number of cores.\n\nBobby, does this sound sane to you?  Thanks!", "author": "ehsan@mozilla.com", "id": 12164963, "time": "2017-03-21T20:20:52Z"}, {"text": "(In reply to :Ehsan Akhgari from comment #0)\n> It would be nice if we had some kind of measurement from the impact that we\n> could get from turning on stylo in the wild.\n> \n> I have been thinking about how to do this.  My rough understanding of the\n> maximum expected gain we can expect is perfect parallelism across all\n> available cores for the restyling phase.\n\nWell, there are two parts: initial styling and restyling. Initial styling (which happens during pageload) is currently driven off of frame construction, which makes it rather hard to measure, because all the frame construction and styling bits are interleaved. Measuring time in the frame constructor would provide an upper bound on this, but it's hard to say exactly how much other stuff we'd be measuring.\n\nRestyling in stock Gecko is driven off the RestyleTracker, which makes it easier to measure (this is why we have rudimentary markers for it in the profiler).\n\nThen there's the added complication that initial styling itself is sometimes driven off the RestyleTracker in the case where we do lazy frame construction (which is the optimal and (I think) common case during pageload). That goes through CreateNeededFrames, which causes us to do lazy frame construction on various subtrees, and that frame construction triggers styling as discussed above. \n\n> Bug 1349315 covers a similar probe\n> for WebRender, basing the measurement around the percentage of the rendering\n> pipeline.  For stylo, the number that we are hoping to change, if my\n> understanding is correct, would be\n> GeckoRestyleManager::RebuildAllStyleData()\n\nRebuildAllStyleData is mostly used when doing things like adding stylesheets to the DOM, which, while expensive and parallelizable, is not the common restyling case. ProcessPendingRestyles is more along the lines of what you want, but you need to be careful not to include change hint processing in there, and figure out how to model animation stuff, and various other things.\n\nAnd _then_ you have the issue that all of the above only covers selector matching, which is only ~75% or so of style system overhead. Stylo does the property cascade eagerly in parallel, whereas Gecko does it on-demand during layout. This is probably less of an issue with restyle because restyle will recascade anything that was already cascaded in order to generate the correct change hints. But it does throw another wrench in our ability to measure the impact on pageload.\n\nThe overall problem is that (unlike the Stylo case), the work done by the Gecko style sy\n> or somewhere like that, and for\n> the expected parallelism, we can use the available number of cores.\n\nFor an upper bound, yes. But the extent to which we can parallelize depends a lot on the shape of the DOM and how much weird stuff (like XBL/NAC) is involved which needs some sequential processing.\n\n> Bobby, does this sound sane to you?  Thanks!\n\nIt sounds tractable, but I think it would require a fair amount of tweaking and measuring from a relatively knowledgeable person to have much confidence in the data. And even then it's a complicated-enough measurement problem that I worry the data will be hard to interpret without spending a lot of time on it.\n\nEspecially given that the style system is not very platform-dependent, it seems safer to me to focus on controlled local measurements that we can reproduce (a la Hasal). Harald did some work on this for the style system last fall, but I'm not sure what came of it.", "author": "bobbyholley@gmail.com", "id": 12165070, "time": "2017-03-21T20:52:51Z"}, {"text": "> Harald did some work on this for the style system last fall, but I'm not sure what came of it.\n\nWe looked at extracting that data from profiles. I'll have a prototype ready to show collect profiles in the wild.\n\nWhat would be helpful is making sure we have markers for all parts that are affected by stylo, so aggregation doesn't depend on stacks.", "author": "hkirschner@mozilla.com", "id": 12166080, "time": "2017-03-22T04:10:54Z"}, {"text": "(In reply to :Harald Kirschner :digitarald from comment #2)\n> What would be helpful is making sure we have markers for all parts that are\n> affected by stylo, so aggregation doesn't depend on stacks.\n\nHow expensive are markers? If they're cheap enough to add to all the calls to ResolveStyleFor that would work, but otherwise we have the interleaving problem described above.", "author": "bobbyholley@gmail.com", "id": 12166083, "time": "2017-03-22T04:16:12Z"}, {"text": ":mstange can advise if this is the recommended way forward.", "author": "hkirschner@mozilla.com", "id": 12166158, "time": "2017-03-22T05:05:13Z"}, {"text": "Markers might be too expensive. PROFILER_LABELs are probably a better fit for this job: they're cheap to push and pop, and they're sampled at a time-based rate. And if you give them the category ProfileEntry::Category::CSS, they're easy to find by automated profile processing scripts.", "author": "mstange@themasta.com", "id": 12168603, "time": "2017-03-22T18:33:45Z"}, {"text": "(In reply to Bobby Holley (:bholley) (busy with Stylo) from comment #1)\n> (In reply to :Ehsan Akhgari from comment #0)\n> > It would be nice if we had some kind of measurement from the impact that we\n> > could get from turning on stylo in the wild.\n> > \n> > I have been thinking about how to do this.  My rough understanding of the\n> > maximum expected gain we can expect is perfect parallelism across all\n> > available cores for the restyling phase.\n> \n> Well, there are two parts: initial styling and restyling. Initial styling\n> (which happens during pageload) is currently driven off of frame\n> construction, which makes it rather hard to measure, because all the frame\n> construction and styling bits are interleaved. Measuring time in the frame\n> constructor would provide an upper bound on this, but it's hard to say\n> exactly how much other stuff we'd be measuring.\n\nUgh, yeah you're right, I wasn't thinking about that.  :(\n\nHow would the initial styling change post-stylo?  Would it still happen during frame construction like Gecko does today?\n\n> Restyling in stock Gecko is driven off the RestyleTracker, which makes it\n> easier to measure (this is why we have rudimentary markers for it in the\n> profiler).\n\nRight.\n\n> Then there's the added complication that initial styling itself is sometimes\n> driven off the RestyleTracker in the case where we do lazy frame\n> construction (which is the optimal and (I think) common case during\n> pageload). That goes through CreateNeededFrames, which causes us to do lazy\n> frame construction on various subtrees, and that frame construction triggers\n> styling as discussed above. \n\nYeah we do lazy frame construction by default for most content (notable current exception is editable regions, which bug 1348073 will hopefully fix).  But still the styling happening as part of the lazy frame constructions happens in the interleaved and hard to measure fashion you described above.\n\n> > Bug 1349315 covers a similar probe\n> > for WebRender, basing the measurement around the percentage of the rendering\n> > pipeline.  For stylo, the number that we are hoping to change, if my\n> > understanding is correct, would be\n> > GeckoRestyleManager::RebuildAllStyleData()\n> \n> RebuildAllStyleData is mostly used when doing things like adding stylesheets\n> to the DOM, which, while expensive and parallelizable, is not the common\n> restyling case. ProcessPendingRestyles is more along the lines of what you\n> want, but you need to be careful not to include change hint processing in\n> there, and figure out how to model animation stuff, and various other things.\n\nOK, thanks.\n\n> And _then_ you have the issue that all of the above only covers selector\n> matching, which is only ~75% or so of style system overhead. Stylo does the\n> property cascade eagerly in parallel, whereas Gecko does it on-demand during\n> layout. This is probably less of an issue with restyle because restyle will\n> recascade anything that was already cascaded in order to generate the\n> correct change hints. But it does throw another wrench in our ability to\n> measure the impact on pageload.\n\nUgh.  That's actually pretty bad since it the amount of overhead would be different depending on what properties change, if I'm understanding you correctly.  :(\n\n> The overall problem is that (unlike the Stylo case), the work done by the\n> Gecko style sy\n> > or somewhere like that, and for\n> > the expected parallelism, we can use the available number of cores.\n> \n> For an upper bound, yes. But the extent to which we can parallelize depends\n> a lot on the shape of the DOM and how much weird stuff (like XBL/NAC) is\n> involved which needs some sequential processing.\n\nYeah of course.  And also on other things such as the number of actual free cores presumably and not just the number of present cores on the system.\n\n> > Bobby, does this sound sane to you?  Thanks!\n> \n> It sounds tractable, but I think it would require a fair amount of tweaking\n> and measuring from a relatively knowledgeable person to have much confidence\n> in the data. And even then it's a complicated-enough measurement problem\n> that I worry the data will be hard to interpret without spending a lot of\n> time on it.\n> \n> Especially given that the style system is not very platform-dependent, it\n> seems safer to me to focus on controlled local measurements that we can\n> reproduce (a la Hasal). Harald did some work on this for the style system\n> last fall, but I'm not sure what came of it.\n\nHmm, thinking about what you said above, it worries me that any naive measurement that I had in my mind would basically completely miss a big part of the picture.  :/", "author": "ehsan@mozilla.com", "id": 12168638, "time": "2017-03-22T18:43:01Z"}, {"text": "(In reply to :Ehsan Akhgari (busy) from comment #6)\n> (In reply to Bobby Holley (:bholley) (busy with Stylo) from comment #1)\n> > (In reply to :Ehsan Akhgari from comment #0)\n> > > It would be nice if we had some kind of measurement from the impact that we\n> > > could get from turning on stylo in the wild.\n> > > \n> > > I have been thinking about how to do this.  My rough understanding of the\n> > > maximum expected gain we can expect is perfect parallelism across all\n> > > available cores for the restyling phase.\n> > \n> > Well, there are two parts: initial styling and restyling. Initial styling\n> > (which happens during pageload) is currently driven off of frame\n> > construction, which makes it rather hard to measure, because all the frame\n> > construction and styling bits are interleaved. Measuring time in the frame\n> > constructor would provide an upper bound on this, but it's hard to say\n> > exactly how much other stuff we'd be measuring.\n> \n> Ugh, yeah you're right, I wasn't thinking about that.  :(\n> \n> How would the initial styling change post-stylo?  Would it still happen\n> during frame construction like Gecko does today?\n\nWith Stylo, we kick off a parallel traversal as late as possible. With eager frame construction, this means eagerly traversing subtrees right before constructing frames for them, which can give us some parallelism if the subtree is large, but otherwise not much. The lazy frame construction case is much better, because in that case we basically traversal the entire DOM (just like we would with a restyle) and do the frame construction in the post-pass. See bug 1338921.\n\n> \n> > Restyling in stock Gecko is driven off the RestyleTracker, which makes it\n> > easier to measure (this is why we have rudimentary markers for it in the\n> > profiler).\n> \n> Right.\n> \n> > Then there's the added complication that initial styling itself is sometimes\n> > driven off the RestyleTracker in the case where we do lazy frame\n> > construction (which is the optimal and (I think) common case during\n> > pageload). That goes through CreateNeededFrames, which causes us to do lazy\n> > frame construction on various subtrees, and that frame construction triggers\n> > styling as discussed above. \n> \n> Yeah we do lazy frame construction by default for most content (notable\n> current exception is editable regions, which bug 1348073 will hopefully\n> fix).  But still the styling happening as part of the lazy frame\n> constructions happens in the interleaved and hard to measure fashion you\n> described above.\n> \n> > > Bug 1349315 covers a similar probe\n> > > for WebRender, basing the measurement around the percentage of the rendering\n> > > pipeline.  For stylo, the number that we are hoping to change, if my\n> > > understanding is correct, would be\n> > > GeckoRestyleManager::RebuildAllStyleData()\n> > \n> > RebuildAllStyleData is mostly used when doing things like adding stylesheets\n> > to the DOM, which, while expensive and parallelizable, is not the common\n> > restyling case. ProcessPendingRestyles is more along the lines of what you\n> > want, but you need to be careful not to include change hint processing in\n> > there, and figure out how to model animation stuff, and various other things.\n> \n> OK, thanks.\n> \n> > And _then_ you have the issue that all of the above only covers selector\n> > matching, which is only ~75% or so of style system overhead. Stylo does the\n> > property cascade eagerly in parallel, whereas Gecko does it on-demand during\n> > layout. This is probably less of an issue with restyle because restyle will\n> > recascade anything that was already cascaded in order to generate the\n> > correct change hints. But it does throw another wrench in our ability to\n> > measure the impact on pageload.\n> \n> Ugh.  That's actually pretty bad since it the amount of overhead would be\n> different depending on what properties change, if I'm understanding you\n> correctly.  :(\n\nNot so much which properties change (since any change in properties would result in a new rule node, and throwing away all the old style structs), but rather which computed values were needed by layout in order to render the page.\n\n\n> \n> > The overall problem is that (unlike the Stylo case), the work done by the\n> > Gecko style sy\n> > > or somewhere like that, and for\n> > > the expected parallelism, we can use the available number of cores.\n> > \n> > For an upper bound, yes. But the extent to which we can parallelize depends\n> > a lot on the shape of the DOM and how much weird stuff (like XBL/NAC) is\n> > involved which needs some sequential processing.\n> \n> Yeah of course.  And also on other things such as the number of actual free\n> cores presumably and not just the number of present cores on the system.\n> \n> > > Bobby, does this sound sane to you?  Thanks!\n> > \n> > It sounds tractable, but I think it would require a fair amount of tweaking\n> > and measuring from a relatively knowledgeable person to have much confidence\n> > in the data. And even then it's a complicated-enough measurement problem\n> > that I worry the data will be hard to interpret without spending a lot of\n> > time on it.\n> > \n> > Especially given that the style system is not very platform-dependent, it\n> > seems safer to me to focus on controlled local measurements that we can\n> > reproduce (a la Hasal). Harald did some work on this for the style system\n> > last fall, but I'm not sure what came of it.\n> \n> Hmm, thinking about what you said above, it worries me that any naive\n> measurement that I had in my mind would basically completely miss a big part\n> of the picture.  :/\n\nThat matches my view, in general.", "author": "bobbyholley@gmail.com", "id": 12168679, "time": "2017-03-22T18:55:21Z"}, {"text": "status-firefox57=wontfix unless someone thinks this bug should block 57", "author": "cpeterson@mozilla.com", "id": 12806739, "time": "2017-10-31T21:24:40Z"}, {"text": "Ehsan, I assume we're not still planning on doing this.  Can we close this bug?", "author": "cam@mcc.id.au", "id": 13193956, "time": "2018-04-10T04:34:17Z"}, {"text": "Sure, we no longer have anything to compare against, so this bug has lost its original point.  :-)", "author": "ehsan@mozilla.com", "id": 13238785, "time": "2018-04-27T17:43:34Z"}], "id": 1349332, "priority": "P5", "cc": ["bkelly@mozilla.com", "bobbyholley@gmail.com", "bzbarsky@mit.edu", "cam@mcc.id.au", "cpeterson@mozilla.com", "dbaron@dbaron.org", "ehsan@mozilla.com", "hkirschner@mozilla.com", "jan@ikenmeyer.eu", "mstange@themasta.com", "nfroyd@mozilla.com", "tnikkel@gmail.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1349315"], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1243581], "qa_contact": "", "creation_time": "2017-03-21T20:20:52Z", "cf_status_firefox_esr52": "---", "component": "CSS Parsing and Computation", "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "ehsan@mozilla.com", "id": 251051, "name": "ehsan@mozilla.com", "real_name": ":Ehsan Akhgari"}, "whiteboard": "", "mentors": [], "summary": "Get some telemetry probe indicating the expected maximum gain from stylo in the wild", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-04-27T17:43:34Z", "assigned_to": "nobody@mozilla.org", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "bobbyholley@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bobbyholley@gmail.com)"}], "who": "ehsan@mozilla.com", "when": "2017-03-21T20:20:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bkelly@mozilla.com"}], "who": "bkelly@mozilla.com", "when": "2017-03-21T20:23:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bzbarsky@mit.edu, cam@mcc.id.au, dbaron@dbaron.org"}, {"removed": "needinfo?(bobbyholley@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "bobbyholley@gmail.com", "when": "2017-03-21T20:52:51Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cpeterson@mozilla.com"}], "who": "bobbyholley@gmail.com", "when": "2017-03-21T20:53:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tnikkel@gmail.com"}], "who": "tnikkel@gmail.com", "when": "2017-03-21T21:41:02Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "hkirschner@mozilla.com"}], "who": "hkirschner@mozilla.com", "when": "2017-03-22T04:10:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mstange@themasta.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mstange@themasta.com)"}], "who": "hkirschner@mozilla.com", "when": "2017-03-22T05:05:13Z"}, {"changes": [{"removed": "needinfo?(mstange@themasta.com)", "field_name": "flagtypes.name", "added": ""}], "who": "mstange@themasta.com", "when": "2017-03-22T18:33:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ehsan@mozilla.com"}], "who": "ehsan@mozilla.com", "when": "2017-03-22T18:43:01Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P2"}, {"removed": "", "field_name": "blocks", "added": "1243581"}], "who": "cpeterson@mozilla.com", "when": "2017-03-22T18:50:18Z"}, {"changes": [{"removed": "P2", "field_name": "priority", "added": "P5"}], "who": "bobbyholley@gmail.com", "when": "2017-03-22T18:55:49Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}], "who": "nfroyd@mozilla.com", "when": "2017-03-23T00:15:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jan@ikenmeyer.eu"}], "who": "jan@ikenmeyer.eu", "when": "2017-08-23T19:10:39Z"}, {"changes": [{"removed": "---", "field_name": "cf_status_firefox57", "added": "wontfix"}], "who": "cpeterson@mozilla.com", "when": "2017-10-31T21:24:40Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(ehsan@mozilla.com)"}], "who": "cam@mcc.id.au", "when": "2018-04-10T04:34:17Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "INCOMPLETE"}, {"removed": "needinfo?(ehsan@mozilla.com)", "field_name": "flagtypes.name", "added": ""}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-04-27 17:43:34"}], "who": "ehsan@mozilla.com", "when": "2018-04-27T17:43:34Z"}], "resolution": "INCOMPLETE", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}