{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "fbraun@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8751283}, {"creator": "fbraun@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8751284}, {"creator": "fbraun@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8751285}, {"creator": "fbraun@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8752182}, {"creator": "fbraun@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8752183}, {"creator": "fbraun@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8758223}, {"creator": "fbraun@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-31T14:21:05Z", "type_id": 4, "creation_date": "2016-05-31T12:32:56Z", "id": 1403169, "setter": "ckerschb@christophkerschbaumer.com"}], "content_type": "text/plain", "id": 8758224}, {"creator": "fbraun@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-31T15:30:09Z", "type_id": 4, "creation_date": "2016-05-31T15:30:09Z", "id": 1403306, "setter": "fbraun@mozilla.com"}], "content_type": "text/plain", "id": 8758326}, {"creator": "fbraun@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-31T15:53:54Z", "type_id": 4, "creation_date": "2016-05-31T15:31:08Z", "id": 1403309, "setter": "ckerschb@christophkerschbaumer.com"}], "content_type": "text/plain", "id": 8758327}, {"creator": "fbraun@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-31T18:14:13Z", "type_id": 4, "creation_date": "2016-05-31T18:14:13Z", "id": 1403434, "setter": "fbraun@mozilla.com"}], "content_type": "text/plain", "id": 8758386}, {"creator": "fbraun@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-31T18:26:58Z", "type_id": 4, "creation_date": "2016-05-31T18:24:57Z", "id": 1403440, "setter": "mrbkap@mozilla.com"}], "content_type": "text/plain", "id": 8758387}], "classification": "Components", "creator": "fbraun@mozilla.com", "cc": ["ckerschb@christophkerschbaumer.com", "esigra@gmail.com", "francois@mozilla.com", "mrbkap@mozilla.com"], "depends_on": [1277495, 1277248, 1277557, 1279139, 1279420, 1280179, 1312680], "creation_time": "2016-04-18T09:17:07Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": ["dev-doc-complete"], "summary": "SRI: implement require-sri-for resources (enforce Subresource Integrity)", "id": 1265318, "assigned_to_detail": {"email": "fbraun@mozilla.com", "id": 428608, "name": "fbraun@mozilla.com", "real_name": "Frederik Braun [:freddyb]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "fbraun@mozilla.com", "comment_count": 28, "comments": [{"text": "This should be relatively simple, using the `enforceSRI` plumbing introduced in bug 1235572.", "author": "fbraun@mozilla.com", "id": 11333377, "time": "2016-04-18T09:17:07Z"}, {"text": "This has moved from the CSP3 spec to SRI, changing the title to reflect that.", "author": "fbraun@mozilla.com", "id": 11400099, "time": "2016-05-11T13:24:37Z"}, {"text": "Created attachment 8751283\n0001-Bug-1265318-add-require-sri-for-CSP-directive.patch", "author": "fbraun@mozilla.com", "id": 11400103, "time": "2016-05-11T13:25:43Z"}, {"text": "Created attachment 8751284\n0002-need-to-add-more-than-1-contentPolicyType-per-token.patch", "author": "fbraun@mozilla.com", "id": 11400105, "time": "2016-05-11T13:26:01Z"}, {"text": "Created attachment 8751285\n0003-test-for-require-sri-for-script-style-still-missing.patch", "author": "fbraun@mozilla.com", "id": 11400106, "time": "2016-05-11T13:26:21Z"}, {"text": "Comment on attachment 8751283\n0001-Bug-1265318-add-require-sri-for-CSP-directive.patch\n\nReview of attachment 8751283:\n-----------------------------------------------------------------\n\nLooks already pretty good!\n\n::: dom/security/nsCSPContext.cpp\n@@ +1133,5 @@\n> +        return NS_OK;\n> +      }\n> +    }\n> +  }\n> +  *outRequiresSRIForType = false;\n\nNit: please set *outRequiresSRIForType to false before the for loop.\n\n::: dom/security/nsCSPParser.cpp\n@@ +17,4 @@\n>  #include \"nsServiceManagerUtils.h\"\n>  #include \"nsUnicharUtils.h\"\n>  #include \"mozilla/net/ReferrerPolicy.h\"\n> +#include \"../../mfbt/Assertions.h\"\n\nIs this really needed? I suppose we can remove that inclusion.\n\n@@ +60,5 @@\n>  static const char *const kHashSourceValidFns [] = { \"sha256\", \"sha384\", \"sha512\" };\n>  static const uint32_t kHashSourceValidFnsLen = 3;\n>  \n> +static const char kStyle  []             = \"style\";\n> +static const char kScript []             = \"script\";\n\nyou can use:\nstatic const char* const kStyle = \"style\";\n\n@@ +916,5 @@\n>    mPolicy->setReferrerPolicy(&mCurDir[1]);\n>  }\n>  \n> +inline bool\n> +nsCSPParser::isValidRequireSRIKeyword(const nsAString& content)\n\nplease prefix arguments with 'a' -> aKeyword..\n\n@@ +919,5 @@\n> +inline bool\n> +nsCSPParser::isValidRequireSRIKeyword(const nsAString& content)\n> +{\n> +  return content.LowerCaseEqualsLiteral(kScript)\n> +      || content.LowerCaseEqualsLiteral(kStyle);\n\nnit: since we use the || at the end of the line within this file, please also do so here.\n\nreturn aKeyword.LowerCaseEqualsASCII(kScript) ||\n       aKeyword.LowerCaseEqualsASCII(kStyle);\n\n@@ +930,5 @@\n> +      return nsIContentPolicy::TYPE_INTERNAL_SCRIPT_PRELOAD;\n> +  } else if (keyword.LowerCaseEqualsLiteral(kStyle)) {\n> +      return nsIContentPolicy::TYPE_INTERNAL_STYLESHEET;\n> +  } else {\n> +    MOZ_CRASH(\"requireSRIKeywordToType called without proper keyword!\");\n\nPlease use early returns, e.g.\nif (keyword.LowerCaseEqualsLiteral(kScript)) {\n  return nsIContentPolicy::TYPE_INTERNAL_SCRIPT_PRELOAD;\n}\n\nif (keyword.LowerCaseEqualsLiteral(kStyle)) {\n  return nsIContentPolicy::TYPE_INTERNAL_STYLESHEET;\n}\n\nand I suppose we don't want to use MOZ_CRASH, can we use something else?\n\nAlso, I think you should use the extneral content policyType everywhere to avoid any potential bugs, so use:\nTYPE_SCRIPT and TYPE_STYLESHEET everywhere please.\n\n@@ +939,5 @@\n> +nsCSPParser::requireSRIForDirectiveValue()\n> +{\n> +  // XXX (TBD) directive-value   = \"style\" / \"script\"\n> +  // directive name is token 0, we need to examine the remaining tokens (and\n> +  // there should only be one token in the value).\n\nnit: move that comment right before the 'for' loop.\n\n@@ +963,5 @@\n> +                 \"(valid), mCurValue: %s\",\n> +                 NS_ConvertUTF16toUTF8(mCurToken).get(),\n> +                 NS_ConvertUTF16toUTF8(mCurValue).get()));\n> +\n> +    mPolicy->addRequiredSRIType(requireSRIKeywordToType(mCurToken));\n\nDoes that really need to live on the policy? I suppose it would make more sense to add that to the directive, no? Just add the directive. Once you move that into ::dirctive() you have access to the dir |cspDir|.\n\n@@ +1022,5 @@\n> +  // contain source lists)\n> +  if (CSP_IsDirective(mCurDir[0], nsIContentSecurityPolicy::REQUIRE_SRI_FOR)) {\n> +    requireSRIForDirectiveValue();\n> +    return;\n> +  }\n\nmove that part into ::directive()\n\n@@ +1105,5 @@\n>    }\n>  \n> +  if (CSP_IsDirective(mCurToken, nsIContentSecurityPolicy::REQUIRE_SRI_FOR)) {\n> +    return new nsRequireSRIForDirective(CSP_StringToCSPDirective(mCurToken));\n> +  }\n\nkeep that.\n\n@@ +1171,5 @@\n> +  // are well-defined tokens but are not sources\n> +  if (cspDir->equals(nsIContentSecurityPolicy::REQUIRE_SRI_FOR)) {\n> +    mPolicy->addRequireSRIDir(static_cast<nsRequireSRIForDirective*>(cspDir));\n> +  }\n> +\n\nsince it's such a special directive, we should do all of the handling within here, so call requireSRIForDirectiveValue and return early.\n\n::: dom/security/nsCSPParser.h\n@@ +119,5 @@\n> +    void                directiveValue(nsTArray<nsCSPBaseSrc*>& outSrcs);\n> +    void                referrerDirectiveValue();\n> +    inline bool         isValidRequireSRIKeyword(const nsAString& content);\n> +    nsContentPolicyType requireSRIKeywordToType(const nsAString& keyword);\n> +    void                requireSRIForDirectiveValue();\n\nI suppose only requireSRIDirectiveValue needs to be a method of nsCSPParser, right? The other two functions isValidRequireSRIKeyword and requireSRIKeywordToType are only helper functions and don't need access to class internals and hence can live only the the cpp file. Please define them as static.\n\n::: netwerk/base/LoadInfo.cpp\n@@ +149,5 @@\n> +    // If the CSP has the directive to require SRI, set this here\n> +    if (mEnforceSRI == false) { // no need to peek into the CSP if already true\n> +      if ((aContentPolicyType == nsIContentPolicy::TYPE_INTERNAL_SCRIPT) ||\n> +          (aContentPolicyType == nsIContentPolicy::TYPE_INTERNAL_SCRIPT_PRELOAD) ||\n> +          (aContentPolicyType == nsIContentPolicy::TYPE_STYLESHEET)) {\n\nPlease use nsContentUtils::InternalContentPolicyTypeTOExernal(), then you only have to check for TYPE_SCRIPT or TYPE_STYLESHEET.\n\n@@ +152,5 @@\n> +          (aContentPolicyType == nsIContentPolicy::TYPE_INTERNAL_SCRIPT_PRELOAD) ||\n> +          (aContentPolicyType == nsIContentPolicy::TYPE_STYLESHEET)) {\n> +        nsCOMPtr<nsIContentSecurityPolicy> csp;\n> +        //XXX do we *need* to pass a document into EnsureCSP?\n> +        nsresult rv = aLoadingPrincipal->EnsureCSP(nullptr, getter_AddRefs(csp));\n\nWe should already have a CSP available at this point, so please use:\nreadonly attribute nsIContentSecurityPolicy csp\n\naLoadingPrincipal->GetCsp(...)\n\n@@ +153,5 @@\n> +          (aContentPolicyType == nsIContentPolicy::TYPE_STYLESHEET)) {\n> +        nsCOMPtr<nsIContentSecurityPolicy> csp;\n> +        //XXX do we *need* to pass a document into EnsureCSP?\n> +        nsresult rv = aLoadingPrincipal->EnsureCSP(nullptr, getter_AddRefs(csp));\n> +        if ((rv == NS_OK) && (csp != nullptr)) {\n\nthen you can do\nif (csp) {\n...\n}\n\n@@ +157,5 @@\n> +        if ((rv == NS_OK) && (csp != nullptr)) {\n> +          // csp could be null if loading principal is system principal\n> +          bool sriRequired = false;\n> +          csp->RequireSRIForType(aContentPolicyType, &sriRequired);\n> +          mEnforceSRI = sriRequired;\n\ncsp->RequireSRIForTYpe(&mEnforceSRI);\n\n@@ +160,5 @@\n> +          csp->RequireSRIForType(aContentPolicyType, &sriRequired);\n> +          mEnforceSRI = sriRequired;\n> +        }\n> +      }\n> +    }\n\nPlease keep all the CSP code (dom/security) in one patch and move the LoadInfo changes to a separate patch, because we potentially need review from a dom/ peer in the end.", "author": "ckerschb@christophkerschbaumer.com", "id": 11402954, "time": "2016-05-12T09:04:49Z"}, {"text": "Comment on attachment 8751284\n0002-need-to-add-more-than-1-contentPolicyType-per-token.patch\n\nReview of attachment 8751284:\n-----------------------------------------------------------------\n\n::: dom/security/nsCSPParser.cpp\n@@ +958,5 @@\n> +      mPolicy->addRequiredSRIType(nsIContentPolicy::TYPE_SCRIPT);\n> +    } else if (keyword.LowerCaseEqualsLiteral(kStyle)) {\n> +      mPolicy->addRequiredSRIType(nsIContentPolicy::TYPE_STYLESHEET);\n> +      mPolicy->addRequiredSRIType(nsIContentPolicy::TYPE_INTERNAL_STYLESHEET);\n> +    }\n\nPlease move that part into the CSP patch and use the external type everywhere.", "author": "ckerschb@christophkerschbaumer.com", "id": 11402957, "time": "2016-05-12T09:05:39Z"}, {"text": "Comment on attachment 8751285\n0003-test-for-require-sri-for-script-style-still-missing.patch\n\nReview of attachment 8751285:\n-----------------------------------------------------------------\n\nLooks good from a first glance, would be great to have one test for style and one for source and please also add tests for the Parser within TestCSPParser.cpp.\nThanks!\n\n::: dom/security/test/sri/iframe_require-sri-for-script_main.html\n@@ +15,5 @@\n> +\n> +\n> +<script>\n> +  window.onload = function() {\n> +    parent.postMessage(\"finish\", '*');\n\nare you sure that doesn't fire before the script is completely loaded?\n\n::: dom/security/test/sri/test_require-sri-for_csp_directive_script.html\n@@ +29,5 @@\n> +\n> +  addEventListener(\"message\", function(event) {\n> +    switch (event.data) {\n> +      case 'good_sriLoaded':\n> +        good_sriLoaded();\n\nnit: since it's only one line you could in the 'ok(...)' part here.", "author": "ckerschb@christophkerschbaumer.com", "id": 11402970, "time": "2016-05-12T09:08:27Z"}, {"text": "Created attachment 8752182\n0001-Bug-1265318-add-require-sri-for-CSP-directive-r-cker.patch\n\nNew iteration.\nThis is Part 1, for all the CSP changes and the tests", "author": "fbraun@mozilla.com", "id": 11406997, "time": "2016-05-13T12:56:38Z"}, {"text": "Created attachment 8752183\n0002-Bug-1265318-look-for-require-sri-for-CSP-directive-i.patch\n\nThis is part 2, which makes LoadInfo look into the current CSP.", "author": "fbraun@mozilla.com", "id": 11406998, "time": "2016-05-13T12:57:19Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=cbe1b75f33dc", "author": "fbraun@mozilla.com", "id": 11407015, "time": "2016-05-13T13:06:12Z"}, {"text": "Comment on attachment 8752182\n0001-Bug-1265318-add-require-sri-for-CSP-directive-r-cker.patch\n\nReview of attachment 8752182:\n-----------------------------------------------------------------\n\nFreddy, really getting there, two questions:\n*) You are logging a message to the console within ScriptLoader.cpp, don't we want to do the same within style/Loader.cpp?\n*) What about reporting? Should require-sri send a CSP report? Potentially yes.\n\n\nPlease create a separate patch where you bundle all the tests together, so actual code and tests are separate patches.\n\n::: dom/base/nsScriptLoader.cpp\n@@ +2320,5 @@\n> +      nsContentUtils::ReportToConsole(nsIScriptError::errorFlag,\n> +                                      NS_LITERAL_CSTRING(\"Sub-resource Integrity\"),\n> +                                      mDocument,\n> +                                      nsContentUtils::eSECURITY_PROPERTIES,\n> +                                      \"RequiredMetadataMissing\");\n\nProbably we can log a little more here, e.g. from the scriptloadrequest you should be able to query the element and from that element you can query the scripttext and linenumber, see [1] for example.\nI am pretty sure webdevs would appreciate the extra info.\n\n\n[1] http://mxr.mozilla.org/mozilla-central/source/dom/base/nsScriptLoader.cpp#1241\n\n::: dom/interfaces/security/nsIContentSecurityPolicy.idl\n@@ +206,5 @@\n>  \n> +\n> +  /*\n> +   *\n> +  */\n\nPlease add a comment explaining the functionality.\nnit: indendation of last line of the comment.\n\n::: dom/security/nsCSPParser.cpp\n@@ +166,5 @@\n>            (aHexDig >= 'a' && aHexDig <= 'f'));\n>  }\n>  \n> +static bool\n> +isValidRequireSRIKeyword(const nsAString& aContent)\n\nnit: capitalize IsValidRequireSRIKeyword(\n\n@@ +974,5 @@\n>      return;\n>    }\n>  \n> +  // special case handling of the require-sri-for directive (since it doesn't\n> +  // contain source lists)\n\nnit: (since it's not containing a common source-list but rather types, e.g. style or script).\n\n@@ +1124,5 @@\n>    }\n>  \n> +  // special case handling for require-sri-for, which has directive values that\n> +  // are well-defined tokens but are not sources\n> +  if (cspDir->equals(nsIContentSecurityPolicy::REQUIRE_SRI_FOR)) {\n\ncall requireSRIForDirectiveValue() here and move the following code in within that method.\n\n@@ +1134,5 @@\n> +      mCurToken = mCurDir[i];\n> +      resetCurValue();\n> +      if (!isValidRequireSRIKeyword(mCurToken)) {\n> +        const char16_t* params[] = { mCurToken.get() };\n> +        logWarningErrorToConsole(nsIScriptError::warningFlag, \"ignoringUnknownOption\",\n\nI suppose you could use \"ignoreSrcForDirective\" instead of \"ignoringUnkonwOption\".\n\n@@ +1148,5 @@\n> +                    NS_ConvertUTF16toUTF8(mCurToken).get(),\n> +                    NS_ConvertUTF16toUTF8(mCurValue).get()));\n> +      // add contentPolicyTypes to the CSP's required-SRI list for this token\n> +      if (mCurToken.LowerCaseEqualsASCII(kScript)) {\n> +        (static_cast<nsRequireSRIForDirective*>(cspDir))->addType(nsIContentPolicy::TYPE_SCRIPT);\n\nadd before the for loop:\nnsRequireSRIForDirective* requireSRIDir = static_cast<nsRequireSRIForDirective*>(cspDir);\n\n@@ +1149,5 @@\n> +                    NS_ConvertUTF16toUTF8(mCurValue).get()));\n> +      // add contentPolicyTypes to the CSP's required-SRI list for this token\n> +      if (mCurToken.LowerCaseEqualsASCII(kScript)) {\n> +        (static_cast<nsRequireSRIForDirective*>(cspDir))->addType(nsIContentPolicy::TYPE_SCRIPT);\n> +          continue;\n\nremove continue and add requireqSRIDir->attType(...);\n\n@@ +1151,5 @@\n> +      if (mCurToken.LowerCaseEqualsASCII(kScript)) {\n> +        (static_cast<nsRequireSRIForDirective*>(cspDir))->addType(nsIContentPolicy::TYPE_SCRIPT);\n> +          continue;\n> +      }\n> +      if (mCurToken.LowerCaseEqualsASCII(kStyle)) {\n\nelse if\n\n@@ +1153,5 @@\n> +          continue;\n> +      }\n> +      if (mCurToken.LowerCaseEqualsASCII(kStyle)) {\n> +        (static_cast<nsRequireSRIForDirective*>(cspDir))->addType(nsIContentPolicy::TYPE_STYLESHEET);\n> +        continue;\n\nremove continue;\n\n@@ +1155,5 @@\n> +      if (mCurToken.LowerCaseEqualsASCII(kStyle)) {\n> +        (static_cast<nsRequireSRIForDirective*>(cspDir))->addType(nsIContentPolicy::TYPE_STYLESHEET);\n> +        continue;\n> +      }\n> +    }\n\nWhat happens if someone adds the following policy:\nCSP: require-sri-for styles\n\nI suppose we log a warning that 'styles' is not valid keyword, but we would still add the directive to the policy right? I suppose we should log another warning and return before calling addRequireSRIDir().\n\n::: dom/security/nsCSPParser.h\n@@ +118,5 @@\n> +    nsCSPPolicy*        policy();\n> +    void                directive();\n> +    nsCSPDirective*     directiveName();\n> +    void                directiveValue(nsTArray<nsCSPBaseSrc*>& outSrcs);\n> +    void                referrerDirectiveValue();\n\nadd back requireSRIForDirectiveValue()\n\n::: dom/security/nsCSPUtils.cpp\n@@ +1091,5 @@\n> +{\n> +  outStr.AppendASCII(CSP_CSPDirectiveToString(\n> +    nsIContentSecurityPolicy::REQUIRE_SRI_FOR));\n> +  for (uint32_t i = 0; i < mTypes.Length(); i++) {\n> +    //XXX need to turn types back into strings to append them here.\n\nyou have already implemented that part.\n\n@@ +1094,5 @@\n> +  for (uint32_t i = 0; i < mTypes.Length(); i++) {\n> +    //XXX need to turn types back into strings to append them here.\n> +    if (mTypes[i] == nsIContentPolicy::TYPE_SCRIPT) {\n> +      outStr.AppendASCII(\" script\");\n> +      continue;\n\nremove continue;\n\n@@ +1096,5 @@\n> +    if (mTypes[i] == nsIContentPolicy::TYPE_SCRIPT) {\n> +      outStr.AppendASCII(\" script\");\n> +      continue;\n> +    }\n> +    if (mTypes[i] == nsIContentPolicy::TYPE_STYLESHEET) {\n\nelse if\n\n@@ +1098,5 @@\n> +      continue;\n> +    }\n> +    if (mTypes[i] == nsIContentPolicy::TYPE_STYLESHEET) {\n> +      outStr.AppendASCII(\" style\");\n> +      continue;\n\nremove continue;\n\n@@ +1101,5 @@\n> +      outStr.AppendASCII(\" style\");\n> +      continue;\n> +    }\n> +  }\n> +\n\nnit: remove empty line\n\n@@ +1257,5 @@\n>        outStr.AppendASCII(CSP_CSPDirectiveToString(nsIContentSecurityPolicy::REFERRER_DIRECTIVE));\n>        outStr.AppendASCII(\" \");\n>        outStr.Append(mReferrerPolicy);\n> +    } else if (mDirectives[i]->equals(nsIContentSecurityPolicy::REQUIRE_SRI_FOR)) {\n> +      mRequire_SRI->toString(outStr);\n\nremove\n\n@@ +1361,5 @@\n> +\n> +bool\n> +nsCSPPolicy::requireSRIForType(nsContentPolicyType aContentType)\n> +{\n> +  return mRequire_SRI->hasType(aContentType);\n\njust loop through the directives here to find the right directive.\n\n::: dom/security/nsCSPUtils.h\n@@ +492,5 @@\n> +\n> +    void addType(nsContentPolicyType aType)\n> +      { mTypes.AppendElement(aType); }\n> +    bool hasType(nsContentPolicyType aType);\n> +  private:\n\nnit: please add empty line above private:\n\n@@ +554,5 @@\n> +    inline void addRequireSRIDir(nsRequireSRIForDirective* aDir)\n> +      {\n> +        mRequire_SRI = aDir;\n> +        addDirective(aDir);\n> +      }\n\nremove that method and just call addDirective() from within the csp-parser.\n\n@@ +566,4 @@\n>  \n>    private:\n>      nsUpgradeInsecureDirective* mUpgradeInsecDir;\n> +    nsRequireSRIForDirective*   mRequire_SRI;\n\nno need to add a member here.\n\n::: dom/security/test/TestCSPParser.cpp\n@@ +509,5 @@\n>        \"connect-src 'none'\" },\n>      { \"script-src https://foo.com/%$\",\n>        \"script-src 'none'\" },\n> +    { \"require-SRI-for script elephants\",\n> +        \"require-sri-for script\"}\n\nrequire-sri-for paul\n\nwhat should be the result? please add a test for that", "author": "ckerschb@christophkerschbaumer.com", "id": 11414641, "time": "2016-05-17T12:55:18Z"}, {"text": "Comment on attachment 8752183\n0002-Bug-1265318-look-for-require-sri-for-CSP-directive-i.patch\n\nReview of attachment 8752183:\n-----------------------------------------------------------------\n\n::: netwerk/base/LoadInfo.cpp\n@@ +155,5 @@\n> +        nsCOMPtr<nsIContentSecurityPolicy> csp;\n> +        aLoadingPrincipal->GetCsp(getter_AddRefs(csp));\n> +        // csp could be null if loading principal is system principal\n> +        if (csp) {\n> +          csp->RequireSRIForType(loadType, &mEnforceSRI);\n\nwhat happens if you call csp->RequireSRIForType(TYPE_OTHER, ...)??\nI think mEnforceSRI would be set to false, right?\n\nTo make this patch future proof I suppose we can even skip the if (loadType==TYPE_SCRIPT || TYPE_STYLESHEET), right?\n\nWhat do you think?", "author": "ckerschb@christophkerschbaumer.com", "id": 11414649, "time": "2016-05-17T12:58:32Z"}, {"text": "Created attachment 8758223\n0001-Bug-1265318-add-require-sri-for-CSP-directive-r-cker.patch", "author": "fbraun@mozilla.com", "id": 11450776, "time": "2016-05-31T12:32:32Z"}, {"text": "Created attachment 8758224\n0002-Bug-1265318-tests-for-require-sri-for-CSP-directive-.patch", "author": "fbraun@mozilla.com", "id": 11450778, "time": "2016-05-31T12:32:56Z"}, {"text": "Comment on attachment 8758223\n0001-Bug-1265318-add-require-sri-for-CSP-directive-r-cker.patch\n\nReview of attachment 8758223:\n-----------------------------------------------------------------\n\nGetting really close, I would like to see it one more time though - thanks!\n\n::: dom/base/nsScriptLoader.cpp\n@@ +2325,5 @@\n>               (\"nsScriptLoader::OnStreamComplete, required SRI not found\"));\n> +      nsCOMPtr<nsIPrincipal> loadingPrincipal;\n> +      loadInfo->GetLoadingPrincipal(getter_AddRefs(loadingPrincipal));\n> +      nsCOMPtr<nsIContentSecurityPolicy> csp;\n> +      loadingPrincipal->GetCsp(getter_AddRefs(csp));\n\nYou can simplify that\nnsCOMPtr<nsIContentSecurityPolicy> csp;\nloadinfo->LoadingPrincipal()->GetCSP(getter_AddRefs(csp));\n\n@@ +2328,5 @@\n> +      nsCOMPtr<nsIContentSecurityPolicy> csp;\n> +      loadingPrincipal->GetCsp(getter_AddRefs(csp));\n> +      nsCOMPtr<nsIURI> violationURI = mDocument->GetDocumentURI();\n> +      nsAutoCString spec;\n> +      violationURI->GetAsciiSpec(spec);\n\nsame here\nnsAutoCString violationURISpec;\nmDocument->GetDocumentURI()->GetAsciiSpec(violationURISPec);\n\n@@ +2336,5 @@\n> +      }\n> +      csp->LogViolationDetails(\n> +        nsIContentSecurityPolicy::VIOLATION_TYPE_REQUIRE_SRI_FOR_SCRIPT,\n> +        NS_ConvertUTF8toUTF16(spec),\n> +        EmptyString(), lineNo, EmptyString(), EmptyString());\n\nand you can inline the linenumber:\n\n...,\nrequest->mElement ? request->mElement->GetScriptLineNumber : 0,\n...,\n\n::: dom/locales/en-US/chrome/security/csp.properties\n@@ +72,5 @@\n>  # %1$S is the URL of the blocked resource load.\n>  blockAllMixedContent = Blocking insecure request \u2018%1$S\u2019.\n> +# LOCALIZATION NOTE (ignoringDirectiveWithNoValues):\n> +# %1$S is the name of a CSP directive that requires additional values (e.g., 'require-sri-for')\n> +ignoringDirectiveWithNoValues = Directive \u2018%1$S\u2018 should come with paramters, but it does not. It will be ignored.\n\ncan we change that to:\nIgnoring \u2018%1$S\u2019 since it does not contain any parameters.\n\n::: dom/locales/en-US/chrome/security/security.properties\n@@ +69,5 @@\n>  UnsupportedHashAlg=Unsupported hash algorithm in the integrity attribute: \u201c%1$S\u201d\n>  # LOCALIZATION NOTE: Do not translate \"integrity\"\n>  NoValidMetadata=The integrity attribute does not contain any valid metadata.\n> +# LOCALIZATION NOTE: Do not translate \"Content Security Policy\" or \"Subresource Integrity\"\n> +# \u201c%1$S\u201d is a URL\n\n??? is that intentional? please remove\n\n::: dom/security/nsCSPParser.cpp\n@@ +924,4 @@\n>  }\n>  \n>  void\n> +nsCSPParser::requireSRIForDirectiveValue(nsCSPDirective* aDir) {\n\ncan you change the argument to nsRequireSRIForDirective* and do the cast on the callsite?\n\n@@ +924,5 @@\n>  }\n>  \n>  void\n> +nsCSPParser::requireSRIForDirectiveValue(nsCSPDirective* aDir) {\n> +  //  directive-value   = \"style\" / \"script\"\n\nnit: only one space of indendation\n\n@@ +952,5 @@\n> +      requireSRIDir->addType(nsIContentPolicy::TYPE_SCRIPT);\n> +    }\n> +    else if (mCurToken.LowerCaseEqualsASCII(kStyle)) {\n> +      requireSRIDir->addType(nsIContentPolicy::TYPE_STYLESHEET);\n> +    }\n\nI am confused, why would you need isValidRequireSRIKeyword if you check for kScript or kStyle underneath. My suggestion, remove isValidRequireSRIKeyword and have an else branch here where you can log to the console, makes sense?\n\n@@ +960,5 @@\n> +    mPolicy->addDirective(requireSRIDir);\n> +  } else {\n> +    logWarningErrorToConsole(nsIScriptError::warningFlag, \"ignoringDirectiveWithNoValues\",\n> +                          directiveName, ArrayLength(directiveName));\n> +  }\n\ncan you rewrite that to check if the directive does not contain styleSheet or srcipt, then log a warning an return early.\n\nat the end you can just have:\n\nmPolicy->AddDirective(requireSRIDir);\n}\n\n::: dom/security/nsCSPUtils.cpp\n@@ +1121,5 @@\n> +bool\n> +nsRequireSRIForDirective::allows(enum CSPKeyword aKeyword, const nsAString& aHashOrNonce) const\n> +{\n> +  // can only disallow CSP_REQUIRE_SRI_FOR.\n> +  return !(aKeyword == CSP_REQUIRE_SRI_FOR);\n\nreturn aKeyword != CSP_REQURIE_SRI_FOR\n\n::: layout/style/Loader.cpp\n@@ +978,5 @@\n> +      // line number unknown. mRequestingNode doesn't bear this info.\n> +      csp->LogViolationDetails(\n> +        nsIContentSecurityPolicy::VIOLATION_TYPE_REQUIRE_SRI_FOR_STYLE,\n> +        NS_ConvertUTF8toUTF16(spec), EmptyString(),\n> +        0, EmptyString(), EmptyString());\n\nsame as in nsScriptLoader, please simplify.\n\n::: netwerk/base/LoadInfo.cpp\n@@ +148,5 @@\n>      }\n>    }\n>  \n> +    // If the CSP has the directive to require SRI, set this here\n> +    if (mEnforceSRI == false) {\n\nif (!mEnforceSRI) {\n\n@@ +151,5 @@\n> +    // If the CSP has the directive to require SRI, set this here\n> +    if (mEnforceSRI == false) {\n> +      // do not look into the CSP if already true:\n> +      // a CSP saying SRI isn't needed shouldnt overrule GetVerifySignedContent\n> +      uint32_t loadType = nsContentUtils::InternalContentPolicyTypeToExternal(aContentPolicyType);\n\nplease move that line down right before you call csp->RequireSRIForType", "author": "ckerschb@christophkerschbaumer.com", "id": 11451104, "time": "2016-05-31T14:12:39Z"}, {"text": "Comment on attachment 8758224\n0002-Bug-1265318-tests-for-require-sri-for-CSP-directive-.patch\n\nReview of attachment 8758224:\n-----------------------------------------------------------------\n\nr=me, but please address my nits.\n\n::: dom/security/test/TestCSPParser.cpp\n@@ +271,5 @@\n>        \"referrer No-refeRRer\" },\n>      { \"upgrade-INSECURE-requests\",\n> +      \"upgrade-insecure-requests\" },\n> +      { \"require-SRI-for sCript stYle\",\n> +        \"require-sri-for script style\"}\n\nnit: indendation\n\n@@ +509,5 @@\n>        \"connect-src 'none'\" },\n>      { \"script-src https://foo.com/%$\",\n>        \"script-src 'none'\" },\n> +    { \"require-SRI-for script elephants\",\n> +        \"require-sri-for script\"},\n\nnit: indendation\n\n::: dom/security/test/sri/iframe_require-sri-for_main.html\n@@ +20,5 @@\n> +\n> +<link rel=\"stylesheet\" href=\"style3.css\"\n> +      onload=\"parent.postMessage('bad_nonsriLoaded', '*');\"\n> +      onerror=\"parent.postMessage('good_nonsriBlocked', '*');\">\n> +\n\ncan you please also add the comment whether it's going to be blocked or load for the style loads\n\n::: dom/security/test/sri/test_require-sri-for_csp_directive.html\n@@ +15,5 @@\n> +</body>\n> +<script type=\"application/javascript\">\n> +  SimpleTest.waitForExplicitFinish();\n> +\n> +  addEventListener(\"message\", function(event) {\n\nI am not sure actually, but don't you also have to remove the eventListener before calling finish()?\n\n@@ +27,5 @@\n> +      case 'good_nonsriBlocked':\n> +        ok(true, \"Eligible non-SRI resources was correctly blocked by the CSP.\");\n> +        break;\n> +      case 'finish':\n> +        var frame = document.getElementById(\"test_frame\");\n\nyou can define that on top then you can also use it further down and just call:\nframe.src =\n\n@@ +39,5 @@\n> +    }\n> +  })\n> +\n> +\n> +  //not needed, I guess good_inlineScriptLoaded();\n\nwhat about this comment? is this needed? if not, please remove\n!\n\n@@ +42,5 @@\n> +\n> +  //not needed, I guess good_inlineScriptLoaded();\n> +</script>\n> +<script>\n> +document.getElementById(\"test_frame\").src = \"iframe_require-sri-for_main.html\";\n\nwhy is this within separate <script> tags? can you simplify?", "author": "ckerschb@christophkerschbaumer.com", "id": 11451123, "time": "2016-05-31T14:21:05Z"}, {"text": "Created attachment 8758326\n0002-Bug-1265318-tests-for-require-sri-for-CSP-directive-.patch\n\naddressed test nits. carrying over r+", "author": "fbraun@mozilla.com", "id": 11451402, "time": "2016-05-31T15:30:09Z"}, {"text": "Created attachment 8758327\n0001-Bug-1265318-add-require-sri-for-CSP-directive-r-cker.patch\n\nThank you for the speedy reviews.\nand another round :)", "author": "fbraun@mozilla.com", "id": 11451406, "time": "2016-05-31T15:31:08Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=c7ad585c33f2", "author": "fbraun@mozilla.com", "id": 11451407, "time": "2016-05-31T15:31:42Z"}, {"text": "Comment on attachment 8758327\n0001-Bug-1265318-add-require-sri-for-CSP-directive-r-cker.patch\n\nReview of attachment 8758327:\n-----------------------------------------------------------------\n\nr=me, but please address my nits.\n\nCan you please also exercose all the fuzzy tests for the parser before landing? Just flip the switch here [1] and run the tests locally, but don't commit with the fuzzy tests enabled.\n\n[1] http://mxr.mozilla.org/mozilla-central/source/dom/security/test/TestCSPParser.cpp#60\n\n::: dom/security/nsCSPParser.cpp\n@@ +919,5 @@\n>  void\n> +nsCSPParser::requireSRIForDirectiveValue(nsRequireSRIForDirective* aDir) {\n> +  // directive-value = \"style\" / \"script\"\n> +  // directive name is token 0, we need to examine the remaining tokens\n> +  const char16_t* directiveName[] = { mCurToken.get() };\n\nNow that I think about it, I would actually prefer if you instantiate that char array only if it's really needed. Can't we do:\nconst char16_t* directiveName[] = { mCurDir[0].get() };\nright before you log to the console?\n\n@@ +949,5 @@\n> +  if (!(aDir->hasType(nsIContentPolicy::TYPE_STYLESHEET))\n> +      && !(aDir->hasType(nsIContentPolicy::TYPE_SCRIPT))) {\n> +      logWarningErrorToConsole(nsIScriptError::warningFlag, \"ignoringDirectiveWithNoValues\",\n> +                               directiveName, ArrayLength(directiveName));\n> +  } else {\n\nif (!(aDir->hasType(nsIContentPolicy::TYPE_STYLESHEET)) &&\n    !(aDir->hasType(nsIContentPolicy::TYPE_SCRIPT))) {\n\n  logWarning(...);\n  return;\n}\nmPolicy->addDirective(aDir);\n\n::: dom/webidl/CSPDictionaries.webidl\n@@ +28,4 @@\n>    sequence<DOMString> upgrade-insecure-requests;\n>    sequence<DOMString> child-src;\n>    sequence<DOMString> block-all-mixed-content;\n> +  sequence<DOMString> require-sri-for;\n\nAh, sorry, I forgot about that, you have to put that line into a separate patch and ask someone (e.g. bholly) to sign off on it, otherwise you can't land webidl changes. Make sure it has the appropriate name of the reviewer in the commit message.\n\n::: netwerk/base/LoadInfo.cpp\n@@ +148,4 @@\n>      }\n>    }\n>  \n> +    // If the CSP has the directive to require SRI, set this here\n\nIf CSP requires SRI (require-sri-for), then store that information in the loadInfo so we can enforce SRI before loading the subresource.\n\n@@ +156,5 @@\n> +      if (aLoadingPrincipal) {\n> +        aLoadingPrincipal->GetCsp(getter_AddRefs(csp));\n> +        // csp could be null if loading principal is system principal\n> +        if (csp) {\n> +          uint32_t loadType = nsContentUtils::InternalContentPolicyTypeToExternal(aContentPolicyType);\n\nNit: 80 char line limit.", "author": "ckerschb@christophkerschbaumer.com", "id": 11451521, "time": "2016-05-31T15:53:54Z"}, {"text": "Created attachment 8758386\n0001-Bug-1265318-add-require-sri-for-CSP-directive-r-cker.patch\n\ncarrying over r+, addressing nits.", "author": "fbraun@mozilla.com", "id": 11451980, "time": "2016-05-31T18:14:13Z"}, {"text": "Created attachment 8758387\nwebidl changs\n\nMoving Webidl change into its own patch", "author": "fbraun@mozilla.com", "id": 11452013, "time": "2016-05-31T18:22:50Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=0a0aac8db2df", "author": "fbraun@mozilla.com", "id": 11452080, "time": "2016-05-31T18:50:53Z"}, {"text": "The try push was successful, as expected.\nI just went through all the intermittent oranges and pinned them accordingly.\nPlease someone check in :-)", "author": "fbraun@mozilla.com", "id": 11454528, "time": "2016-06-01T13:21:17Z"}, {"text": "Pushed by cbook@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/3dce332e6d22\ntests for require-sri-for CSP directive. r=ckerschb\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/b38b4072fd41\nadd require-sri-for CSP directive. r=ckerschb\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/ec9c63bd09fc\nwebidl changes only, r=mrbkap", "author": "pulsebot@bots.tld", "id": 11454606, "time": "2016-06-01T13:44:55Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/3dce332e6d22\nhttps://hg.mozilla.org/mozilla-central/rev/b38b4072fd41\nhttps://hg.mozilla.org/mozilla-central/rev/ec9c63bd09fc", "author": "cbook@mozilla.com", "id": 11457619, "time": "2016-06-02T10:02:25Z"}, {"text": "https://developer.mozilla.org/en-US/Firefox/Releases/49#HTTP\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/require-sri-for", "author": "fscholz@mozilla.com", "id": 11861974, "time": "2016-11-15T18:54:48Z"}], "cf_last_resolved": "2016-06-02T10:02:25Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2016-11-15T18:54:48Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1231788], "qa_contact": "", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1235572"], "cf_fx_iteration": "---", "component": "DOM: Security", "votes": 0, "cf_status_firefox49": "fixed", "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla49", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "https://github.com/w3c/webappsec-subresource-integrity/pull/32", "creator_detail": {"email": "fbraun@mozilla.com", "id": 428608, "name": "fbraun@mozilla.com", "real_name": "Frederik Braun [:freddyb]"}, "whiteboard": "[domsecurity-active]", "mentors": [], "cc_detail": [{"email": "ckerschb@christophkerschbaumer.com", "id": 363267, "name": "ckerschb@christophkerschbaumer.com", "real_name": "Christoph Kerschbaumer [:ckerschb]"}, {"email": "esigra@gmail.com", "id": 13568, "name": "esigra@gmail.com", "real_name": ""}, {"email": "francois@mozilla.com", "id": 303427, "name": "francois@mozilla.com", "real_name": "Fran\u00e7ois Marier [:francois]"}, {"email": "mrbkap@mozilla.com", "id": 69426, "name": "mrbkap@mozilla.com", "real_name": "Blake Kaplan (:mrbkap)"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "blocks", "added": "1231788"}], "who": "fbraun@mozilla.com", "when": "2016-04-18T09:25:23Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "fbraun@mozilla.com"}], "who": "fbraun@mozilla.com", "when": "2016-04-18T09:31:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ckerschb@christophkerschbaumer.com"}, {"removed": "", "field_name": "whiteboard", "added": "[domsecurity-active]"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-04-18T10:26:56Z"}, {"changes": [{"removed": "", "field_name": "url", "added": "https://github.com/w3c/webappsec-csp/pull/64"}], "who": "fbraun@mozilla.com", "when": "2016-04-22T10:25:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "esigra@gmail.com"}], "who": "esigra@gmail.com", "when": "2016-04-23T16:41:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "francois@mozilla.com"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-04-26T21:35:10Z"}, {"changes": [{"removed": "https://github.com/w3c/webappsec-csp/pull/64", "field_name": "url", "added": "https://github.com/w3c/webappsec-subresource-integrity/pull/32"}], "who": "francois@mozilla.com", "when": "2016-05-10T19:50:07Z"}, {"changes": [{"removed": "CSP3: implement block-non-sri-resources (enforce Subresource Integrity)", "field_name": "summary", "added": "SRI: implement require-sri-for resources (enforce Subresource Integrity)"}], "who": "fbraun@mozilla.com", "when": "2016-05-11T13:24:37Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8751283, "added": "feedback?(ckerschb@christophkerschbaumer.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-11T13:25:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8751284, "added": "feedback?(ckerschb@christophkerschbaumer.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-11T13:26:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8751285, "added": "feedback?(ckerschb@christophkerschbaumer.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-11T13:26:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8751283, "added": ""}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-05-12T09:04:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8751284, "added": ""}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-05-12T09:05:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8751285, "added": ""}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-05-12T09:08:27Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8751283, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8751284, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8751285, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752182, "added": "review?(ckerschb@christophkerschbaumer.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-13T12:56:38Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8752183, "added": "review?(ckerschb@christophkerschbaumer.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-13T12:57:19Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8752182, "added": ""}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-05-17T12:55:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8752183, "added": ""}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-05-17T12:58:32Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8752182, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8752183, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8758223, "added": "review?(ckerschb@christophkerschbaumer.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-31T12:32:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8758224, "added": "review?(ckerschb@christophkerschbaumer.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-31T12:32:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8758223, "added": ""}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-05-31T14:12:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8758224, "added": "review+"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-05-31T14:21:05Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8758224, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8758326, "added": "review+"}], "who": "fbraun@mozilla.com", "when": "2016-05-31T15:30:09Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8758223, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8758327, "added": "review?(ckerschb@christophkerschbaumer.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-31T15:31:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8758327, "added": "review+"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-05-31T15:53:54Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8758327, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8758386, "added": "review+"}], "who": "fbraun@mozilla.com", "when": "2016-05-31T18:14:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mrbkap@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8758387, "added": "review?(mrbkap@mozilla.com)"}], "who": "fbraun@mozilla.com", "when": "2016-05-31T18:24:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mrbkap@mozilla.com)", "attachment_id": 8758387, "added": "review+"}], "who": "mrbkap@mozilla.com", "when": "2016-05-31T18:26:58Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "checkin-needed"}], "who": "fbraun@mozilla.com", "when": "2016-05-31T18:46:26Z"}, {"changes": [{"removed": "checkin-needed", "field_name": "keywords", "added": ""}], "who": "pulsebot@bots.tld", "when": "2016-06-01T13:44:55Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1277248"}], "who": "fbraun@mozilla.com", "when": "2016-06-01T14:30:39Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1277495"}], "who": "fbraun@mozilla.com", "when": "2016-06-02T09:39:46Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla49"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-06-02 10:02:25"}, {"removed": "---", "field_name": "cf_status_firefox49", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2016-06-02T10:02:25Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1277557"}], "who": "fbraun@mozilla.com", "when": "2016-06-02T13:41:26Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1279139"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-06-09T09:50:08Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1279420"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2016-06-10T07:24:04Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1280179"}], "who": "fryskefirefox@gmail.com", "when": "2016-06-15T07:59:03Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1312680"}], "who": "fbraun@mozilla.com", "when": "2016-10-25T09:06:53Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "dev-doc-needed"}], "who": "fscholz@mozilla.com", "when": "2016-11-03T18:42:55Z"}, {"changes": [{"removed": "dev-doc-needed", "field_name": "keywords", "added": "dev-doc-complete"}], "who": "fscholz@mozilla.com", "when": "2016-11-15T18:54:48Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}