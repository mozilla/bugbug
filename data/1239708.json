{"cf_tracking_thunderbird_esr52": "---", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "mak77@bonardo.net", "mentors_detail": [], "depends_on": [1464154, 1464270, 1466233, 1467627, 1467631, 1461736, 1461753, 1462046, 1462275, 1462726, 1463017, 1463132, 1463580, 1464328, 1467537], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "adw@mozilla.com", "id": 334927, "name": "adw@mozilla.com", "real_name": "Drew Willcoxon :adw"}, {"email": "andrei.br92@gmail.com", "id": 476157, "name": "andrei.br92@gmail.com", "real_name": "Andrei Oprea [:andreio]"}, {"email": "bomfog@gmail.com", "id": 58172, "name": "bomfog@gmail.com", "real_name": "bomfog"}, {"email": "charmston@mozilla.com", "id": 461732, "name": "charmston@mozilla.com", "real_name": "Chuck Harmston [:chuck]"}, {"email": "claudiovspiess@gmail.com", "id": 617714, "name": "claudiovspiess@gmail.com", "real_name": ""}, {"email": "dolske@mozilla.com", "id": 27780, "name": "dolske@mozilla.com", "real_name": "Justin Dolske [:Dolske]"}, {"email": "dzeber@mozilla.com", "id": 449807, "name": "dzeber@mozilla.com", "real_name": "Dave Zeber [:dzeber]"}, {"email": "gwimberly@softvision.com", "id": 554753, "name": "gwimberly@softvision.com", "real_name": "Grover Wimberly IV [:Grover-QA] <Out of Office until June 18 - Use NI Flag>"}, {"email": "jan@ikenmeyer.eu", "id": 580271, "name": "jan@ikenmeyer.eu", "real_name": "Jan Andre Ikenmeyer [:darkspirit]"}, {"email": "jwilliams@softvision.com", "id": 554370, "name": "jwilliams@softvision.com", "real_name": "Justin [:JW_SoftvisionQA]"}, {"email": "kit@mozilla.com", "id": 506322, "name": "kit@mozilla.com", "real_name": "Lina Cambridge (she/her) [:lina, :kitcambridge]"}, {"email": "mak77@bonardo.net", "id": 240353, "name": "mak77@bonardo.net", "real_name": "Marco Bonardo [::mak]"}, {"email": "mozilla.org@prolinux.com", "id": 455393, "name": "mozilla.org@prolinux.com", "real_name": "Paul"}, {"email": "mverdi@mozilla.com", "id": 368084, "name": "mverdi@mozilla.com", "real_name": "Verdi [:verdi]"}, {"email": "paolo.mozmail@amadzone.org", "id": 332229, "name": "paolo.mozmail@amadzone.org", "real_name": ":Paolo Amadini"}, {"email": "past@mozilla.com", "id": 363318, "name": "past@mozilla.com", "real_name": "Panos Astithas [:past] (please ni?)"}, {"email": "peterbe@mozilla.com", "id": 412877, "name": "peterbe@mozilla.com", "real_name": "Peter Bengtsson [:peterbe]"}, {"email": "rares.bologa@softvisioninc.eu", "id": 553108, "name": "rares.bologa@softvisioninc.eu", "real_name": "RaresB"}, {"email": "rhubscher@mozilla.com", "id": 500520, "name": "rhubscher@mozilla.com", "real_name": "R\u00e9my Hubscher (:natim)"}, {"email": "Tobias.Marty@gmx.de", "id": 572549, "name": "Tobias.Marty@gmx.de", "real_name": "TMart"}, {"email": "Virtual@teknik.io", "id": 342842, "name": "Virtual@teknik.io", "real_name": "Virtual_ManPL [:Virtual] - (please needinfo? me - so I will see your comment/reply/question/etc.)"}, {"email": "yannbreliere@gmail.com", "id": 349306, "name": "yannbreliere@gmail.com", "real_name": "Yann Breli\u00e8re"}], "cf_last_resolved": "2018-05-15T09:55:14Z", "attachments": [{"creator": "adw@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-08T12:34:18Z", "type_id": 4, "creation_date": "2018-05-07T22:46:31Z", "id": 1753765, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8930304}, {"creator": "adw@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-04T13:41:43Z", "type_id": 4, "creation_date": "2018-04-24T23:57:26Z", "id": 1748567, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8948567}, {"creator": "adw@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-02-21T21:45:15Z", "type_id": 4, "creation_date": "2018-02-06T00:41:28Z", "id": 1712679, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8948568}, {"creator": "adw@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-02-21T22:33:09Z", "type_id": 4, "creation_date": "2018-02-06T00:41:28Z", "id": 1712680, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8948569}, {"creator": "adw@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-04T14:13:22Z", "type_id": 4, "creation_date": "2018-04-24T23:57:26Z", "id": 1748568, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8948570}, {"creator": "adw@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-08T12:59:26Z", "type_id": 4, "creation_date": "2018-05-07T22:46:31Z", "id": 1753766, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8948571}, {"creator": "adw@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-04T14:23:09Z", "type_id": 4, "creation_date": "2018-04-24T23:57:26Z", "id": 1748570, "setter": "mak77@bonardo.net"}], "content_type": "text/x-review-board-request", "id": 8948572}], "votes": 1, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "qa_contact_detail": {"email": "gwimberly@softvision.com", "id": 554753, "name": "gwimberly@softvision.com", "real_name": "Grover Wimberly IV [:Grover-QA] <Out of Office until June 18 - Use NI Flag>"}, "comment_count": 231, "comments": [{"text": "In bug 769348 we changed the algorithm to figure out the best schema for an host, we decided to go with \"use a prefix if all typed pages for that host use that prefix\".\nThat was after a long discussion in bug 769994 where users needed a way to override our too aggressive algorithm that was forcing a prefix even if just one entry had that prefix.\n\nLet's make an example, supposing the host \"mozilla.org\".\nBefore bug 769348 it was enough that just one typed page with host \"mozilla.org\" had \"https\" schema, for us to suggest an https autofill entry.\nThat was nice from a security point of view, but opened a can of worms (bug 769994), mostly due to https pages returning errors or broken certificates and other situations we cannot detect in Places.\n\nSo it was decided in bug 769348 to suggest a given prefix for \"mozilla.org\" only if all typed pages have that prefix.\nThe second solution offers a way out to users that couldn't always use https on an host. On the other side makes extremely easy to lost secure prefix just by typing once the non secure host.\n\nTyping in reality includes various user actions:\n- Opening a tab from \"another device\" (Sync)\n- middle-mouse paste\n- typing an url\n- loading one (or multiple) pages from any history view\n\nOn a second thought, I think both decisions were pretty extreme, what matters is that we should somehow be able to adapt to the user/page changes over time.\n\nI think we have 2 problems here.\n\nThe first problem is that we are abusing the typed flag and that pollutes data. It's not even anymore a real typed flag, since clicking on any history view sets it, plus we don't set it for loads from the bookmarks views that are likely even more important?\nDue to this polluting, since autofill is based on typed being set, we autofill a page loaded once from history, but not a bookmarked page :( This is sub-optimal.\nWe could try to restore the typed flag to its original intent, remove browser.urlbar.autoFill.typed (it's the default) and change the algorithm to decide what to autofill.\nWe decided to autofill only typed domains in bug 720258, since otherwise we were autofilling pages that the user visited just once... Using typed looked like a simple solution, but it's again sub-optimal.\nA better decision may be based on frecency of the host, we could autofill only if it's over a given threshold (TBD). This would likely also bring some perf wins, since keeping typed in sync has a cost.\n\nThe second problem is that by stating \"use a schema only if all typed pages have it\" does not adapt with time. it's enough to have one single wrong visit to break the profile forever.\nAgain, I think a better solution would be to base the decision on frecency, like we could say \"use a schema only if all of the 3 most frecent pages have it\".\n\nBoth algorithms can be tweaked by changing the frecency threshold and number of frecent pages.\n\nThe work to implement these can be splitted into 3 to 4 bugs, it's not extremely complex but involves changes to the awesomebar behavior, imo they will end up being improvements, since we will be able to better adapt to each single user, but it's still touching the most common point of interaction and autofill behavior.\n\nI'd like to get some thoughts on these suggested changes.\nPlus, I'd like to know from managers whether it's worth I spend some time on trying to implement them, these affect awesomebar quality.", "author": "mak77@bonardo.net", "id": 11076341, "time": "2016-01-14T16:14:19Z"}, {"text": "I don't have a strong opinion here. Sounds like a good improvement?", "author": "dolske@mozilla.com", "id": 11077873, "time": "2016-01-14T22:31:13Z"}, {"text": "I agree that we should remove the variable of whether a URI was typed using the keyboard or not in our frecency calculations. This may even simplify our code?\n\nWe may obviously still want to exclude from the calculations (or even from the recording of the visit) some loads without direct interaction, like pinned tabs and tabs restored by session restore, or maybe consider them differently.\n\nSelecting the schema based on frecency is also better. We should ensure that the adaptive algorithm still works for schema changes, in other words if I'm suggested HTTP but I manually select an HTTPS base domain, results should adapt for next time. I think this may occur naturally anyways without significant code changes.", "author": "paolo.mozmail@amadzone.org", "id": 11079621, "time": "2016-01-15T14:00:15Z"}, {"text": "(In reply to :Paolo Amadini from comment #2)\n> We may obviously still want to exclude from the calculations (or even from\n> the recording of the visit) some loads without direct interaction, like\n> pinned tabs and tabs restored by session restore, or maybe consider them\n> differently.\n\nCurrently we don't ever register visits to pages restored with a session. That is a bug in itself (bug 613126) since supposing you use that page everyday but it's always restored, it will have a very low frecency. It is sort of off-topic here, but the problem exists.\n\n> Selecting the schema based on frecency is also better. We should ensure that\n> the adaptive algorithm still works for schema changes, in other words if I'm\n> suggested HTTP but I manually select an HTTPS base domain, results should\n> adapt for next time. I think this may occur naturally anyways without\n> significant code changes.\n\nBy using frecency it would happen naturally, but may take some days for the new prefix to replace the old one. It would still be an improvement over the current situation where it may take one year and typing even just once the wrong prefix restarts the \"timer\". We could then build improvements on top of a better situation.", "author": "mak77@bonardo.net", "id": 11079649, "time": "2016-01-15T14:08:01Z"}, {"text": "I agree that this seems like a good improvement. I'm less certain about the relative priority against other awesomebar work, but I think this should be part of the Places bug list that we talked about this week.", "author": "past@mozilla.com", "id": 11080140, "time": "2016-01-15T15:59:22Z"}, {"text": "one of the reasons I filed this, is that due to the regression bug 1234186, we have basically polluted users autofill data for the next year.", "author": "mak77@bonardo.net", "id": 11080149, "time": "2016-01-15T16:01:10Z"}, {"text": "Yes, that one is quite nasty. This one seems certainly important too, I just don't know off the top of my head what else we've got.", "author": "past@mozilla.com", "id": 11080530, "time": "2016-01-15T17:42:37Z"}, {"text": "That sounds good to me, Marco.  I think using frecency is probably better than the two alternatives you mention, but I also think there's a danger that it will become self-reinforcing and cause you to get \"stuck\" with certain autofills over time, even if they aren't optimal, especially if you primarily visit pages by using autofill.  I don't know what to do about that though.", "author": "adw@mozilla.com", "id": 11092680, "time": "2016-01-20T20:18:35Z"}, {"text": "Just to annotate a further possible improvement, we have adaptive history but we only use it to add a normal entry.\nWe could, in addition to frecency, use adaptive history for the decision. For example, if the typed word happens to be at the beginning of the host, it's a very good sign the user may want to autofill THAT host, rather than another one.", "author": "mak77@bonardo.net", "id": 11985003, "time": "2017-01-16T14:45:30Z"}, {"text": "I hope this happens already: Suggest (only) https scheme for a (sub)domain if there has been a >0 HSTS header/preloading.\nAnd: If I type in \"nevervisitedbefore.example\" for the first time and that domain is HSTS preloaded, please suggest \"Visit https://nevervisitedbefore.example/\".", "author": "jan@ikenmeyer.eu", "id": 11987410, "time": "2017-01-17T16:01:27Z"}, {"text": "We try to serve secure versions when possible, but we don't have available data about HSTS to query. On the other side, the usage of HSTS makes the request even less interesting.", "author": "mak77@bonardo.net", "id": 11987587, "time": "2017-01-17T16:46:43Z"}, {"text": "*** Bug 1355431 has been marked as a duplicate of this bug. ***", "author": "mak77@bonardo.net", "id": 12227973, "time": "2017-04-12T06:49:00Z"}, {"text": "*** Bug 1392623 has been marked as a duplicate of this bug. ***", "author": "yfdyh000@gmail.com", "id": 12605357, "time": "2017-08-28T08:58:10Z"}, {"text": "*** Bug 1373173 has been marked as a duplicate of this bug. ***", "author": "mak77@bonardo.net", "id": 12787026, "time": "2017-10-24T21:28:01Z"}, {"text": "*** Bug 1417919 has been marked as a duplicate of this bug. ***", "author": "mak77@bonardo.net", "id": 12848821, "time": "2017-11-16T14:27:51Z"}, {"text": "Created attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview commit: https://reviewboard.mozilla.org/r/201438/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/201438/", "author": "adw@mozilla.com", "id": 12860681, "time": "2017-11-21T00:49:04Z"}, {"text": "Work in progress.  I've just started poking around, so part of this is me developing an understanding of how autofill works.  I realized as I'm typing this that this patch isn't doing quite what I thought.  So far I'm setting up moz_hosts like this:\n\n  \"CREATE TABLE moz_hosts (\" \\\n    \"  id INTEGER PRIMARY KEY\" \\\n    \", rev_host TEXT NOT NULL UNIQUE\" \\\n    \", host TEXT NOT NULL\" \\\n    \", prefix TEXT\" \\\n    \", frecency INTEGER\" \\\n  \")\" \\\n\nA moz_hosts entry per rev_host.  But what I really want is an entry per origin (prefix + host (and probably port too, which would cover a related bug)), not rev_host.  I was thinking rev_host included the prefix/scheme (all in reverse order of course), but I don't think that's true: https://dxr.mozilla.org/mozilla-central/rev/b056526be38e96b3e381b7e90cd8254ad1d96d9d/toolkit/components/places/Helpers.cpp#186\n\nAnyway, the idea is to have an entry per origin, each with its own frecency.", "author": "adw@mozilla.com", "id": 12860702, "time": "2017-11-21T00:50:54Z"}, {"text": "Oh and one question I had is why do we complete only hosts, not full URLs (unless your search string includes a \"/\")?  Why not just sort all matching moz_places, sort by frecency, and autofill that URL?  (And make it the heuristic result too I guess, since it looks like autofill is tied to it.)  I tested with Chrome and Safari, and they also complete hosts first, so at least we're consistent with them.", "author": "adw@mozilla.com", "id": 12860708, "time": "2017-11-21T00:54:09Z"}, {"text": "Comment 0 has some details about what we did and what we could do.\n\n(In reply to Drew Willcoxon :adw from comment #16)\n> A moz_hosts entry per rev_host.  But what I really want is an entry per\n> origin (prefix + host (and probably port too, which would cover a related\n> bug)), not rev_host.\n\nWhy introducing another moz_hosts table? what are you trying to achieve that the current one doesn't provide?\n\n(In reply to Drew Willcoxon :adw from comment #17)\n> Oh and one question I had is why do we complete only hosts, not full URLs\n> (unless your search string includes a \"/\")?\n\nThis was an original idea of Limi, back in the past, because very often users want to visit the main page of a site, even if they then move to a sub page.\nIn most cases other browsers act similarly nowadays, so looks like the idea was inherited around.\n\nBased on that idea, we built a moz_hosts table that is made exactly for filling hosts. The main problem we hit was that we must use an index, but often the user doesn't type the scheme, so we need a table that indexes hosts without schemes. That way, when you type \"mo\" we can sort all the hosts and pick the ones starting with \"mo\", it's fast, and that was critical because autofill happens while typing.\n\n> Why not just sort all matching\n> moz_places, sort by frecency, and autofill that URL?\n\nBecause we cannot match on moz_places, there's no good index to match.\n\nThe mistakes we have in the current system imo are 2 main ones:\n1. We only autofill hosts, it would be great in some cases to provide more, but we don't have a good way to match and matching the whole moz_places is too expensive. Adaptive history (moz_inputhistory table) sounds like a very good candidate though, since it's pages explicitly picked by the user when he types certain letters. if those letters exactly match the beginning of the page host, we could fill that adaptive url. It may require to generate a url_fragment field in moz_inputhistory that we can index, that could contain a partial fixed url\n2. We use typed hosts. This is both under-performing and ugly, because we were never good at defining what \"typed\" means. We have frecency of each host, we should fill the top frecency host if its frecency is over a certain value. The problem is defining that value, because frecency is different PER USER. We could maybe define something like frecency > MAX(frecency) / 2.\n\nAdditionally, a perf problem we have, is that rev_host includes \"WWW\" bu we don't care to differenciate anymore. That has perf implications when updating moz_hosts (bug 843357).\n\nShould we go back at filling urls? Probably yes, but it's a complex problem to solve in a very efficient way, and that's why here I suggested starting with frecency hosts picking and using moz_inputhistory. both are things that adapt to the user habits and thus look very promising for this kind of stuff.", "author": "mak77@bonardo.net", "id": 12861533, "time": "2017-11-21T09:30:04Z"}, {"text": "An example about input history.\nSay that you type \"mo\" and instead of visiting \"mozilla.org\" you instead pick \"mozilla.org/contribute\" from the list. moz_inputhistory will remember that. We could store in moz_inputhistory the fact \"mo\" is a good autofill candidate for the url, and the next time you type \"mo\" we autofill \"mozilla.org/contribute\".\nAgain moz_inputhistory has a score, we should thus pick a threshold.", "author": "mak77@bonardo.net", "id": 12861547, "time": "2017-11-21T09:34:09Z"}, {"text": "a last note, it may also be possible to provide a url fragment (the most frecent url) per each host, adding a field to moz_hosts. it would pretty much be a suffix field (currently we have a prefix field for the scheme).\nThis would allow to still quickly match on the host, but then provide prefix + host + suffix as a result, that is the whole url.\n\nWhether this is better or worse than the previous suggestions, is TBD. It may be a bit more expensive to keep moz_hosts in sync.\n\n(In reply to Drew Willcoxon :adw from comment #17)\n> Oh and one question I had is why do we complete only hosts, not full URLs\n> (unless your search string includes a \"/\")? \n\nOne thing I forgot, we autofill urls if the string ends with \"/\" for 2 reasons:\n1. is slow (no index)\n2. it allows \"m\" + RIGHT + \"c\" + ENTER to go to mozilla.org/contribute.", "author": "mak77@bonardo.net", "id": 12861559, "time": "2017-11-21T09:38:51Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #18)\n> Comment 0 has some details about what we did and what we could do.\n> Why introducing another moz_hosts table? what are you trying to achieve that\n> the current one doesn't provide?\n\nThe second problem you described in comment 0 is about schemes, choosing the best scheme for a host.  That's the problem I was trying to address.  If moz_hosts were keyed on scheme + host instead of simply host (but also still had a separate host column that was indexed for searching), then we could just find all the rows whose hosts match what the user is typing and then pick the most frecent.  That would give us the most frecent scheme + host.  (And I wouldn't be adding another moz_hosts table.  I'd be migrating the current one.)\n\nI'll ruminate on all these comments, thanks for them.", "author": "adw@mozilla.com", "id": 12862961, "time": "2017-11-21T18:37:22Z"}, {"text": "One thing that comes to mind immediately from your comments is that I'm not sure we should correlate autofill with the user's typing at all.  If you visit mozilla.org often, shouldn't we just autofill it when you start typing it, regardless of *how* you have visited it in the past?  For example, say it's bookmarked in your toolbar and you often click it, but you have never before typed \"mozilla\" in the urlbar.  When you do first start typing \"mozilla\", we should autofill it.  (Or more precisely, consider it a strong candidate along with all the other candidates for autofill.)\n\nIf that's the case, then would we want to base autofill on moz_inputhistory?  It seems not, right?", "author": "adw@mozilla.com", "id": 12863090, "time": "2017-11-21T19:12:52Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #21)\n> If moz_hosts were keyed on scheme + host instead of simply host (but also still\n> had a separate host column that was indexed for searching), then we could\n> just find all the rows whose hosts match what the user is typing and then\n> pick the most frecent.\n\nwell, it is sort of done like that, since we have a prefix column containing the scheme (+eventual www) that we use.\nThe current algo for the scheme has already been changed from \"all the pages should have that scheme\" to \"most of the pages have that scheme\", we could go further and just use scheme of the most frecent page, maybe. That happened in the dependency bug 1341350.\n\n\n(In reply to Drew Willcoxon :adw from comment #22)\n> One thing that comes to mind immediately from your comments is that I'm not\n> sure we should correlate autofill with the user's typing at all.  If you\n> visit mozilla.org often, shouldn't we just autofill it when you start typing\n> it, regardless of *how* you have visited it in the past?\n\nYes, that's why we should move off from using typed (and I was suggesting a frecency threshold).\nOn the other side, the idea behind using only typed pages, was to avoid annoing the user with useless autofills. for example if you visited only once \"mycatismad.com\", autofilling it on \"m\" could not be exactly useful.\n\n> For example, say\n> it's bookmarked in your toolbar and you often click it, but you have never\n> before typed \"mozilla\" in the urlbar.  When you do first start typing\n> \"mozilla\", we should autofill it. \n\nYep, frecency is how we track that kind of stuff ineed.\n\n> If that's the case, then would we want to base autofill on moz_inputhistory?\n> It seems not, right?\n\nmoz_inputhistory has a different advantage. While typing a url doesn't mean much, typing something and explicitly picking a url from a list, is a strong sign that when typing that word you likely want to visit that url. The other advantage is that the table is smaller, typed fragments are (probably?) already indexed, and at the act of inserting into it we could already store if it's a good autofill candidate (if it's domain starts with the typed letters\". Thus it would be cheap to query, and could likely often pick what the user wanted.\nShould inputhistory win over a very frecent host? I don't know off-hand :(", "author": "mak77@bonardo.net", "id": 12863938, "time": "2017-11-21T23:41:37Z"}, {"text": "> On the other side, the idea behind using only typed pages, was to avoid annoing the user with useless autofills. for example if you visited only once \"mycatismad.com\", autofilling it on \"m\" could not be exactly useful.\n\nUnfortunately that's pretty much the current behaviour. I type a single 'j' in the location bar, Firefox autofills and provides as the first suggestion http://js1k.com/. I have never even visited that URL. I visited a single page on that site a total of twice, most recently in January 2015.\n\nThe current algorithm *always* suggests some seemingly random domain's root URL first if it can, even if it's a completely irrelevant domain. Meanwhile, the second suggested URL for 'j' has been visited > 200 times. I've also visited http://jalopnik.com/ 43 times. If the top suggestion must be a root URL for some reason (and there are good reasons why it shouldn't), it should at least be the legitimately most popular one.\n\nSo your idea of preferencing typed URLs looks 100% correct from here.", "author": "mozilla.org@prolinux.com", "id": 12864464, "time": "2017-11-22T05:49:18Z"}, {"text": "(In reply to Paul from comment #24)\n> > On the other side, the idea behind using only typed pages, was to avoid annoing the user with useless autofills. for example if you visited only once \"mycatismad.com\", autofilling it on \"m\" could not be exactly useful.\n> \n> Unfortunately that's pretty much the current behaviour. I type a single 'j'\n> in the location bar, Firefox autofills and provides as the first suggestion\n> http://js1k.com/. I have never even visited that URL. I visited a single\n> page on that site a total of twice, most recently in January 2015.\n\nYes, that's the problem in using \"typed\" as we define it. You likely \"typed\" that page without being conscious about that, because we mark pages as typed also if you pick them from the history menu, for example. It's just wrong. A frecency threshold would adapt to your changed habits and would easily discard low traffic pages.", "author": "mak77@bonardo.net", "id": 12864655, "time": "2017-11-22T07:50:35Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/1-2/", "author": "adw@mozilla.com", "id": 12867463, "time": "2017-11-23T00:47:15Z"}, {"text": "Another WIP that continues from the last one.  It kind of works, but not really because prefix handling is messed up.", "author": "adw@mozilla.com", "id": 12867464, "time": "2017-11-23T00:47:35Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/2-3/", "author": "adw@mozilla.com", "id": 12885083, "time": "2017-11-30T00:18:57Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nMarco, could you please give some feedback at this point?  The code is very messy, and right now I'd just like for you to look at test_autofill_hosts.js to see what I'm going for.  (Feel free to look at the code course.)  The code and test do work, though.  Try builds if you'd like: https://treeherder.mozilla.org/#/jobs?repo=try&revision=e1a2bcea8f46\n\nAs you can see from the test, this doesn't drastically change how autofill/completion works, but it does make these changes:\n\n* Auto-completion is now in terms of origins (scheme + host + port), not only hosts.\n\n* The only requirement for an origin to be a candidate for completion is that it appears in moz_places.  IOW if a URL is in moz_places, then its origin is a candidate for completion.  No \"typed\" or any other criteria.\n\n* A single host can map to multiple candidates for completion, one per scheme.  Each origin has its own frecency, which is the max of frecencies of all URLs in moz_places with the origin.  So if a URL has http and https versions, you can make autofill use the https version if you visit it more.\n\n* Ports are now completed.  (bug 764062)\n\n* If example.com is in moz_places but www.example.com is not, I don't think we should allow \"www.ex\" to complete to www.example.com (or example.com).  The reverse isn't true though:  If www.example.com is in moz_places but example.com is not, then allow \"ex\" to complete to www.example.com, like we do now.", "author": "adw@mozilla.com", "id": 12885090, "time": "2017-11-30T00:25:31Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #29)\n> * If example.com is in moz_places but www.example.com is not, I don't think\n> we should allow \"www.ex\" to complete to www.example.com (or example.com). \n> The reverse isn't true though:  If www.example.com is in moz_places but\n> example.com is not, then allow \"ex\" to complete to www.example.com, like we\n> do now.\n\nYes, this is unclear behavior. One side it's true the www. version may not exist, thus it's wrong to add it.\nThe other side, we are used to listen everywhere things like \"visit www.something.com\", in most TV ads in Italy for example they always explicitly read the www.\nThough, for that to be a problem the user should have first visited the non www version (somehow, maybe through a link), and then try to type the www version. I don't know if that's really common, in any case he can just continue typing what he wants, we'll just not fill up.\nTo sum up, I think it's fine to proceed with your idea and check the feedback. It should do.\n\nI'll look at the patch now and see the schema changes behind the decision. The thing I'm mostly interested in is how we match and what's the destiny of the moz_hosts table.", "author": "mak77@bonardo.net", "id": 12889546, "time": "2017-12-01T13:30:25Z"}, {"text": "Some random thoughts:\n1. You could probably define a compound index between origin and host, maybe even a primary key (and use WITHOUT ROWID). Though how do we handle downgrades of the change to moz_hosts?\n\n2. the 2 indices on origin are likely to grow the db a bit (expiration will probably reduce history size). We already took a hit recently to store Activity Stream metadata. We may want to bump up the target db size to avoid a second hit. See https://telemetry.mozilla.org/new-pipeline/evo.html#!aggregates=median&cumulative=0&end_date=null&keys=&max_channel_version=nightly%252F59&measure=PLACES_MOST_RECENT_EXPIRED_VISIT_DAYS&min_channel_version=nightly%252F56&processType=*&product=Firefox&sanitize=1&sort_keys=submissions&start_date=null&trim=1&use_submission_date=0\n\n3. If I understand correctly, you match the string against moz_hosts, both host and origin, because the user may have typed the scheme or not. From there get the most frecent origin. The most obvious thing is that we are keeping multiple entries per host, but we'll always only need the most frecent one. This I/O loss must be compensated by a perf win, so I hope this is more efficient than the prefix/host/suffix 3 fields system (where prefix and suffix must be continuously kept in sync). The origin field in moz_places appears to be used just to match urls with origins, and keep the hosts table up-to-date. I'm mostly worried by the additional space taken by: \"moz_places.origin x2\" (column+index) + \"moz_hosts.origin x2\" (column + index) that is pretty much \"origin x4\". If we could avoid the moz_places field, we'd recover some space.\nA possible idea could be to store just the origin length, that along with the uri allows to rebuild the origin string. Then we could match on rev_host and on the origin length, the remaining results list may be small enough for a linear scan? I'll keep brainstorming.", "author": "mak77@bonardo.net", "id": 12889659, "time": "2017-12-01T14:15:47Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nIt's actually more than 4 times the origin, since the origin will be repeated multiple times (for each place). I think the downgrade problem and the origin field in moz_places are the 2 biggest issues I saw, this far.\n\nFrom a functional point of view, I still think we should have a frecency threshold to fill, to avoid filling a page the user only visited once a year ago. Maybe we could use MAX(frecency) * tbd_ratio", "author": "mak77@bonardo.net", "id": 12889956, "time": "2017-12-01T15:48:36Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #31)\n> Some random thoughts:\n> 1. You could probably define a compound index between origin and host, maybe\n> even a primary key (and use WITHOUT ROWID). Though how do we handle\n> downgrades of the change to moz_hosts?\n\nAre there any inherent benefits or downsides to using a compound key vs. a single-column key in Sqlite (ignoring ancillary concerns like info duplication with other columns)?\n\nDowngrades -- fair question, but I'm not too worried about it.  If we go to keying on origins, then we're storing more info than we used to.  A downgrade will necessarily have to throw away some of that info.  We can pick the most frecent origin per host and save that in the downgrade.\n\n> 3. If I understand correctly, you match the string against moz_hosts, both\n> host and origin, because the user may have typed the scheme or not. From\n> there get the most frecent origin.\n\nYes.\n\n> The most obvious thing is that we are\n> keeping multiple entries per host, but we'll always only need the most\n> frecent one. This I/O loss must be compensated by a perf win, so I hope this\n> is more efficient than the prefix/host/suffix 3 fields system (where prefix\n> and suffix must be continuously kept in sync). The origin field in\n> moz_places appears to be used just to match urls with origins, and keep the\n> hosts table up-to-date. I'm mostly worried by the additional space taken by:\n> \"moz_places.origin x2\" (column+index) + \"moz_hosts.origin x2\" (column +\n> index) that is pretty much \"origin x4\". If we could avoid the moz_places\n> field, we'd recover some space.\n> A possible idea could be to store just the origin length, that along with\n> the uri allows to rebuild the origin string. Then we could match on rev_host\n> and on the origin length, the remaining results list may be small enough for\n> a linear scan? I'll keep brainstorming.\n\nThat's an interesting idea.  Another idea I had was to have a moz_origins table with an integer primary key.  Then we only store origins in that table.  The other tables have integer foreign keys into this table.  We could even break the origins table into two tables to save more space (?): one table for schemes/prefixes, one for hosts (plus ports?).  Is that crazy?  There would be lots of joining.\n\n(In reply to Marco Bonardo [::mak] from comment #32)\n> From a functional point of view, I still think we should have a frecency\n> threshold to fill, to avoid filling a page the user only visited once a year\n> ago. Maybe we could use MAX(frecency) * tbd_ratio\n\nYeah, I think something like that makes sense.  I'm glad you mentioned it again.", "author": "adw@mozilla.com", "id": 12890606, "time": "2017-12-01T21:13:14Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #33)\n> Are there any inherent benefits or downsides to using a compound key vs. a\n> single-column key in Sqlite (ignoring ancillary concerns like info\n> duplication with other columns)?\n\nno rowid (less useless data) and faster matching when querying both info in the same query.\n\n> Downgrades -- fair question, but I'm not too worried about it.  If we go to\n> keying on origins, then we're storing more info than we used to.  A\n> downgrade will necessarily have to throw away some of that info.  We can\n> pick the most frecent origin per host and save that in the downgrade.\n\nYes, but the old version doesn't know anything about your modified table, it will just try to use the old moz_hosts the old way.\nThere's no downgrade path.\n\n> That's an interesting idea.  Another idea I had was to have a moz_origins\n> table with an integer primary key.  Then we only store origins in that\n> table.  The other tables have integer foreign keys into this table.  We\n> could even break the origins table into two tables to save more space (?):\n> one table for schemes/prefixes, one for hosts (plus ports?).  Is that crazy?\n> There would be lots of joining.\n\nYes that's another possibility, indeed if I should redesign hosts and places, I would keep an origins table apart with origin, host, rev_host and just join with moz_places. The important thing is limit repeated textual data in moz_places.", "author": "mak77@bonardo.net", "id": 12890656, "time": "2017-12-01T21:31:32Z"}, {"text": "also, the compound index if it's a primary key, will avoid dupes.", "author": "mak77@bonardo.net", "id": 12890676, "time": "2017-12-01T21:42:05Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #34)\n> Yes, but the old version doesn't know anything about your modified table, it\n> will just try to use the old moz_hosts the old way.\n> There's no downgrade path.\n\nAh I think I misunderstood.  I was thinking we had downgrade code paths like we do for upgrades.  But that's not true, is it?  Regardless, I think it makes sense to make a new table for this (moz_origins), and that's what I was planning to do ultimately.  That would avoid downgrade problems, right?", "author": "adw@mozilla.com", "id": 12890826, "time": "2017-12-01T22:49:30Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #36)\n> Ah I think I misunderstood.  I was thinking we had downgrade code paths like\n> we do for upgrades.  But that's not true, is it?  Regardless, I think it\n> makes sense to make a new table for this (moz_origins), and that's what I\n> was planning to do ultimately.  That would avoid downgrade problems, right?\n\nThe remaining problem would be that on downgrade the old moz_hosts would be out of date, because we'd stop updating it (we now have a new table), and on a next upgrade moz_origins would be out of date because the old version updates moz_host (but we could handle that through a migration that inserts missing entries).\n\nI'm not sure how critical is the fact a downgrade may miss some host. After the removal of about:permissions, the only consumer seems to be UnifiedComplete (the moz_host in nsPermissionManager.cpp is another table with the same name, so it's also good we change its name), so likely not a big deal.\nIf we ship this in 59 it's even better because it's an ESR.", "author": "mak77@bonardo.net", "id": 12891583, "time": "2017-12-02T15:37:56Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/3-4/", "author": "adw@mozilla.com", "id": 12897055, "time": "2017-12-05T00:46:19Z"}, {"text": "Another WIP that uses three tables: moz_prefixes, moz_hosts, and moz_origins:\n\n#define CREATE_MOZ_PREFIXES NS_LITERAL_CSTRING( \\\n  \"CREATE TABLE moz_prefixes (\" \\\n    \"  id INTEGER PRIMARY KEY\" \\\n    \", prefix TEXT NOT NULL UNIQUE\" \\\n  \")\" \\\n)\n#define CREATE_MOZ_HOSTS NS_LITERAL_CSTRING( \\\n  \"CREATE TABLE moz_hosts (\" \\\n    \"  id INTEGER PRIMARY KEY\" \\\n    \", host TEXT NOT NULL UNIQUE\" \\\n  \")\" \\\n)\n#define CREATE_MOZ_ORIGINS NS_LITERAL_CSTRING( \\\n  \"CREATE TABLE moz_origins (\" \\\n    \"  id INTEGER PRIMARY KEY\" \\\n    \", prefix_id INTEGER REFERENCES moz_prefixes(id) ON DELETE CASCADE\" \\\n    \", host_id INTEGER REFERENCES moz_hosts(id) ON DELETE CASCADE\" \\\n    \", frecency INTEGER\" \\\n  \")\" \\\n)\n\nThis means the hosts query in UnifiedComplete requires a couple of joins.  I wonder what perf impact that has, and whether it's maybe a better idea to denormalize the table used for autofill even at the expense of a larger DB.  (I would guess so.)", "author": "adw@mozilla.com", "id": 12897056, "time": "2017-12-05T00:46:57Z"}, {"text": "duplication in moz_origins may not be a problem. My main complain was the duplication in moz_places because there the same origin is repeated many (likely hundreds) times, while in origins there would be at most scheme/www/plain duplicates.\nSo I guess denormalizing origins could be ok if you are looking for feedback.", "author": "mak77@bonardo.net", "id": 12897882, "time": "2017-12-05T09:42:12Z"}, {"text": "Yes, thanks.", "author": "adw@mozilla.com", "id": 12899260, "time": "2017-12-05T18:10:03Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/4-5/", "author": "adw@mozilla.com", "id": 12900738, "time": "2017-12-06T03:15:46Z"}, {"text": "More WIP:\n\n* This keeps the tables from the previous WIP and adds a denormalized moz_autofill_origins table\n\n* Adds back support for restricting autofill to \"typed\" pages because I think some people might complain if we remove it totally.  But I default browser.urlbar.autoFill.typed to false instead of true so that by default we don't restrict.\n\n* Fixes the bookmarked host (now origin) query\n\n* Expands the test a little\n\n* Starts to clean up\n\n* One other thing I'd like to do here is to move rev_host from moz_places to the hosts table.\n\n* More to do as discussed in the bug comments above", "author": "adw@mozilla.com", "id": 12900750, "time": "2017-12-06T03:21:50Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #43)\n> * Adds back support for restricting autofill to \"typed\" pages because I\n> think some people might complain if we remove it totally.  But I default\n> browser.urlbar.autoFill.typed to false instead of true so that by default we\n> don't restrict.\n\nI honestly don't think we should bring on this complication, it's additional code and queries, and requires syncing the typed field that is expensive. Additionally as I previously said, our \"typed\" field is pretty much broken. The reasoning doesn't sound very valid, whatever behavior change we make someone may miss the old behavior, we are aiming at a behavior that can satisfy most of our users, knowing someone may not agree with it.\nI'm happy to discuss any other alternative to limit results.\n\n> * One other thing I'd like to do here is to move rev_host from moz_places to\n> the hosts table.\n\nEven if I agree with the idea, sounds like this would make downgrades ever more nightmare-ish.", "author": "mak77@bonardo.net", "id": 12901385, "time": "2017-12-06T09:52:14Z"}, {"text": "I started looking at the URL query today.  If we're going to add a new denormalized moz_autofill_origins table that has textual prefix and host columns, as my patch does, then it seems to me we'd want a table with a textual path column too.  Or in other words, a single autofill table like this:\n\n#define CREATE_MOZ_AUTOFILL NS_LITERAL_CSTRING( \\\n  \"CREATE TABLE moz_autofill ( \" \\\n    \"place_id INTEGER PRIMARY KEY REFERENCES moz_places(id) ON DELETE CASCADE, \" \\\n    \"origin_id INTEGER NOT NULL REFERENCES moz_origins(id), \" \\\n    \"path_id INTEGER NOT NULL REFERENCES moz_paths(id), \" \\\n    \"prefix TEXT NOT NULL, \" \\\n    \"host TEXT NOT NULL, \" \\\n    \"path TEXT NOT NULL, \" \\\n    \"frecency INTEGER NOT NULL \" \\\n  \") \" \\\n  \"WITHOUT ROWID\" \\\n)\n\n`path` would be truncated to 32 characters or so.  origin_id and path_id point to separate moz_origins and moz_paths tables.  The reason for those separate tables is so that each moz_place can also point to an origin and path using a single int for each instead of storing whole text strings, and the reason each moz_place needs to keep track of origin and path at all is so that frecency in moz_autofill can be updated efficiently.\n\nWhat do you think?", "author": "adw@mozilla.com", "id": 12903776, "time": "2017-12-07T01:00:39Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #45)\n> `path` would be truncated to 32 characters or so.  origin_id and path_id\n> point to separate moz_origins and moz_paths tables.  The reason for those\n> separate tables is so that each moz_place can also point to an origin and\n> path using a single int for each instead of storing whole text strings, and\n> the reason each moz_place needs to keep track of origin and path at all is\n> so that frecency in moz_autofill can be updated efficiently.\n> \n> What do you think?\n\nIt sounds like it would end up taking a lot of space, regardless of the 32 chars limit. It would probably be half the size of moz_places or something like that, depending on how often those paths are duped. Moreover if you plan to search on path (and I assume you do), that info will be completely duplicated by the index. Let's suppose 40k entries, 32 chars each, duped by the index. In the best case it's 20MB, but could even be 30 or 40 for some locales.\nIt would cancel any advantage we had by removing the index on url, to keep the db at a sane size, we should probably half the stored history.\nIf we decide to really go towards the direction of autofilling urls instead of hosts, we should redesign the schema around that, for example by storing indexed fragments (origin+partial_path) in moz_places instead of url, and keeping the other info (prefix, full path and rev_host) in a separate table. This would be a quite large change requiring for real a places2.sqlite, since it couldn't be downgraded in any way.", "author": "mak77@bonardo.net", "id": 12904601, "time": "2017-12-07T09:59:42Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/5-6/", "author": "adw@mozilla.com", "id": 12907328, "time": "2017-12-08T04:28:41Z"}, {"text": "WIP:\n\n* Removed typed stuff\n\n* Simplified all the searchString-related properties in UnifiedComplete added for preloaded hosts, and simplify the preloaded hosts functions and make the preloaded-host autofill function more like how the main autofill code path works\n\n* More cleanup, mostly of UnifiedComplete.js\n\n(In reply to Marco Bonardo [::mak] (Away 16 Dec - 2 Jan) from comment #46)\n> If we decide to really go towards the direction of autofilling urls instead\n> of hosts, we should redesign the schema around that\n> ...\n> This would be a quite large change requiring for real a places2.sqlite,\n\nYes, it's hard (for me) not to want to make drastic changes with a singular focus on autofill.  I shouldn't scope creep in this bug.\n\nOne thing I've noticed with Safari is that it autofills not only URLs but titles too.  So you can type \"new york\" and have it completed to \"new york times\" instead of having to type the domain name, nytimes.com.  And the first, auto-selected result (like their version of our heuristic result) will be nytimes.com.  Maybe Chrome does that too, I don't know.  Of course we also include nytimes.com if it's in your history, but it won't be the heuristic result unless you type the domain.  Something to think about if/as we improve autofill and the heuristic result in the future.  (nytimes.com is a good example because its title isn't in the domain.)", "author": "adw@mozilla.com", "id": 12907355, "time": "2017-12-08T04:46:21Z"}, {"text": "autofilling on title is an interesting idea we can evaluate.", "author": "mak77@bonardo.net", "id": 12908271, "time": "2017-12-08T14:12:38Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/6-7/", "author": "adw@mozilla.com", "id": 12919528, "time": "2017-12-15T02:05:39Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/7-8/", "author": "adw@mozilla.com", "id": 12921333, "time": "2017-12-16T02:45:28Z"}, {"text": "More WIP work on cleaning up and simplifying UnifiedComplete.js for the origin and URL queries.  I modified the URL query so that it can take into account prefixes now, like the origin query.", "author": "adw@mozilla.com", "id": 12921334, "time": "2017-12-16T02:45:39Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/8-9/", "author": "adw@mozilla.com", "id": 12925770, "time": "2017-12-19T00:42:45Z"}, {"text": "* More UnifiedComplete.js cleanup/refactoring\n\n* Added a test for the URL query, consolidated the core test functions for both the URL query and origin query\n\n* Fixed problem where clicking the \"go\" arrow button in the urlbar loaded the autofilled value instead of the final complete value (i.e., mozilla.org/ instead of https://mozilla.org/.)\n\nThe main things left to do:\n\n* Incorporate a frecency threshold when choosing values to autofill.  Don't autofill a value unless its frecency is >= some threshold, like we've talked about in this bug.\n\n* Handle migration\n\n* More cleanup in other files", "author": "adw@mozilla.com", "id": 12925772, "time": "2017-12-19T00:42:55Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/9-10/", "author": "adw@mozilla.com", "id": 12928135, "time": "2017-12-20T02:29:44Z"}, {"text": "This experiments with using the mean and standard deviation of all moz_places frecencies as the threshold for deciding whether to autofill a match.  I spent some time today thinking about a good threshold to use.  I think max * someRatio is too simplistic.  In my real profile for example, there are only two moz_places that are >= max * 0.5.  The max is orders of magnitude bigger than the vast majority of moz_places, so even max * 0.1 is bigger than all but three of my moz_places.\n\nThis patch uses the mean plus one standard deviation (of all frecencies >= 0) as the threshold.  57 of my moz_places (out of 112063) are >= that.  32 of my origins (out of 7965) are >= that.\n\nI'm thinking we could have a standard deviation multiplier in a hidden pref so that people could tweak the threshold if they want.", "author": "adw@mozilla.com", "id": 12928138, "time": "2017-12-20T02:30:28Z"}, {"text": "*** Bug 1426975 has been marked as a duplicate of this bug. ***", "author": "bugzilla@mversen.de", "id": 12934903, "time": "2017-12-24T20:59:28Z"}, {"text": "(In reply to Drew Willcoxon :adw (Away 12/20\u20131/3) from comment #56)\n> This patch uses the mean plus one standard deviation (of all frecencies >=\n> 0) as the threshold.  57 of my moz_places (out of 112063) are >= that.  32\n> of my origins (out of 7965) are >= that.\n\nHow expensive is to calculate that and how often does that calculation happen?\nWe likely can't recalculate the threshold for each search, even if we should still somehow adapt to large history removals...\nI wonder if at the beginning we should just define a fixed low value threshold for things that are unlikely to be useful. It will be imperfect but if that means landing sooner and iterate later, it could be fine.\n\n> I'm thinking we could have a standard deviation multiplier in a hidden pref\n> so that people could tweak the threshold if they want.\n\nI don't think this is something we should expose, if we can't make a good choice we should try harder. Most of the frecency prefs should stop being exposed, in the end users at a maximum care to give more weight to bookmarks and the current system is over complex already. This is also in line with the recent prefs removal discussion thread.", "author": "mak77@bonardo.net", "id": 12944782, "time": "2018-01-04T17:21:24Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #58)\n> How expensive is to calculate that and how often does that calculation\n> happen?\n\nI'm using a running, incremental algorithm.  I added another statement to moz_places_afterupdate_frecency_trigger that calls a custom update_frecency_stats function that simply updates a few stats, in O(1) time.  From those stats, the mean and standard deviation can be calculated at any time, also in O(1) time.  The algorithm is described here: https://en.wikipedia.org/wiki/Standard_deviation#Rapid_calculation_methods , https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Computing_shifted_data\n\nThen, when UnifiedComplete processes rows of an autofill query, it just discards rows whose frecencies are less than the threshold, which is based on the mean and standard deviation.\n\n> I wonder if at the beginning we should just define a fixed low value\n> threshold for things that are unlikely to be useful. It will be imperfect\n> but if that means landing sooner and iterate later, it could be fine.\n\nI'm not sure what you have in mind, but using a value that's not related to the shape of the individual user's frecency distribution will give poor results.  I think what I'm proposing here is a good first version to land.\n\n> I don't think this is something we should expose, if we can't make a good\n> choice we should try harder.\n\nOK, that's fine.  Using the mean plus one standard deviation is a good threshold I think.  I just wouldn't mind providing an unsupported knob for people to tweak, instead of hardcoding a 1.0 multiplier.", "author": "adw@mozilla.com", "id": 12945400, "time": "2018-01-04T21:19:50Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #59)\n> I'm not sure what you have in mind, but using a value that's not related to\n> the shape of the individual user's frecency distribution will give poor\n> results.\n\nYes, that's what I said originally too. I'm only trying to understand if there is a blocking problem delaying the changes, that we could breakdown into pieces. But looks like you have a good first solution to that problem, so we are in a good shape.", "author": "mak77@bonardo.net", "id": 12946529, "time": "2018-01-05T09:04:23Z"}, {"text": "This has turned into a fairly big patch.  I think it might be a good idea to split it up.", "author": "adw@mozilla.com", "id": 12948039, "time": "2018-01-05T19:54:41Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/10-11/", "author": "adw@mozilla.com", "id": 12948759, "time": "2018-01-06T03:38:18Z"}, {"text": "More WIP.\n\n* Added a test for frecency stats calculations.\n\n* More cleanup.\n\n* Started working on migration to new schema version and tests.\n\nStill to do:\n\n* Finish migration path and related tests.\n\n* More cleanup.\n\n* Split patch into more reviewable chunks.", "author": "adw@mozilla.com", "id": 12948760, "time": "2018-01-06T03:38:33Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/11-12/", "author": "adw@mozilla.com", "id": 12956711, "time": "2018-01-10T01:03:16Z"}, {"text": "More WIP.  Now I'm just cleaning up and fixing existing tests.  This is at a point where I can push to try, see what fails, and start fixing.  Probably a lot now that \"typed\" isn't needed anymore to autofill.  I'm in the middle of fixing some autocomplete xpcshell tests locally.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=7ef471114859", "author": "adw@mozilla.com", "id": 12956718, "time": "2018-01-10T01:06:31Z"}, {"text": "As we've discussed offline, an appropriate choice for the frecency threshold will depend on the shape of the distribution of places frecencies, so it would be good to take a look at some sample profile data. However, I expect this distribution to be generally long-tailed for most profiles, as evidenced by Drew's observation that very few items fall within some fraction of the max value.\n\nIn the case of such long-tailed distributions, the mean+sd cutoff is a reasonable approach, but it does not necessarily have the typical interpretation of covering a certain percentage of the distribution. Another consideration is that I'd expect to see a majority of items with very low frecency values (eg. sites that have only been visited once or twice) which are likely to get excluded by a fixed frecency value cutoff. As per the above discussion, this may or may not be what we want.\n\nAnother approach I'd suggest is using a percentile/rank-based cutoff: restrict autocompletion candidates to items among the largest 80% of frecency values, say. The advantage here is that the interpretation as to how much of the places database it \"covers\" is easy to work with and doesn't depend on the shape of the distribution, which may vary from user to user. Also, if the only matching candidates are low-frecency items, they are not necessarily excluded.", "author": "dzeber@mozilla.com", "id": 12962460, "time": "2018-01-11T20:41:15Z"}, {"text": "Thanks Dave!\n\nRe: low-frecency items:\n\n(In reply to Dave Zeber [:dzeber] from comment #66)\n> Another consideration is that I'd expect to see a majority of items with\n> very low frecency values (eg. sites that have only been visited once or\n> twice) which are likely to get excluded by a fixed frecency value cutoff.\n> As per the above discussion, this may or may not be what we want.\n> \n> Another approach I'd suggest is using a percentile/rank-based cutoff:\n> ...\n> Also, if the only matching candidates are low-frecency items, they are not\n> necessarily excluded.\n\nWe do want to exclude low-frecency places, as a design decision, even when most or all of your places are low frecency.  Marco comments on that in the last paragraph in comment 32, and I think I agree.  So I do think that mean + standard deviation is a better fit for what we want.  (Keeping in mind we're talking about autofilling here, not whether or not a given place will show up in the results.)", "author": "adw@mozilla.com", "id": 12972846, "time": "2018-01-16T19:32:08Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/12-13/", "author": "adw@mozilla.com", "id": 12977852, "time": "2018-01-18T01:01:47Z"}, {"text": "More work on getting all unifiedcomplete xpcshell tests passing.", "author": "adw@mozilla.com", "id": 12977855, "time": "2018-01-18T01:02:03Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/13-14/", "author": "adw@mozilla.com", "id": 12983141, "time": "2018-01-20T05:02:24Z"}, {"text": "All unifiedcomplete xpcshell tests pass locally with this.  Working on other tests still.", "author": "adw@mozilla.com", "id": 12983142, "time": "2018-01-20T05:02:58Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/14-15/", "author": "adw@mozilla.com", "id": 12987181, "time": "2018-01-22T20:55:12Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review220360\n\n\nStatic analysis found 11 defects in this patch.\n - 4 defects found by clang-tidy\n - 7 defects found by mozlint\n\nYou can run this analysis locally with:\n - `./mach static-analysis check path/to/file.cpp` (C/C++)\n - `./mach lint check path/to/file` (Python/Javascript/wpt)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: toolkit/components/places/UnifiedComplete.js:1595\n(Diff revision 15)\n> +    }\n> +\n> +    let searchStr = this._searchString;\n> +    if (firstSlashIndex >= 0) {\n> +      if (firstSlashIndex != searchStr.length - 1) {\n> +        return;\n\nError: Async method '_matchSearchEngineUrl' expected a return value. [eslint: consistent-return]\n\n::: toolkit/components/places/UnifiedComplete.js:2409\n(Diff revision 15)\n> -    } else {\n> +      } else {\n> -      query.push(typed ? SQL_TYPED_HOST_QUERY\n> -                       : SQL_HOST_QUERY);\n> +        query.push(SQL_ORIGIN_PREFIX_QUERY);\n> +      }\n> +      opts.prefix = this._strippedPrefix;\n> +    } else {\n> +      if (bookmarked) {\n\nError: Unexpected if as the only statement in an else block. [eslint: no-lonely-if]\n\n::: toolkit/components/places/UnifiedComplete.js:2478\n(Diff revision 15)\n> -    } else {\n> +      } else {\n> -      query.push(typed ? SQL_TYPED_URL_QUERY\n> -                       : SQL_URL_QUERY);\n> +        query.push(SQL_URL_PREFIX_QUERY);\n> +      }\n> +      opts.prefix = this._strippedPrefix;\n> +    } else {\n> +      if (bookmarked) {\n\nError: Unexpected if as the only statement in an else block. [eslint: no-lonely-if]\n\n::: toolkit/components/places/nsNavHistory.cpp:730\n(Diff revision 15)\n> +    sFrecencyStatsSumOfSquares += unew * unew;\n> +  }\n> +\n> +  double mean, stddev;\n> +  nsresult rv;\n> +  rv = GetHistoryService()->GetFrecencyMean(&mean);\n\nWarning: Value stored to 'rv' is never read [clang-tidy: clang-analyzer-deadcode.DeadStores]\n\n::: toolkit/components/places/nsNavHistory.cpp:730\n(Diff revision 15)\n> +    sFrecencyStatsSumOfSquares += unew * unew;\n> +  }\n> +\n> +  double mean, stddev;\n> +  nsresult rv;\n> +  rv = GetHistoryService()->GetFrecencyMean(&mean);\n\nWarning: Value stored to 'rv' is never read [clang-tidy: clang-analyzer-deadcode.DeadStores]\n\n::: toolkit/components/places/nsNavHistory.cpp:732\n(Diff revision 15)\n> +\n> +  double mean, stddev;\n> +  nsresult rv;\n> +  rv = GetHistoryService()->GetFrecencyMean(&mean);\n> +  MOZ_ASSERT(rv == NS_OK);\n> +  rv = GetHistoryService()->GetFrecencyStandardDeviation(&stddev);\n\nWarning: Value stored to 'rv' is never read [clang-tidy: clang-analyzer-deadcode.DeadStores]\n\n::: toolkit/components/places/nsNavHistory.cpp:732\n(Diff revision 15)\n> +\n> +  double mean, stddev;\n> +  nsresult rv;\n> +  rv = GetHistoryService()->GetFrecencyMean(&mean);\n> +  MOZ_ASSERT(rv == NS_OK);\n> +  rv = GetHistoryService()->GetFrecencyStandardDeviation(&stddev);\n\nWarning: Value stored to 'rv' is never read [clang-tidy: clang-analyzer-deadcode.DeadStores]\n\n::: toolkit/components/places/tests/unifiedcomplete/test_swap_protocol.js:5\n(Diff revision 15)\n>  /* This Source Code Form is subject to the terms of the Mozilla Public\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> +//XXXadw is this right?  this test disables autofill.  seems like the patch\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/components/places/tests/unifiedcomplete/test_swap_protocol.js:7\n(Diff revision 15)\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> +//XXXadw is this right?  this test disables autofill.  seems like the patch\n> +// shouldn't affect non-autofill matches...?\n> +//XXXadw and at least most/all of these info()s are now wrong, need to be\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/content/widgets/autocomplete.xml:1305\n(Diff revision 15)\n>  \n>              if (itemExists) {\n>                item = this.richlistbox.childNodes[this._currentIndex];\n>  \n>                // Url may be a modified version of value, see _adjustACItem().\n> +              //XXXadw \"url\" may not be right\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/content/widgets/autocomplete.xml:2022\n(Diff revision 15)\n>        </method>\n>  \n>        <method name=\"_reuseAcItem\">\n>          <body>\n>            <![CDATA[\n> +            //XXXadw don't think \"url\" is right\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]", "author": "jkeromnes+clangbot@mozilla.com", "id": 12987218, "time": "2018-01-22T21:09:10Z"}, {"text": "Code Review Bot,,,,,,,,,,,, thank's", "author": "adw@mozilla.com", "id": 12987222, "time": "2018-01-22T21:10:45Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=f95fd70863f1e5a87f03e3d874c306a14b756a9f", "author": "adw@mozilla.com", "id": 12987317, "time": "2018-01-22T21:42:37Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/15-16/", "author": "adw@mozilla.com", "id": 12987878, "time": "2018-01-23T02:16:27Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review220418\n\n\nStatic analysis found 7 defects in this patch.\n - 7 defects found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint check path/to/file` (Python/Javascript/wpt)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: toolkit/components/places/UnifiedComplete.js:1621\n(Diff revision 16)\n> +    }\n> +\n> +    let searchStr = this._searchString;\n> +    if (firstSlashIndex >= 0) {\n> +      if (firstSlashIndex != searchStr.length - 1) {\n> +        return;\n\nError: Async method '_matchSearchEngineUrl' expected a return value. [eslint: consistent-return]\n\n::: toolkit/components/places/UnifiedComplete.js:2435\n(Diff revision 16)\n> -    } else {\n> +      } else {\n> -      query.push(typed ? SQL_TYPED_HOST_QUERY\n> -                       : SQL_HOST_QUERY);\n> +        query.push(SQL_ORIGIN_PREFIX_QUERY);\n> +      }\n> +      opts.prefix = this._strippedPrefix;\n> +    } else {\n> +      if (bookmarked) {\n\nError: Unexpected if as the only statement in an else block. [eslint: no-lonely-if]\n\n::: toolkit/components/places/UnifiedComplete.js:2504\n(Diff revision 16)\n> -    } else {\n> +      } else {\n> -      query.push(typed ? SQL_TYPED_URL_QUERY\n> -                       : SQL_URL_QUERY);\n> +        query.push(SQL_URL_PREFIX_QUERY);\n> +      }\n> +      opts.prefix = this._strippedPrefix;\n> +    } else {\n> +      if (bookmarked) {\n\nError: Unexpected if as the only statement in an else block. [eslint: no-lonely-if]\n\n::: toolkit/components/places/tests/unifiedcomplete/test_swap_protocol.js:5\n(Diff revision 16)\n>  /* This Source Code Form is subject to the terms of the Mozilla Public\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> +//XXXadw is this right?  this test disables autofill.  seems like the patch\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/components/places/tests/unifiedcomplete/test_swap_protocol.js:7\n(Diff revision 16)\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> +//XXXadw is this right?  this test disables autofill.  seems like the patch\n> +// shouldn't affect non-autofill matches...?\n> +//XXXadw and at least most/all of these info()s are now wrong, need to be\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/content/widgets/autocomplete.xml:1305\n(Diff revision 16)\n>  \n>              if (itemExists) {\n>                item = this.richlistbox.childNodes[this._currentIndex];\n>  \n>                // Url may be a modified version of value, see _adjustACItem().\n> +              //XXXadw \"url\" may not be right\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/content/widgets/autocomplete.xml:2022\n(Diff revision 16)\n>        </method>\n>  \n>        <method name=\"_reuseAcItem\">\n>          <body>\n>            <![CDATA[\n> +            //XXXadw don't think \"url\" is right\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]", "author": "jkeromnes+clangbot@mozilla.com", "id": 12987902, "time": "2018-01-23T02:42:17Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/16-17/", "author": "adw@mozilla.com", "id": 12990647, "time": "2018-01-24T02:56:56Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=160a4df0143e", "author": "adw@mozilla.com", "id": 12990650, "time": "2018-01-24T02:59:47Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review220736\n\n\nStatic analysis found 7 defects in this patch.\n - 7 defects found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint check path/to/file` (Python/Javascript/wpt)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: toolkit/components/places/UnifiedComplete.js:1621\n(Diff revision 17)\n> +    }\n> +\n> +    let searchStr = this._searchString;\n> +    if (firstSlashIndex >= 0) {\n> +      if (firstSlashIndex != searchStr.length - 1) {\n> +        return;\n\nError: Async method '_matchSearchEngineUrl' expected a return value. [eslint: consistent-return]\n\n::: toolkit/components/places/UnifiedComplete.js:2435\n(Diff revision 17)\n> -    } else {\n> +      } else {\n> -      query.push(typed ? SQL_TYPED_HOST_QUERY\n> -                       : SQL_HOST_QUERY);\n> +        query.push(SQL_ORIGIN_PREFIX_QUERY);\n> +      }\n> +      opts.prefix = this._strippedPrefix;\n> +    } else {\n> +      if (bookmarked) {\n\nError: Unexpected if as the only statement in an else block. [eslint: no-lonely-if]\n\n::: toolkit/components/places/UnifiedComplete.js:2504\n(Diff revision 17)\n> -    } else {\n> +      } else {\n> -      query.push(typed ? SQL_TYPED_URL_QUERY\n> -                       : SQL_URL_QUERY);\n> +        query.push(SQL_URL_PREFIX_QUERY);\n> +      }\n> +      opts.prefix = this._strippedPrefix;\n> +    } else {\n> +      if (bookmarked) {\n\nError: Unexpected if as the only statement in an else block. [eslint: no-lonely-if]\n\n::: toolkit/components/places/tests/unifiedcomplete/test_swap_protocol.js:5\n(Diff revision 17)\n>  /* This Source Code Form is subject to the terms of the Mozilla Public\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> +//XXXadw is this right?  this test disables autofill.  seems like the patch\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/components/places/tests/unifiedcomplete/test_swap_protocol.js:7\n(Diff revision 17)\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> +//XXXadw is this right?  this test disables autofill.  seems like the patch\n> +// shouldn't affect non-autofill matches...?\n> +//XXXadw and at least most/all of these info()s are now wrong, need to be\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/content/widgets/autocomplete.xml:1305\n(Diff revision 17)\n>  \n>              if (itemExists) {\n>                item = this.richlistbox.childNodes[this._currentIndex];\n>  \n>                // Url may be a modified version of value, see _adjustACItem().\n> +              //XXXadw \"url\" may not be right\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/content/widgets/autocomplete.xml:2022\n(Diff revision 17)\n>        </method>\n>  \n>        <method name=\"_reuseAcItem\">\n>          <body>\n>            <![CDATA[\n> +            //XXXadw don't think \"url\" is right\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]", "author": "jkeromnes+clangbot@mozilla.com", "id": 12990664, "time": "2018-01-24T03:17:56Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/17-18/", "author": "adw@mozilla.com", "id": 12996475, "time": "2018-01-26T02:31:43Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=60dbc6620679", "author": "adw@mozilla.com", "id": 12996477, "time": "2018-01-26T02:34:13Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review221536\n\n\nStatic analysis found 10 defects in this patch.\n - 10 defects found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint check path/to/file` (Python/Javascript/wpt)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: browser/base/content/test/urlbar/browser_autocomplete_enter_race.js:151\n(Diff revision 18)\n> +\n> +\n> +\n> +\n> +\n> +//XXXadw\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: browser/base/content/test/urlbar/browser_autocomplete_enter_race.js:168\n(Diff revision 18)\n> +    let file = Services.dirsvc.get(\"ProfD\", Ci.nsIFile);\n> +    file.append(\"places.sqlite\");\n> +    let dbConn = gDBConn = Services.storage.openDatabase(file);\n> +\n> +    // Be sure to cleanly close this connection.\n> +    promiseTopicObserved(\"profile-before-change\").then(() => dbConn.asyncClose());\n\nError: 'promiseTopicObserved' is not defined. [eslint: no-undef]\n\n::: toolkit/components/places/UnifiedComplete.js:1622\n(Diff revision 18)\n> +    }\n> +\n> +    let searchStr = this._searchString;\n> +    if (firstSlashIndex >= 0) {\n> +      if (firstSlashIndex != searchStr.length - 1) {\n> +        return;\n\nError: Async method '_matchSearchEngineUrl' expected a return value. [eslint: consistent-return]\n\n::: toolkit/components/places/UnifiedComplete.js:2197\n(Diff revision 18)\n> -    let separatorIndex = strippedUrl.slice(searchString.length)\n> -                                    .search(/[\\/\\?\\#]/);\n> -    if (separatorIndex != -1) {\n> -      separatorIndex += searchString.length;\n> -      if (strippedUrl[separatorIndex] == \"/\") {\n> -        separatorIndex++; // Include the \"/\" separator\n> +    let stddevMultiplier = 1.0;\n> +    let threshold =\n> +      PlacesUtils.history.frecencyMean +\n> +      (stddevMultiplier * PlacesUtils.history.frecencyStandardDeviation);\n> +    if (frecency < threshold) {\n> +      //XXXadw if we're currently adding the heuristic result (and i think we\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/components/places/UnifiedComplete.js:2454\n(Diff revision 18)\n> +      } else {\n> +        query.push(SQL_ORIGIN_PREFIX_QUERY);\n> +      }\n> +      opts.prefix = this._strippedPrefix;\n> +    } else {\n> -    if (bookmarked) {\n> +      if (bookmarked) {\n\nError: Unexpected if as the only statement in an else block. [eslint: no-lonely-if]\n\n::: toolkit/components/places/UnifiedComplete.js:2523\n(Diff revision 18)\n> -    } else {\n> +      } else {\n> -      query.push(typed ? SQL_TYPED_URL_QUERY\n> -                       : SQL_URL_QUERY);\n> +        query.push(SQL_URL_PREFIX_QUERY);\n> +      }\n> +      opts.prefix = this._strippedPrefix;\n> +    } else {\n> +      if (bookmarked) {\n\nError: Unexpected if as the only statement in an else block. [eslint: no-lonely-if]\n\n::: toolkit/components/places/tests/unifiedcomplete/test_swap_protocol.js:5\n(Diff revision 18)\n>  /* This Source Code Form is subject to the terms of the Mozilla Public\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> +//XXXadw is this right?  this test disables autofill.  seems like the patch\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/components/places/tests/unifiedcomplete/test_swap_protocol.js:7\n(Diff revision 18)\n>   * License, v. 2.0. If a copy of the MPL was not distributed with this\n>   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n>  \n> +//XXXadw is this right?  this test disables autofill.  seems like the patch\n> +// shouldn't affect non-autofill matches...?\n> +//XXXadw and at least most/all of these info()s are now wrong, need to be\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/content/widgets/autocomplete.xml:1305\n(Diff revision 18)\n>  \n>              if (itemExists) {\n>                item = this.richlistbox.childNodes[this._currentIndex];\n>  \n>                // Url may be a modified version of value, see _adjustACItem().\n> +              //XXXadw \"url\" may not be right\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]\n\n::: toolkit/content/widgets/autocomplete.xml:2022\n(Diff revision 18)\n>        </method>\n>  \n>        <method name=\"_reuseAcItem\">\n>          <body>\n>            <![CDATA[\n> +            //XXXadw don't think \"url\" is right\n\nError: Expected space or tab after '//' in comment. [eslint: spaced-comment]", "author": "jkeromnes+clangbot@mozilla.com", "id": 12996497, "time": "2018-01-26T02:55:19Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/18-19/", "author": "adw@mozilla.com", "id": 12999039, "time": "2018-01-27T02:42:04Z"}, {"text": "All the tests that failed on the last try push are fixed locally with this...\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=0d3e2e0b556de50baefc3758d6c109090518f29a", "author": "adw@mozilla.com", "id": 12999040, "time": "2018-01-27T02:44:42Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/19-20/", "author": "adw@mozilla.com", "id": 13003474, "time": "2018-01-29T21:35:34Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=0c8d6a0ae81a528aa29980c33a02b27f62e83eec", "author": "adw@mozilla.com", "id": 13003483, "time": "2018-01-29T21:38:02Z"}, {"text": "Hi Drew, you'll probably see this on Try, but I added one more use of `moz_updatehostsinsert_temp` to `SyncedBookmarksMirror.jsm` in bug 1305563.", "author": "kit@mozilla.com", "id": 13003496, "time": "2018-01-29T21:42:16Z"}, {"text": "Thanks Kit, very kind of you to let me know.", "author": "adw@mozilla.com", "id": 13003725, "time": "2018-01-29T22:45:55Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/20-21/", "author": "adw@mozilla.com", "id": 13009799, "time": "2018-01-31T22:27:20Z"}, {"text": "All tests passing on try with the previous patch.  This one finishes cleaning up and is rebased on the current tree, including Kit's comment 88.  Another push to try to make sure I didn't screw anything up in the cleanup, and then after that I'll break this apart and ask for review.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=aff5492df65314e47f5571cec4c5e4f8963b82dc", "author": "adw@mozilla.com", "id": 13009805, "time": "2018-01-31T22:30:31Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/21-22/", "author": "adw@mozilla.com", "id": 13010377, "time": "2018-02-01T03:29:56Z"}, {"text": "Some errors on try.  Let's see if this fixes them.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=95c512ba97e061ffcd191751b8a82e57209419a1\n\nWhile manually testing this, I noticed that the urlbar sometimes drops keystrokes, so I'll have to figure that out.  Strangely the results in the popup do indicate that the keystrokes are being registered and responded to -- it's just that they don't actually appear in the textbox.  It's very obvious when typing \"mo\".  The \"o\" gets dropped.  Maybe something to do with the match value...  This is the first time in several days that I've manually tested, so I'm not sure when I broke it.", "author": "adw@mozilla.com", "id": 13010385, "time": "2018-02-01T03:34:37Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/22-23/", "author": "adw@mozilla.com", "id": 13012110, "time": "2018-02-01T19:19:42Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=9d1ad61e2ddc6c2d7d445ccf6ad2ebd6b64f62c3", "author": "adw@mozilla.com", "id": 13012116, "time": "2018-02-01T19:21:06Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/23-24/", "author": "adw@mozilla.com", "id": 13015589, "time": "2018-02-03T02:02:27Z"}, {"text": "OK, figured out the problem about dropped characters in the input.  I was setting the default index of the search result to 0 even when the autofill result fell below the threshold, so the autocomplete controller was trying to complete a moz-action URI because that happened to be the first result.  Funnily enough, I was always testing by typing \"moz\" and variations, and so the autocomplete controller found that what I was typing was a prefix for moz-action.\n\nThe last try push was good, so next I will break this up into smaller patches for easier review.\n\nOne thing I noticed while playing around in a new profile is that, once you have pages with very high frecency, it can be difficult to trigger autofill when you type a non-www version of a site that redirects to a www version.  The problem is the mean + standard deviation threshold combined with how we apparently assign frecencies in that case.  For example, if you type nytimes.com, it redirects to www.nytimes.com, and both end up in moz_places, but we don't give either one a very high frecency.  But if you type www.washingtonpost.com, which doesn't redirect, then that gets a huge frecency.  With the mean + standard deviation threshold, neither nytimes.com nor www.nytimes.com autofills.  (Or something like that.  I'm seeing it slightly differently now that I'm trying to reproduce it.)", "author": "adw@mozilla.com", "id": 13015595, "time": "2018-02-03T02:12:29Z"}, {"text": "On a related note, you may want to ensure that the new system sensibly handles typing substrings that don't appear at the start of a domain.\n\nE.g. if I type just \"times\", the top suggestion is http://timesofindia.indiatimes.com/, even though I've never visited that URL and only visited three pages on that domain, the most recent in 2015. Meanwhile there are over 500 unique nytimes.com URLs in the history.", "author": "mozilla.org@prolinux.com", "id": 13015622, "time": "2018-02-03T03:10:22Z"}, {"text": "(In reply to Paul from comment #98)\n> On a related note, you may want to ensure that the new system sensibly\n> handles typing substrings that don't appear at the start of a domain.\n\nThat's out of scope here.", "author": "mak77@bonardo.net", "id": 13015903, "time": "2018-02-03T13:06:39Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/24-25/", "author": "adw@mozilla.com", "id": 13019798, "time": "2018-02-05T19:48:28Z"}, {"text": "Small fix and test for autofilling preloaded top sites.  I happened to notice a problem with it while manually testing.", "author": "adw@mozilla.com", "id": 13019800, "time": "2018-02-05T19:48:49Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review223736\n\n\nStatic analysis found 1 defect in this patch.\n - 1 defect found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint check path/to/file` (Python/Javascript/wpt)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: toolkit/components/places/UnifiedComplete.js:1257\n(Diff revision 25)\n> -      this._addMatch(match);\n> -      return true;\n> -    }\n>  \n> -    // If no strict result found - we try loose match\n> -    // regardless of \"www.\" in Preloaded-sites or search string\n> +    let url = matchedSite.uri.spec;\n> +    let [_, value] = stripPrefix(url);\n\nError: '_' is assigned a value but never used. Allowed unused vars must match /^Cc|Ci|Cu|Cr|EXPORTED_SYMBOLS/. [eslint: no-unused-vars]", "author": "jkeromnes+clangbot@mozilla.com", "id": 13019823, "time": "2018-02-05T20:04:36Z"}, {"text": "Created attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview commit: https://reviewboard.mozilla.org/r/217974/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/217974/", "author": "adw@mozilla.com", "id": 13020568, "time": "2018-02-06T00:41:28Z"}, {"text": "Created attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview commit: https://reviewboard.mozilla.org/r/217976/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/217976/", "author": "adw@mozilla.com", "id": 13020569, "time": "2018-02-06T00:41:28Z"}, {"text": "Created attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview commit: https://reviewboard.mozilla.org/r/217978/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/217978/", "author": "adw@mozilla.com", "id": 13020570, "time": "2018-02-06T00:41:28Z"}, {"text": "Created attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview commit: https://reviewboard.mozilla.org/r/217980/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/217980/", "author": "adw@mozilla.com", "id": 13020571, "time": "2018-02-06T00:41:28Z"}, {"text": "Created attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview commit: https://reviewboard.mozilla.org/r/217982/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/217982/", "author": "adw@mozilla.com", "id": 13020572, "time": "2018-02-06T00:41:28Z"}, {"text": "Created attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview commit: https://reviewboard.mozilla.org/r/217984/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/217984/", "author": "adw@mozilla.com", "id": 13020573, "time": "2018-02-06T00:41:28Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/25-26/", "author": "adw@mozilla.com", "id": 13020574, "time": "2018-02-06T00:41:28Z"}, {"text": "Marco, I've tried to split the patch into reviewable chunks.  I suggest looking at them in order.\n\nPart 0 is the core changes to the schema and UnifiedComplete.js.  It's not complete by itself because it uses SQL functions that are defined in part 1.  The idea is that you can review these core changes on their own in part 0 while not getting distracted with the SQL function implementation details in part 1.  Part 0 is the only such non-self-contained patch.  Mozreview took part 0 to be a new revision of my WIP patches.  It's not, so please compare the latest revision to \"orig\" to see the right diff.\n\nIf you more or less accept the core changes in part 0, then the remaining patches are basically follow-ons, except for the frecency stats stuff.", "author": "adw@mozilla.com", "id": 13020578, "time": "2018-02-06T00:44:38Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=42858e64cc79", "author": "adw@mozilla.com", "id": 13020583, "time": "2018-02-06T00:47:59Z"}, {"text": "There were strange, unrelated failures on that try push.  I'm 100% sure I pulled a bad tree, but here's one more push with a fresh tree to make sure: https://treeherder.mozilla.org/#/jobs?repo=try&revision=05ea2da89b6877df44a5622ca5bfec79fedc16fa", "author": "adw@mozilla.com", "id": 13022686, "time": "2018-02-06T21:30:55Z"}, {"text": "*** Bug 1253698 has been marked as a duplicate of this bug. ***", "author": "mak77@bonardo.net", "id": 13031638, "time": "2018-02-09T20:16:14Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review227864\n\nSorry, there is some bitrotting to take care of. I think it's not much though. And I have some questions/doubts. It's possible next parts can better answer them, in case just drop with a comment.\n\n::: toolkit/components/places/UnifiedComplete.js:844\n(Diff revision 26)\n> -  this._strippedPrefix = this._trimmedOriginalSearchString.slice(\n> -    0, this._trimmedOriginalSearchString.length - strippedOriginalSearchString.length\n> -  ).toLowerCase();\n>  \n> +  let [prefix, suffix] = stripPrefix(this._trimmedOriginalSearchString);\n> +  this._searchString = textURIService.unEscapeURIForUI(\"UTF-8\", suffix);\n\nThe change to stripPrefix seems to change one of the main behaviors of the address bar, that is ignoring \"www.\". This mean if I type \"www.facebook\" we won't match anymore urls like \"https://facebook.com/\" from history/bookmarks/open-tabs?\nthose common queries look for this._searchTokens.join(\" \") and searchToken are directly derived from _searchString.\n\n::: toolkit/components/places/UnifiedComplete.js:1433\n(Diff revision 26)\n> -      }\n> -      return false;\n> +    let query, params;\n> +    let firstSlashIndex = this._searchString.indexOf(\"/\");\n> +    let lastSlashIndex = this._searchString.lastIndexOf(\"/\");\n> +    if (firstSlashIndex >= 0 &&\n> +        (firstSlashIndex != lastSlashIndex ||\n> +         firstSlashIndex < this._searchString.length - 1)) {\n\nMaybe I'm misreading this, but isn't the second check enough by itself?\nif the first found slash is the last string char, it's also the only and last slash and firstSlashIndex == lastSlashIndex.\nIs this for strings like \"mydomain.com//\"?\n\n::: toolkit/components/places/UnifiedComplete.js:1439\n(Diff revision 26)\n> +      [query, params] = this._urlQuery;\n> +    } else {\n> +      [query, params] = this._originQuery;\n>      }\n>  \n> -    let gotResult = false;\n> +    if (query) {\n\nin which case we don't have a query?\n\n::: toolkit/components/places/UnifiedComplete.js:1518\n(Diff revision 26)\n> -    if (!match)\n> +    // single slash that's not at the end, don't try to match.\n> +    let firstSlashIndex = this._searchString.indexOf(\"/\");\n> +    let lastSlashIndex = this._searchString.lastIndexOf(\"/\");\n> +    if (firstSlashIndex != lastSlashIndex ||\n> +        (firstSlashIndex >= 0 &&\n> +         firstSlashIndex != this._searchString.length - 1)) {\n\nsounds like the code could be factored out to an helper (looksLikeHost or something like that) along with the above one for autofill. Maybe it could also return a trimmed string.\n\n::: toolkit/components/places/UnifiedComplete.js:2259\n(Diff revision 26)\n> +    // At this point, _searchString is not a URL with a path; it does not\n> +    // contain a slash, except for possibly at the very end.  If there is\n> +    // trailing slash, remove it when searching here to match the rest of the\n> +    // string because it may be an origin.\n> +    let searchStr =\n> +      !this._searchString.endsWith(\"/\") ?\n\nnit: inverting the condition may make it a bit more readable\n\n::: toolkit/components/places/UnifiedComplete.js:2296\n(Diff revision 26)\n>     *         database with and an object containing the params to bound.\n>     */\n>    get _urlQuery() {\n> -    // We expect this to be a full URL, not just a host. We want to extract the\n> -    // host and use that as a guess for whether we'll get a result from a URL\n> -    // query.\n> +    // Assuming the search string is a URL, get the hostname, the part of the\n> +    // search string up to either the path slash or the port colon.\n> +    let hostMatch = /^[^/:]+/.exec(this._searchString);\n\nmay be worth memoizing the regex\n\n::: toolkit/components/places/nsPlacesTables.h:139\n(Diff revision 26)\n>      \", post_data TEXT\" \\\n>    \")\" \\\n>  )\n>  \n> +#define CREATE_MOZ_PREFIXES NS_LITERAL_CSTRING( \\\n> +  \"CREATE TABLE moz_prefixes ( \" \\\n\nthe table name is a bit generic, prefixes of what?\n\n::: toolkit/components/places/nsPlacesTables.h:149\n(Diff revision 26)\n> -    \"  id INTEGER PRIMARY KEY\" \\\n> -    \", host TEXT NOT NULL UNIQUE\" \\\n> +    \"id INTEGER PRIMARY KEY, \" \\\n> +    \"host TEXT NOT NULL UNIQUE \" \\\n> -    \", frecency INTEGER\" \\\n> -    \", typed INTEGER NOT NULL DEFAULT 0\" \\\n> -    \", prefix TEXT\" \\\n>    \")\" \\\n\nI didn't check the next parts for this, but off-hand this is not downgradable since an older version expects frecency, typed and prefix to exist in this table.\nIf we keep it like this, we should relnote that profiles created with Firefox NN are not backwards compatible and we may have to push a patch to ESR to consider them corrupt.\n\n::: toolkit/components/places/nsPlacesTables.h:168\n(Diff revision 26)\n> +    \"origin_id INTEGER PRIMARY KEY REFERENCES moz_origins(id) ON DELETE CASCADE, \" \\\n> +    \"prefix TEXT NOT NULL, \" \\\n> +    \"host TEXT NOT NULL, \" \\\n> +    \"frecency INTEGER NOT NULL \" \\\n> +  \") \" \\\n> +  \"WITHOUT ROWID\" \\\n\nyou have an integer primary key, so using without rowid is a no-op.\nWITHOUT ROWID is only useful when the primary key is a string or a compound key. Otherwise ROWID is just an alias of the integer primary key (comes at no additional cost)", "author": "mak77@bonardo.net", "id": 13058312, "time": "2018-02-21T17:11:33Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nhttps://reviewboard.mozilla.org/r/217974/#review227878\n\n::: netwerk/base/nsIBrowserSearchService.idl:160\n(Diff revision 1)\n>  \n>    /**\n>     * Gets a string representing the hostname from which search results for a\n> -   * given responseType are returned, minus the leading \"www.\" (if present).\n> -   * This can be specified as an url attribute in the engine description file,\n> -   * but will default to host from the <Url>'s template otherwise.\n> +   * given responseType are returned.  This can be specified as an url attribute\n> +   * in the engine description file, but will default to host from the <Url>'s\n> +   * template otherwise.\n\nAs a side note, just to spread knowledge, I think the way this is currently implemented is not great. We should have a bug on file already. A possible future idea is for engines to define a resultDomain ONLY WHEN they want to be autofilled, and that resultDomain should always be a good landing page. If they don't provide one, we should not autofill.\nIn any case it's the n-th incomplete and disabled feature.\n\n::: toolkit/components/places/Database.h:22\n(Diff revision 1)\n>  #include \"Shutdown.h\"\n>  #include \"nsCategoryCache.h\"\n>  \n>  // This is the schema version. Update it at any schema change and add a\n>  // corresponding migrateVxx method below.\n> -#define DATABASE_SCHEMA_VERSION 42\n> +#define DATABASE_SCHEMA_VERSION 43\n\nsorry, will have to move to 44.\n\n::: toolkit/components/places/Database.cpp:1281\n(Diff revision 1)\n>      // moz_inputhistory.\n>      rv = mMainConn->ExecuteSimpleSQL(CREATE_MOZ_INPUTHISTORY);\n>      NS_ENSURE_SUCCESS(rv, rv);\n>  \n> -    // moz_hosts.\n> -    rv = mMainConn->ExecuteSimpleSQL(CREATE_MOZ_HOSTS);\n> +    // moz_autofill_origins.\n> +    rv = mMainConn->ExecuteSimpleSQL(CREATE_MOZ_AUTOFILL_ORIGINS);\n\nwhat is MOZ_AUTOFILL_ORIGINS? I cannot find its definition.\n\nSupposing is another strings populated table, do we have an idea how much larger places.sqlite becomes with these 3 new string tables?\n\n::: toolkit/components/places/SQLFunctions.cpp:276\n(Diff revision 1)\n> +                 nsAString::const_iterator& iter)\n> +  {\n> +    nsAString::const_iterator end;\n> +    spec.BeginReading(iter);\n> +    spec.EndReading(end);\n> +    if (!FindCharInReadable(':', iter, end)) {\n\nnit: schemes have a limited length, maybe we could limit our search to a certain dependentSubstring. The longest IANA scheme atm is 31 chars, we could double that.\n\n::: toolkit/components/places/SQLFunctions.cpp\n(Diff revision 1)\n>        fixedSpec.Rebind(fixedSpec, 8);\n>      } else if (StringBeginsWith(fixedSpec, NS_LITERAL_CSTRING(\"ftp://\"))) {\n>        fixedSpec.Rebind(fixedSpec, 6);\n>      }\n>  \n> -    if (StringBeginsWith(fixedSpec, NS_LITERAL_CSTRING(\"www.\"))) {\n\nThis is bound to my comment in the first part about www\n\n::: toolkit/components/places/SQLFunctions.cpp:1190\n(Diff revision 1)\n> +    } else {\n> +      nsAString::const_iterator start, end;\n> +      start = iter;\n> +      spec.EndReading(end);\n> +      Unused << FindCharInReadable('/', iter, end);\n> +      result->SetAsAString(Substring(start, iter));\n\nwhat about urls with user:pwd@?\n\n::: toolkit/components/places/SQLFunctions.cpp:1280\n(Diff revision 1)\n> +    uint32_t numArgs;\n> +    nsresult rv = aArgs->GetNumEntries(&numArgs);\n> +    NS_ENSURE_SUCCESS(rv, rv);\n> +    MOZ_ASSERT(numArgs == 0);\n> +\n> +    nsNavHistory *navHistory = nsNavHistory::GetHistoryService();\n\nYou should use GetConstHistory and the bool should be atomic, otherwise this doesn't look thread-safe\n\n::: toolkit/components/places/nsNavHistory.cpp:109\n(Diff revision 1)\n>  #define PREF_FREC_UNVISITED_TYPED_BONUS_DEF     200\n>  #define PREF_FREC_RELOAD_VISIT_BONUS            \"places.frecency.reloadVisitBonus\"\n>  #define PREF_FREC_RELOAD_VISIT_BONUS_DEF        0\n>  \n> -// This is a 'hidden' pref for the purposes of unit tests.\n> +// This is a 'hidden' pref for the purposes of unit tests.  If you change\n> +// RATE_DEF, make sure you update the same value in nsPlacesTriggers.h!\n\nmaybe it shouldn't be a pref, since changing the pref won't fix nsPlacesTriggers.h?", "author": "mak77@bonardo.net", "id": 13058461, "time": "2018-02-21T17:44:00Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nhttps://reviewboard.mozilla.org/r/217974/#review227918\n\n::: toolkit/components/places/Database.cpp:2057\n(Diff revision 1)\n> +    rv = mMainConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\n> +      \"ALTER TABLE moz_places \" \\\n> +      \"ADD COLUMN origin_id INTEGER REFERENCES moz_origins(id) ON DELETE CASCADE\"\n> +    ));\n> +    NS_ENSURE_SUCCESS(rv, rv);\n> +  }\n\nShouldn't the migration populate these tables too?", "author": "mak77@bonardo.net", "id": 13058567, "time": "2018-02-21T18:07:53Z"}, {"text": "Maybe we should first prepare the data, like having a separate bug for the migration (creating the new tables, populating them, keeping them updated, handling downgrades, considering db growth and expiration), and then this bug would just make use of those.", "author": "mak77@bonardo.net", "id": 13058574, "time": "2018-02-21T18:09:56Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nhttps://reviewboard.mozilla.org/r/217976/#review228024", "author": "mak77@bonardo.net", "id": 13059281, "time": "2018-02-21T21:45:15Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nhttps://reviewboard.mozilla.org/r/217978/#review228044\n\n::: toolkit/content/widgets/autocomplete.xml:1297\n(Diff revision 1)\n>              let originalValue, originalText, originalType;\n> -            let value = controller.getValueAt(this._currentIndex);\n> +            let style = controller.getStyleAt(this._currentIndex);\n> +            let value =\n> +              style &&\n> +                style.includes(\"autofill\") &&\n> +                style.includes(\"heuristic\") ?\n\nI'd like to know a bit more about this change, was it just wrong?", "author": "mak77@bonardo.net", "id": 13059448, "time": "2018-02-21T22:33:09Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nhttps://reviewboard.mozilla.org/r/217982/#review228062\n\ntests outcome depend on previous parts correctness, clearing for now.", "author": "mak77@bonardo.net", "id": 13059678, "time": "2018-02-21T23:39:11Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nhttps://reviewboard.mozilla.org/r/217984/#review228064", "author": "mak77@bonardo.net", "id": 13059681, "time": "2018-02-21T23:39:33Z"}, {"text": "Thanks Marco.  Responding to the bigger questions/concerns in your comments:\n\n(In reply to Marco Bonardo [::mak] from comment #114)\n> ::: toolkit/components/places/UnifiedComplete.js:844\n> (Diff revision 26)\n> > -  this._strippedPrefix = this._trimmedOriginalSearchString.slice(\n> > -    0, this._trimmedOriginalSearchString.length - strippedOriginalSearchString.length\n> > -  ).toLowerCase();\n> >  \n> > +  let [prefix, suffix] = stripPrefix(this._trimmedOriginalSearchString);\n> > +  this._searchString = textURIService.unEscapeURIForUI(\"UTF-8\", suffix);\n> \n> The change to stripPrefix seems to change one of the main behaviors of the\n> address bar, that is ignoring \"www.\". This mean if I type \"www.facebook\" we\n> won't match anymore urls like \"https://facebook.com/\" from\n> history/bookmarks/open-tabs?\n\nYes, I don't think we should match non-www domains when you type www.  We talked about this in comment 29 (last bullet point) and comment 30 and you seemed to agree I think?  This is one of the big changes in the patches.  (But we continue to match www domains when you don't type www.)\n\n> ::: toolkit/components/places/nsPlacesTables.h:149\n> (Diff revision 26)\n> > -    \"  id INTEGER PRIMARY KEY\" \\\n> > -    \", host TEXT NOT NULL UNIQUE\" \\\n> > +    \"id INTEGER PRIMARY KEY, \" \\\n> > +    \"host TEXT NOT NULL UNIQUE \" \\\n> > -    \", frecency INTEGER\" \\\n> > -    \", typed INTEGER NOT NULL DEFAULT 0\" \\\n> > -    \", prefix TEXT\" \\\n> >    \")\" \\\n> \n> I didn't check the next parts for this, but off-hand this is not\n> downgradable since an older version expects frecency, typed and prefix to\n> exist in this table.\n\nOK, I'll have to make a moz_hosts2 (or something like that) table.  I didn't mean to break downgrading.\n\n(In reply to Marco Bonardo [::mak] from comment #115)\n> ::: toolkit/components/places/Database.cpp:1281\n> (Diff revision 1)\n> >      // moz_inputhistory.\n> >      rv = mMainConn->ExecuteSimpleSQL(CREATE_MOZ_INPUTHISTORY);\n> >      NS_ENSURE_SUCCESS(rv, rv);\n> >  \n> > -    // moz_hosts.\n> > -    rv = mMainConn->ExecuteSimpleSQL(CREATE_MOZ_HOSTS);\n> > +    // moz_autofill_origins.\n> > +    rv = mMainConn->ExecuteSimpleSQL(CREATE_MOZ_AUTOFILL_ORIGINS);\n> \n> what is MOZ_AUTOFILL_ORIGINS? I cannot find its definition.\n\nIt's defined in the part 0 patch.  It's the non-normalized table used for autofilling origins.  We touched on this in comment 39 and comment 40.\n\n>  \"CREATE TABLE moz_autofill_origins ( \" \\\n>    \"origin_id INTEGER PRIMARY KEY REFERENCES moz_origins(id) ON DELETE CASCADE, \" \\\n>    \"prefix TEXT NOT NULL, \" \\\n>    \"host TEXT NOT NULL, \" \\\n>    \"frecency INTEGER NOT NULL \" \\\n>  \") \" \\\n\n> Supposing is another strings populated table, do we have an idea how much\n> larger places.sqlite becomes with these 3 new string tables?\n\nI added three new normalized tables: moz_prefixes, moz_hosts (a new version, probably to be renamed as mentioned above), moz_origins.  They're normalized so there's no string duplication among them.  But that does (basically) duplicate the rev_host columns we have in various tables.\n\n> ::: toolkit/components/places/SQLFunctions.cpp:1190\n> (Diff revision 1)\n> > +    } else {\n> > +      nsAString::const_iterator start, end;\n> > +      start = iter;\n> > +      spec.EndReading(end);\n> > +      Unused << FindCharInReadable('/', iter, end);\n> > +      result->SetAsAString(Substring(start, iter));\n> \n> what about urls with user:pwd@?\n\nGood point, I thought about that too but I didn't handle them anywhere.  I'm not sure whether they're worth handling, but I should make sure that none of the string parsing is tripped up by them.\n\n> ::: toolkit/components/places/nsNavHistory.cpp:109\n> (Diff revision 1)\n> >  #define PREF_FREC_UNVISITED_TYPED_BONUS_DEF     200\n> >  #define PREF_FREC_RELOAD_VISIT_BONUS            \"places.frecency.reloadVisitBonus\"\n> >  #define PREF_FREC_RELOAD_VISIT_BONUS_DEF        0\n> >  \n> > -// This is a 'hidden' pref for the purposes of unit tests.\n> > +// This is a 'hidden' pref for the purposes of unit tests.  If you change\n> > +// RATE_DEF, make sure you update the same value in nsPlacesTriggers.h!\n> \n> maybe it shouldn't be a pref, since changing the pref won't fix\n> nsPlacesTriggers.h?\n\nOK, makes sense.\n\n(In reply to Marco Bonardo [::mak] from comment #116)\n> ::: toolkit/components/places/Database.cpp:2057\n> (Diff revision 1)\n> > +    rv = mMainConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\n> > +      \"ALTER TABLE moz_places \" \\\n> > +      \"ADD COLUMN origin_id INTEGER REFERENCES moz_origins(id) ON DELETE CASCADE\"\n> > +    ));\n> > +    NS_ENSURE_SUCCESS(rv, rv);\n> > +  }\n> \n> Shouldn't the migration populate these tables too?\n\nYes, probably!\n\n(In reply to Marco Bonardo [::mak] from comment #119)\n> ::: toolkit/content/widgets/autocomplete.xml:1297\n> (Diff revision 1)\n> >              let originalValue, originalText, originalType;\n> > -            let value = controller.getValueAt(this._currentIndex);\n> > +            let style = controller.getStyleAt(this._currentIndex);\n> > +            let value =\n> > +              style &&\n> > +                style.includes(\"autofill\") &&\n> > +                style.includes(\"heuristic\") ?\n> \n> I'd like to know a bit more about this change, was it just wrong?\n\nIIRC basically, yes, but: For autofill results, the \"value\" is the autofilled string.  So if you type moz and we autofill to mozilla.org, \"mozilla.org\" is the value.  But the \"final complete value\" may actually be www.mozilla.org (more accurately https://www.mozilla.org/).  So it's more correct to get the URL/value from the final complete value, especially now.", "author": "adw@mozilla.com", "id": 13060013, "time": "2018-02-22T02:29:15Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #122)\n> Yes, I don't think we should match non-www domains when you type www.  We\n> talked about this in comment 29 (last bullet point) and comment 30 and you\n> seemed to agree I think?  This is one of the big changes in the patches. \n> (But we continue to match www domains when you don't type www.)\n\nHeh, my comment was about autofill simplification, I didn't think we were going to stop fuzzy searching in the other sources, so I didn't brainstorm it enough. We'd be losing some search capability.\nWhat are the other browsers doing? Off-hand looks like Chrome and Edge don't ignore \"www.\".\nWe also had bugs filed in the past about \"I don't understand why I typed \"www.fa\" and I was suggestes \"www.doremifa\".\nMaybe we could re-evaluate providing suggested urls with search suggestions when www. is typed, it seems useful in Edge to type \"www.f\" and get some popular pages suggested.\nAll in all, I'm not against the change, I'll think about it in background to better evaluate what we lose and what we gain.\n\n> > I didn't check the next parts for this, but off-hand this is not\n> > downgradable since an older version expects frecency, typed and prefix to\n> > exist in this table.\n> \n> OK, I'll have to make a moz_hosts2 (or something like that) table.  I didn't\n> mean to break downgrading.\n\nYes, this is what we were discussing originally, any change to moz_host schema will break downgrades. We can freeze this table contents, or update it with \"bogus\" data, the old version may return wrong results in certain cases, but it's better than being broken. We can't remove columns from it.\nAnd this is why I care about understanding the disk size of the new information, because for a while we'll have to keep around both old and new info :(\nAlso, if we freeze the contents of the old moz_hosts, we'd have a privacy hit.\nSo, question, what do we break if we keep the table but empty it on migration to this new version? Who is today using moz_hosts apart from autofill?\n\n> > what is MOZ_AUTOFILL_ORIGINS? I cannot find its definition.\n> \n> It's defined in the part 0 patch.  It's the non-normalized table used for\n> autofilling origins.  We touched on this in comment 39 and comment 40.\n\nAh sorry, find in page broke for some reason :(\n\n> I added three new normalized tables: moz_prefixes, moz_hosts (a new version,\n> probably to be renamed as mentioned above), moz_origins.  They're normalized\n> so there's no string duplication among them.  But that does (basically)\n> duplicate the rev_host columns we have in various tables.\n\nCould you please take your default profile (I suppose it's around 70MB like mine) add these tables, populate them, and calculate the % of growth? \nWe'll need to adapt expiration.\nWe'll also need to make a plan for removal of the old data.", "author": "mak77@bonardo.net", "id": 13060491, "time": "2018-02-22T09:52:30Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nhttps://reviewboard.mozilla.org/r/217980/#review228168\n\n::: toolkit/components/places/SQLFunctions.cpp:1329\n(Diff revision 1)\n> +    int32_t oldFrecency = aArgs->AsInt32(1);\n> +    int32_t newFrecency = aArgs->AsInt32(2);\n> +\n> +    nsNavHistory* navHistory = nsNavHistory::GetHistoryService();\n> +    NS_ENSURE_STATE(navHistory);\n> +    navHistory->UpdateFrecencyStats(placeID, oldFrecency, newFrecency);\n\nI'm not 100% sure this is thread-safe, because the history service is not we have the const history service to be used off the main thread.\nFrom the const service you could likely fire a runnable/runnablemethod on whatever thread you prefer.", "author": "mak77@bonardo.net", "id": 13060638, "time": "2018-02-22T10:31:36Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #123)\n> (In reply to Drew Willcoxon :adw from comment #122)\n> > Yes, I don't think we should match non-www domains when you type www.  We\n> > talked about this in comment 29 (last bullet point) and comment 30 and you\n> > seemed to agree I think?  This is one of the big changes in the patches. \n> > (But we continue to match www domains when you don't type www.)\n> \n> Heh, my comment was about autofill simplification, I didn't think we were\n> going to stop fuzzy searching in the other sources, so I didn't brainstorm\n> it enough. We'd be losing some search capability.\n> What are the other browsers doing? Off-hand looks like Chrome and Edge don't\n> ignore \"www.\".\n> We also had bugs filed in the past about \"I don't understand why I typed\n> \"www.fa\" and I was suggestes \"www.doremifa\".\n\nThat wouldn't happen with this patch.  You would only get domains that started exactly with \"www.fa\".  (Would that problem even happen with Firefox today?  We strip the www so all domains that start with \"fa\" are also eligible to be matched, but not domains that don't start with \"fa\" or \"www.fa\", right?  (Speaking of domain/host matching only, not non-boundary matching.))\n\n> Maybe we could re-evaluate providing suggested urls with search suggestions\n> when www. is typed, it seems useful in Edge to type \"www.f\" and get some\n> popular pages suggested.\n\nYes, I agree, we should do that.  The pre-loaded sites functionality helps with that, but I think it's turned off on release?\n\n> Also, if we freeze the contents of the old moz_hosts, we'd have a privacy\n> hit.\n\nIs that because you're assuming clearing history, page expiration, etc. wouldn't touch the old table?  Not sure I understand.\n\n> So, question, what do we break if we keep the table but empty it on\n> migration to this new version? Who is today using moz_hosts apart from\n> autofill?\n\nI'd have to check.\n\n> Could you please take your default profile (I suppose it's around 70MB like\n> mine) add these tables, populate them, and calculate the % of growth? \n\nWill do.", "author": "adw@mozilla.com", "id": 13063042, "time": "2018-02-23T01:31:21Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #125)\n> > We also had bugs filed in the past about \"I don't understand why I typed\n> > \"www.fa\" and I was suggestes \"www.doremifa\".\n> \n> That wouldn't happen with this patch.  You would only get domains that\n> started exactly with \"www.fa\".  (Would that problem even happen with Firefox\n> today?  We strip the www so all domains that start with \"fa\" are also\n> eligible to be matched, but not domains that don't start with \"fa\" or\n> \"www.fa\", right?  (Speaking of domain/host matching only, not non-boundary\n> matching.))\n\nIt does happen in Firefox today, not for autofill though. It happens for normal history/bookmarks entries.\nSo, all in all I think, also considered consistency with other browsers, it's ok to proceed without ignoring www.\n\n> > Maybe we could re-evaluate providing suggested urls with search suggestions\n> > when www. is typed, it seems useful in Edge to type \"www.f\" and get some\n> > popular pages suggested.\n> \n> Yes, I agree, we should do that.  The pre-loaded sites functionality helps\n> with that, but I think it's turned off on release?\n\nIt's turned off everywhere now, because it was confusing with the current list.\nMaybe we should re-evaluate that feature vs search suggestions indeed.\n\n> > Also, if we freeze the contents of the old moz_hosts, we'd have a privacy\n> > hit.\n> \n> Is that because you're assuming clearing history, page expiration, etc.\n> wouldn't touch the old table?  Not sure I understand.\n\nIf you remove OLD moz_host updating from triggers, then OLD moz_host contents won't be removed when pages go away.\nthat means I remove www.embarassingsite.com from history, but moz_host still contains embarassingsite.com", "author": "mak77@bonardo.net", "id": 13063477, "time": "2018-02-23T09:15:37Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/26-27/", "author": "adw@mozilla.com", "id": 13110042, "time": "2018-03-07T02:44:47Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217974/diff/1-2/", "author": "adw@mozilla.com", "id": 13110043, "time": "2018-03-07T02:44:47Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217976/diff/1-2/", "author": "adw@mozilla.com", "id": 13110044, "time": "2018-03-07T02:44:47Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217978/diff/1-2/", "author": "adw@mozilla.com", "id": 13110045, "time": "2018-03-07T02:44:47Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217980/diff/1-2/", "author": "adw@mozilla.com", "id": 13110046, "time": "2018-03-07T02:44:47Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217982/diff/1-2/", "author": "adw@mozilla.com", "id": 13110047, "time": "2018-03-07T02:44:47Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217984/diff/1-2/", "author": "adw@mozilla.com", "id": 13110048, "time": "2018-03-07T02:44:47Z"}, {"text": "WIP unbitrotting, addressing comments", "author": "adw@mozilla.com", "id": 13110049, "time": "2018-03-07T02:45:01Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217974/diff/2-3/", "author": "adw@mozilla.com", "id": 13113010, "time": "2018-03-08T01:25:35Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217976/diff/2-3/", "author": "adw@mozilla.com", "id": 13113011, "time": "2018-03-08T01:25:35Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217978/diff/2-3/", "author": "adw@mozilla.com", "id": 13113012, "time": "2018-03-08T01:25:35Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217980/diff/2-3/", "author": "adw@mozilla.com", "id": 13113013, "time": "2018-03-08T01:25:35Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217982/diff/2-3/", "author": "adw@mozilla.com", "id": 13113014, "time": "2018-03-08T01:25:35Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217984/diff/2-3/", "author": "adw@mozilla.com", "id": 13113015, "time": "2018-03-08T01:25:35Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #114)\n> ::: toolkit/components/places/UnifiedComplete.js:1433\n> (Diff revision 26)\n> > -      }\n> > -      return false;\n> > +    let query, params;\n> > +    let firstSlashIndex = this._searchString.indexOf(\"/\");\n> > +    let lastSlashIndex = this._searchString.lastIndexOf(\"/\");\n> > +    if (firstSlashIndex >= 0 &&\n> > +        (firstSlashIndex != lastSlashIndex ||\n> > +         firstSlashIndex < this._searchString.length - 1)) {\n> \n> Maybe I'm misreading this, but isn't the second check enough by itself?\n> if the first found slash is the last string char, it's also the only and\n> last slash and firstSlashIndex == lastSlashIndex.\n\nYou're right, fixed\n\n> ::: toolkit/components/places/UnifiedComplete.js:1439\n> (Diff revision 26)\n> > +      [query, params] = this._urlQuery;\n> > +    } else {\n> > +      [query, params] = this._originQuery;\n> >      }\n> >  \n> > -    let gotResult = false;\n> > +    if (query) {\n> \n> in which case we don't have a query?\n\nThe first thing _urlQuery does is match the search string against a regexp, and if there's no match, it returns a null query.  That seems like the sanest way to handle that case.  The regexp is /^[^/:]+/, so if you type \"/\" or \":\", you'll hit that case.\n\n> ::: toolkit/components/places/UnifiedComplete.js:1518\n> (Diff revision 26)\n> > -    if (!match)\n> > +    // single slash that's not at the end, don't try to match.\n> > +    let firstSlashIndex = this._searchString.indexOf(\"/\");\n> > +    let lastSlashIndex = this._searchString.lastIndexOf(\"/\");\n> > +    if (firstSlashIndex != lastSlashIndex ||\n> > +        (firstSlashIndex >= 0 &&\n> > +         firstSlashIndex != this._searchString.length - 1)) {\n> \n> sounds like the code could be factored out to an helper (looksLikeHost or\n> something like that) along with the above one for autofill. Maybe it could\n> also return a trimmed string.\n\nDone...  It was a challenge to name this function.  I don't want it to be mistaken for a general-purpose host-parsing function.  All it does is look for slashes.  It doesn't actually have any smarts for detecting hosts at all.  You shouldn't pass full URLs to it, or even origins.  It's very particular for these two cases.  So I named it trimTrailingSlashIfOnlySlash.\n\n> ::: toolkit/components/places/UnifiedComplete.js:2259\n> (Diff revision 26)\n> > +    // At this point, _searchString is not a URL with a path; it does not\n> > +    // contain a slash, except for possibly at the very end.  If there is\n> > +    // trailing slash, remove it when searching here to match the rest of the\n> > +    // string because it may be an origin.\n> > +    let searchStr =\n> > +      !this._searchString.endsWith(\"/\") ?\n> \n> nit: inverting the condition may make it a bit more readable\n\nDone\n\n> ::: toolkit/components/places/UnifiedComplete.js:2296\n> (Diff revision 26)\n> >     *         database with and an object containing the params to bound.\n> >     */\n> >    get _urlQuery() {\n> > -    // We expect this to be a full URL, not just a host. We want to extract the\n> > -    // host and use that as a guess for whether we'll get a result from a URL\n> > -    // query.\n> > +    // Assuming the search string is a URL, get the hostname, the part of the\n> > +    // search string up to either the path slash or the port colon.\n> > +    let hostMatch = /^[^/:]+/.exec(this._searchString);\n> \n> may be worth memoizing the regex\n\nDone\n\n> ::: toolkit/components/places/nsPlacesTables.h:139\n> (Diff revision 26)\n> >      \", post_data TEXT\" \\\n> >    \")\" \\\n> >  )\n> >  \n> > +#define CREATE_MOZ_PREFIXES NS_LITERAL_CSTRING( \\\n> > +  \"CREATE TABLE moz_prefixes ( \" \\\n> \n> the table name is a bit generic, prefixes of what?\n\nRenamed to moz_origin_prefixes\n\n> ::: toolkit/components/places/nsPlacesTables.h:149\n> (Diff revision 26)\n> > -    \"  id INTEGER PRIMARY KEY\" \\\n> > -    \", host TEXT NOT NULL UNIQUE\" \\\n> > +    \"id INTEGER PRIMARY KEY, \" \\\n> > +    \"host TEXT NOT NULL UNIQUE \" \\\n> > -    \", frecency INTEGER\" \\\n> > -    \", typed INTEGER NOT NULL DEFAULT 0\" \\\n> > -    \", prefix TEXT\" \\\n> >    \")\" \\\n> \n> I didn't check the next parts for this, but off-hand this is not\n> downgradable since an older version expects frecency, typed and prefix to\n> exist in this table.\n\nI kept the existing moz_hosts and renamed my new table moz_origin_hosts.  So now we have moz_origins, moz_origin_prefixes, and moz_origin_hosts.\n\n> ::: toolkit/components/places/nsPlacesTables.h:168\n> (Diff revision 26)\n> > +    \"origin_id INTEGER PRIMARY KEY REFERENCES moz_origins(id) ON DELETE CASCADE, \" \\\n> > +    \"prefix TEXT NOT NULL, \" \\\n> > +    \"host TEXT NOT NULL, \" \\\n> > +    \"frecency INTEGER NOT NULL \" \\\n> > +  \") \" \\\n> > +  \"WITHOUT ROWID\" \\\n> \n> you have an integer primary key, so using without rowid is a no-op.\n> WITHOUT ROWID is only useful when the primary key is a string or a compound\n> key. Otherwise ROWID is just an alias of the integer primary key (comes at\n> no additional cost)\n\nFixed\n\n\n(In reply to Marco Bonardo [::mak] from comment #115)\n> ::: toolkit/components/places/Database.h:22\n> (Diff revision 1)\n> >  #include \"Shutdown.h\"\n> >  #include \"nsCategoryCache.h\"\n> >  \n> >  // This is the schema version. Update it at any schema change and add a\n> >  // corresponding migrateVxx method below.\n> > -#define DATABASE_SCHEMA_VERSION 42\n> > +#define DATABASE_SCHEMA_VERSION 43\n> \n> sorry, will have to move to 44.\n\nFixed\n\n> ::: toolkit/components/places/SQLFunctions.cpp:276\n> (Diff revision 1)\n> > +                 nsAString::const_iterator& iter)\n> > +  {\n> > +    nsAString::const_iterator end;\n> > +    spec.BeginReading(iter);\n> > +    spec.EndReading(end);\n> > +    if (!FindCharInReadable(':', iter, end)) {\n> \n> nit: schemes have a limited length, maybe we could limit our search to a\n> certain dependentSubstring. The longest IANA scheme atm is 31 chars, we\n> could double that.\n\nGood idea, done.  (In my quick look, it looks like 30 characters is the longest.)  I chose 64 as a nice round number.\n\n> ::: toolkit/components/places/SQLFunctions.cpp:1190\n> (Diff revision 1)\n> > +    } else {\n> > +      nsAString::const_iterator start, end;\n> > +      start = iter;\n> > +      spec.EndReading(end);\n> > +      Unused << FindCharInReadable('/', iter, end);\n> > +      result->SetAsAString(Substring(start, iter));\n> \n> what about urls with user:pwd@?\n\nI commented earlier that I intentionally didn't handle these specially -- that's still true, but I went looked at the patch to check how such URLs would be handled, and to make sure my parsing code is OK.  They'll end up getting treated as separate origins.  So if you have http://example.com/, http://user@example.com/, and http://user:pass@example.com/, then you will end up with three different origins: http://example.com, http://user@example.com, and http://user:pass@example.com.  I think that's OK.\n\n> ::: toolkit/components/places/SQLFunctions.cpp:1280\n> (Diff revision 1)\n> > +    uint32_t numArgs;\n> > +    nsresult rv = aArgs->GetNumEntries(&numArgs);\n> > +    NS_ENSURE_SUCCESS(rv, rv);\n> > +    MOZ_ASSERT(numArgs == 0);\n> > +\n> > +    nsNavHistory *navHistory = nsNavHistory::GetHistoryService();\n> \n> You should use GetConstHistory and the bool should be atomic, otherwise this\n> doesn't look thread-safe\n\nWhoops, fixed\n\n> ::: toolkit/components/places/nsNavHistory.cpp:109\n> (Diff revision 1)\n> >  #define PREF_FREC_UNVISITED_TYPED_BONUS_DEF     200\n> >  #define PREF_FREC_RELOAD_VISIT_BONUS            \"places.frecency.reloadVisitBonus\"\n> >  #define PREF_FREC_RELOAD_VISIT_BONUS_DEF        0\n> >  \n> > -// This is a 'hidden' pref for the purposes of unit tests.\n> > +// This is a 'hidden' pref for the purposes of unit tests.  If you change\n> > +// RATE_DEF, make sure you update the same value in nsPlacesTriggers.h!\n> \n> maybe it shouldn't be a pref, since changing the pref won't fix\n> nsPlacesTriggers.h?\n\nIt looks like it's only a pref so that tests can tweak it.  The thing that I was worrying about with this is that there are two definitions of the rate in two different files.  So I moved (and renamed) this define to nsPlacesTriggers.h, and then here in nsNavHistory.cpp I include nsPlacesTriggers.h and use that define.\n\n\n(In reply to Marco Bonardo [::mak] from comment #116)\n> ::: toolkit/components/places/Database.cpp:2057\n> (Diff revision 1)\n> > +    rv = mMainConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\n> > +      \"ALTER TABLE moz_places \" \\\n> > +      \"ADD COLUMN origin_id INTEGER REFERENCES moz_origins(id) ON DELETE CASCADE\"\n> > +    ));\n> > +    NS_ENSURE_SUCCESS(rv, rv);\n> > +  }\n> \n> Shouldn't the migration populate these tables too?\n\nDone, and updated test_current_from_v42.js to make sure it works\n\n\n(In reply to Marco Bonardo [::mak] from comment #123)\n> So, question, what do we break if we keep the table but empty it on\n> migration to this new version? Who is today using moz_hosts apart from\n> autofill?\n\nNo one!  Good news.  So I updated patch 1 to empty moz_hosts as part of the migration.\n\n> > I added three new normalized tables: moz_prefixes, moz_hosts (a new version,\n> > probably to be renamed as mentioned above), moz_origins.  They're normalized\n> > so there's no string duplication among them.  But that does (basically)\n> > duplicate the rev_host columns we have in various tables.\n> \n> Could you please take your default profile (I suppose it's around 70MB like\n> mine) add these tables, populate them, and calculate the % of growth? \n> We'll need to adapt expiration.\n> We'll also need to make a plan for removal of the old data.\n\nStill need to do this, but I've updated my patches for review in the meantime.\n\n\n(In reply to Marco Bonardo [::mak] from comment #124)\n> ::: toolkit/components/places/SQLFunctions.cpp:1329\n> (Diff revision 1)\n> > +    int32_t oldFrecency = aArgs->AsInt32(1);\n> > +    int32_t newFrecency = aArgs->AsInt32(2);\n> > +\n> > +    nsNavHistory* navHistory = nsNavHistory::GetHistoryService();\n> > +    NS_ENSURE_STATE(navHistory);\n> > +    navHistory->UpdateFrecencyStats(placeID, oldFrecency, newFrecency);\n> \n> I'm not 100% sure this is thread-safe, because the history service is not we\n> have the const history service to be used off the main thread.\n> From the const service you could likely fire a runnable/runnablemethod on\n> whatever thread you prefer.\n\nI changed this to dispatch a runnable on the main thread.  The runnable updates the stats and saves them to preferences.  (Previously I had a runnable that only saved them to preferences, so now I'm doing both things in the runnable.)  However, I'm still setting a member variable in this method, mWeakUpdateFrecencyStatsRunnable.  I think that should be OK?  The only thing calling this method is whatever thread the database is using when the trigger runs.\n\nIf that's a problem, then I could forget about trying to batch frecency stats updates into a single runnable and just dispatch a new runnable per frecency change.", "author": "adw@mozilla.com", "id": 13113018, "time": "2018-03-08T01:26:31Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #141)\n> (In reply to Marco Bonardo [::mak] from comment #124)\n> > ::: toolkit/components/places/SQLFunctions.cpp:1329\n> > (Diff revision 1)\n> > > +    int32_t oldFrecency = aArgs->AsInt32(1);\n> > > +    int32_t newFrecency = aArgs->AsInt32(2);\n> > > +\n> > > +    nsNavHistory* navHistory = nsNavHistory::GetHistoryService();\n> > > +    NS_ENSURE_STATE(navHistory);\n> > > +    navHistory->UpdateFrecencyStats(placeID, oldFrecency, newFrecency);\n> > \n> > I'm not 100% sure this is thread-safe, because the history service is not we\n> > have the const history service to be used off the main thread.\n> > From the const service you could likely fire a runnable/runnablemethod on\n> > whatever thread you prefer.\n> \n> I changed this to dispatch a runnable on the main thread.  The runnable\n> updates the stats and saves them to preferences.  (Previously I had a\n> runnable that only saved them to preferences, so now I'm doing both things\n> in the runnable.)  However, I'm still setting a member variable in this\n> method, mWeakUpdateFrecencyStatsRunnable.  I think that should be OK?  The\n> only thing calling this method is whatever thread the database is using when\n> the trigger runs.\n\nI thought about this more and remembered why I did it like that originally.  The member variables that are updated are all atomic, so there's no danger of their being individually not thread safe.  The only thread safety issue is reading the stats on the main thread while the individual member variables that are used to compute those stats are being written on the connection thread.  But that's fine IMO -- a stat's numeric value may be slightly off when the connection thread is updating the members, and that's not really a problem.  What do you think?", "author": "adw@mozilla.com", "id": 13114457, "time": "2018-03-08T17:10:26Z"}, {"text": "We are still missing a measure of the DB growth with the changes, to see if we need to adapt expiration.\nI'll proceed with the review in the meanwhile.\n\n(In reply to Drew Willcoxon :adw from comment #142)\n> I thought about this more and remembered why I did it like that originally. \n> The member variables that are updated are all atomic, so there's no danger\n> of their being individually not thread safe.  The only thread safety issue\n> is reading the stats on the main thread while the individual member\n> variables that are used to compute those stats are being written on the\n> connection thread.  But that's fine IMO -- a stat's numeric value may be\n> slightly off when the connection thread is updating the members, and that's\n> not really a problem.  What do you think?\n\nApart from the variables (solvable with atomics), there are 2 risks here:\n1. the nsNavHistory destructor should not run out of the main-thread. It's possible the service manager keeps it alive long enough to avoid the problem... it's worth at least to have a MOZ_ASSERT checking mainthread in the destructor. Otherwise we should kungfudeathgrip it and ProxyFinalize.\n2. In the future someone could change the UpdateFrecencyStats code in a non thread-safe manner. For this we could add a big warning into it.", "author": "mak77@bonardo.net", "id": 13130975, "time": "2018-03-15T15:29:32Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #141)\n> I commented earlier that I intentionally didn't handle these specially --\n> that's still true, but I went looked at the patch to check how such URLs\n> would be handled, and to make sure my parsing code is OK.  They'll end up\n> getting treated as separate origins.  So if you have http://example.com/,\n> http://user@example.com/, and http://user:pass@example.com/, then you will\n> end up with three different origins: http://example.com,\n> http://user@example.com, and http://user:pass@example.com.\n\nthere is a security/privacy problem that sooner or later we'll hit, bug 130327.\nThe fact we currently store user and password in history is a bug, and we'll now forward that bug to this new table.\nThe problem complicates if we then allow to store bookmarks with credentials, but not history, since then we'll have only to merge some of these entries.\nI think the main concern is how expensive it will be in the future to identify and remove entries with credentials that are not bookmarks, but likely it's the same cost as removing them from moz_places. Thus, I suppose we can leave this problem to the future.", "author": "mak77@bonardo.net", "id": 13130997, "time": "2018-03-15T15:37:16Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review233914\n\n::: toolkit/components/places/Database.cpp\n(Diff revision 27)\n> -  rv = mMainConn->CreateAsyncStatement(NS_LITERAL_CSTRING(\n> -    \"UPDATE moz_hosts \"\n> -    \"SET prefix = (\" HOSTS_PREFIX_PRIORITY_FRAGMENT \") \"\n> -    \"WHERE host IN (SELECT host FROM moz_migrate_v32_temp) \"\n> -  ), getter_AddRefs(updateHostsStmt));\n> -  NS_ENSURE_SUCCESS(rv, rv);\n\nFrom what I got you're leaving moz_hosts as is for now, just emptying it, thus this change doesn't seem necessary. and anyway a db that is upgraded to v32 would have a normal moz_hosts table.\n\n::: toolkit/components/places/UnifiedComplete.js:716\n(Diff revision 27)\n> - * @param spec\n> - *        The text to modify.\n> - * @return the modified spec.\n> - */\n> -function stripPrefix(spec) {\n> -  [\"http://\", \"https://\", \"ftp://\"].some(scheme => {\n> + * @param  str\n> + *         The possible URL to strip.\n> + * @return If `str` is a URL, then [prefix, remainder].  Otherwise, [\"\", str].\n> + */\n> +function stripPrefix(str) {\n> +  let match = /^[a-zA-Z]+:(?:\\/\\/)?/.exec(str);\n\nlikely can memoize this regex too\n\n::: toolkit/components/places/UnifiedComplete.js:2302\n(Diff revision 27)\n>     * @return an array consisting of the correctly optimized query to search the\n>     *         database with and an object containing the params to bound.\n>     */\n>    get _urlQuery() {\n> -    // We expect this to be a full URL, not just a host. We want to extract the\n> -    // host and use that as a guess for whether we'll get a result from a URL\n> +    // Assuming the search string is a URL, get the hostname, the part of the\n> +    // search string up to either the path slash or the port colon.\n\nthis comment could be a bit clearer\n\n::: toolkit/components/places/UnifiedComplete.js:2313\n(Diff revision 27)\n> -                      .substring(this._strippedPrefix.length, pathIndex)\n> -                      .toLowerCase().split(\"\").reverse().join(\"\") + \".\";\n> -    let searchString = stripPrefix(\n> -      this._trimmedOriginalSearchString.slice(0, pathIndex).toLowerCase() +\n> -      this._trimmedOriginalSearchString.slice(pathIndex)\n> -    );\n> +      return [null, null];\n> +    }\n> +\n> +    let bookmarked =\n> +      this.hasBehavior(\"bookmark\") &&\n> +      !this.hasBehavior(\"history\");\n\nthis can take less space than 3 lines, and likely can be moved below before its use\n\n::: toolkit/components/places/UnifiedComplete.js:2348\n(Diff revision 27)\n> +      query.push(SQL_URL_BOOKMARKED_QUERY);\n> +    } else {\n> +      query.push(SQL_URL_QUERY);\n>      }\n>  \n> -    query.push({\n> +    query.push(opts);\n\nlooks like you could rewrite this more compact using early returns:\n\nif (this._strippedPrefix) {\n  opts.prefix = this._strippedPrefix;\n  if (bookmarked) {\n    return [SQL_URL_PREFIX_BOOKMARKED_QUERY, opts];\n  }\n  return [SQL_URL_PREFIX_QUERY, opts];\n}\nif (bookmarked) {\n  return [...\n}\nreturn [...\n\nThe same can be done in get _originQuery\n\n::: toolkit/components/places/nsPlacesTables.h:178\n(Diff revision 27)\n> +  \"CREATE TABLE moz_autofill_origins ( \" \\\n> +    \"origin_id INTEGER PRIMARY KEY REFERENCES moz_origins(id) ON DELETE CASCADE, \" \\\n> +    \"prefix TEXT NOT NULL, \" \\\n> +    \"host TEXT NOT NULL, \" \\\n> +    \"frecency INTEGER NOT NULL \" \\\n> +  \")\" \\\n\nOk, so as I said on IRC, I'm confused by the schema.\n\nIt looks like moz_autofill_origins and moz_origins point at the same information, one normalized one denormalized.\nLike it is each of prefix and host are repeated 4 times in the db file (1 data + 1 index per table). likely not a big deal for prefix, but host is a bit larger.\n\nIf effectively the cardinality of moz_autofill_origins is the same as moz_origins, the normalization is not saving anything, since then we also denormalize. At this point it's better to take the pill and accept we need the denormalized table.\nThough, we could still normalize prefix, it will be a very small table (I think?) and Sqlite should not suffer much from that joining.", "author": "mak77@bonardo.net", "id": 13131508, "time": "2018-03-15T18:09:59Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nhttps://reviewboard.mozilla.org/r/217974/#review233974\n\n::: toolkit/components/places/Database.h:22\n(Diff revision 3)\n>  #include \"Shutdown.h\"\n>  #include \"nsCategoryCache.h\"\n>  \n>  // This is the schema version. Update it at any schema change and add a\n>  // corresponding migrateVxx method below.\n> -#define DATABASE_SCHEMA_VERSION 43\n> +#define DATABASE_SCHEMA_VERSION 44\n\nthis bitrotted a couple times, so now we are at version 46. Sorry.\nI don't know of other imminent schema changes...\n\n::: toolkit/components/places/Database.cpp\n(Diff revision 3)\n>    NS_ENSURE_SUCCESS(rv, rv);\n>  \n>    mozIStorageBaseStatement *stmts[] = {\n>      expireOrphansStmt,\n>      deleteHostsStmt,\n> -    updateHostsStmt,\n\nprobably should not touch this, it doesn't matter, but in any case v32 operates on old dbs that should have no problems with moz_host\n\n::: toolkit/components/places/Database.cpp:1958\n(Diff revision 3)\n>  nsresult\n> +Database::MigrateV44Up() {\n> +  MOZ_ASSERT(NS_IsMainThread());\n> +\n> +  nsresult rv;\n> +  nsCOMPtr<mozIStorageStatement> stmt;\n\nWe need a guessed measure of the time for this migration on a mechanical disk... do you have a way to measure that with your personal profile?\nJust because if it's extremely slow we may need to act in chunks or asynchronously)\n\n::: toolkit/components/places/Database.cpp:1968\n(Diff revision 3)\n> +  ), getter_AddRefs(stmt));\n> +  if (NS_FAILED(rv)) {\n> +    rv = mMainConn->ExecuteSimpleSQL(CREATE_MOZ_ORIGIN_PREFIXES);\n> +    NS_ENSURE_SUCCESS(rv, rv);\n> +    rv = mMainConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\n> +      \"INSERT OR IGNORE INTO moz_origin_prefixes (prefix) \" \\\n\nOK, this won't be funny. the problem is that a user can upgrade to this scheme, then downgrade (because the browser crashes on startup or has graphical problems), use the old version for a while, then upgrade again...\nThat means it's true the migration should not recreate the table, but it will regardless have to add entries that the old version didn't add.\n\nFwiw, you could just use origin_id to tell both if origin_id and tables must be created... In any case data addition has to happen.", "author": "mak77@bonardo.net", "id": 13131599, "time": "2018-03-15T18:32:44Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nhttps://reviewboard.mozilla.org/r/217980/#review234102\n\n::: toolkit/components/places/SQLFunctions.cpp:1329\n(Diff revision 3)\n> +    uint32_t numArgs;\n> +    nsresult rv = aArgs->GetNumEntries(&numArgs);\n> +    NS_ENSURE_SUCCESS(rv, rv);\n> +    MOZ_ASSERT(numArgs == 3);\n> +\n> +    int64_t placeID = aArgs->AsInt64(0);\n\nnit: let's use the usual camelCase even in cpp, old code did it differently but it's unimportant.\n\n::: toolkit/components/places/UnifiedComplete.js:2036\n(Diff revision 3)\n>  \n>    _addAutofillMatch(autofilledValue, finalCompleteValue, frecency, extraStyles = []) {\n> +    let threshold =\n> +      PlacesUtils.history.frecencyMean +\n> +      PlacesUtils.history.frecencyStandardDeviation;\n> +    if (frecency < threshold) {\n\nIs there a reason to not filter on frecency at the query level?\n\n::: toolkit/components/places/nsNavHistory.h:504\n(Diff revision 3)\n> +   * @param  aOldFrecency\n> +   *         The old value of the frecency.\n> +   * @param  aNewFrecency\n> +   *         The new value of the frecency.\n> +   */\n> +  void UpdateFrecencyStats(int64_t placeID,\n\nnit: ditto on camelCase\n\n::: toolkit/components/places/nsNavHistory.cpp:276\n(Diff revision 3)\n>  // nsNavBookmarks::kGetChildrenIndex_Position = 19;\n>  // nsNavBookmarks::kGetChildrenIndex_Type = 20;\n>  // nsNavBookmarks::kGetChildrenIndex_PlaceID = 21;\n>  \n> -PLACES_FACTORY_SINGLETON_IMPLEMENTATION(nsNavHistory, gHistoryService)\n> +static uint64_t\n> +GetUInt64Pref(const char *prefName)\n\nConsidered this complication, is it worth to store these in prefs, rather than just have defines? Do you think we may want to tweak the values through Shield?\n\n::: toolkit/components/places/nsNavHistory.cpp:666\n(Diff revision 3)\n>                                                           aGUID, aHidden,\n>                                                           aLastVisitDate);\n>    (void)NS_DispatchToMainThread(notif);\n>  }\n>  \n> +class PlacesUpdateFrecencyStatsRunnable : public Runnable\n\nI suspect using NewRunnableMethod would simplify the code, you wouldn't need a class and a weakptr, and you can pass arguments to the runnable\n\n::: toolkit/components/places/nsNavHistory.cpp:690\n(Diff revision 3)\n> +void\n> +nsNavHistory::UpdateFrecencyStats(int64_t placeID,\n> +                                  int32_t aOldFrecency,\n> +                                  int32_t aNewFrecency)\n> +{\n> +  if (placeID < 0) {\n\nshould we also MOZ_ASSERT? Is this something that can happen in valid use cases?\n\n::: toolkit/components/places/nsNavHistory.cpp:702\n(Diff revision 3)\n> +  }\n> +  FrecencyStatsPair pair = {\n> +    .oldFrecency = aOldFrecency,\n> +    .newFrecency = aNewFrecency\n> +  };\n> +  mFrecencyStatsPairs.AppendElement(pair);\n\nin any case, it looks like these should be set on the runnable, not on the history object? And at that point you could use ConstHistoryService, I suppose.", "author": "mak77@bonardo.net", "id": 13132974, "time": "2018-03-16T09:14:11Z"}, {"text": "I'll skip reviewing the tests for now, until we are ok with the previous parts.", "author": "mak77@bonardo.net", "id": 13133345, "time": "2018-03-16T12:45:22Z"}, {"text": "Just a status update -- working on addressing Marco's comments plus making some slight improvements.  I'd post a WIP but I don't want to retrigger review requests.  I should be able to request review again in a day or two.", "author": "adw@mozilla.com", "id": 13185013, "time": "2018-04-06T00:21:34Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #146)\n> ::: toolkit/components/places/Database.cpp:1958\n> (Diff revision 3)\n> >  nsresult\n> > +Database::MigrateV44Up() {\n> > +  MOZ_ASSERT(NS_IsMainThread());\n> > +\n> > +  nsresult rv;\n> > +  nsCOMPtr<mozIStorageStatement> stmt;\n> \n> We need a guessed measure of the time for this migration on a mechanical\n> disk... do you have a way to measure that with your personal profile?\n> Just because if it's extremely slow we may need to act in chunks or\n> asynchronously)\n\nAre we set up to handle async or chunked migration steps?  It doesn't look like it.  Have we ever done that before?  (Not arguing we should/shouldn't do this, just wondering how we would do it.)  Also, there are existing migration functions that look O(COUNT(moz_places)) -- at least MigrateV40Up, MigrateV37Up, MigrateV33Up.  Is there something different about this migration that warrants async/chunks beyond those older migrations?", "author": "adw@mozilla.com", "id": 13193702, "time": "2018-04-09T23:54:56Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #150)\n> Are we set up to handle async or chunked migration steps?  It doesn't look\n> like it.  Have we ever done that before? \n\nFavicons migration in 55 did async and chunked payloads migration. On the other side, the favicons data is far less critical.\n\n> Is there something different about this\n> migration that warrants async/chunks beyond those older migrations?\n\nThat's something to be measured, when I wrote favicons migration I tested it on my profile and noticed it was creating a 200MB WAL journal for a 100MB db, and then trying to merge it, it was really expensive and slow. Chunking it made the wal stay around 20MB and all the process completed sooner.\nIt's really just matter of measuring the time and I/O involved, and if it's acceptable just do a usual migration, otherwise it may need some ad-hoc trick.", "author": "mak77@bonardo.net", "id": 13194184, "time": "2018-04-10T08:02:40Z"}, {"text": "*** Bug 1104752 has been marked as a duplicate of this bug. ***", "author": "mak77@bonardo.net", "id": 13204854, "time": "2018-04-13T19:12:23Z"}, {"text": "I took some measurements on a 2009 Core 2 Duo Mac Mini with a 5400 rpm disk running Windows 10.  I used about:telemetry for data, specifically the slow SQL info, browser hangs info, and firstLoadURI in simple measurements.\n\nWithout my patch's migration, firstLoadURI is ~9s (this is a slow machine, everything is slow on it), there's generally no slow SQL, and there's no reported browser hangs.  I do get slow SQL on apparently the second run after a new places.sqlite -- mostly for migrating favicons?  e.g.:\n\n4913ms SELECT id FROM moz_bookmarks WHERE guid = :guid\n1940ms SELECT id, expire_ms, data, width, root FROM moz_icons WHERE fixed_icon_url_hash = hash()...\n5880ms PRAGMA cache_size = -2048\n\nAll off the main thread.  I'm including it here to maybe give a sense of how fast that takes on this machine.\n\nWith my patch's migration, firstLoadURI is doubled, ~18s.  There's a \"10 sec\" reported browser hang.  There's several slow SQL statements all related to the migration, e.g.:\n\n3383ms UPDATE moz_places SET origin_id = ...\n 833ms INSERT OR IGNORE INTO moz_origins ...\n 290ms CREATE INDEX IF NOT EXISTS moz_places_originidindex...\n1127ms UPDATE moz_origins SET frecency = ...\n3767ms COMMIT\n  75ms PRAGMA cache_size = -2048\n\nAll on the main thread of course.\n\nSo it seems like even though this is a slow machine and the baseline is slow, there's a non-neglible perf impact compared to the baseline, and I should do this migration off the main thread.  What do you think?", "author": "adw@mozilla.com", "id": 13220354, "time": "2018-04-20T01:24:41Z"}, {"text": "My places.sqlite before migration:\n* 52.4 MiB\n* select count(*) from moz_places => 114820\n\nAfter:\n* 57.7 MiB\n* select count(*) from moz_origins => 8128\n* No shm or wal files", "author": "adw@mozilla.com", "id": 13220427, "time": "2018-04-20T02:54:30Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #154)\n> My places.sqlite before migration:\n> * 52.4 MiB\n> After:\n> * 57.7 MiB\n\nit's about a 10% increase, that means we should probably increase DATABASE_MAX_SIZE to 75MB\nWe'll recover some space in the future when we fix bug 1402890", "author": "mak77@bonardo.net", "id": 13221765, "time": "2018-04-20T16:00:05Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #153)\n> Without my patch's migration, firstLoadURI is ~9s (this is a slow machine,\n> everything is slow on it), there's generally no slow SQL, and there's no\n> reported browser hangs.  I do get slow SQL on apparently the second run\n> after a new places.sqlite -- mostly for migrating favicons?  e.g.:\n\nHm favicon are only migrated updating from FF<55 to FF 55 or newer. Am I misunderstanding?\n\n> 4913ms SELECT id FROM moz_bookmarks WHERE guid = :guid\n> 1940ms SELECT id, expire_ms, data, width, root FROM moz_icons WHERE\n> fixed_icon_url_hash = hash()...\n> 5880ms PRAGMA cache_size = -2048\n\nAll of these look far worse than my worst expectations... Was this on an optimized build?\nDebug builds are crazily slower in Sqlite because of SQLITE_DEBUG (not even Sqlite devs suggest using it for how slow it is).\n\n> 3383ms UPDATE moz_places SET origin_id = ...\n>  833ms INSERT OR IGNORE INTO moz_origins ...\n>  290ms CREATE INDEX IF NOT EXISTS moz_places_originidindex...\n> 1127ms UPDATE moz_origins SET frecency = ...\n> 3767ms COMMIT\n>   75ms PRAGMA cache_size = -2048\n\nIf we leave alone the absolute value (18s is a bit insane) it doesn't look too bad compared to a normal startup.\nMaybe there's some space to optimize the first query yet, we can't do much about the final commit, it's an fsync, the system just has horrible I/O.\n\nAny idea if the WAL journal grew much during these executions? That would tell us if chunking may help.\n\n> So it seems like even though this is a slow machine and the baseline is\n> slow, there's a non-neglible perf impact compared to the baseline, and I\n> should do this migration off the main thread.  What do you think?\n\nThe problem with the async migration is that it takes more (Far more) in wall clock time, than doing the work synchronously. That means the user is more likely to interrupt it in the middle. For favicons it was less of a problem, because it's favicons, if some are missing nothing critical breaks.\nSo, I'd first check if there's any space for optimizations in the migration queries, and whether chunking queries helps building a smaller WAL (Cheaper to merge).\nIf we have to go the async path, we'll have interesting half-migration-done issues to think about (we'll have to do something liek setting a pref and continuing migration on next start until we're sure it's complete and so on)...", "author": "mak77@bonardo.net", "id": 13221845, "time": "2018-04-20T16:24:11Z"}, {"text": "(In reply to Marco Bonardo [::mak] (Away 23 Apr - 1 May) from comment #156)\n> Hm favicon are only migrated updating from FF<55 to FF 55 or newer. Am I\n> misunderstanding?\n\nNo, maybe it was expiration or something else, but those statements were reported in the slow SQL.  I didn't investigate.\n\n> > 4913ms SELECT id FROM moz_bookmarks WHERE guid = :guid\n> > 1940ms SELECT id, expire_ms, data, width, root FROM moz_icons WHERE\n> > fixed_icon_url_hash = hash()...\n> > 5880ms PRAGMA cache_size = -2048\n> \n> All of these look far worse than my worst expectations... Was this on an\n> optimized build?\n\nYes, but again everything on this machine is very slow\n\n> Any idea if the WAL journal grew much during these executions? That would\n> tell us if chunking may help.\n\nThere was no wal file after I migrated and quit Firefox.  Is there wal journaling in the main places.sqlite itself and if so how can I check?\n\n> If we have to go the async path, we'll have interesting half-migration-done\n> issues to think about (we'll have to do something liek setting a pref and\n> continuing migration on next start until we're sure it's complete and so\n> on)...\n\nYeah.  Maybe in this case it's not so awful because (1) we're only populating this table for autofill, which isn't critical, (2) the table can be populated using info that's already in the database, and (3) populating individual rows is idempotent -- there's no harm in re-populating the same moz_places more than once.", "author": "adw@mozilla.com", "id": 13222036, "time": "2018-04-20T17:35:35Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #157)\n> > Any idea if the WAL journal grew much during these executions? That would\n> > tell us if chunking may help.\n> \n> There was no wal file after I migrated and quit Firefox.  Is there wal\n> journaling in the main places.sqlite itself and if so how can I check?\n\nThe wal exists during operations and is merged on shutdown (thus disappears at that point), I don't have a very scientific way to track it, usually you can just observe its size changing in the file manager while the operation is ongoing. I'm sure there are better ways but didn't investigate them.\n\n> Yeah.  Maybe in this case it's not so awful because (1) we're only\n> populating this table for autofill, which isn't critical\n\nWell, the address bar functionality is quite important for us. If later we discover the experience is sub par due to an incomplete migration, we'll have to pay that cost regardless.\nIt would also mine our possibility in the future to reuse this data, for example to drop rev_host or drive things caring only about hosts.\n\n, (2) the table can\n> be populated using info that's already in the database, and (3) populating\n> individual rows is idempotent -- there's no harm in re-populating the same\n> moz_places more than once.\n\nTrue, but still there should be a point in time where we can call this data \"reliable\" and \"coherent\".\nQuestion, since I don't recall, is frecency of each host completely recalculated on every visit to one of its pages, or just incrementally calculated? If it's the former maybe you're right, not all the data is critical. Would it be cheaper in such a case to just create the entries WITHOUT frecency synchronously, and just  populate their frecency asynchronously? IF so, we would have coherent origins data, and any missing frecency data would be filled with use", "author": "mak77@bonardo.net", "id": 13222402, "time": "2018-04-20T20:09:34Z"}, {"text": "(In reply to Marco Bonardo [::mak] (Away 23 Apr - 1 May) from comment #158)\n> The wal exists during operations and is merged on shutdown (thus disappears\n> at that point), I don't have a very scientific way to track it, usually you\n> can just observe its size changing in the file manager while the operation\n> is ongoing. I'm sure there are better ways but didn't investigate them.\n\nHmm, I can try to look at this, but it seems much less important if it's just temporary IMO.\n\n> Question, since I don't recall, is frecency of each host completely\n> recalculated on every visit to one of its pages, or just incrementally\n> calculated? If it's the former maybe you're right, not all the data is\n> critical.\n\nYes, recalculated on every visit.  The SQL in the trigger is:\n\n>    \"UPDATE moz_origins \" \\\n>    \"SET frecency = ( \" \\\n>      \"SELECT MAX(frecency) \" \\\n>      \"FROM moz_places \" \\\n>      \"WHERE moz_places.origin_id = moz_origins.id \" \\\n>    \") \" \\\n>    \"WHERE id = NEW.origin_id; \" \\\n\n> Would it be cheaper in such a case to just create the entries\n> WITHOUT frecency synchronously, and just  populate their frecency\n> asynchronously? IF so, we would have coherent origins data, and any missing\n> frecency data would be filled with use\n\nIt would be cheaper since it would be removing a (sync) step from the migration, but if we're populating frecency asyncly, I'm not sure why we wouldn't just populate/migrate everything asyncly.  Autofill needs frecencies to work.  And it seems doable to come up with a test/predicate for determining whether the migration has finished.\n\nMaybe we could keep moz_hosts and use basically the current autofill implementation while the async migration is happening.  Once the migration finishes, switch to moz_origins and the new implementation/queries.  Then at least autofill would keep working immediately on upgrade.  But at some point the queries/algorithm would change, which would maybe be jarring for the user.  That seems kind of overkill though IMO.  The async migration would only take a matter of seconds on the slowest machine, wouldn't it?\n\nHmm, we could do the above, and when the migration finishes, mark it as done.  Then on the next startup, we would see that the migration has been marked done and we would switch to it from that point on.  Instead of switching the implementation/queries while the app is running.  That kind of seems like an all-around win except for having to keep two implementations/queries around, but maybe that's the smallest and best price to pay.", "author": "adw@mozilla.com", "id": 13222984, "time": "2018-04-21T00:47:27Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #159)\n> Hmm, I can try to look at this, but it seems much less important if it's\n> just temporary IMO.\n\nSo, I mentioned it because a large WAL is exponentially more expensive than a small WAL to merge. With favicons I discovered chunking was faster because otherwise the WAL was growing up to 100MB (bigger than the db itself!) and merging it was taking a huge I/O effort. By chunking the WAL never went over 20MB.\n\n> It would be cheaper since it would be removing a (sync) step from the\n> migration, but if we're populating frecency asyncly, I'm not sure why we\n> wouldn't just populate/migrate everything asyncly.\n\nBecause I'd like to have coherence of origins in relation to moz_places, rather than not knowing if given a place we have an entry in origins or not.\n\n> Maybe we could keep moz_hosts and use basically the current autofill\n> implementation while the async migration is happening.  Once the migration\n> finishes, switch to moz_origins and the new implementation/queries.\n\nIt sounds complex off-hand. More complex than migrating origins synchronously and calculating frecency async.\n\n> user.  That seems kind of overkill though IMO.  The async migration would\n> only take a matter of seconds on the slowest machine, wouldn't it?\n\nyou measured the sync one at 9s, async is slower, could take 3 or 4 times more, depending on system load.\n\n> That kind of\n> seems like an all-around win except for having to keep two\n> implementations/queries around, but maybe that's the smallest and best price\n> to pay.\n\nit's a possibility but has downsides as well:\n1. it's more complex because we must bring on 2 implementations\n2. we'd have no clear data to know when it will be safe to remove the old code\n3. while we keep both data, the db will be larger and will expire more history\n\nPersonally I'd do this (then you have a closer view of all the things here, and may better evaluate):\n1. on sync migration create all the origins with frecency -1\n2. set a bool pref like \"mustMigrateOriginsFrecency\"\n3. start asynchronously calculating the frecencies in chunks, when done clear the pref\n4. on startup, if the pref is set, goto 3", "author": "mak77@bonardo.net", "id": 13223408, "time": "2018-04-21T13:01:46Z"}, {"text": "(In reply to Marco Bonardo [::mak] (Away 23 Apr - 1 May) from comment #160)\n> Personally I'd do this\n\nOK, I'll give that a shot.", "author": "adw@mozilla.com", "id": 13227544, "time": "2018-04-23T19:39:44Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/27-28/", "author": "adw@mozilla.com", "id": 13231392, "time": "2018-04-24T23:57:26Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217974/diff/3-4/", "author": "adw@mozilla.com", "id": 13231393, "time": "2018-04-24T23:57:26Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217976/diff/3-4/", "author": "adw@mozilla.com", "id": 13231394, "time": "2018-04-24T23:57:26Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217978/diff/3-4/", "author": "adw@mozilla.com", "id": 13231395, "time": "2018-04-24T23:57:26Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217980/diff/3-4/", "author": "adw@mozilla.com", "id": 13231396, "time": "2018-04-24T23:57:26Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217982/diff/3-4/", "author": "adw@mozilla.com", "id": 13231397, "time": "2018-04-24T23:57:26Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217984/diff/3-4/", "author": "adw@mozilla.com", "id": 13231398, "time": "2018-04-24T23:57:26Z"}, {"text": "[I don't expect/want you to look at these while you're away this week, but they're ready for review again so I'm posting them now.]\n\nThe major changes:\n\n* moz_origins is the only new table.  It's basically what moz_autofill_origins was in the previous patches.\n\n* Substantial changes to the SQLFunctions.cpp part of part 1.  Now using const_char_iterator since it seems const_iterator is deprecated.  Also using narrow UTF-8 strings instead of wide strings.  Other related changes/improvements.\n\n* Migration liked we discussed: moz_origins and moz_places.origin_id are populated syncly on migration.  A pref is set on migration, and Database::InitSchema starts chunked async migration of moz_origins.frecency when the pref is set.  The pref is unset when that migration finishes.  I modeled this part off of your favicon migration runnable.\n\nI tested again with these patches on my Windows machine, and the perf on startup was the same, which is expected.  I also saw that during startup/migration, a wal file appeared.  It grew to 27 mb (half the size of the db).  After migration finished, the wal file size went down to 4 mb, but a couple of times it actually increased to 32 mb.  On subsequent runs/startups, the wal file was created again but it was empty.  The wal file is removed on app quit in all cases.\n\n(In reply to Marco Bonardo [::mak] from comment #143)\n> Apart from the variables (solvable with atomics), there are 2 risks here:\n\nYes, I see.  I changed this so that the SQL function calls nsNavHistory::GetConstHistoryService()->DispatchFrecencyStatsUpdate(), which dispatches a runnable to the main thread that calls nsNavHistory->UpdateFrecencyStats().  So I got rid of the batching, and now we dispatch a runnable per frecency change.  Note that we don't update frecency stats while frecency decay is happening (because the SQL trigger checks for that case).\n\n(In reply to Marco Bonardo [::mak] from comment #144)\n> The fact we currently store user and password in history is a bug, and we'll\n> now forward that bug to this new table.\n\nI modified the part-1 patch to ignore user:pass (which RFC 3986 calls \"userinfo\").  So we still may have them in moz_places, but not in this new moz_origins.  I also modified the UnifiedComplete.js part of part 0 to strip user:pass from search strings.\n\n(In reply to Marco Bonardo [::mak] from comment #145)\n> Comment on attachment 8930304\n> Bug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n> \n> https://reviewboard.mozilla.org/r/201438/#review233914\n> \n> ::: toolkit/components/places/Database.cpp\n> (Diff revision 27)\n> > -  rv = mMainConn->CreateAsyncStatement(NS_LITERAL_CSTRING(\n> > -    \"UPDATE moz_hosts \"\n> > -    \"SET prefix = (\" HOSTS_PREFIX_PRIORITY_FRAGMENT \") \"\n> > -    \"WHERE host IN (SELECT host FROM moz_migrate_v32_temp) \"\n> > -  ), getter_AddRefs(updateHostsStmt));\n> > -  NS_ENSURE_SUCCESS(rv, rv);\n> \n> From what I got you're leaving moz_hosts as is for now, just emptying it,\n> thus this change doesn't seem necessary. and anyway a db that is upgraded to\n> v32 would have a normal moz_hosts table.\n\nThe reason I removed this is because I removed the HOSTS_PREFIX_PRIORITY_FRAGMENT #define from nsPlacesTriggers.h, since it's not needed anymore.  So I added it back directly to this migration function.\n\n> ::: toolkit/components/places/UnifiedComplete.js:716\n> (Diff revision 27)\n> > - * @param spec\n> > - *        The text to modify.\n> > - * @return the modified spec.\n> > - */\n> > -function stripPrefix(spec) {\n> > -  [\"http://\", \"https://\", \"ftp://\"].some(scheme => {\n> > + * @param  str\n> > + *         The possible URL to strip.\n> > + * @return If `str` is a URL, then [prefix, remainder].  Otherwise, [\"\", str].\n> > + */\n> > +function stripPrefix(str) {\n> > +  let match = /^[a-zA-Z]+:(?:\\/\\/)?/.exec(str);\n> \n> likely can memoize this regex too\n\nDone, added `const REGEXP_STRIP_PREFIX`\n\n> ::: toolkit/components/places/UnifiedComplete.js:2302\n> (Diff revision 27)\n> >     * @return an array consisting of the correctly optimized query to search the\n> >     *         database with and an object containing the params to bound.\n> >     */\n> >    get _urlQuery() {\n> > -    // We expect this to be a full URL, not just a host. We want to extract the\n> > -    // host and use that as a guess for whether we'll get a result from a URL\n> > +    // Assuming the search string is a URL, get the hostname, the part of the\n> > +    // search string up to either the path slash or the port colon.\n> \n> this comment could be a bit clearer\n\nFixed\n\n> ::: toolkit/components/places/UnifiedComplete.js:2313\n> (Diff revision 27)\n> > -                      .substring(this._strippedPrefix.length, pathIndex)\n> > -                      .toLowerCase().split(\"\").reverse().join(\"\") + \".\";\n> > -    let searchString = stripPrefix(\n> > -      this._trimmedOriginalSearchString.slice(0, pathIndex).toLowerCase() +\n> > -      this._trimmedOriginalSearchString.slice(pathIndex)\n> > -    );\n> > +      return [null, null];\n> > +    }\n> > +\n> > +    let bookmarked =\n> > +      this.hasBehavior(\"bookmark\") &&\n> > +      !this.hasBehavior(\"history\");\n> \n> this can take less space than 3 lines, and likely can be moved below before\n> its use\n\nFixed\n\n> ::: toolkit/components/places/UnifiedComplete.js:2348\n> (Diff revision 27)\n> > +      query.push(SQL_URL_BOOKMARKED_QUERY);\n> > +    } else {\n> > +      query.push(SQL_URL_QUERY);\n> >      }\n> >  \n> > -    query.push({\n> > +    query.push(opts);\n> \n> looks like you could rewrite this more compact using early returns:\n> \n> if (this._strippedPrefix) {\n>   opts.prefix = this._strippedPrefix;\n>   if (bookmarked) {\n>     return [SQL_URL_PREFIX_BOOKMARKED_QUERY, opts];\n>   }\n>   return [SQL_URL_PREFIX_QUERY, opts];\n> }\n> if (bookmarked) {\n>   return [...\n> }\n> return [...\n> \n> The same can be done in get _originQuery\n\nFixed\n\n> ::: toolkit/components/places/nsPlacesTables.h:178\n> (Diff revision 27)\n> > +  \"CREATE TABLE moz_autofill_origins ( \" \\\n> > +    \"origin_id INTEGER PRIMARY KEY REFERENCES moz_origins(id) ON DELETE CASCADE, \" \\\n> > +    \"prefix TEXT NOT NULL, \" \\\n> > +    \"host TEXT NOT NULL, \" \\\n> > +    \"frecency INTEGER NOT NULL \" \\\n> > +  \")\" \\\n> \n> Ok, so as I said on IRC, I'm confused by the schema.\n> \n> It looks like moz_autofill_origins and moz_origins point at the same\n> information, one normalized one denormalized.\n> Like it is each of prefix and host are repeated 4 times in the db file (1\n> data + 1 index per table). likely not a big deal for prefix, but host is a\n> bit larger.\n> \n> If effectively the cardinality of moz_autofill_origins is the same as\n> moz_origins, the normalization is not saving anything, since then we also\n> denormalize. At this point it's better to take the pill and accept we need\n> the denormalized table.\n> Though, we could still normalize prefix, it will be a very small table (I\n> think?) and Sqlite should not suffer much from that joining.\n\nI removed all the new tables except for moz_autofill_origins, and I renamed it moz_origins.  So there's only the one denormalized table now.  Thanks for your feedback.\n\n(In reply to Marco Bonardo [::mak] from comment #146)\n> Comment on attachment 8948567\n> Bug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n> \n> https://reviewboard.mozilla.org/r/217974/#review233974\n> \n> ::: toolkit/components/places/Database.h:22\n> (Diff revision 3)\n> >  #include \"Shutdown.h\"\n> >  #include \"nsCategoryCache.h\"\n> >  \n> >  // This is the schema version. Update it at any schema change and add a\n> >  // corresponding migrateVxx method below.\n> > -#define DATABASE_SCHEMA_VERSION 43\n> > +#define DATABASE_SCHEMA_VERSION 44\n> \n> this bitrotted a couple times, so now we are at version 46. Sorry.\n> I don't know of other imminent schema changes...\n\nFixed\n\n> ::: toolkit/components/places/Database.cpp\n> (Diff revision 3)\n> >    NS_ENSURE_SUCCESS(rv, rv);\n> >  \n> >    mozIStorageBaseStatement *stmts[] = {\n> >      expireOrphansStmt,\n> >      deleteHostsStmt,\n> > -    updateHostsStmt,\n> \n> probably should not touch this, it doesn't matter, but in any case v32\n> operates on old dbs that should have no problems with moz_host\n\nFixed -- this was related to the #define removal mentioned above\n\n> ::: toolkit/components/places/Database.cpp:1958\n> (Diff revision 3)\n> >  nsresult\n> > +Database::MigrateV44Up() {\n> > +  MOZ_ASSERT(NS_IsMainThread());\n> > +\n> > +  nsresult rv;\n> > +  nsCOMPtr<mozIStorageStatement> stmt;\n> \n> We need a guessed measure of the time for this migration on a mechanical\n> disk... do you have a way to measure that with your personal profile?\n> Just because if it's extremely slow we may need to act in chunks or\n> asynchronously)\n\nAs we discussed\n\n> ::: toolkit/components/places/Database.cpp:1968\n> (Diff revision 3)\n> > +  ), getter_AddRefs(stmt));\n> > +  if (NS_FAILED(rv)) {\n> > +    rv = mMainConn->ExecuteSimpleSQL(CREATE_MOZ_ORIGIN_PREFIXES);\n> > +    NS_ENSURE_SUCCESS(rv, rv);\n> > +    rv = mMainConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\n> > +      \"INSERT OR IGNORE INTO moz_origin_prefixes (prefix) \" \\\n> \n> OK, this won't be funny. the problem is that a user can upgrade to this\n> scheme, then downgrade (because the browser crashes on startup or has\n> graphical problems), use the old version for a while, then upgrade again...\n> That means it's true the migration should not recreate the table, but it\n> will regardless have to add entries that the old version didn't add.\n\nGood point... I updated this migration function so that the INSERT, UPDATE, and creating the moz_places.origin_id index are always performed.\n\n> Fwiw, you could just use origin_id to tell both if origin_id and tables must\n> be created...\n\nI left this as-is because I think it's better to directly test the thing we need to do/create.  For example, if something happens to the database between the points where the moz_origins table is created and moz_places is altered to add the origin_id column, we shouldn't skip altering moz_places because moz_origins exists (or some similar situation).\n\n(In reply to Marco Bonardo [::mak] from comment #147)\n> Comment on attachment 8948570\n> Bug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n> \n> https://reviewboard.mozilla.org/r/217980/#review234102\n> \n> ::: toolkit/components/places/SQLFunctions.cpp:1329\n> (Diff revision 3)\n> > +    uint32_t numArgs;\n> > +    nsresult rv = aArgs->GetNumEntries(&numArgs);\n> > +    NS_ENSURE_SUCCESS(rv, rv);\n> > +    MOZ_ASSERT(numArgs == 3);\n> > +\n> > +    int64_t placeID = aArgs->AsInt64(0);\n> \n> nit: let's use the usual camelCase even in cpp, old code did it differently\n> but it's unimportant.\n\nFixed\n\n> ::: toolkit/components/places/UnifiedComplete.js:2036\n> (Diff revision 3)\n> >  \n> >    _addAutofillMatch(autofilledValue, finalCompleteValue, frecency, extraStyles = []) {\n> > +    let threshold =\n> > +      PlacesUtils.history.frecencyMean +\n> > +      PlacesUtils.history.frecencyStandardDeviation;\n> > +    if (frecency < threshold) {\n> \n> Is there a reason to not filter on frecency at the query level?\n\nGood point, I added a new :frecencyThreshold param to the origin and URL queries.\n\n> ::: toolkit/components/places/nsNavHistory.h:504\n> (Diff revision 3)\n> > +   * @param  aOldFrecency\n> > +   *         The old value of the frecency.\n> > +   * @param  aNewFrecency\n> > +   *         The new value of the frecency.\n> > +   */\n> > +  void UpdateFrecencyStats(int64_t placeID,\n> \n> nit: ditto on camelCase\n\nFixed\n\n> ::: toolkit/components/places/nsNavHistory.cpp:276\n> (Diff revision 3)\n> >  // nsNavBookmarks::kGetChildrenIndex_Position = 19;\n> >  // nsNavBookmarks::kGetChildrenIndex_Type = 20;\n> >  // nsNavBookmarks::kGetChildrenIndex_PlaceID = 21;\n> >  \n> > -PLACES_FACTORY_SINGLETON_IMPLEMENTATION(nsNavHistory, gHistoryService)\n> > +static uint64_t\n> > +GetUInt64Pref(const char *prefName)\n> \n> Considered this complication, is it worth to store these in prefs, rather\n> than just have defines? Do you think we may want to tweak the values through\n> Shield?\n\nThese values are the frecency stats, and they need to be persisted across app restarts.  (Unless you think we should calculate them on each startup?)\n\n> ::: toolkit/components/places/nsNavHistory.cpp:666\n> (Diff revision 3)\n> >                                                           aGUID, aHidden,\n> >                                                           aLastVisitDate);\n> >    (void)NS_DispatchToMainThread(notif);\n> >  }\n> >  \n> > +class PlacesUpdateFrecencyStatsRunnable : public Runnable\n> \n> I suspect using NewRunnableMethod would simplify the code, you wouldn't need\n> a class and a weakptr, and you can pass arguments to the runnable\n\nNice, thank you!  While I was here, I updated DispatchFrecencyChangedNotification() to use NewRunnableMethod, too.\n\n> ::: toolkit/components/places/nsNavHistory.cpp:690\n> (Diff revision 3)\n> > +void\n> > +nsNavHistory::UpdateFrecencyStats(int64_t placeID,\n> > +                                  int32_t aOldFrecency,\n> > +                                  int32_t aNewFrecency)\n> > +{\n> > +  if (placeID < 0) {\n> \n> should we also MOZ_ASSERT? Is this something that can happen in valid use\n> cases?\n\nI modified the SQL that calls this function to only call it when the ID is >= 0.  And I changed the conditional to a MOZ_ASSERT.\n\nIIRC I saw this on try because it ended up getting called for some moz_place with a -1 ID.  (I think I used to know what that means but I've forgotten.)  And the reason that was a problem was because, for these -1 IDs, they would get called with an old frecency > 0 which triggered the MOZ_ASSERT(mFrecencyStatsCount > 0).\n\n> ::: toolkit/components/places/nsNavHistory.cpp:702\n> (Diff revision 3)\n> > +  }\n> > +  FrecencyStatsPair pair = {\n> > +    .oldFrecency = aOldFrecency,\n> > +    .newFrecency = aNewFrecency\n> > +  };\n> > +  mFrecencyStatsPairs.AppendElement(pair);\n> \n> in any case, it looks like these should be set on the runnable, not on the\n> history object? And at that point you could use ConstHistoryService, I\n> suppose.\n\nFixed, now that I'm using NewRunnableMethod", "author": "adw@mozilla.com", "id": 13231424, "time": "2018-04-25T00:10:11Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=dda0ba2627c0e911cd0e8dbdb61103a5bb98599c", "author": "adw@mozilla.com", "id": 13231436, "time": "2018-04-25T00:15:39Z"}, {"text": "All of your answers make sense, I can't review this now, but I will be on it early next week. Thanks.", "author": "mak77@bonardo.net", "id": 13231785, "time": "2018-04-25T06:54:33Z"}, {"text": "There were some new failures on try.  I've fixed them locally and will update the mozreview once I see that they're gone on try.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=83b87814f66e5f20a30099d2ded74318718a201f", "author": "adw@mozilla.com", "id": 13244840, "time": "2018-04-30T21:45:28Z"}, {"text": "This should do it...\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=d67e7f9a6dba365c93e587fa36d949fb9a1c9ea6", "author": "adw@mozilla.com", "id": 13247087, "time": "2018-05-01T20:38:09Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/28-29/", "author": "adw@mozilla.com", "id": 13247341, "time": "2018-05-01T22:40:03Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217974/diff/4-5/", "author": "adw@mozilla.com", "id": 13247342, "time": "2018-05-01T22:40:03Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217976/diff/4-5/", "author": "adw@mozilla.com", "id": 13247343, "time": "2018-05-01T22:40:03Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217978/diff/4-5/", "author": "adw@mozilla.com", "id": 13247344, "time": "2018-05-01T22:40:03Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217980/diff/4-5/", "author": "adw@mozilla.com", "id": 13247345, "time": "2018-05-01T22:40:03Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217982/diff/4-5/", "author": "adw@mozilla.com", "id": 13247346, "time": "2018-05-01T22:40:03Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217984/diff/4-5/", "author": "adw@mozilla.com", "id": 13247347, "time": "2018-05-01T22:40:03Z"}, {"text": "Changes from the previous mozreview revision:\n\n* Fix latest test failures.\n\n* One failure in particular needs calling out because I had to make a non-trivial code change for it.  browser_preferences_usage.js failed because the frecency stats prefs were accessed too much.  \"Too much\" means > 15 times while the test ran.  The prefs are read only once, on startup, so the problem must be that they are written every time a frecency changes.  So I added back batching of pref writes.  Only the pref writes are batched; changes to the stats member variables still aren't.  I chose to simply write prefs 5 seconds after stats are updated.  i.e., the first time stats are changed, I start a 5-second timer, and all subsequent stats changes within that 5 seconds are batched together and the prefs are written when the 5 seconds elapse.  I don't think we need anything more complex than that.  5 seconds seems reasonable: long enough to batch many quick consecutive changes, short enough to most likely avoid data loss without having to use a shutdown blocker or other techniques.\n\n* Rebased on new tree to avoid bitrot.", "author": "adw@mozilla.com", "id": 13247348, "time": "2018-05-01T22:40:23Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nhttps://reviewboard.mozilla.org/r/217980/#review246848\n\n\nCode analysis found 1 defect in this patch:\n - 1 defect found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint path/to/file` (JS/Python)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: toolkit/components/places/tests/unit/test_frecency_stats.js:63\n(Diff revision 5)\n> +               mean(Object.values(frecenciesByURL)));\n> +  Assert.equal(PlacesUtils.history.frecencyStandardDeviation,\n> +               stddev(Object.values(frecenciesByURL)));\n> +\n> +  // Bookmark URL 1.\n> +  let bookmark = await addBookmark({ uri: NetUtil.newURI(urls[1]) });\n\nError: 'addbookmark' is not defined. [eslint: no-undef]", "author": "jkeromnes+clangbot@mozilla.com", "id": 13247389, "time": "2018-05-01T23:05:32Z"}, {"text": "(In reply to Code Review Bot [:reviewbot] from comment #182)\n> Error: 'addbookmark' is not defined. [eslint: no-undef]\n\nI don't know what this is talking about...  It's addBookmark, not addbookmark, and it's defined in head_common.js.  And lint was fine on try and locally.  And this code hasn't changed since the last mozreview revision.", "author": "adw@mozilla.com", "id": 13247398, "time": "2018-05-01T23:09:53Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review247464\n\n::: toolkit/components/places/UnifiedComplete.js\n(Diff revision 29)\n>  // Prefs are defined as [pref name, default value].\n>  const PREF_URLBAR_BRANCH = \"browser.urlbar.\";\n>  const PREF_URLBAR_DEFAULTS = new Map([\n>    [\"autocomplete.enabled\", true],\n>    [\"autoFill\", true],\n> -  [\"autoFill.typed\", true],\n\nshould be removed from firefox.js as well\n\n::: toolkit/components/places/UnifiedComplete.js:262\n(Diff revision 29)\n> +                 id\n> +          FROM moz_origins\n> -     WHERE host BETWEEN :searchString AND :searchString || X'FFFF'\n> +          WHERE host BETWEEN :searchString AND :searchString || X'FFFF'\n> -     AND frecency <> 0\n> +                AND frecency <> 0\n> -     ${conditions}\n> +                ${conditions}\n> -     ORDER BY frecency DESC\n> +          UNION\n\nwe can likely use UNION ALL here instead of UNION, it should be a bit more efficient, and we have a LIMIT 1 regardless\n\n::: toolkit/components/places/UnifiedComplete.js:293\n(Diff revision 29)\n>  \n> -const SQL_BOOKMARKED_HOST_QUERY = bookmarkedHostQuery();\n> +const SQL_ORIGIN_PREFIX_BOOKMARKED_QUERY = originQuery(\n> +  `AND bookmarked\n> +   AND prefix BETWEEN :prefix AND :prefix || X'FFFF'`,\n> +  `(SELECT foreign_count > 0 FROM moz_places\n> +    WHERE moz_places.origin_id = moz_origins.id)`\n\ndoesn't this return multiple values, since it's likely there will be multiple places pointing to the same origin? also in SQL_ORIGIN_BOOKMARKED_QUERY\n\n::: toolkit/components/places/nsPlacesTables.h:26\n(Diff revision 29)\n>      \", guid TEXT\" \\\n>      \", foreign_count INTEGER DEFAULT 0 NOT NULL\" \\\n>      \", url_hash INTEGER DEFAULT 0 NOT NULL \" \\\n>      \", description TEXT\" \\\n>      \", preview_image_url TEXT\" \\\n> +    \", origin_id INTEGER REFERENCES moz_origins(id) ON DELETE CASCADE\" \\\n\nAre you sure this FK has the right direction?\nThis ON DELETE CASCADE means removing from moz_origins will remove all the entries in moz_places. That sounds dangerous, especially considering we don't have other FK in place to cleanup leftovers referring to these places, and it may create orphans.\nWhere are we using this? Maybe the original intent here was to have moz_origins entries go away when they are no more referenced in moz_places?\n\nAnd maybe this means we are lacking a test?\n\n::: toolkit/components/places/nsPlacesTables.h:169\n(Diff revision 29)\n> -#define CREATE_UPDATEHOSTSDELETE_TEMP NS_LITERAL_CSTRING( \\\n> -  \"CREATE TEMP TABLE moz_updatehostsdelete_temp (\" \\\n> -    \"  host TEXT PRIMARY KEY \" \\\n> +// details.\n> +#define CREATE_UPDATEORIGINSDELETE_TEMP NS_LITERAL_CSTRING( \\\n> +  \"CREATE TEMP TABLE moz_updateoriginsdelete_temp ( \" \\\n> +    \"origin_id INTEGER PRIMARY KEY, \" \\\n> +    \"host TEXT \" \\\n>    \") WITHOUT ROWID \" \\\n\nWITHOUT ROWID doesn't make sense anymore here since the primary key is integer, thus it's basically a rowid alias.\n\n::: toolkit/components/places/nsPlacesTables.h:179\n(Diff revision 29)\n> -#define CREATE_UPDATEHOSTSINSERT_TEMP NS_LITERAL_CSTRING( \\\n> -  \"CREATE TEMP TABLE moz_updatehostsinsert_temp (\" \\\n> -    \"  host TEXT PRIMARY KEY \" \\\n> +#define CREATE_UPDATEORIGINSINSERT_TEMP NS_LITERAL_CSTRING( \\\n> +  \"CREATE TEMP TABLE moz_updateoriginsinsert_temp ( \" \\\n> +    \"place_id INTEGER PRIMARY KEY, \" \\\n> +    \"prefix TEXT NOT NULL, \" \\\n> +    \"host TEXT NOT NULL \" \\\n>    \") WITHOUT ROWID \" \\\n\nditto\n\n::: toolkit/components/places/nsPlacesTriggers.h:87\n(Diff revision 29)\n>    \"END\" \\\n>  )\n>  \n>  // See CREATE_PLACES_AFTERINSERT_TRIGGER. This is the trigger that we want\n> -// to ensure gets run for each distinct host that we insert into moz_places.\n> -#define CREATE_UPDATEHOSTSINSERT_AFTERDELETE_TRIGGER NS_LITERAL_CSTRING( \\\n> +// to ensure gets run for each origin that we insert into moz_places.\n> +#define CREATE_UPDATEORIGINSINSERT_AFTERDELETE_TRIGGER NS_LITERAL_CSTRING( \\\n\nnit: I find UPDATEnnnINSERT_AFTERDELETE name a little bit confusing... not your fault, but maybe we could name it better while here. Maybe just UPDATEORIGINS_AFTERDELETE", "author": "mak77@bonardo.net", "id": 13254478, "time": "2018-05-04T12:48:04Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nhttps://reviewboard.mozilla.org/r/217974/#review247506\n\n::: toolkit/components/places/Database.cpp:2300\n(Diff revision 5)\n>    return NS_OK;\n>  }\n>  \n>  nsresult\n> +Database::MigrateV48Up() {\n> +  MOZ_ASSERT(NS_IsMainThread());\n\nI centralized this assert at the beginning of initSchema, so it's not necessary to check at every migration method\n\n::: toolkit/components/places/Database.cpp:2302\n(Diff revision 5)\n>  \n>  nsresult\n> +Database::MigrateV48Up() {\n> +  MOZ_ASSERT(NS_IsMainThread());\n> +\n> +  nsresult rv;\n\nnit: declare at first use\n\n::: toolkit/components/places/Database.cpp:2327\n(Diff revision 5)\n> +    \"SELECT origin_id FROM moz_places; \"\n> +  ), getter_AddRefs(stmt));\n> +  if (NS_FAILED(rv)) {\n> +    rv = mMainConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\n> +      \"ALTER TABLE moz_places \" \\\n> +      \"ADD COLUMN origin_id INTEGER REFERENCES moz_origins(id) ON DELETE CASCADE; \"\n\nditto from the other review about the FK\n\n::: toolkit/components/places/Database.cpp:2350\n(Diff revision 5)\n> +  // main data in moz_origins, prefix and host, are coherent in relation to\n> +  // moz_places.\n> +  Unused << Preferences::SetBool(PREF_MIGRATE_V48_FRECENCIES, true);\n> +\n> +  // From this point on, nobody should use moz_hosts again.  Empty it so that we\n> +  // don't leak the user's history.\n\n...but don't remove the table yet to support downgrades.\n\n::: toolkit/components/places/Database.cpp:2385\n(Diff revision 5)\n> +    // Migration done.  Clear the pref.\n> +    Unused << Preferences::ClearUser(PREF_MIGRATE_V48_FRECENCIES);\n> +    return NS_OK;\n> +  }\n> +\n> +  nsresult rv;\n\nnit: declare at first use", "author": "mak77@bonardo.net", "id": 13254610, "time": "2018-05-04T13:41:43Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nhttps://reviewboard.mozilla.org/r/217980/#review247528\n\n::: toolkit/components/places/nsINavHistoryService.idl:1400\n(Diff revision 5)\n>     */\n>    unsigned long long hashURL(in ACString aSpec, [optional] in ACString aMode);\n> +\n> +  /**\n> +   * The mean and standard deviation of all frecencies > 0 in the database.\n> +   */\n\nIt's probably worth adding a longer description about how these are used and updated.\n\n::: toolkit/components/places/nsNavHistory.cpp:597\n(Diff revision 5)\n>                                      PRTime aLastVisitDate)\n>  {\n>    MOZ_ASSERT(!aGUID.IsEmpty());\n> +\n> +  nsCOMPtr<nsIURI> uri;\n> +  Unused << NS_NewURI(getter_AddRefs(uri), aSpec);\n\nI hope this won't be too expensive in case of multiple frecencies... but in those cases we likely dispatch manyFrecenciesChanges...\n\n::: toolkit/components/places/tests/unit/test_frecency_stats.js:63\n(Diff revision 5)\n> +               mean(Object.values(frecenciesByURL)));\n> +  Assert.equal(PlacesUtils.history.frecencyStandardDeviation,\n> +               stddev(Object.values(frecenciesByURL)));\n> +\n> +  // Bookmark URL 1.\n> +  let bookmark = await addBookmark({ uri: NetUtil.newURI(urls[1]) });\n\nThe addbookmark eslint is probably due to the order of the patches, it's not defined yet at this point in the patch set.", "author": "mak77@bonardo.net", "id": 13254688, "time": "2018-05-04T14:13:22Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nhttps://reviewboard.mozilla.org/r/217984/#review247532\n\n::: browser/base/content/test/urlbar/browser_urlbarDelete.js:6\n(Diff revision 5)\n>  add_task(async function() {\n>    let bm = await PlacesUtils.bookmarks.insert({ parentGuid: PlacesUtils.bookmarks.unfiledGuid,\n>                                                  url: \"http://bug1105244.example.com/\",\n>                                                  title: \"test\" });\n>  \n> +  Services.prefs.setBoolPref(\"browser.urlbar.autoFill\", false);\n\nIs this fixing an intermittent? why was it not necessary before?", "author": "mak77@bonardo.net", "id": 13254715, "time": "2018-05-04T14:23:09Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nhttps://reviewboard.mozilla.org/r/217982/#review247534\n\nNothing jumps at my eyes as particularly wrong, though it's a large patch will probably do another pass\n\n::: toolkit/components/places/tests/head_common.js:939\n(Diff revision 5)\n> +  Assert.ok(!!aBookmarkObj.uri, \"Bookmark object contains an uri\");\n> +  let parentId = aBookmarkObj.parentId ? aBookmarkObj.parentId\n> +                                       : PlacesUtils.unfiledBookmarksFolderId;\n> +\n> +  let bm = await PlacesUtils.bookmarks.insert({\n> +    parentGuid: (await PlacesUtils.promiseItemGuid(parentId)),\n\nwe are trying to move away from ids, please make the original object take a parentGuid instead of parentId.\n\nSince in the future we'll also add tags to the official bookmarking API, I'd also prefer if this addBookmark helper would be limited to cases where we actually need to add a bookmark with a keyword, so maybe it should move to a more restricted head than head_common.js (the original position made more sense imo). I prefer consumers to stick to official APIs than helpers when possible.\n\n::: toolkit/components/places/tests/migration/test_current_from_v43.js:205\n(Diff revision 5)\n>  add_task(async function test_meta_exists() {\n>    let db = await PlacesUtils.promiseDBConnection();\n>    await db.execute(`SELECT 1 FROM moz_meta`);\n>  });\n> +\n> +add_task(async function test_origins() {\n\nplease add a separate test_current_from_v47.js file, It's ok if inside it you reuse placesv43.sqlite or any version before 47.\n\n::: toolkit/components/places/tests/unifiedcomplete/head_autocomplete.js:136\n(Diff revision 5)\n>    }\n>  \n>    let actualStyle = result.style.split(/\\s+/).sort();\n>    if (style)\n>      Assert.equal(actualStyle.toString(), style.toString(), \"Match should have expected style\");\n> -  if (uri.spec.startsWith(\"moz-action:\")) {\n> +  if (uri && uri.spec.startsWith(\"moz-action:\")) {\n\nin which case do we have a match without uri?\n\n::: toolkit/components/places/tests/unifiedcomplete/head_autofill.js:1\n(Diff revision 5)\n> +/* This Source Code Form is subject to the terms of the Mozilla Public\n\nInstead of defining a separate head, I think you could use defineLazyScriptGetter in head_autocomplete.js to lazy load addAutofillTasks from a js file when it's actually used.\n\n::: toolkit/components/places/tests/unifiedcomplete/test_autofill_origins.js:13\n(Diff revision 5)\n> +\n> +// \"example.com/\" should match http://example.com/.  i.e., the search string\n> +// should be treated as if it didn't have the trailing slash.\n> +add_task(async function trailingSlash() {\n> +  await PlacesTestUtils.addVisits([{\n> +    uri: NetUtil.newURI(\"http://example.com/\"),\n\nit's not necessary anymore to create nsIURIs (and in any case when we do we should use Services.io, not NetUtil)\n\n::: toolkit/components/places/tests/unit/test_origins.js:99\n(Diff revision 5)\n> +  checkDB([\n> +    [\"http://\", \"example.com\"],\n> +    [\"http://\", \"www.example.com\"],\n> +    [\"http://\", \"www.www.example.com\"],\n> +  ]);\n> +  await PlacesUtils.history.remove([\n\nhistory.remove also accepts single urls, not just arrays.\nYou can probably oneline most calls here.\n\n::: toolkit/components/places/tests/unit/test_origins.js:412\n(Diff revision 5)\n> +  }\n> +  checkDB([\n> +    [\"http://\", \"example.com\"],\n> +    [\"http://\", \"www.example.com\"],\n> +  ]);\n> +  await PlacesUtils.bookmarks.remove(bookmarks[0].guid);\n\nyou don't need to extract the guid, just pass the bookmark object to remove().\n\n::: toolkit/components/places/tests/unit/test_origins.js:455\n(Diff revision 5)\n> +  await cleanUp();\n> +});\n> +\n> +\n> +function checkDB(expectedOrigins) {\n> +  let stmt = DBConn().createStatement(`\n\nPlease use promiseDBConnection along with the Sqlite.jsm syntax if possible, we should in general limit usage of the old synchronous APIs.\n\n::: toolkit/components/places/tests/unit/test_sql_function_origin.js:28\n(Diff revision 5)\n> +      \"get_prefix\": parts.slice(0, 2).join(\"\"),\n> +      \"get_host_and_port\": parts.slice(3, 5).join(\"\"),\n> +      \"strip_prefix_and_userinfo\": parts.slice(3).join(\"\"),\n> +    };\n> +    for (let [func, expectedValue] of Object.entries(funcs)) {\n> +      let stmt = DBConn().createStatement(`\n\nditto for avoiding synchronous storage APIs", "author": "mak77@bonardo.net", "id": 13254819, "time": "2018-05-04T14:58:54Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/29-30/", "author": "adw@mozilla.com", "id": 13261027, "time": "2018-05-07T22:46:31Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217974/diff/5-6/", "author": "adw@mozilla.com", "id": 13261028, "time": "2018-05-07T22:46:31Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217976/diff/5-6/", "author": "adw@mozilla.com", "id": 13261029, "time": "2018-05-07T22:46:31Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217978/diff/5-6/", "author": "adw@mozilla.com", "id": 13261030, "time": "2018-05-07T22:46:31Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217980/diff/5-6/", "author": "adw@mozilla.com", "id": 13261031, "time": "2018-05-07T22:46:31Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217982/diff/5-6/", "author": "adw@mozilla.com", "id": 13261032, "time": "2018-05-07T22:46:31Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217984/diff/5-6/", "author": "adw@mozilla.com", "id": 13261033, "time": "2018-05-07T22:46:31Z"}, {"text": "(In reply to Marco Bonardo [::mak] from comment #184)\n> Comment on attachment 8930304\n> Bug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n> \n> https://reviewboard.mozilla.org/r/201438/#review247464\n> \n> ::: toolkit/components/places/UnifiedComplete.js\n> (Diff revision 29)\n> >  // Prefs are defined as [pref name, default value].\n> >  const PREF_URLBAR_BRANCH = \"browser.urlbar.\";\n> >  const PREF_URLBAR_DEFAULTS = new Map([\n> >    [\"autocomplete.enabled\", true],\n> >    [\"autoFill\", true],\n> > -  [\"autoFill.typed\", true],\n> \n> should be removed from firefox.js as well\n\nThis is removed in the part-3 (front end) patch\n\n> ::: toolkit/components/places/UnifiedComplete.js:262\n> (Diff revision 29)\n> > +                 id\n> > +          FROM moz_origins\n> > -     WHERE host BETWEEN :searchString AND :searchString || X'FFFF'\n> > +          WHERE host BETWEEN :searchString AND :searchString || X'FFFF'\n> > -     AND frecency <> 0\n> > +                AND frecency <> 0\n> > -     ${conditions}\n> > +                ${conditions}\n> > -     ORDER BY frecency DESC\n> > +          UNION\n> \n> we can likely use UNION ALL here instead of UNION, it should be a bit more\n> efficient, and we have a LIMIT 1 regardless\n\nDone\n\n> ::: toolkit/components/places/UnifiedComplete.js:293\n> (Diff revision 29)\n> >  \n> > -const SQL_BOOKMARKED_HOST_QUERY = bookmarkedHostQuery();\n> > +const SQL_ORIGIN_PREFIX_BOOKMARKED_QUERY = originQuery(\n> > +  `AND bookmarked\n> > +   AND prefix BETWEEN :prefix AND :prefix || X'FFFF'`,\n> > +  `(SELECT foreign_count > 0 FROM moz_places\n> > +    WHERE moz_places.origin_id = moz_origins.id)`\n> \n> doesn't this return multiple values, since it's likely there will be\n> multiple places pointing to the same origin? also in\n> SQL_ORIGIN_BOOKMARKED_QUERY\n\nYes.  Here's the query before my patch:\n\n  let query =\n    `/* do not warn (bug NA): not worth to index on (typed, frecency) */\n     SELECT :query_type, host || '/', IFNULL(prefix, 'http://') || host || '/',\n            ( SELECT foreign_count > 0 FROM moz_places\n              WHERE rev_host = get_unreversed_host(host || '.') || '.'\n                 OR rev_host = get_unreversed_host(host || '.') || '.www.'\n            ) AS bookmarked, NULL, NULL, NULL, NULL, NULL, NULL, frecency\n     FROM moz_hosts\n     WHERE host BETWEEN :searchString AND :searchString || X'FFFF'\n     AND bookmarked\n     AND frecency <> 0\n     ${conditions}\n     ORDER BY frecency DESC\n     LIMIT 1`;\n\nMy patch doesn't substantially change the `bookmarked` part.  It just replaces the rev_host check with a moz_origins check.\n\nThe reason this is OK is that this query is only used for matching origins.  e.g., when you type \"mozilla.org\", we use this query, and it doesn't matter which mozilla.org page you have bookmarked.\n\n> ::: toolkit/components/places/nsPlacesTables.h:26\n> (Diff revision 29)\n> >      \", guid TEXT\" \\\n> >      \", foreign_count INTEGER DEFAULT 0 NOT NULL\" \\\n> >      \", url_hash INTEGER DEFAULT 0 NOT NULL \" \\\n> >      \", description TEXT\" \\\n> >      \", preview_image_url TEXT\" \\\n> > +    \", origin_id INTEGER REFERENCES moz_origins(id) ON DELETE CASCADE\" \\\n> \n> Are you sure this FK has the right direction?\n> This ON DELETE CASCADE means removing from moz_origins will remove all the\n> entries in moz_places. That sounds dangerous, especially considering we\n> don't have other FK in place to cleanup leftovers referring to these places,\n> and it may create orphans.\n> Where are we using this? Maybe the original intent here was to have\n> moz_origins entries go away when they are no more referenced in moz_places?\n\nIt seemed like the right direction to me, but I removed it (the `ON DELETE`) given your feedback here and since there's a trigger that removes from moz_origins when all its rows in moz_places go away.\n\n> ::: toolkit/components/places/nsPlacesTables.h:169\n> (Diff revision 29)\n> > -#define CREATE_UPDATEHOSTSDELETE_TEMP NS_LITERAL_CSTRING( \\\n> > -  \"CREATE TEMP TABLE moz_updatehostsdelete_temp (\" \\\n> > -    \"  host TEXT PRIMARY KEY \" \\\n> > +// details.\n> > +#define CREATE_UPDATEORIGINSDELETE_TEMP NS_LITERAL_CSTRING( \\\n> > +  \"CREATE TEMP TABLE moz_updateoriginsdelete_temp ( \" \\\n> > +    \"origin_id INTEGER PRIMARY KEY, \" \\\n> > +    \"host TEXT \" \\\n> >    \") WITHOUT ROWID \" \\\n> \n> WITHOUT ROWID doesn't make sense anymore here since the primary key is\n> integer, thus it's basically a rowid alias.\n\nFixed\n\n> ::: toolkit/components/places/nsPlacesTables.h:179\n> (Diff revision 29)\n> > -#define CREATE_UPDATEHOSTSINSERT_TEMP NS_LITERAL_CSTRING( \\\n> > -  \"CREATE TEMP TABLE moz_updatehostsinsert_temp (\" \\\n> > -    \"  host TEXT PRIMARY KEY \" \\\n> > +#define CREATE_UPDATEORIGINSINSERT_TEMP NS_LITERAL_CSTRING( \\\n> > +  \"CREATE TEMP TABLE moz_updateoriginsinsert_temp ( \" \\\n> > +    \"place_id INTEGER PRIMARY KEY, \" \\\n> > +    \"prefix TEXT NOT NULL, \" \\\n> > +    \"host TEXT NOT NULL \" \\\n> >    \") WITHOUT ROWID \" \\\n> \n> ditto\n\nFixed\n\n> ::: toolkit/components/places/nsPlacesTriggers.h:87\n> (Diff revision 29)\n> >    \"END\" \\\n> >  )\n> >  \n> >  // See CREATE_PLACES_AFTERINSERT_TRIGGER. This is the trigger that we want\n> > -// to ensure gets run for each distinct host that we insert into moz_places.\n> > -#define CREATE_UPDATEHOSTSINSERT_AFTERDELETE_TRIGGER NS_LITERAL_CSTRING( \\\n> > +// to ensure gets run for each origin that we insert into moz_places.\n> > +#define CREATE_UPDATEORIGINSINSERT_AFTERDELETE_TRIGGER NS_LITERAL_CSTRING( \\\n> \n> nit: I find UPDATEnnnINSERT_AFTERDELETE name a little bit confusing... not\n> your fault, but maybe we could name it better while here. Maybe just\n> UPDATEORIGINS_AFTERDELETE\n\nHmm, I agree that these names are a little confusing or at least harder to read than they could be.  Can we leave this for a follow-up?  \"UPDATEORIGINS_AFTERDELETE\" won't work because there are *two* triggers that that name could describe.  And even though the names are hard to read, there's at least some logic to them, and they seem to be internally consistent.  So if we renamed this one, in order to preserve that consistency we would need to rename most if not all the others too.\n\n\n(In reply to Marco Bonardo [::mak] from comment #185)\n> Comment on attachment 8948567\n> Bug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n> \n> https://reviewboard.mozilla.org/r/217974/#review247506\n> \n> ::: toolkit/components/places/Database.cpp:2300\n> (Diff revision 5)\n> >    return NS_OK;\n> >  }\n> >  \n> >  nsresult\n> > +Database::MigrateV48Up() {\n> > +  MOZ_ASSERT(NS_IsMainThread());\n> \n> I centralized this assert at the beginning of initSchema, so it's not\n> necessary to check at every migration method\n\nFixed\n\n> ::: toolkit/components/places/Database.cpp:2302\n> (Diff revision 5)\n> >  \n> >  nsresult\n> > +Database::MigrateV48Up() {\n> > +  MOZ_ASSERT(NS_IsMainThread());\n> > +\n> > +  nsresult rv;\n> \n> nit: declare at first use\n\nFixed\n\n> ::: toolkit/components/places/Database.cpp:2327\n> (Diff revision 5)\n> > +    \"SELECT origin_id FROM moz_places; \"\n> > +  ), getter_AddRefs(stmt));\n> > +  if (NS_FAILED(rv)) {\n> > +    rv = mMainConn->ExecuteSimpleSQL(NS_LITERAL_CSTRING(\n> > +      \"ALTER TABLE moz_places \" \\\n> > +      \"ADD COLUMN origin_id INTEGER REFERENCES moz_origins(id) ON DELETE CASCADE; \"\n> \n> ditto from the other review about the FK\n\nI removed the `ON DELETE` clause, as with the part-0 patch\n\n> ::: toolkit/components/places/Database.cpp:2350\n> (Diff revision 5)\n> > +  // main data in moz_origins, prefix and host, are coherent in relation to\n> > +  // moz_places.\n> > +  Unused << Preferences::SetBool(PREF_MIGRATE_V48_FRECENCIES, true);\n> > +\n> > +  // From this point on, nobody should use moz_hosts again.  Empty it so that we\n> > +  // don't leak the user's history.\n> \n> ...but don't remove the table yet to support downgrades.\n\nDone\n\n> ::: toolkit/components/places/Database.cpp:2385\n> (Diff revision 5)\n> > +    // Migration done.  Clear the pref.\n> > +    Unused << Preferences::ClearUser(PREF_MIGRATE_V48_FRECENCIES);\n> > +    return NS_OK;\n> > +  }\n> > +\n> > +  nsresult rv;\n> \n> nit: declare at first use\n\nFixed\n\n\n(In reply to Marco Bonardo [::mak] from comment #186)\n> Comment on attachment 8948570\n> Bug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n> \n> https://reviewboard.mozilla.org/r/217980/#review247528\n> \n> ::: toolkit/components/places/nsINavHistoryService.idl:1400\n> (Diff revision 5)\n> >     */\n> >    unsigned long long hashURL(in ACString aSpec, [optional] in ACString aMode);\n> > +\n> > +  /**\n> > +   * The mean and standard deviation of all frecencies > 0 in the database.\n> > +   */\n> \n> It's probably worth adding a longer description about how these are used and\n> updated.\n\nDone\n\n> ::: toolkit/components/places/nsNavHistory.cpp:597\n> (Diff revision 5)\n> >                                      PRTime aLastVisitDate)\n> >  {\n> >    MOZ_ASSERT(!aGUID.IsEmpty());\n> > +\n> > +  nsCOMPtr<nsIURI> uri;\n> > +  Unused << NS_NewURI(getter_AddRefs(uri), aSpec);\n> \n> I hope this won't be too expensive in case of multiple frecencies... but in\n> those cases we likely dispatch manyFrecenciesChanges...\n\nMy patch just moves the NS_NewURI call, it doesn't add any more than were already there.\n\n> ::: toolkit/components/places/tests/unit/test_frecency_stats.js:63\n> (Diff revision 5)\n> > +               mean(Object.values(frecenciesByURL)));\n> > +  Assert.equal(PlacesUtils.history.frecencyStandardDeviation,\n> > +               stddev(Object.values(frecenciesByURL)));\n> > +\n> > +  // Bookmark URL 1.\n> > +  let bookmark = await addBookmark({ uri: NetUtil.newURI(urls[1]) });\n> \n> The addbookmark eslint is probably due to the order of the patches, it's not\n> defined yet at this point in the patch set.\n\nAh, thanks\n\n\n(In reply to Marco Bonardo [::mak] from comment #187)\n> Comment on attachment 8948572\n> Bug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n> \n> https://reviewboard.mozilla.org/r/217984/#review247532\n> \n> ::: browser/base/content/test/urlbar/browser_urlbarDelete.js:6\n> (Diff revision 5)\n> >  add_task(async function() {\n> >    let bm = await PlacesUtils.bookmarks.insert({ parentGuid: PlacesUtils.bookmarks.unfiledGuid,\n> >                                                  url: \"http://bug1105244.example.com/\",\n> >                                                  title: \"test\" });\n> >  \n> > +  Services.prefs.setBoolPref(\"browser.urlbar.autoFill\", false);\n> \n> Is this fixing an intermittent? why was it not necessary before?\n\nA couple of things going on here:\n\n(1) Without the patches, this test doesn't trigger autofill (because the URL isn't typed).\n\n(2) With the patches, autofill happens, and on macOS, `EventUtils.synthesizeKey(\"KEY_ArrowLeft\", {altKey: true})` does not actually move the caret to the beginning like the test thinks it does, which causes subsequent failures.  (It moves the caret between \"words\".  Without the patches, that works fine because the text in the urlbar is a single word, \"bug1105244\".  With the patch, there are multiple \"words\" separated by \".\": \"bug1105244.example.com\".)\n\nI didn't realize (2) was a problem until your comment made me take a closer look at this test.  I fixed (2) by changing altKey to metaKey.  But that by itself still doesn't fix the test because the test later assumes that autofill didn't happen, so I fixed that part, too.\n\n\n(In reply to Marco Bonardo [::mak] from comment #188)\n> Comment on attachment 8948571\n> Bug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n> \n> https://reviewboard.mozilla.org/r/217982/#review247534\n> \n> Nothing jumps at my eyes as particularly wrong, though it's a large patch\n> will probably do another pass\n> \n> ::: toolkit/components/places/tests/head_common.js:939\n> (Diff revision 5)\n> > +  Assert.ok(!!aBookmarkObj.uri, \"Bookmark object contains an uri\");\n> > +  let parentId = aBookmarkObj.parentId ? aBookmarkObj.parentId\n> > +                                       : PlacesUtils.unfiledBookmarksFolderId;\n> > +\n> > +  let bm = await PlacesUtils.bookmarks.insert({\n> > +    parentGuid: (await PlacesUtils.promiseItemGuid(parentId)),\n> \n> we are trying to move away from ids, please make the original object take a\n> parentGuid instead of parentId.\n> \n> Since in the future we'll also add tags to the official bookmarking API, I'd\n> also prefer if this addBookmark helper would be limited to cases where we\n> actually need to add a bookmark with a keyword, so maybe it should move to a\n> more restricted head than head_common.js (the original position made more\n> sense imo). I prefer consumers to stick to official APIs than helpers when\n> possible.\n\nI reverted this change, so now I don't touch this addBookmark function at all.  The reason I moved this addBookmark helper is because I needed it for the frecency stats test, but that's in unit/, not in unifiedcomplete/, where addBookmark is defined.  So now the frecency stats test adds a bookmark without using a helper function.\n\n> ::: toolkit/components/places/tests/migration/test_current_from_v43.js:205\n> (Diff revision 5)\n> >  add_task(async function test_meta_exists() {\n> >    let db = await PlacesUtils.promiseDBConnection();\n> >    await db.execute(`SELECT 1 FROM moz_meta`);\n> >  });\n> > +\n> > +add_task(async function test_origins() {\n> \n> please add a separate test_current_from_v47.js file, It's ok if inside it\n> you reuse placesv43.sqlite or any version before 47.\n\nDone\n\n> ::: toolkit/components/places/tests/unifiedcomplete/head_autocomplete.js:136\n> (Diff revision 5)\n> >    }\n> >  \n> >    let actualStyle = result.style.split(/\\s+/).sort();\n> >    if (style)\n> >      Assert.equal(actualStyle.toString(), style.toString(), \"Match should have expected style\");\n> > -  if (uri.spec.startsWith(\"moz-action:\")) {\n> > +  if (uri && uri.spec.startsWith(\"moz-action:\")) {\n> \n> in which case do we have a match without uri?\n\nNone, IIRC I made this change because in some cases I'm not interested in checking the URI, only the value and comment\n\n> ::: toolkit/components/places/tests/unifiedcomplete/head_autofill.js:1\n> (Diff revision 5)\n> > +/* This Source Code Form is subject to the terms of the Mozilla Public\n> \n> Instead of defining a separate head, I think you could use\n> defineLazyScriptGetter in head_autocomplete.js to lazy load addAutofillTasks\n> from a js file when it's actually used.\n\nDone\n\n> :::\n> toolkit/components/places/tests/unifiedcomplete/test_autofill_origins.js:13\n> (Diff revision 5)\n> > +\n> > +// \"example.com/\" should match http://example.com/.  i.e., the search string\n> > +// should be treated as if it didn't have the trailing slash.\n> > +add_task(async function trailingSlash() {\n> > +  await PlacesTestUtils.addVisits([{\n> > +    uri: NetUtil.newURI(\"http://example.com/\"),\n> \n> it's not necessary anymore to create nsIURIs (and in any case when we do we\n> should use Services.io, not NetUtil)\n\nFixed\n\n> ::: toolkit/components/places/tests/unit/test_origins.js:99\n> (Diff revision 5)\n> > +  checkDB([\n> > +    [\"http://\", \"example.com\"],\n> > +    [\"http://\", \"www.example.com\"],\n> > +    [\"http://\", \"www.www.example.com\"],\n> > +  ]);\n> > +  await PlacesUtils.history.remove([\n> \n> history.remove also accepts single urls, not just arrays.\n> You can probably oneline most calls here.\n\nDone\n\n> ::: toolkit/components/places/tests/unit/test_origins.js:412\n> (Diff revision 5)\n> > +  }\n> > +  checkDB([\n> > +    [\"http://\", \"example.com\"],\n> > +    [\"http://\", \"www.example.com\"],\n> > +  ]);\n> > +  await PlacesUtils.bookmarks.remove(bookmarks[0].guid);\n> \n> you don't need to extract the guid, just pass the bookmark object to\n> remove().\n\nDone\n\n> ::: toolkit/components/places/tests/unit/test_origins.js:455\n> (Diff revision 5)\n> > +  await cleanUp();\n> > +});\n> > +\n> > +\n> > +function checkDB(expectedOrigins) {\n> > +  let stmt = DBConn().createStatement(`\n> \n> Please use promiseDBConnection along with the Sqlite.jsm syntax if possible,\n> we should in general limit usage of the old synchronous APIs.\n\nDone\n\n> ::: toolkit/components/places/tests/unit/test_sql_function_origin.js:28\n> (Diff revision 5)\n> > +      \"get_prefix\": parts.slice(0, 2).join(\"\"),\n> > +      \"get_host_and_port\": parts.slice(3, 5).join(\"\"),\n> > +      \"strip_prefix_and_userinfo\": parts.slice(3).join(\"\"),\n> > +    };\n> > +    for (let [func, expectedValue] of Object.entries(funcs)) {\n> > +      let stmt = DBConn().createStatement(`\n> \n> ditto for avoiding synchronous storage APIs\n\nDone", "author": "adw@mozilla.com", "id": 13261036, "time": "2018-05-07T22:47:41Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=613e98422aabe979207731a9f3f77611435d052a", "author": "adw@mozilla.com", "id": 13261037, "time": "2018-05-07T22:47:54Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nhttps://reviewboard.mozilla.org/r/217980/#review248082\n\n\nCode analysis found 1 defect in this patch:\n - 1 defect found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint path/to/file` (JS/Python)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: toolkit/components/places/tests/unit/test_frecency_stats.js:65\n(Diff revision 6)\n> +               mean(Object.values(frecenciesByURL)));\n> +  Assert.equal(PlacesUtils.history.frecencyStandardDeviation,\n> +               stddev(Object.values(frecenciesByURL)));\n> +\n> +  // Bookmark URL 1.\n> +  let bookmark = await addBookmark({ uri: NetUtil.newURI(urls[1]) });\n\nError: 'addbookmark' is not defined. [eslint: no-undef]", "author": "jkeromnes+clangbot@mozilla.com", "id": 13261054, "time": "2018-05-07T22:57:31Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/30-31/", "author": "adw@mozilla.com", "id": 13261063, "time": "2018-05-07T23:02:46Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217974/diff/6-7/", "author": "adw@mozilla.com", "id": 13261064, "time": "2018-05-07T23:02:46Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217976/diff/6-7/", "author": "adw@mozilla.com", "id": 13261065, "time": "2018-05-07T23:02:46Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217978/diff/6-7/", "author": "adw@mozilla.com", "id": 13261066, "time": "2018-05-07T23:02:46Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217980/diff/6-7/", "author": "adw@mozilla.com", "id": 13261067, "time": "2018-05-07T23:02:46Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217982/diff/6-7/", "author": "adw@mozilla.com", "id": 13261068, "time": "2018-05-07T23:02:46Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217984/diff/6-7/", "author": "adw@mozilla.com", "id": 13261069, "time": "2018-05-07T23:02:46Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nhttps://reviewboard.mozilla.org/r/201438/#review248182", "author": "mak77@bonardo.net", "id": 13262161, "time": "2018-05-08T12:34:18Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nhttps://reviewboard.mozilla.org/r/217982/#review248186", "author": "mak77@bonardo.net", "id": 13262276, "time": "2018-05-08T12:59:26Z"}, {"text": "Some new TV failures on try...", "author": "adw@mozilla.com", "id": 13263153, "time": "2018-05-08T17:50:16Z"}, {"text": "Think I've fixed the failure locally...\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=29cd858f4f428fe9a9ef16966a93ddd8b9e8b800", "author": "adw@mozilla.com", "id": 13267138, "time": "2018-05-10T00:46:04Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=b538efc5364643902a123d69915f1c7c2528cba4", "author": "adw@mozilla.com", "id": 13267139, "time": "2018-05-10T00:47:43Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/31-32/", "author": "adw@mozilla.com", "id": 13269604, "time": "2018-05-10T22:48:08Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217974/diff/7-8/", "author": "adw@mozilla.com", "id": 13269605, "time": "2018-05-10T22:48:08Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217976/diff/7-8/", "author": "adw@mozilla.com", "id": 13269606, "time": "2018-05-10T22:48:08Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217978/diff/7-8/", "author": "adw@mozilla.com", "id": 13269607, "time": "2018-05-10T22:48:08Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217980/diff/7-8/", "author": "adw@mozilla.com", "id": 13269608, "time": "2018-05-10T22:48:08Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217982/diff/7-8/", "author": "adw@mozilla.com", "id": 13269609, "time": "2018-05-10T22:48:08Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217984/diff/7-8/", "author": "adw@mozilla.com", "id": 13269610, "time": "2018-05-10T22:48:08Z"}, {"text": "Try all green again.  I'll land this after the next merge.  I think Mark is working on a bug with a migration, so it would probably be a good idea to let him land his first and then update my patches.", "author": "adw@mozilla.com", "id": 13269613, "time": "2018-05-10T22:49:03Z"}, {"text": "(In reply to Drew Willcoxon :adw from comment #218)\n> Try all green again.  I'll land this after the next merge.  I think Mark is\n> working on a bug with a migration, so it would probably be a good idea to\n> let him land his first and then update my patches.\n\nI think you're talking about bug 824502, if so, I think this is more critical to land sooner and I'm fine with rebasing on top of yours (plus mine hasn't got r+ yet). This is a bigger patch & has been in progress longer, so lets get it landed.", "author": "standard8@mozilla.com", "id": 13270119, "time": "2018-05-11T07:52:07Z"}, {"text": "Comment on attachment 8930304\nBug 1239708: Improve awesomebar autofill. Part 0: Core changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/201438/diff/32-33/", "author": "adw@mozilla.com", "id": 13276885, "time": "2018-05-14T20:01:50Z"}, {"text": "Comment on attachment 8948567\nBug 1239708: Improve awesomebar autofill. Part 1: Core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217974/diff/8-9/", "author": "adw@mozilla.com", "id": 13276886, "time": "2018-05-14T20:01:50Z"}, {"text": "Comment on attachment 8948568\nBug 1239708: Improve awesomebar autofill. Part 2: Non-core follow-ons.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217976/diff/8-9/", "author": "adw@mozilla.com", "id": 13276887, "time": "2018-05-14T20:01:50Z"}, {"text": "Comment on attachment 8948569\nBug 1239708: Improve awesomebar autofill. Part 3: Front-end changes.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217978/diff/8-9/", "author": "adw@mozilla.com", "id": 13276888, "time": "2018-05-14T20:01:50Z"}, {"text": "Comment on attachment 8948570\nBug 1239708: Improve awesomebar autofill. Part 4: Frecency stats.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217980/diff/8-9/", "author": "adw@mozilla.com", "id": 13276889, "time": "2018-05-14T20:01:50Z"}, {"text": "Comment on attachment 8948571\nBug 1239708: Improve awesomebar autofill. Part 5: xpcshell tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217982/diff/8-9/", "author": "adw@mozilla.com", "id": 13276890, "time": "2018-05-14T20:01:50Z"}, {"text": "Comment on attachment 8948572\nBug 1239708: Improve awesomebar autofill. Part 6: Browser tests.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/217984/diff/8-9/", "author": "adw@mozilla.com", "id": 13276891, "time": "2018-05-14T20:01:50Z"}, {"text": "Oops, we had already merged.  I missed the date on my calendar.  One more rebase on the current tree and a try push and then I'll land this.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=e97142a1944e6db9d74ff2b28674d8cf06bfeb71", "author": "adw@mozilla.com", "id": 13276895, "time": "2018-05-14T20:03:06Z"}, {"text": "Pushed by dwillcoxon@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/41989bf3c107\nImprove awesomebar autofill. Part 0: Core changes. r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/918f531e11ce\nImprove awesomebar autofill. Part 1: Core follow-ons. r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/37ed5dc61be4\nImprove awesomebar autofill. Part 2: Non-core follow-ons. r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/8b944decbb13\nImprove awesomebar autofill. Part 3: Front-end changes. r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/acca8e457b36\nImprove awesomebar autofill. Part 4: Frecency stats. r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/1338a75d206e\nImprove awesomebar autofill. Part 5: xpcshell tests. r=mak\nhttps://hg.mozilla.org/integration/autoland/rev/6f0272415280\nImprove awesomebar autofill. Part 6: Browser tests. r=mak", "author": "pulsebot@bots.tld", "id": 13277267, "time": "2018-05-14T22:03:31Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/41989bf3c107\nhttps://hg.mozilla.org/mozilla-central/rev/918f531e11ce\nhttps://hg.mozilla.org/mozilla-central/rev/37ed5dc61be4\nhttps://hg.mozilla.org/mozilla-central/rev/8b944decbb13\nhttps://hg.mozilla.org/mozilla-central/rev/acca8e457b36\nhttps://hg.mozilla.org/mozilla-central/rev/1338a75d206e\nhttps://hg.mozilla.org/mozilla-central/rev/6f0272415280", "author": "ncsoregi@mozilla.com", "id": 13278126, "time": "2018-05-15T09:55:14Z"}, {"text": "While researching an unexpected behaviour bug, I stumbled over this bug/commit. Thank you guys for trying to improve the awesome bar! Unfortunately it isn't working 100% perfect yet: https://bugzilla.mozilla.org/show_bug.cgi?id=1462129", "author": "claudiovspiess@gmail.com", "id": 13282772, "time": "2018-05-16T21:07:16Z"}], "id": 1239708, "priority": "P1", "cc": ["adw@mozilla.com", "andrei.br92@gmail.com", "bomfog@gmail.com", "charmston@mozilla.com", "claudiovspiess@gmail.com", "dolske@mozilla.com", "dzeber@mozilla.com", "gwimberly@softvision.com", "jan@ikenmeyer.eu", "jwilliams@softvision.com", "kit@mozilla.com", "mak77@bonardo.net", "mozilla.org@prolinux.com", "mverdi@mozilla.com", "paolo.mozmail@amadzone.org", "past@mozilla.com", "peterbe@mozilla.com", "rares.bologa@softvisioninc.eu", "rhubscher@mozilla.com", "Tobias.Marty@gmx.de", "Virtual@teknik.io", "yannbreliere@gmail.com"], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1439007"], "cf_tracking_thunderbird_esr60": "---", "status": "RESOLVED", "product": "Toolkit", "cf_fx_iteration": "---", "blocks": [843357, 1205528, 1345133, 1441561, 764062, 1341350, 1352847, 1406654, 1461691], "qa_contact": "gwimberly@softvision.com", "creation_time": "2016-01-14T16:14:19Z", "cf_status_firefox_esr52": "---", "component": "Places", "assigned_to_detail": {"email": "adw@mozilla.com", "id": 334927, "name": "adw@mozilla.com", "real_name": "Drew Willcoxon :adw"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "mozilla62", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "mak77@bonardo.net", "id": 240353, "name": "mak77@bonardo.net", "real_name": "Marco Bonardo [::mak]"}, "whiteboard": "[fxsearch][unifiedcomplete]", "mentors": [], "summary": "Improve the autofill decisions algorithms", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-18T01:15:08Z", "assigned_to": "adw@mozilla.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "adw@mozilla.com, dolske@mozilla.com, paolo.mozmail@amadzone.org, past@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(dolske@mozilla.com), needinfo?(past@mozilla.com), needinfo?(adw@mozilla.com), needinfo?(paolo.mozmail@amadzone.org)"}], "who": "mak77@bonardo.net", "when": "2016-01-14T16:14:19Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P2"}, {"removed": "", "field_name": "cc", "added": "mak77@bonardo.net"}], "who": "mak77@bonardo.net", "when": "2016-01-14T16:17:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bomfog@gmail.com"}], "who": "bomfog@gmail.com", "when": "2016-01-14T18:11:45Z"}, {"changes": [{"removed": "needinfo?(dolske@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "dolske@mozilla.com", "when": "2016-01-14T22:31:13Z"}, {"changes": [{"removed": "needinfo?(paolo.mozmail@amadzone.org)", "field_name": "flagtypes.name", "added": ""}], "who": "paolo.mozmail@amadzone.org", "when": "2016-01-15T14:00:15Z"}, {"changes": [{"removed": "needinfo?(past@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "past@mozilla.com", "when": "2016-01-15T15:59:22Z"}, {"changes": [{"removed": "", "field_name": "whiteboard", "added": "[fxsearch][unifiedcomplete]"}], "who": "mak77@bonardo.net", "when": "2016-01-20T20:05:35Z"}, {"changes": [{"removed": "needinfo?(adw@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "adw@mozilla.com", "when": "2016-01-20T20:18:35Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla@terrax.net"}], "who": "jan@ikenmeyer.eu", "when": "2017-01-17T16:01:27Z"}, {"changes": [{"removed": "bugzilla@terrax.net", "field_name": "cc", "added": ""}], "who": "jan@ikenmeyer.eu", "when": "2017-01-18T13:48:58Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1341350"}], "who": "standard8@mozilla.com", "when": "2017-02-21T19:15:07Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "764062"}], "who": "mak77@bonardo.net", "when": "2017-03-07T15:25:24Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1352847"}], "who": "mak77@bonardo.net", "when": "2017-04-03T07:24:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla@terrax.net"}], "who": "jan@ikenmeyer.eu", "when": "2017-04-04T08:21:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dukevinjduke@gmail.com"}], "who": "mak77@bonardo.net", "when": "2017-04-12T06:49:00Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mozilla.org@prolinux.com"}], "who": "mozilla.org@prolinux.com", "when": "2017-05-18T11:45:03Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "naylor83@gmail.com"}], "who": "yfdyh000@gmail.com", "when": "2017-08-28T08:58:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "yfdyh000@gmail.com"}], "who": "yfdyh000@gmail.com", "when": "2017-08-28T08:58:21Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1406654"}], "who": "mak77@bonardo.net", "when": "2017-10-09T14:43:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gbillios@gmail.com"}], "who": "mak77@bonardo.net", "when": "2017-10-24T21:28:01Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "adw@mozilla.com"}], "who": "adw@mozilla.com", "when": "2017-10-31T16:45:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "andrei.br92@gmail.com"}], "who": "mak77@bonardo.net", "when": "2017-11-16T14:27:51Z"}, {"changes": [{"removed": "dukevinjduke@gmail.com", "field_name": "cc", "added": ""}], "who": "dukevinjduke@gmail.com", "when": "2017-11-21T10:30:19Z"}, {"changes": [{"removed": "P2", "field_name": "priority", "added": "P1"}], "who": "past@mozilla.com", "when": "2017-11-22T21:25:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8930304, "added": "feedback?(mak77@bonardo.net)"}], "who": "adw@mozilla.com", "when": "2017-11-30T00:25:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(mak77@bonardo.net)", "attachment_id": 8930304, "added": ""}], "who": "mak77@bonardo.net", "when": "2017-12-01T15:48:36Z"}, {"changes": [{"removed": "gbillios@gmail.com", "field_name": "cc", "added": ""}], "who": "gbillios@gmail.com", "when": "2017-12-04T13:05:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "zyklon87@web.de"}], "who": "bugzilla@mversen.de", "when": "2017-12-24T20:59:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dzeber@mozilla.com"}], "who": "dzeber@mozilla.com", "when": "2018-01-11T20:41:15Z"}, {"changes": [{"removed": "zyklon87@web.de", "field_name": "cc", "added": ""}], "who": "zyklon87@web.de", "when": "2018-01-13T03:01:23Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kit@mozilla.com"}], "who": "kit@mozilla.com", "when": "2018-01-17T17:21:15Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "843357"}], "who": "mak77@bonardo.net", "when": "2018-01-18T09:23:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jwilliams@softvision.com"}], "who": "jwilliams@softvision.com", "when": "2018-02-01T19:05:26Z"}, {"changes": [{"removed": "yfdyh000@gmail.com", "field_name": "cc", "added": ""}], "who": "yfdyh000@gmail.com", "when": "2018-02-05T19:52:40Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948567, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948568, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948569, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948570, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948571, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948572, "added": "review?(mak77@bonardo.net)"}, {"field_name": "attachments.description", "removed": "Bug 1239708 - Improve the autofill decisions algorithms.", "attachment_id": 8930304, "added": "Bug 1239708: Improve awesomebar autofill. Part 0: Core changes."}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8930304, "added": "review?(mak77@bonardo.net)"}], "who": "adw@mozilla.com", "when": "2018-02-06T00:41:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "peterbe@mozilla.com"}], "who": "mak77@bonardo.net", "when": "2018-02-09T20:16:14Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1345133"}], "who": "mak77@bonardo.net", "when": "2018-02-16T11:20:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8930304, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-02-21T17:11:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948567, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-02-21T17:44:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948568, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-02-21T21:45:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948569, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-02-21T22:33:09Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948571, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-02-21T23:39:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948572, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-02-21T23:39:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948570, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-02-22T10:31:36Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1439007"}], "who": "adw@mozilla.com", "when": "2018-02-25T00:39:34Z"}, {"changes": [{"removed": "naylor83@gmail.com", "field_name": "cc", "added": ""}], "who": "naylor83@gmail.com", "when": "2018-02-25T19:17:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Tobias.Marty@gmx.de"}], "who": "Tobias.Marty@gmx.de", "when": "2018-02-28T10:17:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8930304, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948567, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948570, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948571, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948572, "added": "review?(mak77@bonardo.net)"}], "who": "adw@mozilla.com", "when": "2018-03-07T02:44:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8930304, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948567, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948570, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948571, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948572, "added": ""}], "who": "adw@mozilla.com", "when": "2018-03-07T02:46:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948567, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948570, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948571, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948572, "added": "review?(mak77@bonardo.net)"}], "who": "adw@mozilla.com", "when": "2018-03-08T01:25:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948567, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-03-15T18:32:44Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1441561"}], "who": "mak77@bonardo.net", "when": "2018-03-15T22:19:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948570, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-03-16T09:14:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "yannbreliere@gmail.com"}], "who": "yannbreliere@gmail.com", "when": "2018-03-20T21:17:35Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "rhubscher@mozilla.com"}], "who": "mak77@bonardo.net", "when": "2018-04-13T19:12:23Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1205528"}], "who": "mak77@bonardo.net", "when": "2018-04-13T21:48:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948571, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-04-16T19:38:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948572, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-04-16T19:38:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gwimberly@softvision.com, rares.bologa@softvisioninc.eu"}], "who": "rares.bologa@softvisioninc.eu", "when": "2018-04-19T16:12:58Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mak77@bonardo.net)"}], "who": "adw@mozilla.com", "when": "2018-04-20T01:24:41Z"}, {"changes": [{"removed": "needinfo?(mak77@bonardo.net)", "field_name": "flagtypes.name", "added": ""}], "who": "mak77@bonardo.net", "when": "2018-04-20T16:24:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8930304, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948567, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948570, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948571, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948572, "added": "review?(mak77@bonardo.net)"}], "who": "adw@mozilla.com", "when": "2018-04-24T23:57:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "charmston@mozilla.com"}], "who": "charmston@mozilla.com", "when": "2018-04-30T17:54:02Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8930304, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-05-04T12:48:04Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948567, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-05-04T13:41:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948570, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-05-04T14:13:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948572, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-05-04T14:23:09Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948571, "added": ""}], "who": "mak77@bonardo.net", "when": "2018-05-04T14:58:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mverdi@mozilla.com"}], "who": "mverdi@mozilla.com", "when": "2018-05-04T16:26:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8930304, "added": "review?(mak77@bonardo.net)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8948571, "added": "review?(mak77@bonardo.net)"}], "who": "adw@mozilla.com", "when": "2018-05-07T22:46:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8930304, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-05-08T12:34:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mak77@bonardo.net)", "attachment_id": 8948571, "added": "review+"}], "who": "mak77@bonardo.net", "when": "2018-05-08T12:59:26Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla62"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-15 09:55:14"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "ncsoregi@mozilla.com", "when": "2018-05-15T09:55:14Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1461691"}], "who": "mak77@bonardo.net", "when": "2018-05-15T14:34:34Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1461753"}], "who": "adw@mozilla.com", "when": "2018-05-15T17:32:25Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1461736"}], "who": "mak77@bonardo.net", "when": "2018-05-15T17:49:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Virtual@teknik.io"}], "who": "Virtual@teknik.io", "when": "2018-05-16T16:23:16Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "claudiovspiess@gmail.com"}], "who": "claudiovspiess@gmail.com", "when": "2018-05-16T21:07:16Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1462275"}], "who": "jyavenard@mozilla.com", "when": "2018-05-17T09:01:13Z"}, {"changes": [{"removed": "", "field_name": "qa_contact", "added": "gwimberly@softvision.com"}], "who": "gwimberly@softvision.com", "when": "2018-05-17T22:06:53Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1462726"}], "who": "bzbarsky@mit.edu", "when": "2018-05-18T17:56:10Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1462046"}], "who": "mak77@bonardo.net", "when": "2018-05-20T17:02:10Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1463132"}], "who": "mak77@bonardo.net", "when": "2018-05-21T13:46:12Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1463580"}], "who": "mak77@bonardo.net", "when": "2018-05-22T21:30:46Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1464328"}], "who": "mak77@bonardo.net", "when": "2018-05-25T07:28:05Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1463017"}], "who": "mak77@bonardo.net", "when": "2018-05-28T11:50:09Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1464154"}], "who": "mak77@bonardo.net", "when": "2018-05-28T18:54:00Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1464270"}], "who": "adw@mozilla.com", "when": "2018-06-01T20:33:50Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1466233"}], "who": "adw@mozilla.com", "when": "2018-06-01T20:52:36Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1467627"}], "who": "adw@mozilla.com", "when": "2018-06-07T23:49:27Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1467631"}], "who": "adw@mozilla.com", "when": "2018-06-07T23:55:45Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1467537"}], "who": "mak77@bonardo.net", "when": "2018-06-08T09:42:59Z"}, {"changes": [{"removed": "affected", "field_name": "cf_status_firefox46", "added": "---"}], "who": "ryanvm@gmail.com", "when": "2018-06-18T01:15:08Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}