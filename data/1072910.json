{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "hv1989@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8504273}, {"creator": "hv1989@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8505580}, {"creator": "hv1989@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8505594}, {"creator": "hv1989@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8509489}, {"creator": "hv1989@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-10-22T16:44:41Z", "type_id": 4, "creation_date": "2014-10-22T16:34:25Z", "id": 1012510, "setter": "bbouvier@mozilla.com"}], "content_type": "text/plain", "id": 8509598}], "classification": "Components", "creator": "hv1989@gmail.com", "cc": ["bbouvier@mozilla.com", "cbook@mozilla.com", "nfitzgerald@mozilla.com", "till@tillschneidereit.net"], "depends_on": [1105232, 1111506, 1257194], "creation_time": "2014-09-25T12:26:19Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Tracelogger: Create the hooks for Debugger", "id": 1072910, "assigned_to_detail": {"email": "hv1989@gmail.com", "id": 196399, "name": "hv1989@gmail.com", "real_name": "Hannes Verschore [:h4writer]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "hv1989@gmail.com", "comment_count": 18, "comments": [{"text": "", "author": "hv1989@gmail.com", "id": 9360295, "time": "2014-09-25T12:26:19Z"}, {"text": "(This also includes making a difference between \"Script start/stop\" en \"Script annotation\". E.g. we currently annotate IonMonkey compilation with the script. But for Debugger we only want the \"Script start/stop\" messages).", "author": "hv1989@gmail.com", "id": 9360326, "time": "2014-09-25T12:27:55Z"}, {"text": "(In reply to Hannes Verschore [:h4writer] from comment #1)\n> [F]or Debugger we only want the \"Script start/stop\" messages).\n\nDo we? ISTM that having IonMonkey compilation events exposed to devtools could be very nice for perf analysis tools.", "author": "till@tillschneidereit.net", "id": 9360350, "time": "2014-09-25T12:34:14Z"}, {"text": "(In reply to Till Schneidereit [:till] from comment #2)\n> (In reply to Hannes Verschore [:h4writer] from comment #1)\n> > [F]or Debugger we only want the \"Script start/stop\" messages).\n> \n> Do we? ISTM that having IonMonkey compilation events exposed to devtools\n> could be very nice for perf analysis tools.\n\n*for now.\n\nEven if we expose the data, we need to be able to make a distinction between \"start script\" and \"annotate script\".", "author": "hv1989@gmail.com", "id": 9360354, "time": "2014-09-25T12:35:55Z"}, {"text": "(In reply to Hannes Verschore [:h4writer] from comment #3)\n> *for now.\n\nOk.\n\n> Even if we expose the data, we need to be able to make a distinction between\n> \"start script\" and \"annotate script\".\n\nTrue.", "author": "till@tillschneidereit.net", "id": 9360426, "time": "2014-09-25T12:51:16Z"}, {"text": "Created attachment 8504273\nWIP: Add debugger hooks\n\nThis adds the hooks needed for debugger:\n- startTraceLogging();\n- endTraceLogging();\n- drainTraceLogging();\n\nCurrently drainTraceLogging returns: [{data:\"\"}, {data: \"\"}, ...]. The format still needs to get adjusted to be somewhat closer to what was requested in bug 1065722 comment 2.\n\n> var du = new Debugger();\n> du.prepareTraceLogger({\n>     Scripts: true\n> });\n> \n> du.startTraceLogging();\n> \n> // some code\n> \n> print(JSON.stringify(du.drainTraceLogging()));\n\ne.g. now prints (with all patches):\n\n[{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:8:10\"},{\"data\":\"script /tmp/test38.js:27:10\"},{\"data\":\"Stop\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:41:13\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:41:13\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:41:13\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:41:13\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:41:13\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:48:14\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:48:14\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:48:14\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:41:13\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:57:14\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:57:14\"},{\"data\":\"Stop\"},{\"data\":\"script /tmp/test38.js:57:14\"},{\"data\":\"Stop\"}]", "author": "hv1989@gmail.com", "id": 9440385, "time": "2014-10-13T20:37:34Z"}, {"text": "Created attachment 8505580\nAdd hooks\n\nI made the setupTraceLogger and drainTraceLogger nightly only, since these are not stable yet. I cannot guarantee the output won't change. I'm actually very confident it will still change and I don't want people rely on it yet.\n\nThe first idea is to use this for tracing. The idea is to support that and keep the this api as stable as possible.\n\nOutput of drainTraceLoggerTraces:\n>         [{\n>             \"logType\": \"Script\",\n>             \"fileName\": \"/tmp/test38.js:1:0\",\n>             \"lineNumber\": \"\",\n>             \"columnNumber\": \"\"\n>         }, {\n>             \"logType\": \"Script\",\n>             \"fileName\": \"/tmp/test38.js:8:10\",\n>             \"lineNumber\": \"\",\n>             \"columnNumber\": \"\"\n>         }, {\n>             \"logType\": \"Stop\"\n>         }, {\n>             \"logType\": \"Script\",\n>             \"fileName\": \"/tmp/test38.js:8:10\",\n>             \"lineNumber\": \"\",\n>             \"columnNumber\": \"\"\n>         }, {\n>             \"logType\": \"Script\",\n>             \"fileName\": \"/tmp/test38.js:8:10\",\n>             \"lineNumber\": \"\",\n>             \"columnNumber\": \"\"\n>         },\n>         ...\n\nIn other words: we are very close. I only needs some extra patches so the fuzzers don't trip on some obvious things, before landing everything.", "author": "hv1989@gmail.com", "id": 9451196, "time": "2014-10-15T17:27:45Z"}, {"text": "Comment on attachment 8505580\nAdd hooks\n\nReview of attachment 8505580:\n-----------------------------------------------------------------\n\nOh I just noticed I was a bit too fast.", "author": "hv1989@gmail.com", "id": 9451205, "time": "2014-10-15T17:28:47Z"}, {"text": "Created attachment 8505594\nAdd hooks\n\nThis is better ;)\n\nExample:\n>     [{\n>         \"logType\": \"Script\",\n>         \"fileName\": \"/tmp/test38.js\",\n>         \"lineNumber\": \"1\",\n>         \"columnNumber\": \"0\"\n>     }, {\n>         \"logType\": \"Script\",\n>         \"fileName\": \"/tmp/test38.js\",\n>         \"lineNumber\": \"8\",\n>         \"columnNumber\": \"10\"\n>     }, {\n>         \"logType\": \"Stop\"\n>     }, {\n>         \"logType\": \"Script\",\n>         \"fileName\": \"/tmp/test38.js\",\n>         \"lineNumber\": \"8\",\n>         \"columnNumber\": \"10\"\n>     }, {\n>         \"logType\": \"Script\",\n>         \"fileName\": \"/tmp/test38.js\",\n>         \"lineNumber\": \"8\",\n>         \"columnNumber\": \"10\"\n>     }, {\n>         \"logType\": \"Stop\"\n>     },\n>     ...", "author": "hv1989@gmail.com", "id": 9451308, "time": "2014-10-15T17:48:13Z"}, {"text": "Comment on attachment 8505594\nAdd hooks\n\nReview of attachment 8505594:\n-----------------------------------------------------------------\n\nExcept for TLThread::getEvents(), it seems to me that all TLThread::*debuggers* should belong to the Debugger itself (even naming of these members is a hint that it should), not to the TLThread, especially as TLThread::debuggerLostEvents() isn't used. TL shouldn't have to worry about its consumers losing events.\n\n::: js/src/vm/Debugger.cpp\n@@ +3128,5 @@\n> +    if (!args.requireAtLeast(cx, \"Debugger.startTraceLogger\", 0))\n> +        return false;\n> +\n> +    TraceLoggerThread *logger = TraceLoggerForMainThread(cx->runtime());\n> +    TraceLoggerEnable(logger, cx);\n\ndon't forget to set a rval here and below to avoid some silly differential testing bugs.\nEven better, all these functions seem to return a bool, so how about just returning them in rval?\n\n@@ +3141,5 @@\n> +    if (!args.requireAtLeast(cx, \"Debugger.endTraceLogger\", 0))\n> +        return false;\n> +\n> +    TraceLoggerThread *logger = TraceLoggerForMainThread(cx->runtime());\n> +    TraceLoggerDisable(logger);\n\nand here\n\n@@ +3173,5 @@\n> +    ContinuousSpace<EventEntry> *events = logger->getEvents();\n> +\n> +    RootedObject array(cx, NewDenseEmptyArray(cx));\n> +\n> +    uint32_t index = 0;\n\nnit: index is unused\n\n@@ +3180,5 @@\n> +        if (!item)\n> +            return false;\n> +\n> +        const char *eventText = logger->eventText(events->data()[i].textId);\n> +        if (!DefineProperty(cx, item, \"data\", eventText, strlen(eventText)))\n\nCould you instead hoist the creation of the \"data\" string and reuse the String value in all DefineProperty calls? This would avoid creating the special DefineProperty variant above.\n\nAlso, can you make \"data\" and all other string literals static constants in this file?\n\n@@ +3185,5 @@\n> +            return false;\n> +    }\n> +\n> +    logger->updateDebuggerLastFlushedId();\n> +    args.rval().setObject(*array);\n\nDon't forget to add the newly created object to the array (now i understand the unused index).\n\n@@ +3192,5 @@\n> +}\n> +#endif\n> +\n> +bool\n> +Debugger::drainTraceLoggerTraces(JSContext *cx, unsigned argc, Value *vp)\n\nas stated on irc, everything TL produces are traces, so better naming would be appreciated here.\n\n@@ +3214,5 @@\n> +        if (textId != TraceLogger_Stop && !logger->textIdIsScriptEvent(textId))\n> +            continue;\n> +\n> +        const char *type = (textId == TraceLogger_Stop) ? \"Stop\" : \"Script\";\n> +        if (!DefineProperty(cx, item, \"logType\", type, strlen(type)))\n\nsame remark as in drainTraceLogger\n\n@@ +3217,5 @@\n> +        const char *type = (textId == TraceLogger_Stop) ? \"Stop\" : \"Script\";\n> +        if (!DefineProperty(cx, item, \"logType\", type, strlen(type)))\n> +            return false;\n> +\n> +        if (textId != TraceLogger_Stop) {\n\nAll the things inside this if() seem pretty bound to the format output by TL. Could you make it a function there?\n\n@@ +3230,5 @@\n> +\n> +            MOZ_ASSERT(lineno && lineno != eventText);\n> +            MOZ_ASSERT(colno && colno != eventText);\n> +\n> +            // The +7 is to remove the 'script ' at the beginning of text.\n\nMOZ_ASSERT(EqualChars(eventText, \"script \", 7));\n\n@@ +3231,5 @@\n> +            MOZ_ASSERT(lineno && lineno != eventText);\n> +            MOZ_ASSERT(colno && colno != eventText);\n> +\n> +            // The +7 is to remove the 'script ' at the beginning of text.\n> +            if (!DefineProperty(cx, item, \"fileName\", eventText + 7, size_t(lineno - eventText - 7)))\n\nSame remark as in drainTraceLogger\n\n@@ +3284,5 @@\n> +#endif\n> +    JS_FN(\"setupTraceLoggerForTraces\", Debugger::setupTraceLoggerForTraces, 0, 0),\n> +    JS_FN(\"startTraceLogger\", Debugger::startTraceLogger, 0, 0),\n> +    JS_FN(\"endTraceLogger\", Debugger::endTraceLogger, 0, 0),\n> +#ifdef NIGHTLY_BUILD\n\n(see comment in Debugger.h about making them all nightly-only and grouping)\n\n::: js/src/vm/Debugger.h\n@@ +375,2 @@\n>      static bool setupTraceLogger(JSContext *cx, unsigned argc, Value *vp);\n> +#endif\n\nAs stated on IRC, i'd prefer all of these functions to be nightly-only, or none of them to be. Providing an incomplete API seems rather wonky. I'd like to get Nick's opinion here.\n(whatever happens, can you group the nightly only functions together, please?)", "author": "bbouvier@mozilla.com", "id": 9478187, "time": "2014-10-21T15:18:31Z"}, {"text": "Created attachment 8509489\nAdd hooks\n\nAddresses review comments.\n\n1) Like discussed on IRC the DefineProperty helper function is still there. There was some confusing as to which char is getting copied. Though it resulted in using JSIDs for the function.\n\n2) I don't agree on the fact that we should make them all or none nightly only.\nIIRC we should try to not use \"ifdef NIGHTLY_BUILD\". And the setupTraceLoggerScriptCalls, drainTraceLoggerScriptCalls, startTraceLogger and endTraceLogger are all stable.\n\nNow setupTraceLogger/drainTraceLogger is for curious hearts and to give an idea what we can log, but is an unstable API. Humans will be able to read the logs without problem, but creating scripts depending on the exact output it provides won't work. That is the reason I want it behind NIGHTLY_BUILD. So it gives the devtools something to play with and to push for a more stable API. (So it will possibly increase the adoption of tracelogger). But is mostly playground for now. That's the message I want to send with NIGHTLY_BUILD. Good to toy with. Currently don't depend on it.\n\nIf you don't agree with it, I would rather remove these two functions than the alternatives (make all tracelogger function nightly only or make these two function non-nightly).", "author": "hv1989@gmail.com", "id": 9484547, "time": "2014-10-22T14:16:19Z"}, {"text": "Comment on attachment 8509489\nAdd hooks\n\nReview of attachment 8509489:\n-----------------------------------------------------------------\n\nSorry, API design is hard. I'd just remove the nightly only functions at this point, but that's your call. Also, I'd like to see a last updated version before holy r+.\n\n::: js/src/vm/Debugger.cpp\n@@ +356,5 @@\n>      sources(cx),\n>      objects(cx),\n> +    environments(cx),\n> +    traceLoggerLastDrainedId(0),\n> +    traceLoggerLastDrainedIteration(0)\n\nSo this is used by both drainTraceLogger and drainTraceLoggerScriptCalls, which is likely to confuse users if they interleave calls to these functions. That sounds like another argument for not keeping the drainTraceLogger nightly only functions, but if you want to keep them, would it make sense to use another pair of uint32?\n\n@@ +3039,5 @@\n>      args.rval().setObject(*global);\n>      return dbg->wrapDebuggeeValue(cx, args.rval());\n>  }\n>  \n> +#ifdef NIGHTLY_BUILD\n\ncan you group the two #ifdef NIGHTLY_BUILD together here as well, please?\n\n@@ +3044,2 @@\n>  bool\n>  Debugger::setupTraceLogger(JSContext *cx, unsigned argc, Value *vp)\n\nHow come setupTraceLogger isn't a part of this patch anymore?\n\n@@ +3110,5 @@\n>  }\n> +#endif\n> +\n> +bool\n> +Debugger::setupTraceLoggerScriptCalls(JSContext *cx, unsigned argc, Value *vp)\n\nSorry about naming craziness here, but this doesn't give the possibility to setup with an object. Could it be enableTraceLoggerScriptCalls instead?\n\n@@ +3118,5 @@\n> +        return false;\n> +\n> +    TraceLogEnableTextId(cx, TraceLogger_Scripts);\n> +\n> +    args.rval().setBoolean(true);\n\nrather than returning true here, can you either return undefined by symmetry with other functions or return the bool value returned by TraceLogEnableTextId?\n\n@@ +3164,5 @@\n> +    RootedValue str(cx, StringValue(text));\n> +    if (!JS_DefinePropertyById(cx, obj, id, str, JSPROP_ENUMERATE))\n> +        return false;\n> +\n> +    return true;\n\nhow about simply return JS_DefinePropertyById(cx, obj, id, str, JSPROP_ENUMERATE); ?\n\n@@ +3198,5 @@\n> +        if (!DefineProperty(cx, item, dataId, eventText, strlen(eventText)))\n> +            return false;\n> +\n> +        RootedValue obj(cx, ObjectValue(*item));\n> +        if (!JS_DefineElement(cx, array, index, obj, 0))\n\nif you don't use JSPROP_ENUMERATE here, will the element be available in |for in/of| loops? (same question below in the ScriptCalls variant)\n\n@@ +3232,5 @@\n> +    RootedObject array(cx, NewDenseEmptyArray(cx));\n> +    RootedId fileNameId(cx, AtomToId(cx->names().fileName));\n> +    RootedId lineNumberId(cx, AtomToId(cx->names().lineNumber));\n> +    RootedId columnNumberId(cx, AtomToId(cx->names().columnNumber));\n> +    JSAtom *logTypeAtom = Atomize(cx, \"logType\", strlen(\"logType\"));\n\nmaybe worth it to put it in common names as well?\n\n::: js/src/vm/Debugger.h\n@@ +268,5 @@\n>  \n>      /* The map from debuggee Envs to Debugger.Environment instances. */\n>      ObjectWeakMap environments;\n>  \n> +    /* TODO */\n\nremove this or complete\n\n::: js/src/vm/TraceLogging.h\n@@ +102,5 @@\n>      bool enable();\n>      bool enable(JSContext *cx);\n>      bool disable();\n>  \n> +    ContinuousSpace<EventEntry> *getEvents() {\n\nunused\n\n@@ +109,5 @@\n> +\n> +    // Given the previous iteration and lastEntryId, return an array of\n> +    // events. At the same time update the iteration and lastEntry and gives\n> +    // back how many events there are and if there were any lost events.\n> +    EventEntry *getEvents(uint32_t *lastIteration, uint32_t *lastEntryId,\n\nConsidering what it does now, getEvents seems too blur. What about getEventsFrom?\n\n@@ +113,5 @@\n> +    EventEntry *getEvents(uint32_t *lastIteration, uint32_t *lastEntryId,\n> +                          size_t *num, bool *lostEvents)\n> +    {\n> +        EventEntry *start;\n> +        *lostEvents = this->lostEvents(*lastIteration, *lastEntryId);\n\nThis could be made in the debugger itself, as lostEvents(...) is public and its two arguments come from the outside. That would have the benefit to remove one arg to this function call and split responsibilities.\n\nI would also think that once again, this is not TL's responsability to think about users losing events. The work made by getEvents(...) should be internalized by the Debugger. If you decide to reuse getEvents(), and use it along with iteration(), all this work could be done in the Debugger itself. Not blocking review on this, as i can see the advantage that this could be reused by TLGraph in the future.\n\n@@ +117,5 @@\n> +        *lostEvents = this->lostEvents(*lastIteration, *lastEntryId);\n> +        if (iteration_ == *lastIteration) {\n> +            MOZ_ASSERT(events.lastEntryId() >= *lastEntryId);\n> +            *num = events.lastEntryId() - *lastEntryId;\n> +            start = events.data() + (*lastEntryId + 1);\n\ni'd just remove the parenthesis here around the +\n\n@@ +134,5 @@\n> +    void extractScriptDetails(uint32_t textId, const char **filename, size_t *filename_len,\n> +                              const char **lineno, size_t *lineno_len, const char **colno,\n> +                              size_t *colno_len);\n> +\n> +    uint32_t iteration() {\n\nunused\n\n@@ +146,5 @@\n> +            return false;\n> +        }\n> +\n> +        // When proceeded to the next iteration, but lastEntryId points to\n> +        // the maximum capacity. There are no logs that are lost.\n\nPlease make it a single sentence (otherwise the first one has no main section).", "author": "bbouvier@mozilla.com", "id": 9485051, "time": "2014-10-22T15:35:46Z"}, {"text": "Created attachment 8509598\nAdd hooks\n\n(In reply to Benjamin Bouvier [:bbouvier] from comment #11)\n> Comment on attachment 8509489\n> Add hooks\n> \n> Review of attachment 8509489:\n> -----------------------------------------------------------------\n> \n> Sorry, API design is hard. I'd just remove the nightly only functions at\n> this point, but that's your call. Also, I'd like to see a last updated\n> version before holy r+.\n> \n> ::: js/src/vm/Debugger.cpp\n> @@ +356,5 @@\n> >      sources(cx),\n> >      objects(cx),\n> > +    environments(cx),\n> > +    traceLoggerLastDrainedId(0),\n> > +    traceLoggerLastDrainedIteration(0)\n> \n> So this is used by both drainTraceLogger and drainTraceLoggerScriptCalls,\n> which is likely to confuse users if they interleave calls to these\n> functions. That sounds like another argument for not keeping the\n> drainTraceLogger nightly only functions, but if you want to keep them, would\n> it make sense to use another pair of uint32?\n\nGood point.\n\n> \n> @@ +3039,5 @@\n> >      args.rval().setObject(*global);\n> >      return dbg->wrapDebuggeeValue(cx, args.rval());\n> >  }\n> >  \n> > +#ifdef NIGHTLY_BUILD\n> \n> can you group the two #ifdef NIGHTLY_BUILD together here as well, please?\n> \n> @@ +3044,2 @@\n> >  bool\n> >  Debugger::setupTraceLogger(JSContext *cx, unsigned argc, Value *vp)\n> \n> How come setupTraceLogger isn't a part of this patch anymore?\n\nNever was. Bug 1072906 contains that patch ;)\n\n> @@ +3110,5 @@\n> >  }\n> > +#endif\n> > +\n> > +bool\n> > +Debugger::setupTraceLoggerScriptCalls(JSContext *cx, unsigned argc, Value *vp)\n> \n> Sorry about naming craziness here, but this doesn't give the possibility to\n> setup with an object. Could it be enableTraceLoggerScriptCalls instead?\n\nI prefer not. This means \"setup Tracelogger\". No need for an object. EnableTraceLoggerScriptCalls would cause too much confusion with StartTraceLogger. People would think the TraceLogger would be already recording after doing EnableXXX. So I think setupXXX is still the best option.\n\n> \n> @@ +3118,5 @@\n> > +        return false;\n> > +\n> > +    TraceLogEnableTextId(cx, TraceLogger_Scripts);\n> > +\n> > +    args.rval().setBoolean(true);\n> \n> rather than returning true here, can you either return undefined by symmetry\n> with other functions or return the bool value returned by\n> TraceLogEnableTextId?\n\nTraceLogEnableTextId doesn't return a bool. So since it didn't fail it returns true to indicate setting up was successful. (In symmetry with plain setupTraceLogger which return false upon fail).\n\n> @@ +3232,5 @@\n> > +    RootedObject array(cx, NewDenseEmptyArray(cx));\n> > +    RootedId fileNameId(cx, AtomToId(cx->names().fileName));\n> > +    RootedId lineNumberId(cx, AtomToId(cx->names().lineNumber));\n> > +    RootedId columnNumberId(cx, AtomToId(cx->names().columnNumber));\n> > +    JSAtom *logTypeAtom = Atomize(cx, \"logType\", strlen(\"logType\"));\n> \n> maybe worth it to put it in common names as well?\n\nFound it a bit too specific to TL. So I didn't add it, currently. The fact you are also hesitant also made me not change it.\n \n> @@ +109,5 @@\n> > +\n> > +    // Given the previous iteration and lastEntryId, return an array of\n> > +    // events. At the same time update the iteration and lastEntry and gives\n> > +    // back how many events there are and if there were any lost events.\n> > +    EventEntry *getEvents(uint32_t *lastIteration, uint32_t *lastEntryId,\n> \n> Considering what it does now, getEvents seems too blur. What about\n> getEventsFrom?\n\nI went for getEventsStartingAt", "author": "hv1989@gmail.com", "id": 9485476, "time": "2014-10-22T16:34:25Z"}, {"text": "Comment on attachment 8509598\nAdd hooks\n\nReview of attachment 8509598:\n-----------------------------------------------------------------\n\nNice, thanks!\n\n::: js/src/vm/CommonPropertyNames.h\n@@ +44,5 @@\n>      macro(count, count, \"count\") \\\n>      macro(currency, currency, \"currency\") \\\n>      macro(currencyDisplay, currencyDisplay, \"currencyDisplay\") \\\n>      macro(std_iterator, std_iterator, \"@@iterator\") \\\n> +    macro(data, data, \"data\") \\\n\nSame argument applies to data, then, as it's the first use...\n\n::: js/src/vm/TraceLogging.h\n@@ +127,5 @@\n> +    void extractScriptDetails(uint32_t textId, const char **filename, size_t *filename_len,\n> +                              const char **lineno, size_t *lineno_len, const char **colno,\n> +                              size_t *colno_len);\n> +\n> +    uint32_t iteration() {\n\nstill unused", "author": "bbouvier@mozilla.com", "id": 9485549, "time": "2014-10-22T16:44:41Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/ba17a7e1ae7b", "author": "hv1989@gmail.com", "id": 9617093, "time": "2014-11-20T16:52:19Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/ba17a7e1ae7b", "author": "kwierso@gmail.com", "id": 9619737, "time": "2014-11-21T01:38:04Z"}, {"text": "Hi, sorry had to back this out in https://treeherder.mozilla.org/ui/#/jobs?repo=mozilla-central&revision=b9fd2074d588 since with the landings of this changesets we had permafailures in ggc tests like https://treeherder.mozilla.org/ui/logviewer.html#?job_id=661496&repo=mozilla-central", "author": "cbook@mozilla.com", "id": 9620495, "time": "2014-11-21T07:15:33Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/bad0e92bd026", "author": "kwierso@gmail.com", "id": 9742607, "time": "2014-12-30T23:54:26Z"}], "cf_last_resolved": "2014-12-30T23:54:26Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2016-03-16T22:39:08Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1065722], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript Engine", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla37", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "hv1989@gmail.com", "id": 196399, "name": "hv1989@gmail.com", "real_name": "Hannes Verschore [:h4writer]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bbouvier@mozilla.com", "id": 468907, "name": "bbouvier@mozilla.com", "real_name": "Benjamin Bouvier [:bbouvier]"}, {"email": "cbook@mozilla.com", "id": 277293, "name": "cbook@mozilla.com", "real_name": "Carsten Book [:Tomcat]"}, {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, {"email": "till@tillschneidereit.net", "id": 292831, "name": "till@tillschneidereit.net", "real_name": "Till Schneidereit [:till]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "blocks", "added": "1065722"}], "who": "hv1989@gmail.com", "when": "2014-09-25T12:27:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "till@tillschneidereit.net"}], "who": "till@tillschneidereit.net", "when": "2014-09-25T12:34:14Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "hv1989@gmail.com"}], "who": "hv1989@gmail.com", "when": "2014-10-13T20:37:34Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8504273, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8505580, "added": "review?(benj@benj.me)"}, {"removed": "", "field_name": "cc", "added": "benj@benj.me"}], "who": "hv1989@gmail.com", "when": "2014-10-15T17:27:45Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(benj@benj.me)", "attachment_id": 8505580, "added": ""}], "who": "hv1989@gmail.com", "when": "2014-10-15T17:28:47Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8505580, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8505594, "added": "review?(benj@benj.me)"}], "who": "hv1989@gmail.com", "when": "2014-10-15T17:48:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(benj@benj.me)", "attachment_id": 8505594, "added": ""}], "who": "bbouvier@mozilla.com", "when": "2014-10-21T15:18:31Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8505594, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8509489, "added": "review?(benj@benj.me)"}], "who": "hv1989@gmail.com", "when": "2014-10-22T14:16:19Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(benj@benj.me)", "attachment_id": 8509489, "added": ""}], "who": "bbouvier@mozilla.com", "when": "2014-10-22T15:35:46Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8509489, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8509598, "added": "review?(benj@benj.me)"}], "who": "hv1989@gmail.com", "when": "2014-10-22T16:34:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(benj@benj.me)", "attachment_id": 8509598, "added": "review+"}], "who": "bbouvier@mozilla.com", "when": "2014-10-22T16:44:41Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla36"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2014-11-20 17:38:04"}], "who": "kwierso@gmail.com", "when": "2014-11-21T01:38:04Z"}, {"changes": [{"removed": "RESOLVED", "field_name": "status", "added": "REOPENED"}, {"removed": "", "field_name": "cc", "added": "cbook@mozilla.com"}, {"removed": "FIXED", "field_name": "resolution", "added": ""}], "who": "cbook@mozilla.com", "when": "2014-11-21T07:15:33Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1105232"}], "who": "hv1989@gmail.com", "when": "2014-11-26T13:44:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfitzgerald@mozilla.com"}], "who": "nfitzgerald@mozilla.com", "when": "2014-12-04T18:16:30Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1111506"}], "who": "nth10sd@gmail.com", "when": "2014-12-15T09:11:02Z"}, {"changes": [{"removed": "REOPENED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "mozilla36", "field_name": "target_milestone", "added": "mozilla37"}, {"removed": "2014-11-20 17:38:04", "field_name": "cf_last_resolved", "added": "2014-12-30 15:54:26"}], "who": "kwierso@gmail.com", "when": "2014-12-30T23:54:26Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1257194"}], "who": "nth10sd@gmail.com", "when": "2016-03-16T22:39:08Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}