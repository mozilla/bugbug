{"cf_tracking_thunderbird_esr52": "---", "status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "classification": "Components", "creator": "ted@mielczarek.org", "cc": ["catlee@mozilla.com", "cmanchester@mozilla.com", "core-build-config-reviews@mozilla.bugs", "gps@mozilla.com", "kmoir@mozilla.com", "mh+mozilla@glandium.org", "nalexander@mozilla.com"], "depends_on": [], "creation_time": "2017-11-29T18:55:32Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "summary": "Parallelize `mach artifact toolchain` download/unpack?", "cf_last_resolved": null, "attachments": [{"creator": "catlee@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2018-02-15T17:07:04Z", "type_id": 607, "creation_date": "2018-02-15T15:03:55Z", "id": 1717169, "setter": "nalexander@mozilla.com"}], "content_type": "text/plain", "id": 8950567}, {"creator": "catlee@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-01T00:35:37Z", "type_id": 4, "creation_date": "2018-03-01T00:35:37Z", "id": 1723196, "setter": "nalexander@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8954929}, {"creator": "catlee@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8956527}, {"creator": "gps@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-01T15:18:22Z", "type_id": 4, "creation_date": "2018-05-01T15:18:22Z", "id": 1751166, "setter": "mshal@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8969495}, {"creator": "gps@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-01T15:20:58Z", "type_id": 4, "creation_date": "2018-05-01T15:20:58Z", "id": 1751168, "setter": "mshal@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8969496}, {"creator": "gps@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-01T15:37:22Z", "type_id": 4, "creation_date": "2018-04-20T00:11:30Z", "id": 1746663, "setter": "nalexander@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8969497}], "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "comments": [{"text": "I was looking at the code for `mach artifact toolchain` and noticed that it does all its downloads in series currently:\nhttps://dxr.mozilla.org/mozilla-central/rev/c2248f85346939d3e0b01f57276c440ccb2d16a1/python/mozbuild/mozbuild/mach_commands.py#1422\n\nI wonder if it would be faster in CI to do the download/unpack in parallel? Downloads from S3 should be incredibly fast, I would be surprised if we could actually max out the network bandwidth. Disk I/O might be the limiting factor, but even then I suspect downloading multiple artifacts in parallel would be faster.\n\nIf we used multiple processes via concurrent.futures then we could also parallelize unpacks, which ought to scale well. We're doing all our builds on beefy multicore instances, we might as well utilize those cores.\n\nLooking at an arbitrary linux64-opt task from inbound:\nhttps://tools.taskcluster.net/groups/e67fUCzEQj2-P0CRMi1JiA/tasks/HKkMXMOuRA6IqhIPZc0lMg/details\n\nThe log shows:\n[task 2017-11-29T16:32:21.217Z] 16:32:21     INFO - Copy/paste: /usr/bin/python2.7 -u /builds/worker/workspace/build/src/mach artifact toolchain -v --retry 4 --artifact-manifest /builds/worker/workspace/build/src/toolchains.json --tooltool-manifest /builds/worker/workspace/build/src/browser/config/tooltool-manifests/linux32/releng.manifest --tooltool-url http://relengapi/tooltool/ --cache-dir /builds/worker/tooltool-cache public/build/clang.tar.xz@cs28pPSXT0CrYwwX6YZYNg public/build/gcc.tar.xz@YwDW6Ek_Su60IwZXuvJVbA public/build/rustc.tar.xz@Uxt1EzDYTqu_TCZ3VKVQ8A public/build/sccache2.tar.xz@eTLeS7b6RTKubnSIZ8dQXA\n<...>\n[task 2017-11-29T16:32:21.971Z] 16:32:21     INFO -   0:00.66 materialized mozbuild.action.tooltool.FileRecord(filename='gtk3.tar.xz', size=11189216, digest='18bc52b0599b1308b667e282abb45f47597bfc98a5140cfcab8da71dacf89dd76d0dee22a04ce26fe7ad1f04e2d6596991f9e5b01fd2aaaab5542965f596b0e6', algorithm='sha512', visibility=None)\n[task 2017-11-29T16:32:21.971Z] 16:32:21     INFO -   0:00.66 loaded manifest from file '/builds/worker/workspace/build/src/browser/config/tooltool-manifests/linux32/releng.manifest'\n[task 2017-11-29T16:32:23.193Z] 16:32:23     INFO -   0:01.88 Downloading gtk3.tar.xz\n<...>\n[task 2017-11-29T16:32:33.951Z] 16:32:33     INFO -   0:12.64 Downloaded artifact to /builds/worker/tooltool-cache/877fef0f714edddc-sccache2.tar.xz\n[task 2017-11-29T16:32:33.984Z] 16:32:33     INFO -   0:12.68 hashed u'/builds/worker/tooltool-cache/877fef0f714edddc-sccache2.tar.xz' with sha256 to be de695b7c87b7489baea3078b59848b12926ab7322640586434e1dd01673cefa2\n[task 2017-11-29T16:32:34.036Z] 16:32:34     INFO -   0:12.73 untarring \"/builds/worker/workspace/build/src/gtk3.tar.xz\"\n[task 2017-11-29T16:33:08.537Z] 16:33:08     INFO -   0:47.23 untarring \"/builds/worker/workspace/build/src/clang.tar.xz\"\n[task 2017-11-29T16:33:22.955Z] 16:33:22     INFO -   1:01.65 untarring \"/builds/worker/workspace/build/src/gcc.tar.xz\"\n[task 2017-11-29T16:33:38.909Z] 16:33:38     INFO -   1:17.60 untarring \"/builds/worker/workspace/build/src/rustc.tar.xz\"\n[task 2017-11-29T16:33:51.417Z] 16:33:51     INFO -   1:30.11 untarring \"/builds/worker/workspace/build/src/sccache2.tar.xz\"\n[task 2017-11-29T16:33:52.358Z] 16:33:52     INFO - Return code: 0\n\nIt looks like it takes just under 13 seconds to download all the toolchain artifacts, and then another 1m17s to unpack them all. Even if we just ran the unpacks in parallel, the long pole there looks to be gtk3.tar.xz taking ~35s to unpack, so if we could get the unpack step down to just that long we'd be saving ~40s of setup time.", "author": "ted@mielczarek.org", "id": 12884113, "time": "2017-11-29T18:55:32Z"}, {"text": "Artifact download and extract accounts for a lot of the setup time in build tasks. It is well worth our time to make things parallel.", "author": "gps@mozilla.com", "id": 12884131, "time": "2017-11-29T19:04:10Z"}, {"text": "Created attachment 8950567\nWIP for parallelizing tool downloading and unpacking\n\nThis seems to work in very limited testing on try.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=d3685cabcb417357c724f942beec08e7926ab618\n\nI don't like how I've disabled cleaning up the download manager. I did that to work around the artifact cache cancelling other downloads happening in parallel after the first one completed.", "author": "catlee@mozilla.com", "id": 13038802, "time": "2018-02-13T13:58:00Z"}, {"text": "Comment on attachment 8950567\nWIP for parallelizing tool downloading and unpacking\n\nNick, I think you added in the original support for using the download manager in artifacts.py. Do you remember why you added the call to .cancel() after finishing the download?", "author": "catlee@mozilla.com", "id": 13044730, "time": "2018-02-15T15:03:55Z"}, {"text": "Comment on attachment 8950567\nWIP for parallelizing tool downloading and unpacking\n\nReview of attachment 8950567:\n-----------------------------------------------------------------\n\n::: python/mozbuild/mozbuild/action/tooltool.py\n@@ +513,5 @@\n>          return None\n>  \n>  \n>  def clean_path(dirname):\n>      \"\"\"Remove a subtree if is exists. Helper for unpack_file().\"\"\"\n\nnit: might as well fix s/is exists/it exists/.\n\nThis comment needs to be updated 'cuz it's \"if it exists and is a directory\" now.\n\n@@ +527,5 @@\n>      Xz support is handled by shelling out to 'tar'.\"\"\"\n>      if tarfile.is_tarfile(filename):\n>          tar_file, zip_ext = os.path.splitext(filename)\n>          base_file, tar_ext = os.path.splitext(tar_file)\n> +        clean_path(os.path.basename(base_file))\n\nThis changes the behaviour, so you need to update the comment to be clear about the directories.  I think this is the wrong way to achieve your goal, too -- you should be explicit about where you want the files to come from and not make assumptions about the current working directory, which is what this change does (AFAICT).\n\n::: python/mozbuild/mozbuild/artifacts.py\n@@ +790,5 @@\n>              # Use the file name from the url if it looks like a hash digest.\n>              if len(fname) not in (32, 40, 56, 64, 96, 128):\n>                  raise TypeError()\n>              binascii.unhexlify(fname)\n> +            basename = fname\n\nIs this WIP?  Why not just use `fname`?\n\n@@ +841,5 @@\n>                  'Downloaded artifact to {path}')\n>              return os.path.abspath(mozpath.join(self._cache_dir, fname))\n>          finally:\n>              # Cancel any background downloads in progress.\n> +            # self._download_manager.cancel()\n\nI'm quite confident I culted this code from mozregression.  It wouldn't have been https://github.com/mozilla/mozregression/blob/b3ceac24abe292ac01e750cc1dad87f801f7aec0/mozregression/bisector.py#L425 exactly, but it would have been following that approach: belt and braces, cancel everything on the way out the door.\n\n::: python/mozbuild/mozbuild/mach_commands.py\n@@ +1402,5 @@\n>              name, task_id = f.rsplit('@', 1)\n>              record = ArtifactRecord(task_id, name)\n>              records[record.filename] = record\n>  \n> +        def _fetch_record(record):\n\nThis makes less sense now, returning `record` or `None`.  Raise an exception if the `record` is not valid.\n\n@@ +1476,5 @@\n> +\n> +        with ThreadPoolExecutor(8) as pool:\n> +            # Download artifacts first\n> +            unpacking = []\n> +            for record in pool.map(_fetch_record, records.values()):\n\nCan we not compose fetch and unpack?  Is there an advantage to staging manually in the way that you have?\n\n@@ +1478,5 @@\n> +            # Download artifacts first\n> +            unpacking = []\n> +            for record in pool.map(_fetch_record, records.values()):\n> +                if record is None:\n> +                    return 1\n\nFollow-on from above: I think this would be better with an exception, rather than relying on logging and muffling the error to evolve safely over time.", "author": "nalexander@mozilla.com", "id": 13045185, "time": "2018-02-15T17:07:04Z"}, {"text": "Comment on attachment 8950567\nWIP for parallelizing tool downloading and unpacking\n\nReview of attachment 8950567:\n-----------------------------------------------------------------\n\n::: python/mozbuild/mozbuild/action/tooltool.py\n@@ +527,5 @@\n>      Xz support is handled by shelling out to 'tar'.\"\"\"\n>      if tarfile.is_tarfile(filename):\n>          tar_file, zip_ext = os.path.splitext(filename)\n>          base_file, tar_ext = os.path.splitext(tar_file)\n> +        clean_path(os.path.basename(base_file))\n\nThis is to try and fix tooltool requiring the tarball to be present in the current directory in order to unpack it. See the changes in mach_commands.py where I remove the os.link / shutil.copy.\n\nYou're right though, I don't really grok why this is here; it's kind of assuming that the tarball includes a directory called `base_file`.\n\n::: python/mozbuild/mozbuild/artifacts.py\n@@ +790,5 @@\n>              # Use the file name from the url if it looks like a hash digest.\n>              if len(fname) not in (32, 40, 56, 64, 96, 128):\n>                  raise TypeError()\n>              binascii.unhexlify(fname)\n> +            basename = fname\n\nSo I can use `basename` in the Downloading message below. `fname` has the hash prepended to it in some cases.", "author": "catlee@mozilla.com", "id": 13046618, "time": "2018-02-16T01:09:42Z"}, {"text": "Created attachment 8954929\nBug 1421734: Download and unpack toolchain artifacts in parallel\n\nReview commit: https://reviewboard.mozilla.org/r/224100/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/224100/", "author": "catlee@mozilla.com", "id": 13077640, "time": "2018-02-28T21:09:43Z"}, {"text": "Comment on attachment 8954929\nBug 1421734: Download and unpack toolchain artifacts in parallel\n\nhttps://reviewboard.mozilla.org/r/224100/#review230120\n\nI'm basically fine with this.  nits about whitespace, a real consideration about `cancel`, and some style choices.  I will be away until Monday, March 5 so if you want re-review, flag Build instead of me.  Thanks for making this happen!\n\n::: python/mozbuild/mozbuild/artifacts.py:773\n(Diff revision 1)\n>  \n>  \n>  class ArtifactCache(object):\n>      '''Fetch Task Cluster artifact URLs and purge least recently used artifacts from disk.'''\n>  \n> -    def __init__(self, cache_dir, log=None, skip_cache=False):\n> +    def __init__(self, cache_dir, log=None, skip_cache=False, cancel_when_done=True):\n\nI think you should just get rid of `cancel` entirely.  What you have now has a flag on the cache abstraction, but each call to fetch would invoke `cancel`, which doesn't make sense.  If you really want to make cancellation a thing, we should make the cache a Python context manager so that it can clean up after itself.  I don't think we want to do that right now.\n\n::: python/mozbuild/mozbuild/artifacts.py:860\n(Diff revision 1)\n>              return\n>  \n>          self._persist_limit.remove_all()\n>  \n>  \n> +\n\nextract new lines?\n\n::: python/mozbuild/mozbuild/mach_commands.py:1471\n(Diff revision 1)\n>              # when possible.\n>              try:\n>                  os.link(record.filename, local)\n>              except Exception:\n>                  shutil.copy(record.filename, local)\n> +\n\neh?\n\n::: python/mozbuild/mozbuild/mach_commands.py:1491\n(Diff revision 1)\n>                  unpack_file(local, record.setup)\n>                  os.unlink(local)\n>  \n> +            return record\n> +\n> +        with ThreadPoolExecutor(8) as pool:\n\nMan we have a lot of choices in the tree for the number of threads to use.  One more won't hurt, I guess.\n\n::: python/mozbuild/mozbuild/mach_commands.py:1492\n(Diff revision 1)\n>                  os.unlink(local)\n>  \n> +            return record\n> +\n> +        with ThreadPoolExecutor(8) as pool:\n> +            for record in pool.map(_fetch_and_unpack_record, records.values()):\n\nWhy isn't this just `downloaded = pool.map(...)`, perhaps with a `list` thrown in?\n\n::: python/mozbuild/mozbuild/mach_commands.py:1495\n(Diff revision 1)\n> +\n> +        with ThreadPoolExecutor(8) as pool:\n> +            for record in pool.map(_fetch_and_unpack_record, records.values()):\n> +                downloaded.append(record)\n> +\n> +        cache._download_manager.cancel()\n\nMaybe this should be `try:finally:`, if you care about it.  And are you certain `cancel` is idempotent (i.e., you can call it twice)?", "author": "nalexander@mozilla.com", "id": 13078194, "time": "2018-03-01T00:35:37Z"}, {"text": "Comment on attachment 8954929\nBug 1421734: Download and unpack toolchain artifacts in parallel\n\nhttps://reviewboard.mozilla.org/r/224100/#review230120\n\n> I think you should just get rid of `cancel` entirely.  What you have now has a flag on the cache abstraction, but each call to fetch would invoke `cancel`, which doesn't make sense.  If you really want to make cancellation a thing, we should make the cache a Python context manager so that it can clean up after itself.  I don't think we want to do that right now.\n\nI was trying to preserve the previous behavior of cancelling per fetch. There are some other uses of the artifact cache.\n\nHowever, removing the cancel doesn't seem to have any undesired effects.\n\n> Maybe this should be `try:finally:`, if you care about it.  And are you certain `cancel` is idempotent (i.e., you can call it twice)?\n\nThis would have been called only once. I'll remove it entirely in the upcoming patch.", "author": "catlee@mozilla.com", "id": 13108476, "time": "2018-03-06T16:51:35Z"}, {"text": "Created attachment 8956527\nAddress feedback\n\nReview commit: https://reviewboard.mozilla.org/r/225436/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/225436/", "author": "catlee@mozilla.com", "id": 13108733, "time": "2018-03-06T17:58:51Z"}, {"text": "Comment on attachment 8954929\nBug 1421734: Download and unpack toolchain artifacts in parallel\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/224100/diff/1-2/", "author": "catlee@mozilla.com", "id": 13108734, "time": "2018-03-06T17:58:51Z"}, {"text": "Pushed by gszorc@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/5ceb1365ae75\nDownload and unpack toolchain artifacts in parallel; r=nalexander", "author": "pulsebot@bots.tld", "id": 13110035, "time": "2018-03-07T02:42:35Z"}, {"text": "Backed out changeset 5ceb1365ae75 (bug 1421734) for build Bustage on MinGW \n\nLog of the failure:\nhttps://taskcluster-artifacts.net/OminZNZPRxy3W10L8pngug/0/public/logs/live_backing.log\n\nBackout:\nhttps://hg.mozilla.org/integration/autoland/rev/ff525890cbffb52c173629e38beaedb79b827f0b\n\nPush that got backout:\nhttps://treeherder.mozilla.org/#/jobs?repo=autoland&revision=5ceb1365ae756eabe0763de42cb64fd9dc3e79dc", "author": "dluca@mozilla.com", "id": 13110110, "time": "2018-03-07T03:50:06Z"}, {"text": "For reasons I can't explain, the makensis executable couldn't be located with this patch. This should have been caught as a fatal configure error. But it wasn't. The build failed later during installer generation due to the missing binary.\n\nI suspect an issue with extraction path, cwd, or something of that nature.", "author": "gps@mozilla.com", "id": 13110113, "time": "2018-03-07T03:53:10Z"}, {"text": "I think the problem is that nsis.tar.xz unpacks artifacts into mingw32/share/nsis/. mingw32.tar.xz also unpacks into the mingw32 directory. Tooltool expects that archives contain a single top-level directory inside them that matches the archive's basename. It enforces this by removing the top-level directory if it exists prior to unpacking. In this case, nsis.tar.xz is being unpacked first, and then when mingw32 is being processed, tooltool deletes the mingw32 directory before extracting the mingw32 archive.\n\nSee https://taskcluster-artifacts.net/WoQ5RO8UTiS-sPp7AbPlUw/0/public/logs/live_backing.log with more debugging output.", "author": "catlee@mozilla.com", "id": 13114258, "time": "2018-03-08T16:14:14Z"}, {"text": "Ugh. I suppose we should fix one of those archives to use a different path.", "author": "ted@mielczarek.org", "id": 13114300, "time": "2018-03-08T16:24:56Z"}, {"text": "I think we should also make it an error for an archive to not include the correct top-level directory.", "author": "catlee@mozilla.com", "id": 13114314, "time": "2018-03-08T16:27:53Z"}, {"text": "(In reply to Chris AtLee [:catlee] from comment #16)\n> I think we should also make it an error for an archive to not include the\n> correct top-level directory.\n\n+1\n\nFailing fast here is better than pulling out your hair trying to debug issues like this.", "author": "gps@mozilla.com", "id": 13114613, "time": "2018-03-08T17:58:16Z"}, {"text": "I did a try push here: https://treeherder.mozilla.org/#/jobs?repo=try&revision=bf0d17855be34a443551b2a6b8fc38284c15eba8\n\nLooks like we have some other archives that need to be restructured:\nnsis.tar.xz (for wingw builds)\ngit.zip (for sccache build on Windows)\neslint.tar.gz (for lint docker image, update-verify docker image(!?))", "author": "catlee@mozilla.com", "id": 13123223, "time": "2018-03-12T20:51:19Z"}, {"text": "I don't have time to chase down malformed tooltool archives. Hopefully someone else can pick this up!", "author": "catlee@mozilla.com", "id": 13180309, "time": "2018-04-04T17:00:33Z"}, {"text": "This patch is pretty good and the improvement to times in CI can be significant. We should try to find an owner for this...", "author": "gps@mozilla.com", "id": 13180417, "time": "2018-04-04T17:31:40Z"}, {"text": "Created attachment 8969495\nBug 1421734 - Build nsis archive with nsis as root directory;\n\nWe want our tooltool archives to have the root directory of the archive\nmatch the archive name.\n\nReview commit: https://reviewboard.mozilla.org/r/238240/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/238240/", "author": "gps@mozilla.com", "id": 13220215, "time": "2018-04-20T00:11:30Z"}, {"text": "Created attachment 8969496\nBug 1421734 - Use MinGit archive with matching root directory;\n\nPreviously, the MinGit archive was the raw zip distribution from\nupstream. When extracted, it created bin, mingw64, etc directories\nwithout a prefix. This violates tooltool expectations that the artifact\nname extracts to a directory of that name.\n\nWe package a new MinGit archive whose base directory is \"mingit.\" It is\njust the upstream zip repackaged with different paths. As part of this,\nI upgraded to the latest version of MinGit.\n\nReview commit: https://reviewboard.mozilla.org/r/238242/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/238242/", "author": "gps@mozilla.com", "id": 13220216, "time": "2018-04-20T00:11:30Z"}, {"text": "Created attachment 8969497\nBug 1421734 - Download and unpack toolchain artifacts in parallel;\n\nReview commit: https://reviewboard.mozilla.org/r/238244/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/238244/", "author": "gps@mozilla.com", "id": 13220217, "time": "2018-04-20T00:11:30Z"}, {"text": "Comment on attachment 8969495\nBug 1421734 - Build nsis archive with nsis as root directory;\n\nhttps://reviewboard.mozilla.org/r/238240/#review246714", "author": "mshal@mozilla.com", "id": 13246203, "time": "2018-05-01T15:18:22Z"}, {"text": "Comment on attachment 8969496\nBug 1421734 - Use MinGit archive with matching root directory;\n\nhttps://reviewboard.mozilla.org/r/238242/#review246718", "author": "mshal@mozilla.com", "id": 13246210, "time": "2018-05-01T15:20:58Z"}, {"text": "Comment on attachment 8969497\nBug 1421734 - Download and unpack toolchain artifacts in parallel;\n\nhttps://reviewboard.mozilla.org/r/238244/#review246728\n\nThis looks fine to me.\n\nSorry that this got lost in the shuffle -- most of my attention is on GitHub these days.", "author": "nalexander@mozilla.com", "id": 13246280, "time": "2018-05-01T15:37:22Z"}], "id": 1421734, "priority": "--", "mentors_detail": [], "comment_count": 27, "cf_status_thunderbird_esr52": "---", "cf_qa_whiteboard": "", "version": "unspecified", "cf_tracking_firefox62": "---", "cf_platform_rel": "---", "product": "Firefox Build System", "cf_fx_iteration": "---", "blocks": [1271162], "qa_contact": "", "see_also": [], "cf_status_firefox_esr52": "---", "component": "General", "votes": 0, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "is_cc_accessible": true, "cf_tracking_thunderbird_esr60": "---", "groups": [], "cf_tracking_firefox_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "ted@mielczarek.org", "id": 39022, "name": "ted@mielczarek.org", "real_name": "Ted Mielczarek [:ted.mielczarek]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "catlee@mozilla.com", "id": 20203, "name": "catlee@mozilla.com", "real_name": "Chris AtLee [:catlee]"}, {"email": "cmanchester@mozilla.com", "id": 432261, "name": "cmanchester@mozilla.com", "real_name": "Chris Manchester (:chmanchester)"}, {"email": "core-build-config-reviews@mozilla.bugs", "id": 603852, "name": "core-build-config-reviews@mozilla.bugs", "real_name": "Reviewers for Core::Build Config Bugs (:build-peer)"}, {"email": "gps@mozilla.com", "id": 420446, "name": "gps@mozilla.com", "real_name": "Gregory Szorc [:gps]"}, {"email": "kmoir@mozilla.com", "id": 440359, "name": "kmoir@mozilla.com", "real_name": "Kim Moir [:kmoir] ET"}, {"email": "mh+mozilla@glandium.org", "id": 47192, "name": "mh+mozilla@glandium.org", "real_name": "Mike Hommey [:glandium]"}, {"email": "nalexander@mozilla.com", "id": 432887, "name": "nalexander@mozilla.com", "real_name": "Nick Alexander :nalexander"}], "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-01T15:37:22Z", "cf_status_firefox_esr60": "---", "assigned_to": "nobody@mozilla.org", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "blocks", "added": "1271162"}], "who": "gps@mozilla.com", "when": "2017-11-29T19:04:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8950567, "added": "feedback?(nalexander@mozilla.com)"}], "who": "catlee@mozilla.com", "when": "2018-02-15T15:03:55Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(nalexander@mozilla.com)", "attachment_id": 8950567, "added": "feedback+"}], "who": "nalexander@mozilla.com", "when": "2018-02-15T17:07:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "catlee@mozilla.com"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "catlee@mozilla.com"}], "who": "catlee@mozilla.com", "when": "2018-02-28T21:09:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8954929, "added": "review?(nalexander@mozilla.com)"}], "who": "catlee@mozilla.com", "when": "2018-02-28T21:09:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "core-build-config-reviews@mozilla.bugs"}, {"field_name": "flagtypes.name", "removed": "review?(nalexander@mozilla.com)", "attachment_id": 8954929, "added": "review?(core-build-config-reviews@mozilla.bugs)"}], "who": "catlee@mozilla.com", "when": "2018-02-28T21:10:02Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8950567, "added": "1"}], "who": "catlee@mozilla.com", "when": "2018-02-28T21:10:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8954929, "added": "review+"}], "who": "nalexander@mozilla.com", "when": "2018-03-01T00:35:37Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(core-build-config-reviews@mozilla.bugs)", "attachment_id": 8954929, "added": ""}], "who": "nalexander@mozilla.com", "when": "2018-03-01T00:36:03Z"}, {"changes": [{"removed": "Core", "field_name": "product", "added": "Firefox Build System"}], "who": "automation@bmo.tld", "when": "2018-03-02T20:12:20Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(gps@mozilla.com)"}], "who": "dluca@mozilla.com", "when": "2018-03-07T03:50:06Z"}, {"changes": [{"removed": "needinfo?(gps@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(catlee@mozilla.com)"}], "who": "gps@mozilla.com", "when": "2018-03-07T03:53:10Z"}, {"changes": [{"removed": "needinfo?(catlee@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "catlee@mozilla.com", "when": "2018-03-08T16:14:14Z"}, {"changes": [{"removed": "catlee@mozilla.com", "field_name": "assigned_to", "added": "nobody@mozilla.org"}], "who": "catlee@mozilla.com", "when": "2018-04-04T17:00:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kmoir@mozilla.com"}], "who": "gps@mozilla.com", "when": "2018-04-04T17:31:40Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969495, "added": "review?(core-build-config-reviews@mozilla.bugs)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969496, "added": "review?(core-build-config-reviews@mozilla.bugs)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969497, "added": "review?(nalexander@mozilla.com)"}], "who": "gps@mozilla.com", "when": "2018-04-20T00:11:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969495, "added": "review+"}], "who": "mshal@mozilla.com", "when": "2018-05-01T15:18:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(core-build-config-reviews@mozilla.bugs)", "attachment_id": 8969495, "added": ""}], "who": "mshal@mozilla.com", "when": "2018-05-01T15:18:29Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969496, "added": "review+"}], "who": "mshal@mozilla.com", "when": "2018-05-01T15:20:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(core-build-config-reviews@mozilla.bugs)", "attachment_id": 8969496, "added": ""}], "who": "mshal@mozilla.com", "when": "2018-05-01T15:21:05Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nalexander@mozilla.com)", "attachment_id": 8969497, "added": "review+"}], "who": "nalexander@mozilla.com", "when": "2018-05-01T15:37:22Z"}], "resolution": "", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}