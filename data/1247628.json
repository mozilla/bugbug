{"cf_tracking_thunderbird_esr52": "---", "cf_tracking_firefox60": "---", "attachments": [], "cf_tracking_firefox62": "---", "creator": "adam@nostrum.com", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "---", "cf_user_story": "", "history": [{"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1079648, https://bugzilla.mozilla.org/show_bug.cgi?id=916199, https://bugzilla.mozilla.org/show_bug.cgi?id=1056444"}], "who": "adam@nostrum.com", "when": "2016-02-11T16:10:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2016-02-11T16:12:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2016-02-11T16:14:44Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1247634"}], "who": "adam@nostrum.com", "when": "2016-02-11T16:22:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "josh@joshmatthews.net"}], "who": "josh@joshmatthews.net", "when": "2016-02-11T18:37:03Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dietrich@mozilla.com"}], "who": "dietrich@mozilla.com", "when": "2016-02-11T18:38:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugmail@asutherland.org"}], "who": "bugmail@asutherland.org", "when": "2016-02-11T18:40:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "amckay@mozilla.com"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-02-11T19:24:30Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amckay@mozilla.com)"}], "who": "bugmail@asutherland.org", "when": "2016-02-11T19:52:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kmaglione+bmo@mozilla.com"}], "who": "kmaglione+bmo@mozilla.com", "when": "2016-02-11T22:44:01Z"}, {"changes": [{"removed": "needinfo?(amckay@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "andy+bugzilla@mckay.pub", "when": "2016-02-16T23:27:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "felix.klee@inka.de"}], "who": "felix.klee@inka.de", "when": "2016-02-17T13:36:58Z"}, {"changes": [{"removed": "", "field_name": "whiteboard", "added": "[discussion] triaged"}], "who": "sescalante@mozilla.com", "when": "2016-02-25T18:53:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "overholt@mozilla.com"}], "who": "overholt@mozilla.com", "when": "2016-03-07T09:32:35Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bruant.d@gmail.com"}], "who": "bruant.d@gmail.com", "when": "2016-03-07T11:13:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "aswan@mozilla.com"}, {"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1256977"}], "who": "aswan@mozilla.com", "when": "2016-03-15T21:34:48Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "pag77@mail.ru"}], "who": "aswan@mozilla.com", "when": "2016-03-15T21:35:23Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "samuel@sieb.net"}], "who": "samuel@sieb.net", "when": "2016-03-29T19:49:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla.mozilla.org@infinite-source.de"}], "who": "bugzilla.mozilla.org@infinite-source.de", "when": "2016-05-06T19:59:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kumar.mcmillan@gmail.com"}], "who": "kumar.mcmillan@gmail.com", "when": "2016-08-01T15:34:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bemasc@chromium.org"}], "who": "bemasc@chromium.org", "when": "2016-08-02T15:58:34Z"}, {"changes": [{"removed": "[discussion] triaged", "field_name": "whiteboard", "added": "[design-decision-needed] triaged"}], "who": "sescalante@mozilla.com", "when": "2016-08-02T16:25:20Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "rjesup@jesup.org"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(josh@joshmatthews.net)"}], "who": "rjesup@jesup.org", "when": "2016-09-22T09:51:47Z"}, {"changes": [{"removed": "needinfo?(josh@joshmatthews.net)", "field_name": "flagtypes.name", "added": "needinfo?(kmaglione+bmo@mozilla.com)"}], "who": "josh@joshmatthews.net", "when": "2016-09-22T15:44:33Z"}, {"changes": [{"removed": "[design-decision-needed] triaged", "field_name": "whiteboard", "added": "[design-decision-approved] triaged"}, {"removed": "needinfo?(kmaglione+bmo@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "andy+bugzilla@mckay.pub", "when": "2016-09-22T16:30:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "philipp@bugzilla.kewis.ch"}], "who": "philipp@bugzilla.kewis.ch", "when": "2016-09-23T09:28:47Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P3"}, {"removed": "WebExtensions: Untriaged", "field_name": "component", "added": "WebExtensions: Request Handling"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-10-07T21:36:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gijskruitbosch+bugs@gmail.com"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2016-11-24T15:56:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla-mozilla-20000923@james-ross.co.uk"}], "who": "bugzilla-mozilla-20000923@james-ross.co.uk", "when": "2016-11-24T16:00:51Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "spectre@floodgap.com"}], "who": "spectre@floodgap.com", "when": "2016-12-04T15:44:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Leif.AMO@GMail.com"}], "who": "Leif.AMO@GMail.com", "when": "2016-12-12T17:30:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jduell.mcbugs@gmail.com, mcmanus@ducksong.com, mreavy@mozilla.com"}], "who": "rjesup@jesup.org", "when": "2016-12-15T15:23:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "florian@queze.net"}], "who": "florian@queze.net", "when": "2016-12-15T17:10:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "botond@mozilla.com"}], "who": "botond@mozilla.com", "when": "2016-12-15T18:08:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mconley@mozilla.com"}], "who": "mconley@mozilla.com", "when": "2016-12-21T16:43:57Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1311472"}], "who": "bzhao@mozilla.com", "when": "2017-01-10T05:59:23Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "erdosib@gmail.com"}], "who": "erdosib@gmail.com", "when": "2017-01-24T09:06:14Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ben.bucksch@beonex.com"}], "who": "ben.bucksch@beonex.com", "when": "2017-01-24T21:40:51Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1333828"}], "who": "mozilla@kaply.com", "when": "2017-01-25T17:17:42Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mstr.spa@gmail.com"}], "who": "mstr.spa@gmail.com", "when": "2017-01-31T17:49:48Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1322442"}], "who": "utasir@freestart.hu", "when": "2017-03-10T18:42:44Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "yfdyh000@gmail.com"}, {"removed": "", "field_name": "blocks", "added": "1215059"}], "who": "yfdyh000@gmail.com", "when": "2017-05-01T20:47:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dgod.osa@gmail.com"}], "who": "dgod.osa@gmail.com", "when": "2017-05-08T05:34:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "rob@robwu.nl"}], "who": "rob@robwu.nl", "when": "2017-05-11T23:00:27Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "wsxiaoys.lh@gmail.com"}], "who": "wsxiaoys.lh@gmail.com", "when": "2017-06-07T00:32:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bzcc@fowlsmurf.net"}], "who": "bzcc@fowlsmurf.net", "when": "2017-06-20T09:13:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mstange@themasta.com"}], "who": "mstange@themasta.com", "when": "2017-07-01T16:46:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tomica@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amckay@mozilla.com)"}], "who": "tomica@gmail.com", "when": "2017-07-16T22:48:41Z"}, {"changes": [{"removed": "needinfo?(amckay@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "andy+bugzilla@mckay.pub", "when": "2017-07-17T17:22:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jmize@mozilla.com"}], "who": "jmize@mozilla.com", "when": "2017-08-01T19:31:44Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fabrice@desre.org"}], "who": "fabrice@desre.org", "when": "2017-08-02T03:25:14Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tortino@gmail.com"}], "who": "tortino@gmail.com", "when": "2017-08-12T08:01:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "karl8@tiscali.it"}], "who": "karl8@tiscali.it", "when": "2017-08-15T18:53:35Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "lucaspardue.24.7@gmail.com"}], "who": "lucaspardue.24.7@gmail.com", "when": "2017-08-21T12:14:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mahaxi@gmail.com"}], "who": "mahaxi@gmail.com", "when": "2017-08-21T18:02:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mozilla@guu.fi"}], "who": "mozilla@guu.fi", "when": "2017-08-31T19:34:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kairo@kairo.at"}], "who": "kairo@kairo.at", "when": "2017-09-09T23:59:37Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "lidel@lidel.org"}], "who": "lidel@lidel.org", "when": "2017-09-25T21:09:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "antoine.mozilla@gmail.com"}], "who": "antoine.mozilla@gmail.com", "when": "2017-09-27T03:51:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "brizzel@web.de"}], "who": "brizzel@web.de", "when": "2017-10-05T23:05:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "marsjaninzmarsa@gmail.com"}], "who": "marsjaninzmarsa@gmail.com", "when": "2017-10-08T07:49:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}], "who": "nfroyd@mozilla.com", "when": "2017-10-13T16:25:07Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "taiwaniajusto@gmail.com"}], "who": "taiwaniajusto@gmail.com", "when": "2017-10-17T07:06:44Z"}, {"changes": [{"removed": "Leif.AMO@GMail.com", "field_name": "cc", "added": ""}], "who": "Leif.AMO@GMail.com", "when": "2017-10-19T12:43:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "yoasif@gmail.com"}], "who": "yoasif@gmail.com", "when": "2017-10-31T14:49:41Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fdsfgs@krutt.org"}], "who": "fdsfgs@krutt.org", "when": "2017-11-06T18:57:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "clarencewashington003@gmail.com"}], "who": "clarencewashington003@gmail.com", "when": "2017-11-07T23:02:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "eduardo.sanchez.mata@gmail.com"}], "who": "eduardo.sanchez.mata@gmail.com", "when": "2017-11-08T14:35:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "yan12125@gmail.com"}], "who": "yan12125@gmail.com", "when": "2017-11-09T07:16:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Oct4v14n@googlemail.com"}], "who": "Oct4v14n@googlemail.com", "when": "2017-11-17T11:33:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "csbaldape@charter.net"}], "who": "csbaldape@charter.net", "when": "2017-11-21T01:18:09Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amckay@mozilla.com)"}], "who": "spectre@floodgap.com", "when": "2017-11-24T18:23:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "patrick@psbarrett.com"}], "who": "patrick@psbarrett.com", "when": "2017-11-26T16:10:34Z"}, {"changes": [{"removed": "needinfo?(amckay@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "andy+bugzilla@mckay.pub", "when": "2017-12-01T00:13:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tom@mozilla.com"}], "who": "tom@mozilla.com", "when": "2017-12-06T18:05:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jan@ikenmeyer.eu"}], "who": "jan@ikenmeyer.eu", "when": "2017-12-17T20:49:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "beatgammit@gmail.com"}], "who": "beatgammit@gmail.com", "when": "2017-12-19T23:41:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Virtual@teknik.io"}], "who": "Virtual@teknik.io", "when": "2017-12-28T09:47:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "victorhfmag@gmail.com"}], "who": "victorhfmag@gmail.com", "when": "2018-01-19T00:15:23Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "grzegorz@grasza.com"}], "who": "grzegorz@grasza.com", "when": "2018-01-21T13:33:37Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "andre@andregarzia.com"}], "who": "andre@andregarzia.com", "when": "2018-01-27T01:08:26Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1435798"}], "who": "dietrich@mozilla.com", "when": "2018-02-05T18:36:07Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "frabrunelle@gmail.com"}], "who": "frabrunelle@gmail.com", "when": "2018-02-05T19:13:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "valentin.gosu@gmail.com"}], "who": "valentin.gosu@gmail.com", "when": "2018-02-05T23:40:15Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mail@daviddias.me"}], "who": "mail@daviddias.me", "when": "2018-02-13T18:20:51Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "oli@tableflip.io"}], "who": "oli@tableflip.io", "when": "2018-02-15T13:03:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kernp25@yahoo.com"}], "who": "kernp25@yahoo.com", "when": "2018-05-09T15:48:00Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "pldubouilh@gmail.com"}], "who": "pldubouilh@gmail.com", "when": "2018-05-20T12:51:04Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1467145"}], "who": "aswan@mozilla.com", "when": "2018-06-06T16:10:27Z"}, {"changes": [{"removed": "bruant.d@gmail.com", "field_name": "cc", "added": ""}], "who": "bruant.d@gmail.com", "when": "2018-06-09T20:15:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mikhail.v.gavrilov@gmail.com"}], "who": "mikhail.v.gavrilov@gmail.com", "when": "2018-06-17T10:09:50Z"}], "cf_tracking_firefox_relnote": "---", "platform": "All", "keywords": [], "cc_detail": [{"email": "andre@andregarzia.com", "id": 467821, "name": "andre@andregarzia.com", "real_name": ""}, {"email": "andy+bugzilla@mckay.pub", "id": 397635, "name": "andy+bugzilla@mckay.pub", "real_name": "Andy McKay"}, {"email": "antoine.mozilla@gmail.com", "id": 333996, "name": "antoine.mozilla@gmail.com", "real_name": "Antoine Turmel [:GeekShadow]"}, {"email": "aswan@mozilla.com", "id": 561655, "name": "aswan@mozilla.com", "real_name": "Andrew Swan [:aswan] (on PTO until 6/25)"}, {"email": "beatgammit@gmail.com", "id": 447605, "name": "beatgammit@gmail.com", "real_name": "T. Jameson Little"}, {"email": "bemasc@chromium.org", "id": 484693, "name": "bemasc@chromium.org", "real_name": "Ben Schwartz"}, {"email": "ben.bucksch@beonex.com", "id": 22599, "name": "ben.bucksch@beonex.com", "real_name": "Ben Bucksch (:BenB)"}, {"email": "botond@mozilla.com", "id": 474533, "name": "botond@mozilla.com", "real_name": "Botond Ballo [:botond]"}, {"email": "brizzel@web.de", "id": 603407, "name": "brizzel@web.de", "real_name": "Leon"}, {"email": "bugmail@asutherland.org", "id": 151407, "name": "bugmail@asutherland.org", "real_name": "Andrew Sutherland [:asuth]"}, {"email": "bugzilla-mozilla-20000923@james-ross.co.uk", "id": 18057, "name": "bugzilla-mozilla-20000923@james-ross.co.uk", "real_name": "James Ross"}, {"email": "bugzilla.mozilla.org@infinite-source.de", "id": 176019, "name": "bugzilla.mozilla.org@infinite-source.de", "real_name": "The 8472"}, {"email": "bzcc@fowlsmurf.net", "id": 317549, "name": "bzcc@fowlsmurf.net", "real_name": "James May [:fowl]"}, {"email": "clarencewashington003@gmail.com", "id": 423021, "name": "clarencewashington003@gmail.com", "real_name": ""}, {"email": "csbaldape@charter.net", "id": 438827, "name": "csbaldape@charter.net", "real_name": "Mark"}, {"email": "dgod.osa@gmail.com", "id": 428164, "name": "dgod.osa@gmail.com", "real_name": ""}, {"email": "dietrich@mozilla.com", "id": 213632, "name": "dietrich@mozilla.com", "real_name": "Dietrich Ayala (:dietrich)"}, {"email": "eduardo.sanchez.mata@gmail.com", "id": 554210, "name": "eduardo.sanchez.mata@gmail.com", "real_name": "Eduardo S\u00e1nchez"}, {"email": "erdosib@gmail.com", "id": 404107, "name": "erdosib@gmail.com", "real_name": ""}, {"email": "fabrice@desre.org", "id": 390071, "name": "fabrice@desre.org", "real_name": "[:fabrice] Fabrice Desr\u00e9"}, {"email": "fdsfgs@krutt.org", "id": 605028, "name": "fdsfgs@krutt.org", "real_name": "soredake"}, {"email": "felix.klee@inka.de", "id": 149951, "name": "felix.klee@inka.de", "real_name": "Felix E. Klee"}, {"email": "florian@queze.net", "id": 149052, "name": "florian@queze.net", "real_name": "Florian Qu\u00e8ze [:florian]"}, {"email": "frabrunelle@gmail.com", "id": 462364, "name": "frabrunelle@gmail.com", "real_name": ""}, {"email": "gijskruitbosch+bugs@gmail.com", "id": 159069, "name": "gijskruitbosch+bugs@gmail.com", "real_name": ":Gijs (he/him)"}, {"email": "grzegorz@grasza.com", "id": 610314, "name": "grzegorz@grasza.com", "real_name": ""}, {"email": "jan@ikenmeyer.eu", "id": 580271, "name": "jan@ikenmeyer.eu", "real_name": "Jan Andre Ikenmeyer [:darkspirit]"}, {"email": "jduell.mcbugs@gmail.com", "id": 334931, "name": "jduell.mcbugs@gmail.com", "real_name": "Jason Duell [:jduell] (needinfo me)"}, {"email": "jmize@mozilla.com", "id": 477050, "name": "jmize@mozilla.com", "real_name": "Josh Mize [:jgmize]"}, {"email": "josh@joshmatthews.net", "id": 241497, "name": "josh@joshmatthews.net", "real_name": "Josh Matthews [:jdm]"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "kairo@kairo.at", "id": 5189, "name": "kairo@kairo.at", "real_name": "Robert Kaiser"}, {"email": "karl8@tiscali.it", "id": 283888, "name": "karl8@tiscali.it", "real_name": "cannas carlo"}, {"email": "kernp25@yahoo.com", "id": 436361, "name": "kernp25@yahoo.com", "real_name": ""}, {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, {"email": "kumar.mcmillan@gmail.com", "id": 254682, "name": "kumar.mcmillan@gmail.com", "real_name": "Kumar McMillan [:kumar] (needinfo all the things)"}, {"email": "lidel@lidel.org", "id": 535729, "name": "lidel@lidel.org", "real_name": "Marcin Rataj"}, {"email": "lucaspardue.24.7@gmail.com", "id": 600580, "name": "lucaspardue.24.7@gmail.com", "real_name": "Lucas Pardue"}, {"email": "mahaxi@gmail.com", "id": 600748, "name": "mahaxi@gmail.com", "real_name": "max_h"}, {"email": "mail@daviddias.me", "id": 611969, "name": "mail@daviddias.me", "real_name": "David Dias"}, {"email": "marsjaninzmarsa@gmail.com", "id": 470481, "name": "marsjaninzmarsa@gmail.com", "real_name": "Kuba Niewiarowski"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "mcmanus@ducksong.com", "id": 32546, "name": "mcmanus@ducksong.com", "real_name": "Patrick McManus [:mcmanus]"}, {"email": "mconley@mozilla.com", "id": 403756, "name": "mconley@mozilla.com", "real_name": "Mike Conley (:mconley) (:\u2699\ufe0f) (Catching up on needinfos / reviews)"}, {"email": "mikhail.v.gavrilov@gmail.com", "id": 489156, "name": "mikhail.v.gavrilov@gmail.com", "real_name": "Mikhail"}, {"email": "mozilla@guu.fi", "id": 590211, "name": "mozilla@guu.fi", "real_name": "Henri Kemppainen"}, {"email": "mreavy@mozilla.com", "id": 74434, "name": "mreavy@mozilla.com", "real_name": "Maire Reavy [:mreavy] Plz needinfo?"}, {"email": "mstange@themasta.com", "id": 293943, "name": "mstange@themasta.com", "real_name": "Markus Stange [:mstange]"}, {"email": "mstr.spa@gmail.com", "id": 588126, "name": "mstr.spa@gmail.com", "real_name": ""}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "Oct4v14n@googlemail.com", "id": 583651, "name": "Oct4v14n@googlemail.com", "real_name": ""}, {"email": "oli@tableflip.io", "id": 612094, "name": "oli@tableflip.io", "real_name": "Oli Evans"}, {"email": "overholt@mozilla.com", "id": 442218, "name": "overholt@mozilla.com", "real_name": "Andrew Overholt [:overholt]"}, {"email": "pag77@mail.ru", "id": 518780, "name": "pag77@mail.ru", "real_name": "Oleksandr"}, {"email": "patrick@psbarrett.com", "id": 600119, "name": "patrick@psbarrett.com", "real_name": "Patrick"}, {"email": "philipp@bugzilla.kewis.ch", "id": 253233, "name": "philipp@bugzilla.kewis.ch", "real_name": "Philipp Kewisch [:Fallen] "}, {"email": "pldubouilh@gmail.com", "id": 617924, "name": "pldubouilh@gmail.com", "real_name": ""}, {"email": "rjesup@jesup.org", "id": 11539, "name": "rjesup@jesup.org", "real_name": "Randell Jesup [:jesup]"}, {"email": "rob@robwu.nl", "id": 447061, "name": "rob@robwu.nl", "real_name": "Rob Wu [:robwu]"}, {"email": "samuel@sieb.net", "id": 14762, "name": "samuel@sieb.net", "real_name": "Samuel Sieb"}, {"email": "spectre@floodgap.com", "id": 101070, "name": "spectre@floodgap.com", "real_name": "Cameron Kaiser [:spectre]"}, {"email": "taiwaniajusto@gmail.com", "id": 601340, "name": "taiwaniajusto@gmail.com", "real_name": ""}, {"email": "tom@mozilla.com", "id": 578488, "name": "tom@mozilla.com", "real_name": "Tom Ritter [:tjr]"}, {"email": "tomica@gmail.com", "id": 445095, "name": "tomica@gmail.com", "real_name": "Tomislav Jovanovic :zombie"}, {"email": "tortino@gmail.com", "id": 588239, "name": "tortino@gmail.com", "real_name": "Tortino"}, {"email": "valentin.gosu@gmail.com", "id": 415378, "name": "valentin.gosu@gmail.com", "real_name": "Valentin Gosu [:valentin]"}, {"email": "victorhfmag@gmail.com", "id": 603341, "name": "victorhfmag@gmail.com", "real_name": "Victor Magalh\u00e3es"}, {"email": "Virtual@teknik.io", "id": 342842, "name": "Virtual@teknik.io", "real_name": "Virtual_ManPL [:Virtual] - (please needinfo? me - so I will see your comment/reply/question/etc.)"}, {"email": "wsxiaoys.lh@gmail.com", "id": 596595, "name": "wsxiaoys.lh@gmail.com", "real_name": ""}, {"email": "yan12125@gmail.com", "id": 549720, "name": "yan12125@gmail.com", "real_name": "Chih-Hsuan Yen [:yan12125] (UTC+8)"}, {"email": "yfdyh000@gmail.com", "id": 398515, "name": "yfdyh000@gmail.com", "real_name": "YF (Yang)"}, {"email": "yoasif@gmail.com", "id": 347239, "name": "yoasif@gmail.com", "real_name": "Asif Youssuff"}], "cf_last_resolved": null, "cf_tracking_firefox61": "---", "votes": 24, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 55, "comments": [{"text": "With the removal of XPCOM, add-ons access to UDP and TCP sockets will disappear, which will cause problems for a number of add-ons.\n\nThe platform already contains implementations that are similar to those defined in the W3C \"TCP and UDP Socket API\" specification (https://www.w3.org/2012/sysapps/tcp-udp-sockets/), albeit without Stream support; API is defined here:\n\nhttps://dxr.mozilla.org/mozilla-central/source/dom/webidl/UDPSocket.webidl\nhttps://dxr.mozilla.org/mozilla-central/source/dom/webidl/TCPSocket.webidl\n\nI'm opening this bug to expose this API to WebExtensions-based add-ons.", "author": "adam@nostrum.com", "id": 11157835, "time": "2016-02-11T16:01:31Z"}, {"text": "Addons already can't access TCP through XPCOM, hence bug 1207090.", "author": "josh@joshmatthews.net", "id": 11158545, "time": "2016-02-11T18:37:03Z"}, {"text": "As someone who works on an email app, I think this would be great, but note that the TCP API exposed by Chrome is part of the \"Chrome Apps\" suite of APIs listed at https://developer.chrome.com/apps/api_index and not part of the Chrome Extensions APIs listed at https://developer.chrome.com/extensions/api_index.  My understanding is that only the extensions APIs are being pursued (for now?).", "author": "bugmail@asutherland.org", "id": 11158562, "time": "2016-02-11T18:40:11Z"}, {"text": "> My understanding is that\n> only the extensions APIs are being pursued (for now?).\n\nFor now, we certainly hope to implement more than that to make a more awesome set of add-ons.", "author": "andy+bugzilla@mckay.pub", "id": 11158763, "time": "2016-02-11T19:24:30Z"}, {"text": "(In reply to Andy McKay [:andym] from comment #3)\n> For now, we certainly hope to implement more than that to make a more\n> awesome set of add-ons.\n\nOoo!  I am *very* interested in being able to ship a desktop variant of the Firefox OS Gaia email app on desktop firefox.  With the removal of WebRT and based on my impression from comment 2 I was thinking I'd have to use the add-on SDK for the time being, but if there is some engineering work I can do to help get TCP exposed to the WebExtensions scenario, I can totally do that.\n\nIn comment 0 I believe :abr is proposing exposing our current TCPSocket API.  I think this would indeed be most ideal since getting TCPSocket to show up is just a question of granting the appropriate permission to the origin (and having the TCPSocket pref flipped in bug 1079648 as :abr has see-also'ed). Our TCPSocket is already multiprocess and very compartment-friendly because everything is C++/WebIDL.\n\nCan we do that?  Or should we be trying to expose the https://developer.chrome.com/apps/sockets_tcp Chrome API?  One possibility would be to create a polyfill that wraps our TCPSocket implementation to make it look like the Chrome API.  For performance reasons, it might be preferable if that was just directly loaded into the add-on's compartment, but I don't know if that's acceptable or not.\n\nThere are other options to that would involve a lot more legwork and perhaps have legacy API problems of their own, so I'm not going to mention those right now.", "author": "bugmail@asutherland.org", "id": 11158857, "time": "2016-02-11T19:52:10Z"}, {"text": "After some additional digging, it appears that the \"January 2016\" date on the draft spec I cite is somewhat deceptive. The System Applications Working Group shut down in the middle of last year, and published several outstanding documents (including the UDP and TCP Socket API) as working group notes \"to clarify that these specifications have been abandoned\":\n\n  https://lists.w3.org/Archives/Public/public-sysapps/2015Jul/0000.html\n\nAs I understand the situation, then, we can take one of several courses:\n\n1) Put energy into forming a W3C community group and finalizing this specification (this would be a fair amount of work), and then using the output of the CG as our API.\n\n2) Expose our existing implementation to WebExtensions as a Mozilla-proprietary API. This would be easy.\n\n3) Implement Chrome's \"chrome.sockets\" API. As Andrew notes, this doesn't appear to buy us much, as even Chrome doesn't make this available to WebExtensions -- at least, not at the moment. This would be significantly more work than #2, still be proprietary, and have no easily identifiable compatibility gains.\n\nI see #2 as strictly better than #3. I'm not sure #1 is practical at this point, especially if we don't intend to expose bare socket handling to content (and I suspect that the security implications would prevent us from realistically ever doing so).", "author": "adam@nostrum.com", "id": 11158957, "time": "2016-02-11T20:20:48Z"}, {"text": "I'd vote for #2, as in let's do the simplest thing since we are going down the non-standard route anyway and let's see how it goes. \n\nImplementing #3 is interesting because even if its not available in Chrome to WebExtensions, it gives us a chance to suggest to Chrome that they should make it available.\n\nMy real concern is adding in APIs that we have to support and maintain for the long term that don't get much use. We kind of proposed native.js as a way to do this and get things prototyped and see if they are useful before committing them into the tree, but we could also do this using a chrome.experimental or other interface.\n\nI did a quick search for udp-socket and tcp-socket in mxr and found very few add-ons are using them. Perhaps I'm looking for the wrong thing.", "author": "andy+bugzilla@mckay.pub", "id": 11170267, "time": "2016-02-16T23:27:54Z"}, {"text": "(In reply to Andy McKay [:andym] from comment #6)\n> I did a quick search for udp-socket and tcp-socket in mxr and found very few\n> add-ons are using them. Perhaps I'm looking for the wrong thing.\n\nVolume of use is not a good signal of whether we should implement a given API. Especially when the APIs require understanding of the rats nest of XPCOM interfaces and implementations required in order to use them.\n\nInstead we should look at what use-cases are unlocked by the APIs.\n\nTCP and UDP socket APIs are building blocks that together enable incredibly powerful applications to be built by allowing network service discovery and implementation. That foundation enables things like mDNS (Bonjour), SSDP, DLNA as well as custom connectivity scenarios and home-grown experimentation like FlyWeb.\n\nHaving these APIs allows us to experiment with the Web as a IoT development platform, and lets Firefox be a channel to the connected devices around you.", "author": "dietrich@mozilla.com", "id": 11170304, "time": "2016-02-16T23:41:07Z"}, {"text": "(In reply to Dietrich Ayala (:dietrich) from comment #7)\n> Volume of use is not a good signal of whether we should implement a given\n> API. Especially when the APIs require understanding of the rats nest of\n> XPCOM interfaces and implementations required in order to use them.\n\nAgreed, but it is one signal. We do have to be cautious about adding in APIs for everything, we've been here before. In this case, I've got no problems.", "author": "andy+bugzilla@mckay.pub", "id": 11170319, "time": "2016-02-16T23:46:50Z"}, {"text": "(In reply to Adam Roach [:abr] from comment #5)\n> I'm not sure #1 is practical at this point, especially if we don't\n> intend to expose bare socket handling to content (and I suspect that\n> the security implications would prevent us from realistically ever\n> doing so).\n\nWhy would a \u201cTCP and UDP Socket API\u201d be more critical security-wise than\nsay the MediaDevices API? As with the latter, one could prompt the user\nfor permission before giving access to TCP/UDP.", "author": "felix.klee@inka.de", "id": 11171803, "time": "2016-02-17T13:36:58Z"}, {"text": "(In reply to Felix E. Klee from comment #9)\n> (In reply to Adam Roach [:abr] from comment #5)\n> > I'm not sure #1 is practical at this point, especially if we don't\n> > intend to expose bare socket handling to content (and I suspect that\n> > the security implications would prevent us from realistically ever\n> > doing so).\n> \n> Why would a \u201cTCP and UDP Socket API\u201d be more critical security-wise than\n> say the MediaDevices API? As with the latter, one could prompt the user\n> for permission before giving access to TCP/UDP.\n\nThe implications of allowing web pages raw TCP access are subtle and profound, and it's not really possible to convey that to users in a way they can understand. So you could seek user consent, but it could never be truly *informed* consent. For example, writing a simple HTTP client on top of a TCP API is a trivial exercise, and it would allow a webpage to completely bypass CORS. Short of forcing users to attend a detailed tutorial on how web security works, there is no hope of explaining that to users before they grant access.\n\nAs for giving web pages access to raw UDP -- even with a user prompt -- I shudder at the DDoS possibilities.\n\nThose aren't the only problems, but they're the obvious ones.", "author": "adam@nostrum.com", "id": 11172016, "time": "2016-02-17T14:53:41Z"}, {"text": "(In reply to Adam Roach [:abr] from comment #10)\n> (In reply to Felix E. Klee from comment #9)\n> > (In reply to Adam Roach [:abr] from comment #5)\n> The implications of allowing web pages raw TCP access are subtle and\n> profound, and it's not really possible to convey that to users in a way they\n\nNative mobile apps charged right ahead with these types of APIs with a permissions UI that guarantees lack of informed consent and an interaction model that incentivizes allowing the install regardless. I'm not saying that is a great thing, but there should be real data now on the risk we take by allowing these two particular APIs to be easily accessible by a broad range of developers.\n\nFor clarification, this bug is about browser add-ons not Web content. So this discussion probably should narrow down to that. Though any findings on problems with these APIs in mobile app dev could still inform the discussion.", "author": "dietrich@mozilla.com", "id": 11173747, "time": "2016-02-17T22:25:59Z"}, {"text": "tagging bugs like this for further discussion needed with module owners, criteria to do it and for success before we start trying to reimplement functionality", "author": "sescalante@mozilla.com", "id": 11195861, "time": "2016-02-25T18:53:04Z"}, {"text": "*** Bug 1256977 has been marked as a duplicate of this bug. ***", "author": "aswan@mozilla.com", "id": 11249495, "time": "2016-03-15T21:35:23Z"}, {"text": "> Short of forcing users to attend a detailed tutorial on how web security works, there is no hope of explaining that to users before they grant access.\n\nUnless you want to argue that users should also be locked out of their own PC for their own safety (no admin/root ever), i.e. nannying, there ultimately has to be a way of allowing \"dangerous\" APIs when there is a clear case for using them.\n\nIt should be a way that disincentivizes developers for requiring dangerous APIs when they're not necessary. E.g. by making such addons far less visible by default.\n\n> Native mobile apps charged right ahead with these types of APIs with a permissions UI that guarantees lack of informed consent and an interaction model that incentivizes allowing the install regardless. \n\nNewer android versions and 3rd party firmwares have a finer-grained security model where you can install an app without granting it the APIs it asks for in its manifest.\n\nThis can be useful for apps where only one feature out of many requires a particular API. By not granting the permission the rest of the app can still be used.\n\nAdditionally such APIs could be made available through some promise / in another async fashion to encourage developers to make the rest of the addon work without that component.\n\nBasically decoupling the granting of individual permissions from the installation process helps with such things.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 11389594, "time": "2016-05-06T19:59:55Z"}, {"text": "(In reply to Andy McKay [:andym] from comment #6)\n> I did a quick search for udp-socket and tcp-socket in mxr and found very few\n> add-ons are using them. Perhaps I'm looking for the wrong thing.\n\nFWIW, the uProxy team will need this if they're ever going to move to webextensions on Firefox.", "author": "adam@nostrum.com", "id": 11553212, "time": "2016-07-17T12:28:01Z"}, {"text": "(In reply to Andy McKay [:andym] from comment #6)\n> I did a quick search for udp-socket and tcp-socket in mxr and found very few\n> add-ons are using them. Perhaps I'm looking for the wrong thing.\n\nI think the interfaces you want to look for are nsISocketTransportService, nsIServerSocket, and nsIUDPSocket.", "author": "adam@nostrum.com", "id": 11592383, "time": "2016-08-02T15:50:47Z"}, {"text": "Hi, Ben from uProxy here.  FYI, we also need TCP server APIs (to run the proxy server on localhost), as do any other similar extensions that start a local proxy server.  For details see https://mail.mozilla.org/pipermail/dev-addons/2016-July/001755.html", "author": "bemasc@chromium.org", "id": 11592409, "time": "2016-08-02T15:58:34Z"}, {"text": "Google Chrome kill the apps and developer-api for apps (including work with udp / tcp):\nhttp://blog.chromium.org/2016/08/from-chrome-apps-to-web.html\n\nWhat plans the Mozilla for WebExtensions-udp/tcp?", "author": "pag77@mail.ru", "id": 11656318, "time": "2016-08-25T20:50:42Z"}, {"text": "jdm - what would be required here?", "author": "rjesup@jesup.org", "id": 11728726, "time": "2016-09-22T09:51:47Z"}, {"text": "I don't know anything about WebExtensions. I'm going to redirect to Kris, who presumably knows more.", "author": "josh@joshmatthews.net", "id": 11729718, "time": "2016-09-22T15:44:33Z"}, {"text": "Currently we don't have anyone planning to work on this. It's been discussed and everyone seems to like the idea. Is this something you'd like to contribute?", "author": "andy+bugzilla@mckay.pub", "id": 11729904, "time": "2016-09-22T16:30:22Z"}, {"text": "OverbiteFF would need this also.", "author": "spectre@floodgap.com", "id": 11905623, "time": "2016-12-04T15:45:51Z"}, {"text": "Also Chatzilla, and others.\n\nFor FxOS we added TCPSocket and UDPSocket, as mentioned in comment 0. Right now there are few users of them since they're not visible to the Web (though they're used internally by WebRTC to handling networking under e10s - but that might change if we move WebRTC network code to the Master process, or to a separate sandbox process with network access (but little else).", "author": "rjesup@jesup.org", "id": 11921424, "time": "2016-12-15T15:23:06Z"}, {"text": "I haven't fully grokked the subtleties of web extensions yet so I need some clarification.\n\nAIUI they run either in the main process or content scripts run either in the content-process or (eventually) an add-on process. is that right?\n\nDo the APIs differ depending on where its running? Specifically, do the TCP/UDP APIs differ? Is there a document for those web extension APIs?\n\nI say this because its a definite short-medium term goal to remove access to TCP/UDP socket from anything other than the main process where networking happens.\n\nIt doesn't seem to be a sensible sandbox where we can enforce \"no system calls for networking\" in a sub process but then provide an IPC path to enable arbitrary networking functions. Its a sandbox escape even if you put some kind of permission on it - unless the main process can enforce this somehow. (can it?)\n\nBarring some kind of authentication in the parent, I would want to understand better how this was going to work out of the main process (or if its just not meant to do that.. which would be fine I guess).", "author": "mcmanus@ducksong.com", "id": 11922139, "time": "2016-12-15T20:09:12Z"}, {"text": "> I say this because its a definite short-medium term goal to remove access to TCP/UDP socket from anything other than the main process where networking happens.\n\nWouldn't it be sufficient to set sandbox filters to disallow the open() of the sockets but allow recvmsg, sendmsg, select etc? Then the parent could create the socket and transfer it via IPC to the child. Without an ability to create new sockets those syscalls should be fairly safe.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 11922278, "time": "2016-12-15T20:57:04Z"}, {"text": "(In reply to The 8472 from comment #25)\n> Wouldn't it be sufficient to set sandbox filters to disallow the open() of\n> the sockets but allow recvmsg, sendmsg, select etc? Then the parent could\n> create the socket and transfer it via IPC to the child. Without an ability\n> to create new sockets those syscalls should be fairly safe.\n\nTo be clear: the existing TCPSocket and UDPSocket implementations that we are talking about exposing (option 2 from comment 5) already do all of their network interaction in the parent with all network traffic data flowing over IPC via the PTCP(Server)Socket and PUDPSocket protocols.  Unless someone is planning to overhaul TCPSocket/UDPSocket, sockets/fd's don't get passed around and their processes do not need any explicit permissions.  Implementations are in http://searchfox.org/mozilla-central/source/dom/network for anyone wanting to investigate further.\n\n:mcmanus' concern about the IPC side-stepping the sandbox issue stands and I have an in-progress comment I'll follow-up with shortly.", "author": "bugmail@asutherland.org", "id": 11922355, "time": "2016-12-15T21:24:22Z"}, {"text": "(In reply to Andrew Sutherland [:asuth] from comment #26)\n> :mcmanus' concern about the IPC side-stepping the sandbox issue stands and I\n> have an in-progress comment I'll follow-up with shortly.\n\nOnce bug 1320395 lands, privileged WebExtension code will run in a separate process type, which means we should be able to give them access to TCP/UDP sockets without too much risk of privilege escalation from the web content sandbox.", "author": "kmaglione+bmo@mozilla.com", "id": 11922387, "time": "2016-12-15T21:35:53Z"}, {"text": "(In reply to Patrick McManus [:mcmanus] from comment #24)\n> AIUI they run either in the main process or content scripts run either in\n> the content-process or (eventually) an add-on process. is that right?\n\nCurrently privileged extension code runs in the main process, and content\nscripts that touch web content run in the content process. Soon, privileged\nextension code will run in a separate content process that only hosts\nextensions content.\n\n> Do the APIs differ depending on where its running? Specifically, do the\n> TCP/UDP APIs differ? Is there a document for those web extension APIs?\n\nYes. Content script code, which runs in the content process and can directly\ninteract with web content, only has access to a limited set of messaging,\nlocalization, and storage APIs, and a limited amount of cross-domain request\naccess. They wouldn't have direct access to the socket APIs.\n\nThe basics are documented on MDN:\n\nhttps://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#WebExtension_APIs\n\n> I say this because its a definite short-medium term goal to remove access to\n> TCP/UDP socket from anything other than the main process where networking\n> happens.\n>\n> It doesn't seem to be a sensible sandbox where we can enforce \"no system\n> calls for networking\" in a sub process but then provide an IPC path to\n> enable arbitrary networking functions. Its a sandbox escape even if you put\n> some kind of permission on it - unless the main process can enforce this\n> somehow. (can it?)\n\nWe can enforce that the socket APIs are only available to the extension\nprocess, and only when an extension with socket privileges is running in it.\nWe can probably also enforce that they only have access to certain hosts, or\nonly to hosts that the user has granted access to via some UI in the parent\nprocess, but I think we'd need more information about the primary use cases\nbefore we make any decisions about how that would work.", "author": "kmaglione+bmo@mozilla.com", "id": 11922415, "time": "2016-12-15T21:43:51Z"}, {"text": "thanks for the background. sounds good. Looking forward to removing tcp/udp socket from content process.", "author": "mcmanus@ducksong.com", "id": 11922450, "time": "2016-12-15T21:58:35Z"}, {"text": "> We can probably also enforce that they only have access to certain hosts\n\nSome use-cases will need to rapidly connect to changing sets of hosts, so an <all_urls> equivalent will be necessary. Finite lists or per-host UI popups may not be sufficient.\n\nExamples would be P2P protocols or recursive DNS resolvers.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 11922511, "time": "2016-12-15T22:25:43Z"}, {"text": "> Examples would be P2P protocols\n\naddon Torrent Tornado\n\n> or recursive DNS resolvers.\n\naddon Fox Web Security\n\n:)", "author": "pag77@mail.ru", "id": 11923292, "time": "2016-12-16T06:33:47Z"}, {"text": "MUST-HAVE for many of my extensions.\n\nOne is a mail checker and implements IMAP and POP3. We can't (should not) proxy this over HTTP, because the user password should only be between the user's machine and the target server.\nAnother one implements XMPP in JS, for chat, social browsing, video calls. It also needs TCP sockets.\n\nIn most cases, I also need fine control over the SSL certificates accepted or expected. In IMAP, I might want to allow an override, or I might want to pin the certificate. In XMPP, the SSL certificate is not issued for the server hostname contacted (e.g. \"xmpp.web.de\"), but for the domain (e.g. subject = \"web.de\", and usually not a wildcard). In both cases, I connect to servers not under my control.\n\nI think both use cases (show new mail, and social browsing / chat) are typical extension types. What makes my extensions different is that I try to support existing IETF standard protocol, instead of creating my own webby proprietary protocol.\n\nConsequently, this ticket is important for the future of IETF standards on the Internet, and for freedom. (see Mozilla Manifesto)", "author": "ben.bucksch@beonex.com", "id": 12007391, "time": "2017-01-24T21:40:51Z"}, {"text": "I've seen references to the \"chrome.sockets\" API in Chrome. Note that this is only available to \"Chrome apps\" (the line between an \"app\" and an \"extension\" is blurry), which will soon be available only in ChromeOS.\n\nSo don't try to implement the \"chrome.sockets\" API unless it looks great from the API perspective.\nOption 2 from comment 5 would be my choice.", "author": "rob@robwu.nl", "id": 12312913, "time": "2017-05-11T23:00:27Z"}, {"text": "Is there any update on this, or a spec? I'd like to try writing some implementation since OverbiteFF is dead in the water without it, but I don't even have a spec to write to.", "author": "spectre@floodgap.com", "id": 12471287, "time": "2017-07-13T17:38:45Z"}, {"text": "There are no plans to do this by Firefox 57.", "author": "andy+bugzilla@mckay.pub", "id": 12474014, "time": "2017-07-14T16:01:13Z"}, {"text": "What about comment 5 #2 then (\"2) Expose our existing implementation to WebExtensions as a Mozilla-proprietary API. This would be easy.\")? If I tried to write something for this, would that even be accepted? If there's a reasonable chance, I'll see what I can gin up. If there is already opinion that it wouldn't be desirable, I'd prefer not to embark upon it.", "author": "spectre@floodgap.com", "id": 12475257, "time": "2017-07-15T01:32:06Z"}, {"text": "Scanning the bug, it seems option 2) \"expose internal api\" was the chosen one, and there are some restrictions we would like to see addressed, listed in comment #28.\n\nAndy, can you confirm this was agreed in the API design meeting?", "author": "tomica@gmail.com", "id": 12476320, "time": "2017-07-16T22:48:41Z"}, {"text": "I don't remember the design meeting where this was discussed but I'm pretty certain that \"approved\" means something like \"we're not opposed to this in principle if somebody can design an API that can be clearly explained to users and that can be implemented in a maintainable and performant way\".  The first point is challenging enough to begin with and the second is particularly tricky now that extension background pages run in a sandboxed content process.\nAnyhow, if somebody is motivated to work on this, sketching out a design that meets the requirements outlined above would be the first step.  As Andy said, nobody inside Mozilla has the time to tackle that before 57.", "author": "aswan@mozilla.com", "id": 12476347, "time": "2017-07-17T00:10:04Z"}, {"text": "The meeting was a while back and sorry zombie I can't remember much beyond what's in the bug. aswan is right though, we are all for a well thought out API and that's the next step for someone to take on.", "author": "andy+bugzilla@mckay.pub", "id": 12479889, "time": "2017-07-17T17:22:22Z"}, {"text": "And Andrew's first point (\"clearly explained to users\") is a huge impediment.... Note; that doesn't mean clearly explained to developers or technical users or network experts, that means to your brother or sister or ... parents.", "author": "rjesup@jesup.org", "id": 12480813, "time": "2017-07-17T21:28:18Z"}, {"text": "(In reply to Randell Jesup [:jesup] from comment #40)\n> And Andrew's first point (\"clearly explained to users\") is a huge\n> impediment.... Note; that doesn't mean clearly explained to developers or\n> technical users or network experts, that means to your brother or sister or\n> ... parents.\n\nI think there's a few use-cases here that are feasible to support that I list below.  Note that I'm taking :andym's blog post at http://www.agmweb.ca/2017-07-11-manual-review/ as a given and not suggest anything that would require manual review.  This does mean some (potentially) dangerous things would not be possible with this API and the escape hatch of runtime.connectNative()/native messaging[3] is the best option for such cases.\n\nBut first, a little threat modeling.\n\nThreat-wise, we can't magically fix:\n- Phishing.  An extension doesn't have to be able to use TCP to convince the user to give them their credentials.  Which is not to say there isn't an advantage to mounting an attack from the user's own device; a provider is less likely to be suspicious of connections from the user's usual IPs.\n- The MitM/impersonation capabilities already provided by \"<all_urls>\" and host permissions.  These are shockingly powerful and especially undersold on AMO with the existing explanation of \"Access your data for all websites\".  But certainly TCPSocket-support shouldn't provide a more attractive/less suspicious means of mounting a subset of the attacks those permissions allow.\n\nBut we can:\n- Protect insecure devices that are accessible from the local device but not from the internet.  This includes the user's router, printers, internet-of-things (IoT) devices, poorly secured corporate servers.  While content can already poke at such devices, they are limited by the rules of CORS and that their requests happen via HTTP(S).\n- Protect insecure software running on the same computer that assumes connections initiated via loopback device are secure.  This software benefits from CORS and HTTP(S)-only connections too.\n- Protect against fingerprinting and/or scanning of the local machine or network.\n- Avoid letting extensions punch holes in Firefox's existing security models, or complicate the implementations of core security functionality.  For example, as mentioned in comment 32 and very familiar to me from my work on email apps, at least in the past it was a common demand to support adding certificate exceptions for mail servers using self-signed/otherwise invalid certificates.  Although nsICertOverrideService does key overrides on \"host:port\" (not just \"host\"), it's arguably safer to forbid extensions from allowing certificate exceptions than have to also key on (WebExt) principal or otherwise risk enabling attacks.\n- Avoid enabling DoS attacks (comment 10).\n\n\nRe: permission strings, if we stick to strings (which may be necessary for compatibility?) and using the \"permissions\" key in manifest.json, it seems like abusing the host permissions scheme might be the least-bad option.  For example: [\"moztcpsocket://gopher/\"], [\"moztcpsocket://imaps/\", \"moztcpsocket://smtps/\"].\n\n\n## Gopher-like, browser-style protocols ##\nThese:\n- Require connecting to a diverse set of hosts, making it infeasible to prompt the user for authorization for each host.\n- Use well-defined ports that are primarily used for that purpose and it's unlikely that there are insecure or vulnerable services out there listening on those ports.  This would disqualify ports/services like \"tftp\" and \"telnet\" where we expect there to be a large number of vulnerable devices.\n- Are primarily for use on the public internet, so risk can be further mitigated by forbidding connecting to private address spaces as defined by https://tools.ietf.org/html/rfc1918 for IPv4 and https://tools.ietf.org/html/rfc4193 for IPv6.  Note that this is post DNS lookup[1], so \"attacker.example.com\" resolving to 192.168.1.2 would still not fool us.\n\nWhile the explanation would not be particularly illuminating unless you knew what a gopher server was, we would have confidence in exposing the functionality primarily because it is harmless.  A possible permission explanation would be: \"This add-on can: Connect to Gopher servers, an early alternative to the World Wide Web.\"  Other whitelisted ports would want similarly specific strings.\n\nThe existing implementation could support this without new UI logic other than the permission description strings.  The TCPSocket logic previously used nsIPermissionManager for to check for authorization, but that was removed with appId cleanups.  I don't see any current use of nsIPermissionsManager by the WebExt code, so this would be new ground.  nsIPM could be used (depending on proper use of ContentParent::TransmitPermissionsForPrincipal, which should be the case already) or the WebExt logic could provide its own interface.  TCPSocket needs to be able to check whether its global should be exposed synchronously at global init time in all (content-hosting, so all) processes.  It also needs to be able to check whether a given host/port combination should be allowed inside the parent.\n\nThis would support the comment 34 \"OverbiteFF\" gopher protocol use case.\n\n\n## Email-like, specific-host-specific protocols ##\nThese:\n- Connect to a limited set of hosts, for example the IMAP/SMTP, NNTP, or IRC servers the user has an account on.  It would be a non-goal to enable the WebExt to directly contact recipients' SMTP servers for delivery which would result in needing to contact to a large number of hosts.\n- Use well-defined ports that are primarily used for that purpose. (same as gopher-like)\n- Are primarily for use on the public internet, so risk can be further mitigated by forbidding connecting to private address spaces. (same as gopher-like)\n- Are protocols where it's widely accepted that TLS with valid (AKA non-self-signed) is in the best interest of the user, so they can be constrained to initial-TLS.  (Our TCPSocket implementation supports STARTTLS-style functionality, but this can result intentionally or unintentionally in failing to transition to a TLS state before potentially revealing private user data, so on balance it seems proper to constraint connections to initial-TLS.)\n\nThis supports a permission model where the user explicitly and persistently authorizes TLS connections to a given host for the given port.  The prompt would be triggered when an open is attempted for a host that doesn't currently have an authorization.  This requires new code in TCPSocket and UI code to prompt.  Thanks to the C++ MozPromise magic, most of the work is just in implementing the prompting UI.\n\nThis enables email-type apps (comment 2, comment 4, comment 32) and IRC-type apps (comment 23).  The permission string might look like \"This add-on can: Prompt you to allow connections to specific secure email servers (IMAP and SMTP).\"  The permission prompt might then look like: \"This extension would like to establish an IMAP connection to the email server at `imap.gmail.com` now and in the future.  Once approved, future connections will be allowed until you explicitly disallow them from the Add-ons management UI reachable from the main menu.\"\n\n\n## Ignored for now ##\n\n- TCPServerSocket.  It sounds like uProxy wants this per comment 15 and comment 18.  This seems largely harmless if UDP is not exposed and we provide no direct mDNS hooks.  In this idealized case, the main risk would be a nefarious WebExt attempting to listen() on a specific (unprivileged, >=1024) port that has meaning to some other software that checks for a daemon on localhost and trusts it implicitly.  Requiring use of listen(0) to attempt to avoid such scenarios could be defeated by brute-forcing listen() until a desired port is arrived at.\n\n- UDP (comment 7, probably others).  I think the same principals that apply to gopher and email could apply here, but practically speaking, UDP is most interesting on the local network, especially when it can send broadcasts.  These are also when it is at its most dangerous.  The prospect of letting WebExtensions use UPnP which could cut holes in router NATs/firewalls and otherwise mess with smart devices seems quite terrifying.  This seems like a case where it would be better to expose a higher-level WebBluetooth[2]-style API that allows users to think in terms of specific devices.  Firefox directly supporting UPnP in the short term seems unlikely, so I think it would be best for interested parties to prototype such an affordance via an extension using runtime.connectNative()/native messaging[3] that could potentially re-expose that API to other extensions via runtime.connect().\n\n\n1: Note that nsSocketTransport's NS_NET_STATUS_RESOLVED_HOST event is currently sent prior to saving off mNetAddr and mNetAddrIsSet is only set prior to send NS_NET_STATUS_CONNECTED_TO.  This would still allow for scanning the local network by noticing how long it takes for the error to trigger, so nsSocketTransport would need to change to allow the connection to be aborted before attempting to establish a connection.\n\n2: https://webbluetoothcg.github.io/web-bluetooth/ with https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web#request_bluetooth_devices demonstrating some UI.\n\n3: https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Native_messaging", "author": "bugmail@asutherland.org", "id": 12481592, "time": "2017-07-18T02:42:59Z"}, {"text": "That sounds very good for my use case, though with the proviso people wouldn't be able to test things against their local network if private address spaces were blacklisted, and there are some gopher servers on weird port numbers this would exclude. But I'm willing to compromise to restrict that application to a single well-known port to make the permissions issue simpler (my wife, who is not highly technical but does know what Gopherspace is, found that string straightforward enough) and reduce the potential attack surface.\n\nI can't really comment on the second use case, but I can make the first one work.", "author": "spectre@floodgap.com", "id": 12485323, "time": "2017-07-19T03:48:24Z"}, {"text": "(In reply to Andrew Sutherland [:asuth] from comment #41)\n> I think there's a few use-cases here that are feasible to support that I\n> list below.  Note that I'm taking :andym's blog post at\n> http://www.agmweb.ca/2017-07-11-manual-review/ as a given and not suggest\n> anything that would require manual review.  This does mean some\n> (potentially) dangerous things would not be possible with this API and the\n> escape hatch of runtime.connectNative()/native messaging[3] is the best\n> option for such cases.\n\nThis also appears to exclude and kind of p2p protocol such as implementing ipfs or bittorrent on the browser level to serve content (similar to gopher, except as a new protocol instead of supporting an old one).\n\nBasically that means the webextensions API is incompatible with decentralization.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 12527114, "time": "2017-08-01T21:27:54Z"}, {"text": "(In reply to The 8472 from comment #43)\n\n> This also appears to exclude and kind of p2p protocol such as implementing\n> ipfs or bittorrent on the browser level to serve content (similar to gopher,\n> except as a new protocol instead of supporting an old one).\n> \n> Basically that means the webextensions API is incompatible with\n> decentralization.\n\nI would think you can do this using WebRTC data channels -- in general, trying to do peer-to-peer connections without some kind of NAT traversal assisting technology (like ICE) is pretty much a losing proposition -- and you almost certainly don't want to have to write that yourself.", "author": "adam@nostrum.com", "id": 12527133, "time": "2017-08-01T21:36:32Z"}, {"text": "Webrtc needs signalling servers and session tokens. You can't remember contacts as IP:port to build a p2p network on that, especially not one that survives browser restarts. So it's not useful to build truly distributed+decentralized networks.\n\n> in general, trying to do peer-to-peer connections without some kind of NAT traversal assisting technology (like ICE) is pretty much a losing proposition\n\nWorks for bittorrent. STUN/TURN are not used, instead NAT traversal is done opportunistically when there are shared nodes which can be used as rendezvous. If traversall fails, that's suboptimal but not an obstacle as it would be for let's say 1:1 voice chat. Of course other things like UPnP or NAT-PCP (which Andrew also excluded) are also used where available.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 12527177, "time": "2017-08-01T21:51:09Z"}, {"text": "(In reply to Adam Roach [:abr] from comment #44)\n> (In reply to The 8472 from comment #43)\n> > Basically that means the webextensions API is incompatible with\n> > decentralization.\n> \n> I would think you can do this using WebRTC data channels -- in general,\n> trying to do peer-to-peer connections without some kind of NAT traversal\n> assisting technology (like ICE) is pretty much a losing proposition -- and\n> you almost certainly don't want to have to write that yourself.\n\nThis is to the points of centralization and the use case of p2p.  The WebRTC standard (by standards design or \"bug\"?) seems to want to leak LAN and actual WAN IP addresses out through WebRTC even when behind VPN software by using STUN[1].  Thus, WebRTC is ill advised for this use-case (if even possible, which The8472 indicates may also be to the contrary) and relying upon this seems to be contrary to the whole intent of add-ons: to independently implement some browser features that vary from what is built-in, without rewriting the browser itself.\n\n[1] https://torrentfreak.com/huge-security-flaw-leaks-vpn-users-real-ip-addresses-150130/", "author": "Leif.AMO@GMail.com", "id": 12527190, "time": "2017-08-01T21:57:10Z"}, {"text": "(In reply to The 8472 from comment #45)\n> Webrtc needs signalling servers and session tokens. You can't remember\n> contacts as IP:port to build a p2p network on that, especially not one that\n> survives browser restarts. So it's not useful to build truly\n> distributed+decentralized networks.\n\nWebTorrent uses WebRTC and datachannels, and other people have worked on distributed-hash type of WebRTC/DataChannel-based networks.  It is doable, though non-trivial (as any DHASH network is).  Without TURN servers, some nodes will not be able to talk directly to some other nodes (e.g. when both have fully-symmetric NATs), and will only be able to exchange data with the help of a third node (and this also implies that the 3rd node gets access to the decrypted traffic, so for e2e encryption in that case the two apps might have to encrypt data in the app using WebCrypto).", "author": "rjesup@jesup.org", "id": 12545082, "time": "2017-08-08T02:22:15Z"}, {"text": "(In reply to Randell Jesup [:jesup] from comment #47)\n> (In reply to The 8472 from comment #45)\n> > Webrtc needs signalling servers and session tokens. You can't remember\n> > contacts as IP:port to build a p2p network on that, especially not one that\n> > survives browser restarts. So it's not useful to build truly\n> > distributed+decentralized networks.\n> \n> WebTorrent uses WebRTC and datachannels, and other people have worked on\n> distributed-hash type of WebRTC/DataChannel-based networks.\n\nMy understanding is that none of those are distributed since they still need signalling servers for webrtc session setup to join the network because the browser cannot persist sessions/contacts across restarts. I.e. you can't store a list of nodes for bootstrapping in indexedb for example.\n\nWebRTC's signalling also is fairly expensive for iterative request-response protocols you normally do via UDP, such as DNS or Kademlia.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 12545677, "time": "2017-08-08T08:56:28Z"}, {"text": "I'd like to add another use case to this ticket, which I don't believe could be satisfied with WebRTC.\n\nWe have an application-layer protocol running over multicast that we would like to be able to receive in a browser. To achieve this, I would like to open a UDP socket that can *only listen* to multicast IP. (This may be restricted to source-specific multicast if deemed necessary for the security model). Source and group IP addresses would be managed dynamically according to the services a client is accessing, rather that statically configured within the extension. Access to multicast-based protocols (mDNS, SSDP, etc) is not required for this use case. Restriction on source IP ranges may be acceptable, as long as development environments could apply some override.\n\nThe discovery of such services could be restricted to secure means such as TLS-delivered metadata, however I think that falls outside the scope of this particular API.\n\nLooking ahead, a multicast listener API might be more palatable than a raw socket API. However, in the interim raw sockets would suffice.", "author": "lucaspardue.24.7@gmail.com", "id": 12584345, "time": "2017-08-21T12:14:30Z"}, {"text": "From a permission perspective this could be decomposed into multiple separate ones.\n\n- localhost | local network | global unicast addresses | prompt address on use | enduser-configured list\n- multicast\n- access to fixed port | private use port range | any port\n- bind listening port [true for most UDP cases]\n- TCP | UDP\n\nFor example a basic bittorrent client would probably be fine with connecting to and listening for connections from any unprivileged port on the global internet via TCP and UDP.\nFor connecting to lan-local peers or performing UPnP port mapping it could prompt for extra permissions at runtime if the user enables that feature.\nBut those extra permissions would be be narrower than those needed to connect to the rest of the internet.\n\nA gopher client would only need TCP, port 70, outgoing, global internet. Connecting to a server on the local lan could again be a runtime prompt.\n\nIRC clients could prompt once for each hostname since there aren't that many servers out there. XDCC transfers and chat could prompt on use too.\n\nIt basically needs a small DSL for network permissions which can then be translated into enduser-friendly descriptions and runtime permission prompts.\n\nBut network protocols are complicated. FTP for example (fireftp!) needs dynamic ports and you might need it on the local network. I'm not sure if prompting for individual connections would be acceptable here, especially if one wants to do batch tasks. So for some cases \"allow almost anything\" may still be needed.", "author": "bugzilla.mozilla.org@infinite-source.de", "id": 12618378, "time": "2017-08-31T20:25:04Z"}, {"text": "I'm trying to get this started again, at least for the simplest case of connect to a server on a defined TCP port, send a request, get data (which is the use case I have).\n\nSince I assume that the eventual goal is to have WXes in a sandbox without direct network access, I think the best implementation is to model on WebRequest using a C++ parent/child (presumably the child being an XPCOM component the service module can manipulate), and then an ext-tcpsocket.js front end that checks the permissions of the extension and gates access to creating sockets based on the port and internal-external network access permission the WX has requested (which would be a whitelist of allowed port numbers -- for my purpose 70 and 7070).\n\nRather than boil the ocean, can we at least get rolling on this more limited case, being a prerequisite for more complex schemes, and build on that? I'm not sure who would be the best one to advise on this, so I'll start with :andym and he can redirect if he doesn't know what the technical requirements would be.\n\nI'm assuming the simplest permission state of requesting things like tcpport:gopher and local_net, both of which would have something along the lines of the strings above (\"This add-on can: Connect to Gopher servers, an early alternative to the World Wide Web.\" and \"This add-on can: Connect to local computers behind your firewall.\" -- a user should be able to refuse one or both, though refusing the former would be pointless, of course).", "author": "spectre@floodgap.com", "id": 12871663, "time": "2017-11-24T18:23:24Z"}, {"text": "This is a pretty big feature request and its not really on our teams radar. That means I'm not sure who is available to help on technical guidance at this point. Maybe someone who has already commented on this bug would like to collaborate.\n\nI don't know about you, but I find trying to have this sort of conversation in Bugzilla hard due to the sequential nature of comments. It might be that writing a WebExtension experiment to prototype out what the API could be, might help.", "author": "andy+bugzilla@mckay.pub", "id": 12888396, "time": "2017-12-01T00:13:21Z"}, {"text": "(In reply to Cameron Kaiser [:spectre] from comment #51)\n> Rather than boil the ocean, can we at least get rolling on this more limited\n> case, being a prerequisite for more complex schemes, and build on that? I'm\n> not sure who would be the best one to advise on this, so I'll start with\n> :andym and he can redirect if he doesn't know what the technical\n> requirements would be.\n\nNot to contradict Andy but this sounds like a reasonable approach, I think ideal steps would be:\n1. Create a new bug something like \"WebExtensions API for client TCP sockets\" (i.e., no UDP no server sockets)\n2. Make a proposal for how an extension uses this API and when and how users of such extensions are notified and grant permission (i.e., do they get a prompt when an extension is installed?  Every time a socket is connected?  Just the first time an extension connects to a specific address/port?)\n\nOnce we have consensus on that, the implementation won't be completely trivial but it should be pretty straightforward.", "author": "aswan@mozilla.com", "id": 12896755, "time": "2017-12-04T22:32:50Z"}, {"text": "I'm also interested in this proposal and I'd be open to discussing the design, but I'm not sure how collaboration on things like this tend to go.\n\nI'm thinking the Node.js implementation could be used as a model: https://nodejs.org/dist/latest-v8.x/docs/api/net.html#net_class_net_socket\n\nI'm also very interested in TLS on a regular TCP socket, which may be out of scope for this proposal, but here are the Node.js docs on that as well in case it's deemed in scope: https://nodejs.org/dist/latest-v8.x/docs/api/tls.html", "author": "beatgammit@gmail.com", "id": 12927951, "time": "2017-12-19T23:41:01Z"}], "id": 1247628, "priority": "P3", "cc": ["andre@andregarzia.com", "andy+bugzilla@mckay.pub", "antoine.mozilla@gmail.com", "aswan@mozilla.com", "beatgammit@gmail.com", "bemasc@chromium.org", "ben.bucksch@beonex.com", "botond@mozilla.com", "brizzel@web.de", "bugmail@asutherland.org", "bugzilla-mozilla-20000923@james-ross.co.uk", "bugzilla.mozilla.org@infinite-source.de", "bzcc@fowlsmurf.net", "clarencewashington003@gmail.com", "csbaldape@charter.net", "dgod.osa@gmail.com", "dietrich@mozilla.com", "eduardo.sanchez.mata@gmail.com", "erdosib@gmail.com", "fabrice@desre.org", "fdsfgs@krutt.org", "felix.klee@inka.de", "florian@queze.net", "frabrunelle@gmail.com", "gijskruitbosch+bugs@gmail.com", "grzegorz@grasza.com", "jan@ikenmeyer.eu", "jduell.mcbugs@gmail.com", "jmize@mozilla.com", "josh@joshmatthews.net", "jryans@gmail.com", "kairo@kairo.at", "karl8@tiscali.it", "kernp25@yahoo.com", "kmaglione+bmo@mozilla.com", "kumar.mcmillan@gmail.com", "lidel@lidel.org", "lucaspardue.24.7@gmail.com", "mahaxi@gmail.com", "mail@daviddias.me", "marsjaninzmarsa@gmail.com", "mcastelluccio@mozilla.com", "mcmanus@ducksong.com", "mconley@mozilla.com", "mikhail.v.gavrilov@gmail.com", "mozilla@guu.fi", "mreavy@mozilla.com", "mstange@themasta.com", "mstr.spa@gmail.com", "nfroyd@mozilla.com", "Oct4v14n@googlemail.com", "oli@tableflip.io", "overholt@mozilla.com", "pag77@mail.ru", "patrick@psbarrett.com", "philipp@bugzilla.kewis.ch", "pldubouilh@gmail.com", "rjesup@jesup.org", "rob@robwu.nl", "samuel@sieb.net", "spectre@floodgap.com", "taiwaniajusto@gmail.com", "tom@mozilla.com", "tomica@gmail.com", "tortino@gmail.com", "valentin.gosu@gmail.com", "victorhfmag@gmail.com", "Virtual@teknik.io", "wsxiaoys.lh@gmail.com", "yan12125@gmail.com", "yfdyh000@gmail.com", "yoasif@gmail.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1079648", "https://bugzilla.mozilla.org/show_bug.cgi?id=916199", "https://bugzilla.mozilla.org/show_bug.cgi?id=1056444", "https://bugzilla.mozilla.org/show_bug.cgi?id=1247634", "https://bugzilla.mozilla.org/show_bug.cgi?id=1256977", "https://bugzilla.mozilla.org/show_bug.cgi?id=1467145"], "cf_tracking_thunderbird_esr60": "---", "status": "NEW", "product": "Toolkit", "cf_fx_iteration": "---", "blocks": [1215059, 1311472, 1322442, 1333828, 1435798], "qa_contact": "", "creation_time": "2016-02-11T16:01:31Z", "cf_status_firefox_esr52": "---", "component": "WebExtensions: Request Handling", "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "enhancement", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "adam@nostrum.com", "id": 241693, "name": "adam@nostrum.com", "real_name": "Adam Roach [:abr]"}, "whiteboard": "[design-decision-approved] triaged", "mentors": [], "summary": "Enable \"TCP and UDP Socket API\" for WebExtensions", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-17T10:09:50Z", "assigned_to": "nobody@mozilla.org", "is_open": true, "cf_blocking_webextensions": "---", "resolution": "", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}