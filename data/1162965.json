{"cf_tracking_thunderbird_esr52": "---", "cf_status_firefox39": "unaffected", "cf_has_regression_range": "---", "cf_tracking_firefox60": "---", "attachments": [{"creator": "dustin@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/plain", "id": 8603420}, {"creator": "jld@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-05-13T20:53:04Z", "type_id": 4, "creation_date": "2015-05-13T20:53:04Z", "id": 1167284, "setter": "jld@mozilla.com"}], "content_type": "text/plain", "id": 8604869}, {"creator": "jld@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-05-13T18:17:53Z", "type_id": 4, "creation_date": "2015-05-13T02:29:06Z", "id": 1166567, "setter": "gdestuynder@mozilla.com"}, {"status": "+", "name": "approval-mozilla-aurora", "modification_date": "2015-05-22T10:30:29Z", "type_id": 720, "creation_date": "2015-05-21T02:27:59Z", "id": 1171841, "setter": "sledru@mozilla.com"}], "content_type": "text/plain", "id": 8605001}], "classification": "Components", "creator": "winter2718@gmail.com", "mentors_detail": [], "depends_on": [], "cf_has_str": "---", "cf_user_story": "Steps to reproduce:\r\n\r\n    docker run -i -t ubuntu:14.04 /bin/bash\r\n    apt-get -y update && apt-get install -y python\r\n    hg clone https://hg.mozilla.org/mozilla-central && cd mozilla-central\r\n    python/mozboot/bin/bootstrap.py --application-choice=desktop --no-interactive\r\n    ./mach build\r\n    ./mach gtest GeckoMediaPlugins.GMPStorageBasic", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "cc_detail": [{"email": "catlee@mozilla.com", "id": 20203, "name": "catlee@mozilla.com", "real_name": "Chris AtLee [:catlee]"}, {"email": "cpearce@mozilla.com", "id": 287422, "name": "cpearce@mozilla.com", "real_name": "Chris Pearce (:cpearce)"}, {"email": "dustin@mozilla.com", "id": 373217, "name": "dustin@mozilla.com", "real_name": "Dustin J. Mitchell [:dustin] pronoun: he"}, {"email": "gdestuynder@mozilla.com", "id": 418181, "name": "gdestuynder@mozilla.com", "real_name": "Guillaume Destuynder [:kang] (NEEDINFO to ensure replies)"}, {"email": "jld@mozilla.com", "id": 462836, "name": "jld@mozilla.com", "real_name": "Jed Davis [:jld] (\u23f0UTC-7)"}, {"email": "ted@mielczarek.org", "id": 39022, "name": "ted@mielczarek.org", "real_name": "Ted Mielczarek [:ted.mielczarek]"}, {"email": "winter2718@gmail.com", "id": 516035, "name": "winter2718@gmail.com", "real_name": "Morgan Phillips [:mrrrgn]"}], "cf_last_resolved": "2015-05-15T15:44:44Z", "votes": 0, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_status_b2g_master": "unaffected", "comment_count": 36, "comments": [{"text": "We're attempting to move jobs to docker containers (for task cluster), and unfortunately it seems that these tests do not work in that environment. Running ./mach bootstrap, ./mach build, and ./mach gtest works fine on a baremetal ubuntu 14:04 machine, but leads to the following errors within a ubuntu 14:04 docker container => https://pastebin.mozilla.org/8832881\n\nSteps to reproduce:\n\n    docker run -i -t ubuntu:14.04 /bin/bash\n    hg clone https://hg.mozilla.org/mozilla-central && cd mozilla-central\n    python/mozboot/bin/bootstrap.py --application-choice=desktop --no-interactive\n    ./mach build\n    ./mach gtest", "author": "winter2718@gmail.com", "id": 10247273, "time": "2015-05-08T14:08:31Z"}, {"text": "The tests also fail in \"privileged mode\" docker -P", "author": "winter2718@gmail.com", "id": 10247428, "time": "2015-05-08T14:37:53Z"}, {"text": "The test is actually hanging forever, rather than outright failing\n\nRunning GTest tests...\nNote: Google Test filter = GeckoMediaPlugins.GMPStorageBasic\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from GeckoMediaPlugins\n[ RUN      ] GeckoMediaPlugins.GMPStorageBasic\nSandbox: chroot: Stale file handle\n[10296] WARNING: pipe error (26): Connection reset by peer: file /shared/ubuntu-1404-test/mozilla-central/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 459\n\n###!!! [Parent][MessageChannel] Error: (msgtype=0x62000E,name=PGMP::Msg_CloseActive) Channel error: cannot send/recv", "author": "winter2718@gmail.com", "id": 10247489, "time": "2015-05-08T14:51:45Z"}, {"text": "Sorry to bug you again, but given the extra info above, do you have any ideas about what's going on here?", "author": "winter2718@gmail.com", "id": 10247498, "time": "2015-05-08T14:54:10Z"}, {"text": "The next fails too: ./mach gtest -- -GeckoMediaPlugins.GMPStorageBasic\n\n[ RUN      ] GeckoMediaPlugins.GMPStorageForgetThisSite\n[10362] WARNING: pipe error (25): Connection reset by peer: file /shared/ubuntu-1404-test/mozilla-central/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 459\n[10362] WARNING: pipe error (26): Connection reset by peer: file /shared/ubuntu-1404-test/mozilla-central/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 459\n[10362] WARNING: pipe error (23): Connection reset by peer: file /shared/ubuntu-1404-test/mozilla-central/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 459\n[10362] WARNING: pipe error (28): Connection reset by peer: file /shared/ubuntu-1404-test/mozilla-central/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 459\n\n###!!! [Parent][MessageChannel] Error: (msgtype=0x62000E,name=PGMP::Msg_CloseActive) Channel error: cannot send/recv\n\n\n###!!! [Parent][MessageChannel] Error: (msgtype=0x62000E,name=PGMP::Msg_CloseActive) Channel error: cannot send/recv\n\nSandbox: chroot: Stale file handle\n\n###!!! [Parent][MessageChannel] Error: (msgtype=0x62000E,name=PGMP::Msg_CloseActive) Channel error: cannot send/recv\n\n[10362] WARNING: pipe error (26): Connection reset by peer: file /shared/ubuntu-1404-test/mozilla-central/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 459", "author": "winter2718@gmail.com", "id": 10247522, "time": "2015-05-08T15:00:40Z"}, {"text": "Created attachment 8603420\nhttps://pastebin.mozilla.org/8832881\n\nhere's a copy of the pastebin for posterity", "author": "dustin@mozilla.com", "id": 10248140, "time": "2015-05-08T17:13:10Z"}, {"text": "I suspect the most useful information here would be, what operating-system level features does this test use that might help us find the docker feature or bug making this fail?\n\nFrom the comments in ipc/chromium/src/chrome/common/ipc_channel_posix.cc:\n\n// channel ids as the pipe names.  Channels on POSIX use anonymous\n// Unix domain sockets created via socketpair() as pipes.  These don't\n// quite line up.\n\nOK, socketpair() isn't rocket science, that should work in Docker.\n\n// Case 1: normal running\n//   The IPC server object will install a mapping in PipeMap from the\n//   name which it was given to the client pipe. When forking the client, the\n//   GetClientFileDescriptorMapping will ensure that the socket is installed in\n//   the magic slot (@kClientChannelFd). The client will search for the\n//   mapping, but it won't find any since we are in a new process. Thus the\n//   magic fd number is returned. Once the client connects, the server will\n//   close its copy of the client socket and remove the mapping.\n//\n// Case 2: unittests - client and server in the same process\n//   The IPC server will install a mapping as before. The client will search\n//   for a mapping and find out. It duplicates the file descriptor and\n//   connects. Once the client connects, the server will close the original\n//   copy of the client socket and remove the mapping. Thus, when the client\n//   object closes, it will close the only remaining copy of the client socket\n//   in the fd table and the server will see EOF on its side.\n\nI'm guessing that case 2 only applies to unit tests for the IPC code itself; the GMP tests are probably using \"normal running\".  dup(2)'ing to a well-known fd before forking is a well-established technique that works everywhere (but on OpenBSD..), so that should be fine in Docker too.\n\n###!!! [Parent][MessageChannel] Error: (msgtype=0x62000E,name=PGMP::Msg_CloseActive) Channel error: cannot send/recv\nis generated by PrintErrorMessage in ipc/glue/MessageChannel.cpp; the first bit (`[Parent]`) indicates that this is the \"parent\" side of the channel.\n\nI had a stare at dom/media/gtest/TestGMPCrossOrigin.cpp but it looks like the IPC is buried in the SUT so maybe a bit too deep a dive for right now.\n\nAm I even on the right track?", "author": "dustin@mozilla.com", "id": 10248548, "time": "2015-05-08T18:16:29Z"}, {"text": "where does 'Sandbox: chroot: Stale file handle' come from?", "author": "catlee@mozilla.com", "id": 10248663, "time": "2015-05-08T18:45:35Z"}, {"text": "We're not sure, but that seems to appear for a lot of passing tests, too.", "author": "dustin@mozilla.com", "id": 10248711, "time": "2015-05-08T18:53:52Z"}, {"text": "Stracing the parent thread from socketpair() through its error message:\n\n[pid 23719] socketpair(PF_LOCAL, SOCK_STREAM, 0 <unfinished ...>\n[pid 23719] <... socketpair resumed> , [24, 25]) = 0\n[pid 23719] fcntl(24, F_SETFL, O_RDONLY|O_NONBLOCK <unfinished ...>\n[pid 23719] <... fcntl resumed> )       = 0\n[pid 23719] fcntl(25, F_SETFL, O_RDONLY|O_NONBLOCK <unfinished ...>\n[pid 23719] <... fcntl resumed> )       = 0\n[pid 23719] fcntl(24, F_GETFD <unfinished ...>\n[pid 23719] <... fcntl resumed> )       = 0\n[pid 23719] fcntl(24, F_SETFD, FD_CLOEXEC <unfinished ...>\n[pid 23719] <... fcntl resumed> )       = 0\n[pid 23719] fcntl(25, F_GETFD <unfinished ...>\n[pid 23719] <... fcntl resumed> )       = 0\n[pid 23719] fcntl(25, F_SETFD, FD_CLOEXEC <unfinished ...>\n[pid 23719] <... fcntl resumed> )       = 0\n[pid 23719] dup(24 <unfinished ...>\n[pid 23719] <... dup resumed> )         = 26\n[pid 23719] dup(25 <unfinished ...>\n[pid 23719] <... dup resumed> )         = 27\n[pid 23719] close(24)                   = 0\n[pid 23719] close(25 <unfinished ...>\n[pid 23719] <... close resumed> )       = 0\n[pid 23719] write(9, \"\\0\", 1 <unfinished ...>\n[pid 23719] <... write resumed> )       = 1\n[pid 23719] write(9, \"\\0\", 1 <unfinished ...>\n[pid 23719] <... write resumed> )       = 1\n[pid 23719] futex(0x7fb0b2a46aec, FUTEX_WAIT_PRIVATE, 5, NULL <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] futex(0x7fb0b2a46a88, FUTEX_WAKE_PRIVATE, 1 <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] futex(0x7fb0b2a46be0, FUTEX_WAIT_PRIVATE, 2, NULL <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] futex(0x7fb0b2a46be0, FUTEX_WAKE_PRIVATE, 1 <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] write(9, \"\\0\", 1 <unfinished ...>\n[pid 23719] <... write resumed> )       = 1\n[pid 23719] futex(0x7fb0b2a4b90c, FUTEX_WAIT_PRIVATE, 1, NULL <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] futex(0x7fb0b2a46c90, FUTEX_WAKE_PRIVATE, 1 <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] write(9, \"\\0\", 1 <unfinished ...>\n[pid 23719] <... write resumed> )       = 1\n[pid 23719] write(9, \"\\0\", 1 <unfinished ...>\n[pid 23719] <... write resumed> )       = 1\n[pid 23719] futex(0x7fb0c4bd0cfc, FUTEX_CMP_REQUEUE_PRIVATE, 1, 2147483647, 0x7fb0c4bd0c98, 12 <unfinished ...>\n[pid 23719] <... futex resumed> )       = 1\n[pid 23719] futex(0x7fb0b2a4b80c, FUTEX_WAIT_PRIVATE, 1, NULL <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] futex(0x7fb0b2a46ea0, FUTEX_WAKE_PRIVATE, 1 <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] write(9, \"\\0\", 1 <unfinished ...>\n[pid 23719] <... write resumed> )       = 1\n[pid 23719] futex(0x7fb0b2a46aec, FUTEX_WAIT_PRIVATE, 7, NULL <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] futex(0x7fb0b2a46a88, FUTEX_WAKE_PRIVATE, 1) = 0\n[pid 23719] futex(0x7fb0b2a46be0, FUTEX_WAIT_PRIVATE, 2, NULL <unfinished ...>\n[pid 23719] <... futex resumed> )       = 0\n[pid 23719] futex(0x7fb0b2a46be0, FUTEX_WAKE_PRIVATE, 1) = 0\n[pid 23719] futex(0x7fb0c4bd0cfc, FUTEX_CMP_REQUEUE_PRIVATE, 1, 2147483647, 0x7fb0c4bd0c98, 14) = 0\n[pid 23719] write(2, \"\\n###!!! [Parent][MessageChannel]\"..., 119) = 119\n\nWorking backward, it looks like the socketpair() call is from https://dxr.mozilla.org/mozilla-central/source/ipc/chromium/src/chrome/common/ipc_channel_posix.cc#331.  I be the caller is https://dxr.mozilla.org/mozilla-central/source/ipc/glue/Transport_posix.cpp#25, as that matches the dup()'s.  The close();s come from the Transport going out of scope, as described in the comment.  But there the trail runs cold -- I can't see what might have called that.  I don't see any unexpectedly nonzero exit statuses here that might lead to the \"Channel error\" being logged.\n\nHowever, shortly after the dup's, I see thread 23699 using fd's 26 and 27\n\n[pid 23699] sendmsg(23, {msg_name(0)=NULL, msg_iov(1)=[{\"\\20\\0\\0\\0\\377\\377\\377\\177\\372\\377\\0\\0\\1\\0\\0\\0\\1\\0\\0\\0\\377\\377\\377\\377\\377\\377\\377\\377\\0\\0\\0\\0\"..., 48}], msg_controllen=20, {cmsg_len=20, cmsg_level=SOL_SOCKET, cmsg_type=SCM_RIGHTS, {27}}, msg_flags=0}, MSG_DONTWAIT <unfinished ...>\n[pid 23699] <... sendmsg resumed> )     = 48\n[pid 23699] close(27 <unfinished ...>\n[pid 23699] <... close resumed> )       = 0\n\nHere it sends fd 27 (one end of the socketpair) over fd 23 to some other thread, and then closes its copy of the fd.  It then sends some messages on fd 26 but those don't include fd's.\n\n[pid 23699] futex(0x7fb0b2a4b90c, FUTEX_WAKE_OP_PRIVATE, 1, 1, 0x7fb0b2a4b908, {FUTEX_OP_SET, 0, FUTEX_OP_CMP_GT, 1} <unfinished ...>\n[pid 23699] <... futex resumed> )       = 1\n[pid 23699] epoll_ctl(5, EPOLL_CTL_ADD, 26, {EPOLLIN, {u32=26, u64=26}} <unfinished ...>\n[pid 23699] <... epoll_ctl resumed> )   = 0\n[pid 23699] sendmsg(26, {msg_name(0)=NULL, msg_iov(1)=[{\"\\4\\0\\0\\0\\0\\0\\0\\200\\377\\377\\0\\0\\1\\0\\0\\0\\0\\0\\0\\0\\377\\377\\377\\377\\377\\377\\377\\377\\0\\0\\0\\0\"..., 36}], msg_controllen=0, msg_flags=0}, MSG_DONTWAIT <unfinished ...>\n[pid 23699] <... sendmsg resumed> )     = 36\n[pid 23699] sendmsg(26, {msg_name(0)=NULL, msg_iov(1)=[{\"\\4\\0\\0\\0\\377\\377\\377\\177\\3\\0^\\0\\1\\0\\0\\0\\0\\0\\0\\0\\377\\377\\377\\377\\377\\377\\377\\377\\0\\0\\0\\0\"..., 36}], msg_controllen=0, msg_flags=0}, MSG_DONTWAIT <unfinished ...>\n[pid 23699] <... sendmsg resumed> )     = 36\n[pid 23699] sendmsg(26, {msg_name(0)=NULL, msg_iov(1)=[{\"\\0\\0\\0\\0\\2\\0\\0\\0\\1\\0`\\0\\1\\0\\0\\0\\0\\0\\0\\0\\377\\377\\377\\377\\377\\377\\377\\377\\0\\0\\0\\0\", 32}], msg_controllen=0, msg_flags=0}, MSG_DONTWAIT <unfinished ...>\n[pid 23699] <... sendmsg resumed> )     = 32\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 705643790}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 942238}, NULL) = 0\n[pid 23699] epoll_wait(5,  <unfinished ...>\n[pid 23699] <... epoll_wait resumed> {{EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 705814081}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 942421}, NULL) = 0\n[pid 23699] read(8,  <unfinished ...>\n[pid 23699] <... read resumed> \"\\0\", 1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 706144638}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 942737}, NULL) = 0\n[pid 23699] epoll_wait(5,  <unfinished ...>\n[pid 23699] <... epoll_wait resumed> {{EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 706362235}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 942963}, NULL) = 0\n[pid 23699] read(8,  <unfinished ...>\n[pid 23699] <... read resumed> \"\\0\", 1) = 1\n[pid 23699] sendmsg(26, {msg_name(0)=NULL, msg_iov(1)=[{\",\\0\\0\\0\\2\\0\\0\\0\\4\\0`\\0\\1\\0\\0\\0\\0\\0\\0\\0\\377\\377\\377\\377\\377\\377\\377\\377\\0\\0\\0\\0\"..., 76}], msg_controllen=0, msg_flags=0}, MSG_DONTWAIT <unfinished ...>\n[pid 23699] <... sendmsg resumed> )     = 76\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 706605251}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 943233}, NULL) = 0\n[pid 23699] epoll_wait(5,  <unfinished ...>\n[pid 23699] <... epoll_wait resumed> {{EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 706840148}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 943521}, NULL) = 0\n[pid 23699] read(8,  <unfinished ...>\n[pid 23699] <... read resumed> \"\\0\", 1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 707088944}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 943687}, NULL) = 0\n[pid 23699] epoll_wait(5,  <unfinished ...>\n[pid 23699] <... epoll_wait resumed> {{EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 707271601}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 943866}, NULL) = 0\n[pid 23699] read(8,  <unfinished ...>\n[pid 23699] <... read resumed> \"\\0\", 1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 707449368}) = 0\n[pid 23699] gettimeofday({1431120136, 944054}, NULL) = 0\n[pid 23699] epoll_wait(5,  <unfinished ...>\n[pid 23699] <... epoll_wait resumed> {{EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC, {233763, 707620397}) = 0\n[pid 23699] gettimeofday({1431120136, 944191}, NULL) = 0\n[pid 23699] read(8,  <unfinished ...>\n[pid 23699] <... read resumed> \"\\0\", 1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC, {233763, 707752233}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 944347}, NULL) = 0\n[pid 23699] epoll_wait(5,  <unfinished ...>\n[pid 23699] <... epoll_wait resumed> {{EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 707933673}) = 0\n[pid 23699] gettimeofday({1431120136, 944548}, NULL) = 0\n[pid 23699] read(8, \"\\0\", 1)            = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 708132094}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 944719}, NULL) = 0\n[pid 23699] epoll_wait(5,  <unfinished ...>\n[pid 23699] <... epoll_wait resumed> {{EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC, {233763, 708301746}) = 0\n[pid 23699] gettimeofday({1431120136, 944872}, NULL) = 0\n[pid 23699] read(8, \"\\0\", 1)            = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC, {233763, 708392970}) = 0\n[pid 23699] gettimeofday({1431120136, 944962}, NULL) = 0\n[pid 23699] epoll_wait(5, {{EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC, {233763, 708482559}) = 0\n[pid 23699] gettimeofday({1431120136, 945052}, NULL) = 0\n[pid 23699] read(8, \"\\0\", 1)            = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC, {233763, 708572434}) = 0\n[pid 23699] gettimeofday({1431120136, 945142}, NULL) = 0\n[pid 23699] epoll_wait(5,  <unfinished ...>\n[pid 23699] <... epoll_wait resumed> {{EPOLLIN|EPOLLHUP, {u32=23, u64=23}}}, 32, -1) = 1\n[pid 23699] clock_gettime(CLOCK_MONOTONIC, {233763, 720257164}) = 0\n[pid 23699] gettimeofday( <unfinished ...>\n[pid 23699] <... gettimeofday resumed> {1431120136, 956828}, NULL) = 0\n[pid 23699] --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_KILLED, si_pid=31571, si_status=SIGSEGV, si_utime=1, si_stime=0} ---\n[pid 23699] recvmsg(23, {msg_name(0)=NULL, msg_iov(1)=[{\"\", 4096}], msg_controllen=0, msg_flags=0}, MSG_DONTWAIT) = 0\n[pid 23699] epoll_ctl(5, EPOLL_CTL_DEL, 23, {EPOLLIN, {u32=23, u64=23}}) = 0\n[pid 23699] close(23)                   = 0\n[pid 23699] futex(0x7fb0b2a46aec, FUTEX_CMP_REQUEUE_PRIVATE, 1, 2147483647, 0x7fb0b2a46a88, 8) = 1\n[pid 23699] futex(0x7fb0b2a46be0, FUTEX_WAKE_PRIVATE, 1) = 1\n[pid 23699] kill(31571, SIGTERM <unfinished ...>\n[pid 23699] <... kill resumed> )        = 0\n[pid 23699] wait4(31571,  <unfinished ...>\n[pid 23699] <... wait4 resumed> NULL, WNOHANG, NULL) = 31571\n[pid 23699] futex(0x7fb0b2a4b9cc, FUTEX_WAIT_PRIVATE, 1, NULL <unfinished ...>\n[pid 23699] <... futex resumed> )       = 0\n[pid 23699] futex(0x7fb0b2a46f50, FUTEX_WAKE_PRIVATE, 1 <unfinished ...>\n[pid 23699] <... futex resumed> )       = 0\n[pid 23699] clock_gettime(CLOCK_MONOTONIC,  <unfinished ...>\n[pid 23699] <... clock_gettime resumed> {233763, 722558252}) = 0\n[pid 23699] gettimeofday({1431120136, 959187}, NULL) = 0\n[pid 23699] epoll_wait(5, {{EPOLLIN|EPOLLERR|EPOLLHUP, {u32=26, u64=26}}, {EPOLLIN, {u32=8, u64=8}}}, 32, -1) = 2\n[pid 23699] clock_gettime(CLOCK_MONOTONIC, {233763, 722729198}) = 0\n[pid 23699] gettimeofday({1431120136, 959299}, NULL) = 0\n\nAnd here's our ECONNRESET!!  So presumably the close(26) that follows is responsible for the other error message.\n\n[pid 23699] recvmsg(26, 0x7fb0b7a30b18, MSG_DONTWAIT) = -1 ECONNRESET (Connection reset by peer)\n[pid 23699] write(2, \"[31545] WARNING: pipe error (26)\"..., 168) = 168\n[pid 23699] epoll_ctl(5, EPOLL_CTL_DEL, 26, {EPOLLIN, {u32=26, u64=26}}) = 0\n[pid 23699] close(26)                   = 0", "author": "dustin@mozilla.com", "id": 10249593, "time": "2015-05-08T22:04:14Z"}, {"text": "[pid 23699] --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_KILLED, si_pid=31571, si_status=SIGSEGV, si_utime=1, si_stime=0} ---\n\nis probably responsible for the dropped connection.  I'm a little vague on pid and tid mappings in Linux, but \n\n[pid 23721] gettid()                    = 31571\n\nso I'm going to assume that pid 23721 is the one we're looking for here.  Sure enough,\n\n[pid 23721] set_robust_list(0x7fb0b7a319e0, 24) = 0\n[pid 23721] dup2(24, 3)                 = 3\n[pid 23721] dup2(19, 4)                 = 4\n...\n[pid 23721] execve(\"/shared/ubuntu-1404-test/mozilla-central/obj-x86_64-unknown-linux-gnu/dist/bin/plugin-container\", [\"/shared/ubuntu-1404-test/mozilla\"..., \"/shared/ubuntu-1404-test/mozilla\"..., \"/\nshared/ubuntu-1404-test/mozilla\"..., \"-appdir\", \"/shared/ubuntu-1404-test/mozilla\"..., \"31545\", \"true\", \"geckomediaplugin\"], [/* 30 vars */]) = 0\n...\n[pid 23721] open(\"/shared/ubuntu-1404-test/mozilla-central/obj-x86_64-unknown-linux-gnu/dist/bin/gmp-fake/1.0/fake.voucher\", O_RDONLY <unfinished ...>\n[pid 23721] <... open resumed> )        = 11\n[pid 23721] lseek(11, 0, SEEK_CUR)      = 0\n[pid 23721] lseek(11, 0, SEEK_END <unfinished ...>\n[pid 23721] <... lseek resumed> )       = 28\n[pid 23721] lseek(11, 0, SEEK_CUR <unfinished ...>\n[pid 23721] <... lseek resumed> )       = 28\n[pid 23721] lseek(11, 0, SEEK_SET <unfinished ...>\n[pid 23721] <... lseek resumed> )       = 0\n[pid 23721] read(11,  <unfinished ...>\n[pid 23721] <... read resumed> \"gmp-fake placeholder voucher\", 8191) = 28\n[pid 23721] close(11)                   = 0\n[pid 23721] open(\"/shared/ubuntu-1404-test/mozilla-central/obj-x86_64-unknown-linux-gnu/dist/bin/voucher.bin\", O_RDONLY <unfinished ...>\n[pid 23721] <... open resumed> )        = -1 ENOENT (No such file or directory)\n[pid 23721] open(\"/shared/ubuntu-1404-test/mozilla-central/obj-x86_64-unknown-linux-gnu/dist/bin/gmp-fake/1.0/libfake.so\", O_RDONLY|O_CLOEXEC <unfinished ...>\n[pid 23721] <... open resumed> )        = 11\n[pid 23721] rt_sigaction(SIGSYS, {0x4262ee, [], SA_RESTORER|SA_NODEFER|SA_SIGINFO, 0x7f1b40e23340}, NULL, 8) = 0\n[pid 23721] rt_sigprocmask(SIG_UNBLOCK, [SYS], NULL, 8) = 0\n[pid 23721] gettid( <unfinished ...>\n[pid 23721] <... gettid resumed> )      = 31571\n[pid 23721] openat(AT_FDCWD, \"/proc/self/task\", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 13\n[pid 23721] futex(0x7f1b32f680b4, FUTEX_WAKE_OP_PRIVATE, 1, 1, 0x7f1b32f680b0, {FUTEX_OP_SET, 0, FUTEX_OP_CMP_GT, 1}) = 1\n[pid 23721] futex(0x7f1b32eff9d0, FUTEX_WAIT, 31572, NULL <unfinished ...>\n[pid 23721] +++ killed by SIGSEGV +++\n\nso this is the plugin container, and sure enough it's getting its initial IPC socket dup'd to fd 3, then exec's, then does some stuff, then barfs.\n\nHow could we get some better debugging information from this plugin-container run?  Maybe a core dump?", "author": "dustin@mozilla.com", "id": 10249614, "time": "2015-05-08T22:11:27Z"}, {"text": ":eihrul points out that it's not immediately obvious which is the bug here -- the IPC module is arguably handling ECONNRESET incorrectly, and should handle it as a simple EOF (like the bytes_read == 0 case).  It's possible that socket behaviors within the docker container are different from those outside (although it's the same kernel, so that seems pretty unlikely, but http://stackoverflow.com/questions/2974021/what-does-econnreset-mean-in-the-context-of-an-af-local-socket shows that it's not a very well-defined behavior), and the SIGSEGV is intentional or at least expected.\n\nThe other option is, of course, that the plugin-container's segfault is the bug, and we're just finding out about it via ECONNRESET.", "author": "dustin@mozilla.com", "id": 10249697, "time": "2015-05-08T22:28:14Z"}, {"text": "I know jld has poked at the POSIX IPC code a lot, maybe he has some insight here.", "author": "ted@mielczarek.org", "id": 10254465, "time": "2015-05-11T14:45:39Z"}, {"text": "I think the more likely explanation is that the segfault is the bug and the ipc ECONNRESET is just a symptom of the segfault.  So probably the most fruitful direction is to figure out how to debug the segfault.  The `strace` output didn't give much -- it seldom does for segfaults, since they're generally unrelated to a syscall.", "author": "dustin@mozilla.com", "id": 10254976, "time": "2015-05-11T16:46:40Z"}, {"text": "(In reply to Morgan Phillips [:mrrrgn] from comment #2)\n> Sandbox: chroot: Stale file handle\n\nI think this is the important line.  That will be followed by a MOZ_CRASH, which segfaults the child process, which will close its fds and cause socket errors in the parent.\n\nWhat I don't understand is why it's getting ESTALE.  It would help to know what filesystem type /tmp is, but it looks like I should be able to reproduce this locally without too much trouble...", "author": "jld@mozilla.com", "id": 10255559, "time": "2015-05-11T19:07:10Z"}, {"text": "More background: the sandboxing code is creating a temporary directory, rmdir'ing it, then doing fchdir+chroot to it to revoke its filesystem access.  The expected behavior is for the open fd to keep the directory inode alive enough for that; the result (when it works) is a root directory that's empty and can't have new entries created in it, even by its owner.", "author": "jld@mozilla.com", "id": 10255593, "time": "2015-05-11T19:18:07Z"}, {"text": "(In reply to Jed Davis [:jld] {UTC-7} from comment #14)\n> What I don't understand is why it's getting ESTALE.  It would help to know\n> what filesystem type /tmp is, but it looks like I should be able to\n> reproduce this locally without too much trouble...\n\naufs(5).  It seems that any lookup of \".\" in an unlinked directory fails with ESTALE; e.g., stat(\".\") also fails.", "author": "jld@mozilla.com", "id": 10255793, "time": "2015-05-11T20:07:49Z"}, {"text": "https://dxr.mozilla.org/mozilla-central/source/security/sandbox/linux/SandboxChroot.cpp?from=security/sandbox/linux/SandboxChroot.cpp#75\n\nI can replicate pretty easily in an Ubuntu docker instance:\n\nroot@f8a8286c97c3:/# python\nPython 2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import os\n>>> import tempfile\n>>> \n>>> tmpdir = tempfile.mkdtemp()\n>>> fd = os.open(tmpdir, os.O_RDONLY | os.O_DIRECTORY)\n>>> os.rmdir(tmpdir)\n>>> os.fchdir(fd)\n>>> os.chroot('.')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nOSError: [Errno 116] Stale file handle: '.'\n\nCuriously, running that on the same host outside of docker (as a non-priviledged user) gives\n\ndustin@euclid ~/tmp $ python ~dustin/tmp/sandbox.py \nTraceback (most recent call last):\n  File \"/home/dustin/tmp/sandbox.py\", line 8, in <module>\n    os.chroot('.')\nOSError: [Errno 1] Operation not permitted: '.'\n\n(running as root, the same script succeeds)\n\nI do see some version of http://lwn.net/Articles/272684/ applied, which is really the only interesting thing I see about chroot and ESTALE.\n\nReplacing 'os.chroot' with 'os.chdir' shows the same issue in docker:\n\n>>> import os\n>>> import tempfile\n>>> \n>>> tmpdir = tempfile.mkdtemp()\n>>> fd = os.open(tmpdir, os.O_RDONLY | os.O_DIRECTORY)\n>>> os.rmdir(tmpdir)\n>>> os.fchdir(fd)\n>>> os.chdir('.')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nOSError: [Errno 116] Stale file handle: '.'\n\nThe chroot and chdir syscalls share the following code:\n\n    struct path path;\n    int error;\n    unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_DIRECTORY;\nretry:\n    error = user_path_at(AT_FDCWD, filename, lookup_flags, &path);\n    if (error)\n        goto out; \n\n    error = inode_permission(path.dentry->d_inode, MAY_EXEC | MAY_CHDIR);\n    if (error)\n        goto dput_and_out;\n\nuser_path_at calls filename_lookup, .. and then I saw your bug update :)", "author": "dustin@mozilla.com", "id": 10255826, "time": "2015-05-11T20:17:34Z"}, {"text": "For the record, to try this out as an unprivileged user:\n\n>>> import os,tempfile,ctypes\n>>> ctypes.CDLL(\"libc.so.6\", use_errno=True).unshare(1<<28)\n0\n>>> tmpdir = tempfile.mkdtemp()\n>>> fd = os.open(tmpdir, os.O_RDONLY | os.O_DIRECTORY)\n>>> os.rmdir(tmpdir)\n>>> os.fchdir(fd)\n>>> os.chroot('.')\n>>> os.access(\"/\", os.W_OK | os.X_OK)\nTrue\n>>> os.mkdir(\"/testdir\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nOSError: [Errno 2] No such file or directory: '/testdir'\n\nIf the unshare call returns -1 (e.g., older kernel, kernel configured not to allow it, or chrooted), none of the rest of this will work \u2014 and the sandbox won't try to do it.", "author": "jld@mozilla.com", "id": 10256059, "time": "2015-05-11T21:07:18Z"}, {"text": "Docker has a tmpfs mounted at /dev/shm that should be usable, so if all else fails there's a reasonably quick fix for that case.\n\nThe general case is harder.  For example, Linux NFS is\u2026 weird.  The directory behaves normally immediately after being rmdir'ed, and can be chrooted to, but after a certain amount of time it starts returning ESTALE for everything.  I'm guessing there's some kind of cache involved, and I'm also guessing there's no guarantee the cache will live long enough that the chroot will actually work.\n\nSo there are other ways to do this \u2014\u00a0like doing the rmdir after the chroot, or something like Chromium's trick with procfs.", "author": "jld@mozilla.com", "id": 10256546, "time": "2015-05-11T23:07:44Z"}, {"text": "So I have two questions.\n\nFirst, these are the GeckoMediaPlugins tests -- are they the right place to be testing the plugin sandboxing?  If not, what test suite should we be looking at, and how can we isolate GMP from the particulars of sandboxing?\n\nSecond, what would be the best way to ensure that these tests continue to give valuable results about the Gecko Media Plugins within Docker?  Secondarily, will users be able to run Firefox in Docker?  I don't think we need to be concerned about NFS in this bug, but it seems not unreasonable to default the mkdtemp to /dev/shm if it exists.  that would let Firefox, and the tests, run successfully under Docker while being unlikely to adversely affect linux systems without /dev/shm.", "author": "dustin@mozilla.com", "id": 10256698, "time": "2015-05-11T23:56:51Z"}, {"text": "(In reply to Dustin J. Mitchell [:dustin] from comment #20)\n> First, these are the GeckoMediaPlugins tests -- are they the right place to\n> be testing the plugin sandboxing?\n\nNo, they aren't the right place.  But writing unit tests that the automated test infrastructure can't run yet hasn't been a high priority, and the sandboxing code has some unusual requirements (such as, for this code, needing a single-threaded process to unshare the user namespace and gain capabilities).\n\n> Second, what would be the best way to ensure that these tests continue to\n> give valuable results about the Gecko Media Plugins within Docker? \n> Secondarily, will users be able to run Firefox in Docker?\n\nIdeally, Firefox shouldn't behave differently in Docker (or inside \u226431 layers of nested unprivileged LXC, or\u2026) than otherwise.  This bug is a bug, and I have a patch\u2026\n\n\nIf a temporary workaround is needed, setting MOZ_ASSUME_USER_NS=0 in the environment should be the best way.  (Setting MOZ_DISABLE_GMP_SANDBOX to anything will also work, but will disable other sandboxing features that aren't, as far as I know, at issue here.)", "author": "jld@mozilla.com", "id": 10259867, "time": "2015-05-12T18:04:16Z"}, {"text": "(In reply to Chris AtLee [:catlee] from comment #7)\n> where does 'Sandbox: chroot: Stale file handle' come from?\n\n(In reply to Dustin J. Mitchell [:dustin] from comment #8)\n> We're not sure, but that seems to appear for a lot of passing tests, too.\n\nI missed these comments the first time I looked at this bug.  Does this mean there are GeckoMediaPlugin tests that pass despite the plugin container crashing with SIGSEGV?\n\n\nAlso not helping this bug be correctly diagnosed:\n\n* MOZ_CRASH logs that it's a MOZ_CRASH on debug builds, but there were apparently non-debug?\n\n* Our child process handling is such that we have no reliable way to find out how a child exited; we've known this since at least 2003 (bug 227246) but there are no current plans to fix it that I'm aware of.", "author": "jld@mozilla.com", "id": 10259993, "time": "2015-05-12T18:27:50Z"}, {"text": "Created attachment 8604869\nbug1162965-chroot-dir-hg0.diff\n\nTested on Ubuntu 14.04 inside and outside of Docker.", "author": "jld@mozilla.com", "id": 10260548, "time": "2015-05-12T20:25:15Z"}, {"text": "Comment on attachment 8604869\nbug1162965-chroot-dir-hg0.diff\n\nReview of attachment 8604869:\n-----------------------------------------------------------------\n\n::: security/sandbox/linux/SandboxChroot.cpp\n@@ +111,4 @@\n>  }\n>  \n> +// This chroot()s and chdir()s to the /proc/<pid>/fdinfo directory of\n> +// the calling thread.  When the thread exits the directory will\n\n\"calling\" here is confusing -- it suggests the thread calling Invoke(), but that's not (I think?) what it means.  How about \"the chrooting thread\"?\n\n@@ +124,5 @@\n> +  char path[32]; // \"/proc/2147483647/fdinfo\" is 24 including '\\0'.\n> +  DebugOnly<size_t> len;\n> +\n> +  len = size_t(snprintf(path, sizeof(path), \"/proc/%d/fdinfo\", tid));\n> +  MOZ_ASSERT(len < sizeof(path));\n\nUsing fdinfo is pretty neat.  I'm curious if this is a technique used elsewhere?  Is it fairly likely to continue to work in later Linux versions?", "author": "dustin@mozilla.com", "id": 10260685, "time": "2015-05-12T20:56:07Z"}, {"text": "Comment on attachment 8604869\nbug1162965-chroot-dir-hg0.diff\n\nReview of attachment 8604869:\n-----------------------------------------------------------------\n\n::: security/sandbox/linux/SandboxChroot.cpp\n@@ +111,4 @@\n>  }\n>  \n> +// This chroot()s and chdir()s to the /proc/<pid>/fdinfo directory of\n> +// the calling thread.  When the thread exits the directory will\n\nI'd meant it to indicate the caller of the function under the comment; I'll clarify.\n\n@@ +123,5 @@\n> +  int tid = syscall(__NR_gettid);\n> +  char path[32]; // \"/proc/2147483647/fdinfo\" is 24 including '\\0'.\n> +  DebugOnly<size_t> len;\n> +\n> +  len = size_t(snprintf(path, sizeof(path), \"/proc/%d/fdinfo\", tid));\n\nI just noticed that this will break with pid namespaces; see https://crbug.com/312380#c34.  It could still land now without breaking anything, but it will need to change for bug 1151624.\n\n@@ +124,5 @@\n> +  char path[32]; // \"/proc/2147483647/fdinfo\" is 24 including '\\0'.\n> +  DebugOnly<size_t> len;\n> +\n> +  len = size_t(snprintf(path, sizeof(path), \"/proc/%d/fdinfo\", tid));\n> +  MOZ_ASSERT(len < sizeof(path));\n\nChromium has been using it since 2011 (https://crbug.com/76542).\n\nLinux generally doesn't break userspace-exposed ABIs, ever, and I believe this counts.  The one thing I was worried about is that /proc/N/fdinfo might resolve to an object that reflects the file descriptor table itself and outlives the original task's destruction if another task shares it (e.g., another thread in the same process, absent a call to unshare(CLONE_FILES)).  I suspect that that won't happen (and it's definitely not the case up to now), but since this needs to change to use a separate process instead, that won't be a problem in any case.", "author": "jld@mozilla.com", "id": 10261607, "time": "2015-05-13T00:33:57Z"}, {"text": "Comment on attachment 8604869\nbug1162965-chroot-dir-hg0.diff\n\nI'm going to try the /dev/shm approach to unblock releng.", "author": "jld@mozilla.com", "id": 10261759, "time": "2015-05-13T02:04:55Z"}, {"text": "Created attachment 8605001\nPatch: try /dev/shm instead", "author": "jld@mozilla.com", "id": 10261803, "time": "2015-05-13T02:29:06Z"}, {"text": "Comment on attachment 8605001\nPatch: try /dev/shm instead\n\nReview of attachment 8605001:\n-----------------------------------------------------------------\n\nThis seems reasonable with the fallback.\n\nLinux historically does not break /proc and is sometimes the only interface for some things anyway (among syscalls, netlink, dev entries, etc..)", "author": "gdestuynder@mozilla.com", "id": 10265007, "time": "2015-05-13T18:17:53Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=64942d5306d9 (this is dead code on the current CI, so build-only).", "author": "jld@mozilla.com", "id": 10265476, "time": "2015-05-13T20:02:34Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/5f8235c2f2a3", "author": "jld@mozilla.com", "id": 10270755, "time": "2015-05-14T23:19:37Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/5f8235c2f2a3", "author": "cbook@mozilla.com", "id": 10273298, "time": "2015-05-15T15:44:44Z"}, {"text": "Aurora/40 is going to break the same way, so this will need uplift.  I'd prefer to let the patch spend a few days in the hands of Nightly users first, but I could do that sooner if releng needs it.", "author": "jld@mozilla.com", "id": 10274835, "time": "2015-05-15T21:07:34Z"}, {"text": "Comment on attachment 8605001\nPatch: try /dev/shm instead\n\nApproval Request Comment\n[Feature/regressing bug #]: Regression from bug 1151607\n[User impact if declined]: Will break tests on TaskCluster; see comment #0\n[Describe test coverage new/current, TreeHerder]: No tests yet; GeckoMediaPlugin tests run on TaskCluster will provide coverage, as do Linux Nightly users on new enough OS versions.\n[Risks and why]: Nonzero but low; it's not technically impossible for a system to cause problems with this approach, but there's no reason to use such a configuration and we don't think anyone does so.\n[String/UUID change made/needed]: None.", "author": "jld@mozilla.com", "id": 10293534, "time": "2015-05-21T02:27:59Z"}, {"text": "(In reply to Jed Davis [:jld] {UTC-7} from comment #33)\n> [Risks and why]: Nonzero but low; it's not technically impossible for a\n> system to cause problems with this approach, but there's no reason to use\n> such a configuration and we don't think anyone does so.\n\nI should also add that risk is limited to breaking GeckoMediaPlugin support, which means OpenH264 and EME.", "author": "jld@mozilla.com", "id": 10296034, "time": "2015-05-21T15:40:15Z"}, {"text": "https://hg.mozilla.org/releases/mozilla-aurora/rev/eed3673082b1", "author": "ryanvm@gmail.com", "id": 10300763, "time": "2015-05-22T15:51:49Z"}], "id": 1162965, "priority": "--", "cc": ["catlee@mozilla.com", "cpearce@mozilla.com", "dustin@mozilla.com", "gdestuynder@mozilla.com", "jld@mozilla.com", "ted@mielczarek.org", "winter2718@gmail.com"], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_firefox59": "---", "last_change_time": "2015-05-22T15:51:49Z", "status": "RESOLVED", "product": "Core", "cf_fx_iteration": "---", "blocks": [1151607, 1155749], "qa_contact": "", "creation_time": "2015-05-08T14:08:31Z", "cf_status_firefox_esr52": "---", "component": "Security: Process Sandboxing", "assigned_to_detail": {"email": "jld@mozilla.com", "id": 462836, "name": "jld@mozilla.com", "real_name": "Jed Davis [:jld] (\u23f0UTC-7)"}, "groups": [], "cf_status_firefox60": "---", "cf_status_firefox41": "fixed", "cf_status_firefox40": "fixed", "target_milestone": "mozilla41", "is_cc_accessible": true, "cf_rank": null, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "winter2718@gmail.com", "id": 516035, "name": "winter2718@gmail.com", "real_name": "Morgan Phillips [:mrrrgn]"}, "whiteboard": "", "mentors": [], "summary": "./mach gtest GeckoMediaPlugins.* fails when run in a docker container", "cf_platform_rel": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "assigned_to": "jld@mozilla.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "catlee@mozilla.com, dustin@mozilla.com, winter2718@gmail.com"}], "who": "winter2718@gmail.com", "when": "2015-05-08T14:09:56Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1155749"}], "who": "winter2718@gmail.com", "when": "2015-05-08T14:26:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cpearce@mozilla.com"}], "who": "winter2718@gmail.com", "when": "2015-05-08T14:42:07Z"}, {"changes": [{"removed": "", "field_name": "cf_user_story", "added": "@@ -0,0 +1,8 @@\n+Steps to reproduce:\r\n+\r\n+    docker run -i -t ubuntu:14.04 /bin/bash\r\n+    apt-get -y update && apt-get install -y python\r\n+    hg clone https://hg.mozilla.org/mozilla-central && cd mozilla-central\r\n+    python/mozboot/bin/bootstrap.py --application-choice=desktop --no-interactive\r\n+    ./mach build\r\n+    ./mach gtest"}], "who": "winter2718@gmail.com", "when": "2015-05-08T14:43:19Z"}, {"changes": [{"removed": "./mach gtest fails when run in a docker container", "field_name": "summary", "added": "./mach gtest GeckoMediaPlugins.GMPStorageBasic fails when run in a docker container"}], "who": "winter2718@gmail.com", "when": "2015-05-08T14:52:14Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(cpearce@mozilla.com)"}], "who": "winter2718@gmail.com", "when": "2015-05-08T14:54:10Z"}, {"changes": [{"removed": "", "field_name": "cf_user_story", "added": "@@ -8 +8 @@\n-    ./mach gtest+    ./mach gtest GeckoMediaPlugins.GMPStorageBasic"}], "who": "winter2718@gmail.com", "when": "2015-05-08T14:54:56Z"}, {"changes": [{"removed": "./mach gtest GeckoMediaPlugins.GMPStorageBasic fails when run in a docker container", "field_name": "summary", "added": "./mach gtest GeckoMediaPlugins.* fails when run in a docker container"}], "who": "winter2718@gmail.com", "when": "2015-05-08T15:01:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jld@mozilla.com, ted@mielczarek.org"}], "who": "ted@mielczarek.org", "when": "2015-05-11T14:45:39Z"}, {"changes": [{"removed": "needinfo?(cpearce@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jld@mozilla.com", "when": "2015-05-11T19:07:10Z"}, {"changes": [{"removed": "Tools", "field_name": "component", "added": "Security: Process Sandboxing"}, {"removed": "unspecified", "field_name": "version", "added": "Trunk"}, {"removed": "", "field_name": "blocks", "added": "1151607"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "jld@mozilla.com"}, {"removed": "Release Engineering", "field_name": "product", "added": "Core"}, {"removed": "hwine@mozilla.com", "field_name": "qa_contact", "added": ""}], "who": "jld@mozilla.com", "when": "2015-05-11T19:21:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gdestuynder@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8604869, "added": "review?(gdestuynder@mozilla.com)"}], "who": "jld@mozilla.com", "when": "2015-05-12T20:25:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gdestuynder@mozilla.com)", "attachment_id": 8604869, "added": ""}], "who": "jld@mozilla.com", "when": "2015-05-13T02:04:55Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8605001, "added": "review?(gdestuynder@mozilla.com)"}], "who": "jld@mozilla.com", "when": "2015-05-13T02:29:06Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gdestuynder@mozilla.com)", "attachment_id": 8605001, "added": "review+"}], "who": "gdestuynder@mozilla.com", "when": "2015-05-13T18:17:53Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "checkin-needed"}], "who": "jld@mozilla.com", "when": "2015-05-13T20:02:34Z"}, {"changes": [{"removed": "---", "field_name": "cf_status_firefox39", "added": "unaffected"}, {"removed": "---", "field_name": "cf_status_firefox40", "added": "affected"}, {"removed": "---", "field_name": "cf_status_firefox41", "added": "affected"}, {"removed": "---", "field_name": "cf_status_b2g_master", "added": "unaffected"}], "who": "jld@mozilla.com", "when": "2015-05-13T20:08:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8604869, "added": "review-"}], "who": "jld@mozilla.com", "when": "2015-05-13T20:53:04Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8604869, "added": "1"}], "who": "jld@mozilla.com", "when": "2015-05-14T20:36:48Z"}, {"changes": [{"removed": "checkin-needed", "field_name": "keywords", "added": ""}], "who": "jld@mozilla.com", "when": "2015-05-14T23:19:37Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla41"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-05-15 08:44:44"}, {"removed": "affected", "field_name": "cf_status_firefox41", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2015-05-15T15:44:44Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jld@mozilla.com)"}], "who": "jld@mozilla.com", "when": "2015-05-15T21:07:34Z"}, {"changes": [{"removed": "needinfo?(jld@mozilla.com)", "field_name": "flagtypes.name", "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8605001, "added": "approval-mozilla-aurora?"}], "who": "jld@mozilla.com", "when": "2015-05-21T02:27:59Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "approval-mozilla-aurora?", "attachment_id": 8605001, "added": "approval-mozilla-aurora+"}], "who": "sledru@mozilla.com", "when": "2015-05-22T10:30:29Z"}, {"changes": [{"removed": "affected", "field_name": "cf_status_firefox40", "added": "fixed"}], "who": "ryanvm@gmail.com", "when": "2015-05-22T15:51:49Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}