{"status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "classification": "Client Software", "creator": "felipc@gmail.com", "cc": ["jhofmann@mozilla.com", "jryans@gmail.com", "kmaglione+bmo@mozilla.com", "MattN+bmo@mozilla.com", "mcastelluccio@mozilla.com", "mconley@mozilla.com", "nika@thelayzells.com", "past@mozilla.com", "Tobias.Marty@gmx.de"], "depends_on": [1462400], "creation_time": "2018-04-30T18:24:10Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "summary": "XPCOMUtils.defineLazyProxy (was: lazy listeners for the content process)", "cf_last_resolved": "2018-05-16T10:04:21Z", "attachments": [{"creator": "felipc@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-15T01:39:50Z", "type_id": 748, "creation_date": "2018-05-15T00:00:43Z", "id": 1756728, "setter": "kmaglione+bmo@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8975389}], "assigned_to_detail": {"email": "felipc@gmail.com", "id": 208747, "name": "felipc@gmail.com", "real_name": ":Felipe Gomes (needinfo me!)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 12, "comments": [{"text": "nsBrowserGlue already has something similar, here:\nhttps://searchfox.org/mozilla-central/rev/08df4e6e11284186d477d7e5b0ae48483ecc979c/browser/components/nsBrowserGlue.js#186\n\nWe should create some infrastructure to do this in the content process, and start moving things out of the main scripts into separate scripts that are only used when needed.\n\nOne slightly difficult aspect is that the existing implementation in nsBrowserGlue doesn't cover the case for event listeners, and when we do that, we'll need to pay attention into the cases where it's just a function (to call it directly) vs. when it's an object with handleEvent. This is done automagically by XPCOM now but if we might have to handle it manually on the first event.", "author": "felipc@gmail.com", "id": 13243937, "time": "2018-04-30T18:24:10Z"}, {"text": "Hey all, apologies for the delay here.. I went back and forth on this for a while, but I arrived at something that I think will be really useful in general, and not just for frame scripts in the content process.\n\nStory time if you're curious (feel free to skip this comment otherwise):\n\nI started following a similar pattern from what's in nsBrowserGlue (linked above) and to adapt it to the use cases of the stuff found in the content scripts.\n\nIt worked but it had shortcomings:\n - the changes needed to make on the current code were more verbose and more often required changes in behavior, specially around managing the adding/removal of listeners\n\n- dealing with repeated msgs is harder here than what's covered in nsBrowserGlue, because events make it harder: two different callers might want to add a listener for the same event, but with different parameters (e.g. bubbling vs capture). Having a central object become the de-facto listener and correctly find and dispatch the real listeners for each case quickly became unwieldy.\n\n- handling all different use cases (module singleton, singleton + .init() function, exported constructor) made things weird\n\n- the lifetime of stuff is harder to reason about when the real listener is a central object and it keeps references to all other objects\n\n\nSo, after I had a lot working, I had an idea to go in another direction using Proxies, and once it worked I scrapped all that I had from the above", "author": "felipc@gmail.com", "id": 13274593, "time": "2018-05-14T04:34:58Z"}, {"text": "The better thing to have would be a way to define a lazy getter to be passed for an event listener/observer/msg listener, that is evaluated only when it'll be called.\n\nThe lazy getters provided by XPCOMUtils are not enough for this, because simply passing one as a reference to e.g. addEventListener will cause its getter to run.\n\nSo what we really need is some sort of lazy getter that is resilient to be passed around by reference, and is only evaluated when really used.\n\nI went in this direction and implemented it using proxies, which can be passed around. As soon as any trap gets called, it will evaluate the lazy getter and forward everything to the underlying object.\n\n\n(There are many more details in the implementation that cover the use cases needed for a lot of the stuff that I'm lazy-fying in content scripts, which I'll be doing in separate bugs)", "author": "felipc@gmail.com", "id": 13274597, "time": "2018-05-14T04:45:08Z"}, {"text": "Created attachment 8975389\nBug 1457988 - Implement XPCOMUtils.defineLazyProxy.\n\nThis implements a new kind of lazy getter in XPCOMUtils that creates an object (implemented as a JS Proxy) that is resilient to be passed around as references to other functions, and will only evaluate the getter when it really needs to be used\n\nReview commit: https://reviewboard.mozilla.org/r/243690/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/243690/", "author": "felipc@gmail.com", "id": 13274599, "time": "2018-05-14T04:48:53Z"}, {"text": "(In reply to :Felipe Gomes (needinfo me!) from comment #0)\n> nsBrowserGlue already has something similar, here:\n> https://searchfox.org/mozilla-central/rev/\n> 08df4e6e11284186d477d7e5b0ae48483ecc979c/browser/components/nsBrowserGlue.\n> js#186\n> \n> We should create some infrastructure to do this in the content process, and\n> start moving things out of the main scripts into separate scripts that are\n> only used when needed.\n> \n> One slightly difficult aspect is that the existing implementation in\n> nsBrowserGlue doesn't cover the case for event listeners, and when we do\n> that, we'll need to pay attention into the cases where it's just a function\n> (to call it directly) vs. when it's an object with handleEvent. This is done\n> automagically by XPCOM now but if we might have to handle it manually on the\n> first event.\n\nIt's worth noting that Nika and I are working on some things for Fission are aimed at making it easier to do this automatically. If there are specific cases you're especially concerned about, it would be interesting to hear about them so we can make sure they're covered by the new auto-loading infrastructure.", "author": "kmaglione+bmo@mozilla.com", "id": 13276683, "time": "2018-05-14T18:54:24Z"}, {"text": "Comment on attachment 8975389\nBug 1457988 - Implement XPCOMUtils.defineLazyProxy.\n\nhttps://reviewboard.mozilla.org/r/243690/#review249708\n\nThanks. This looks useful. I just have some nits about performance concerns.\n\n::: js/xpconnect/loader/XPCOMUtils.jsm:623\n(Diff revision 1)\n> +    let handler = new LazyProxyHandler(aName, aStubProperties, aUntrapCallback);\n> +\n> +    if (typeof(aInitFuncOrResource) == \"string\") {\n> +      this.defineLazyModuleGetter(handler, \"realObject\", aInitFuncOrResource, aName);\n> +    } else {\n> +      this.defineLazyGetter(handler, \"realObject\", aInitFuncOrResource);\n\nHm. This also uses `delete` and will put the handler into dictionary mode... :( We should maybe fix that first.\n\n::: js/xpconnect/loader/XPCOMUtils.jsm:661\n(Diff revision 1)\n> + * stored as `realObject`, which is defined as a lazy getter\n> + * and which will be evaulated at the first time that any of these\n> + * traps are called (with an exception in the get() trap for\n> + * the properties provided in the `aStubProperties` parameter).\n> + */\n> +function LazyProxyHandler(aName, aStubProperties, aUntrapCallback) {\n\nPlease make this an ES6 class\n\n::: js/xpconnect/loader/XPCOMUtils.jsm:673\n(Diff revision 1)\n> +LazyProxyHandler.prototype = {\n> +  getObject() {\n> +    if (this.pending) {\n> +      this.pending = false;\n> +      if (this.untrapCallback) {\n> +        this.untrapCallback.call(undefined, this.realObject);\n\nShould be `null` rather than `undefined`\n\n::: js/xpconnect/loader/XPCOMUtils.jsm:674\n(Diff revision 1)\n> +  getObject() {\n> +    if (this.pending) {\n> +      this.pending = false;\n> +      if (this.untrapCallback) {\n> +        this.untrapCallback.call(undefined, this.realObject);\n> +        delete this.untrapCallback;\n\nPlease don't delete properties. It changes the shape of the object, and generally puts it in dictionary mode, which is bad for the JIT. Just null it out instead.\n\n::: js/xpconnect/loader/XPCOMUtils.jsm:681\n(Diff revision 1)\n> +      delete this.stubProperties;\n> +    }\n> +    return this.realObject;\n> +  },\n> +\n> +  getPrototypeOf(...args) {\n\nI hate to say this... but rest args and spread args are pretty expensive and don't have good JIT support at the moment. We should just use the explicit handler args in all of these traps.\n\n::: js/xpconnect/tests/unit/test_lazyproxy.js:51\n(Diff revision 1)\n> +  //\n> +  // Note: Even though Assert.equal uses a shallow\n> +  // comparison (==), on success it stringifies the\n> +  // two parameters given for the log,\n> +  // which enumerates the proxy :S.\n> +  Assert.ok(lazyProxy === tmp.myLazyProxy);\n\n`Assert.strictEqual`, please.\n\nAlso, please add descriptions for all assertions. Debugging xpcshell failures without assertion descriptions is a nightmare.", "author": "kmaglione+bmo@mozilla.com", "id": 13277021, "time": "2018-05-14T20:39:18Z"}, {"text": "Comment on attachment 8975389\nBug 1457988 - Implement XPCOMUtils.defineLazyProxy.\n\nhttps://reviewboard.mozilla.org/r/243690/#review249708\n\n> Hm. This also uses `delete` and will put the handler into dictionary mode... :( We should maybe fix that first.\n\nHonestly, we should probably just skip the existing lazy getter machinery and just have the proxy handler evaluate this the first time it's needed. This probably really isn't a place where we want to run into additional JIT overhead (having a proxy at all means we won't get ICs for most operations we otherwise would), and the existing lazy getter stuff tends to be pretty hairy, as far as the platform is concerned...", "author": "kmaglione+bmo@mozilla.com", "id": 13277030, "time": "2018-05-14T20:43:53Z"}, {"text": "(In reply to Kris Maglione [:kmag] (long backlog; ping on IRC if you're blocked) from comment #5)\n\nThanks! Addressed all the comments, except:\n\n> > +  Assert.ok(lazyProxy === tmp.myLazyProxy);\n> \n> `Assert.strictEqual`, please.\n\nAssert.strictEqual calls Assert.report, which wants to stringify the two objects compared (even when it succeeds), which ends up triggering the proxy evaluation.  I improved the comment a bit to make this more clear.", "author": "felipc@gmail.com", "id": 13277495, "time": "2018-05-14T23:58:57Z"}, {"text": "Comment on attachment 8975389\nBug 1457988 - Implement XPCOMUtils.defineLazyProxy.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/243690/diff/1-2/", "author": "felipc@gmail.com", "id": 13277500, "time": "2018-05-15T00:00:43Z"}, {"text": "Comment on attachment 8975389\nBug 1457988 - Implement XPCOMUtils.defineLazyProxy.\n\nhttps://reviewboard.mozilla.org/r/243690/#review249842\n\nThanks\n\n::: js/xpconnect/loader/XPCOMUtils.jsm:622\n(Diff revision 2)\n> +  defineLazyProxy: function XPCOMUtils__defineLazyProxy(aObject, aName, aInitFuncOrResource,\n> +                                                        aStubProperties, aUntrapCallback) {\n> +    let initFunc = aInitFuncOrResource;\n> +\n> +    if (typeof(aInitFuncOrResource) == \"string\") {\n> +      initFunc = () => ChromeUtils.import(aInitFuncOrResource)[aName];\n\nThis is going to wind up defining a bunch of unwanted symbols on the XPCOMUtils global.\n\nPassing `null` as the second arg would fix that problem. But there's another problem, which is that the module loader supports exporting lexical symbols (and also, for that matter, only exporting listed symbols), which are not accessible on the plain module global object.\n\nWe should really probably import into a temporary object and get `aName` from that.\n\n::: js/xpconnect/loader/XPCOMUtils.jsm:719\n(Diff revision 2)\n> +  }\n> +\n> +  get(target, prop, receiver) {\n> +    if (this.pending &&\n> +        this.stubProperties &&\n> +        this.stubProperties.hasOwnProperty(prop)) {\n\nSo, two things. 1) Using `hasOwnProperty` this way can be a bit of a footgun if there's any chance of that being defined on the object itself, and overriding the prototype method. 2) We may actually want to include object prototype properties here so they don't wind up forcing evaluation of the lazy getter.\n\nI don't have that strong an opinion on #2, but for #1, please use something like Object.prototype.hasOwnProperty.call or Object.getOwnPropertyDescriptor.\n\n::: js/xpconnect/loader/XPCOMUtils.jsm:737\n(Diff revision 2)\n> +  apply(target, thisArg, argsList) {\n> +    return Reflect.apply(this.getObject(), thisArg, argsList);\n> +  }\n> +\n> +  construct(target, argsList, newTarget) {\n> +    return Reflect.construct(this.getObject(), argsList, newTarget);\n> +  }\n\nThese aren't necessary. They only work if the target object is a function, which it never is here.", "author": "kmaglione+bmo@mozilla.com", "id": 13277623, "time": "2018-05-15T01:39:50Z"}, {"text": "Pushed by felipc@gmail.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/62451c9687b2\nImplement XPCOMUtils.defineLazyProxy. r=kmag", "author": "pulsebot@bots.tld", "id": 13280207, "time": "2018-05-15T22:51:18Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/62451c9687b2", "author": "ebalazs@mozilla.com", "id": 13280953, "time": "2018-05-16T10:04:21Z"}], "id": 1457988, "priority": "P1", "mentors_detail": [], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox62": "---", "cf_platform_rel": "---", "product": "Firefox", "cf_status_firefox_esr52": "---", "blocks": [1461247, 1461248, 1461444], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "General", "votes": 2, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "wontfix", "cf_status_firefox60": "---", "target_milestone": "Firefox 62", "is_cc_accessible": true, "cf_rank": null, "groups": [], "url": "", "creator_detail": {"email": "felipc@gmail.com", "id": 208747, "name": "felipc@gmail.com", "real_name": ":Felipe Gomes (needinfo me!)"}, "whiteboard": "[fxperf:p1]", "mentors": [], "cc_detail": [{"email": "jhofmann@mozilla.com", "id": 522029, "name": "jhofmann@mozilla.com", "real_name": "Johann Hofmann [:johannh]"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, {"email": "MattN+bmo@mozilla.com", "id": 305228, "name": "MattN+bmo@mozilla.com", "real_name": "Matthew N. [:MattN] (PM if requests are blocking you)"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "mconley@mozilla.com", "id": 403756, "name": "mconley@mozilla.com", "real_name": "Mike Conley (:mconley) (:\u2699\ufe0f) (Catching up on needinfos / reviews)"}, {"email": "nika@thelayzells.com", "id": 534482, "name": "nika@thelayzells.com", "real_name": ":Nika Layzell"}, {"email": "past@mozilla.com", "id": 363318, "name": "past@mozilla.com", "real_name": "Panos Astithas [:past] (please ni?)"}, {"email": "Tobias.Marty@gmx.de", "id": 572549, "name": "Tobias.Marty@gmx.de", "real_name": "TMart"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-17T16:42:00Z", "cf_status_firefox_esr60": "---", "assigned_to": "felipc@gmail.com", "is_open": false, "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "mconley@mozilla.com"}], "who": "mconley@mozilla.com", "when": "2018-04-30T18:59:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Tobias.Marty@gmx.de"}], "who": "Tobias.Marty@gmx.de", "when": "2018-05-01T18:14:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2018-05-02T10:44:54Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P3"}, {"removed": "", "field_name": "cc", "added": "past@mozilla.com"}], "who": "past@mozilla.com", "when": "2018-05-10T16:09:45Z"}, {"changes": [{"removed": "P3", "field_name": "priority", "added": "P1"}, {"removed": "", "field_name": "whiteboard", "added": "[fxperf:p1]"}], "who": "felipc@gmail.com", "when": "2018-05-14T04:34:58Z"}, {"changes": [{"removed": "Create lazy listener infra-structure for the content process", "field_name": "summary", "added": "XPCOMUtils.defineLazyProxy (was: lazy listeners for the content process)"}], "who": "felipc@gmail.com", "when": "2018-05-14T04:45:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8975389, "added": "review?(kmaglione+bmo@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "kmaglione+bmo@mozilla.com"}], "who": "felipc@gmail.com", "when": "2018-05-14T04:48:53Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1461247"}], "who": "felipc@gmail.com", "when": "2018-05-14T05:08:37Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1461248"}], "who": "felipc@gmail.com", "when": "2018-05-14T05:15:38Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jhofmann@mozilla.com"}], "who": "jhofmann@mozilla.com", "when": "2018-05-14T07:51:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "MattN+bmo@mozilla.com"}], "who": "MattN+bmo@mozilla.com", "when": "2018-05-14T17:45:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nika@thelayzells.com"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-05-14T18:54:24Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1461444"}], "who": "felipc@gmail.com", "when": "2018-05-14T19:47:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8975389, "added": ""}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-05-14T20:39:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8975389, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "felipc@gmail.com", "when": "2018-05-15T00:00:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8975389, "added": "review+"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-05-15T01:39:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2018-05-15T23:17:12Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "Firefox 62"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-16 10:04:21"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "ebalazs@mozilla.com", "when": "2018-05-16T10:04:21Z"}, {"changes": [{"removed": "affected", "field_name": "cf_status_firefox61", "added": "wontfix"}], "who": "ryanvm@gmail.com", "when": "2018-05-16T12:42:05Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1462400"}], "who": "felipc@gmail.com", "when": "2018-05-17T16:42:00Z"}]}