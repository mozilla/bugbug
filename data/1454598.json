{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "jfkthame@gmail.com", "mentors_detail": [], "depends_on": [1455494, 1455526, 1455531, 1457254, 1458158], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "dschubert@mozilla.com", "id": 421268, "name": "dschubert@mozilla.com", "real_name": "Dennis Schubert [:denschub]"}, {"email": "igoldan@mozilla.com", "id": 590618, "name": "igoldan@mozilla.com", "real_name": "Ionu\u021b Goldan [:igoldan], Performance Sheriffing"}, {"email": "jwatt@jwatt.org", "id": 32767, "name": "jwatt@jwatt.org", "real_name": "Jonathan Watt [:jwatt]"}, {"email": "kdubost@mozilla.com", "id": 473918, "name": "kdubost@mozilla.com", "real_name": "Karl Dubost :karlcow"}, {"email": "lsalzman@mozilla.com", "id": 536714, "name": "lsalzman@mozilla.com", "real_name": "Lee Salzman [:lsalzman]"}], "cf_last_resolved": "2018-04-26T06:14:42Z", "attachments": [{"creator": "jfkthame@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8968505}, {"creator": "jfkthame@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-18T17:57:31Z", "type_id": 4, "creation_date": "2018-04-18T13:58:36Z", "id": 1745625, "setter": "lsalzman@mozilla.com"}], "content_type": "text/plain", "id": 8968664}, {"creator": "jfkthame@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8968926}, {"creator": "jfkthame@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8968941}, {"creator": "jfkthame@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8969102}, {"creator": "jfkthame@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-19T12:00:09Z", "type_id": 4, "creation_date": "2018-04-18T22:32:45Z", "id": 1745946, "setter": "jwatt@jwatt.org"}], "content_type": "text/plain", "id": 8969109}, {"creator": "jfkthame@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-23T10:20:31Z", "type_id": 4, "creation_date": "2018-04-19T13:10:25Z", "id": 1746252, "setter": "jwatt@jwatt.org"}], "content_type": "text/plain", "id": 8969271}, {"creator": "jfkthame@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-21T13:20:23Z", "type_id": 4, "creation_date": "2018-04-21T13:14:04Z", "id": 1747274, "setter": "lsalzman@mozilla.com"}], "content_type": "text/plain", "id": 8969894}, {"creator": "jfkthame@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-24T12:57:33Z", "type_id": 4, "creation_date": "2018-04-24T09:40:54Z", "id": 1748156, "setter": "jwatt@jwatt.org"}], "content_type": "text/plain", "id": 8970479}, {"creator": "jfkthame@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-25T13:01:41Z", "type_id": 4, "creation_date": "2018-04-25T11:26:12Z", "id": 1748757, "setter": "jwatt@jwatt.org"}], "content_type": "text/plain", "id": 8970848}], "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 34, "comments": [{"text": "A variation font can represent a range of (weight, stretch, style) values, not just a single tuple. So the gfxFontEntry for such a face needs to support ranges rather than single values, so that the font-matching algorithm can recognize the capabilities.", "author": "jfkthame@gmail.com", "id": 13211847, "time": "2018-04-17T09:33:01Z"}, {"text": "Created attachment 8968505\n(WIP) - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges\n\nJust posting my current WIP here for reference. This currently breaks OpenType shaping with DejaVu Sans on Linux for some unknown reason, so that needs to be resolved before it's ready for review.", "author": "jfkthame@gmail.com", "id": 13212265, "time": "2018-04-17T12:59:36Z"}, {"text": "Created attachment 8968664\npart 1 - Make gfxFcPlatformFontList::GetFTLibrary work before font system is fully up and running, so that the global FT_Library can be used during initialization of the font list itself", "author": "jfkthame@gmail.com", "id": 13213694, "time": "2018-04-17T21:13:53Z"}, {"text": "Created attachment 8968926\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges\n\nOK, I think this should basically work now. Try is currently closed, but I'll push a try job when I get the chance.", "author": "jfkthame@gmail.com", "id": 13215630, "time": "2018-04-18T15:03:47Z"}, {"text": "Created attachment 8968941\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges\n\nMinor update to fix build failure on android.", "author": "jfkthame@gmail.com", "id": 13215755, "time": "2018-04-18T15:32:33Z"}, {"text": "Comment on attachment 8968926\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges\n\nReview of attachment 8968926:\n-----------------------------------------------------------------\n\n::: gfx/src/FontPropertyTypes.h\n@@ +349,5 @@\n> +   */\n> +  FontPropertyRange(T aMin, T aMax)\n> +    : mValues(aMin, aMax)\n> +  {\n> +    MOZ_ASSERT(aMin <= aMax);\n\nIs it possible that a malicious font file could end up violating this (and not being caught in Release builds of course).\n\n::: gfx/thebes/gfxDWriteFontList.cpp\n@@ +227,5 @@\n>                   NS_ConvertUTF16toUTF8(fe->Name()).get(),\n>                   NS_ConvertUTF16toUTF8(Name()).get(),\n>                   (fe->IsItalic()) ?\n>                    \"italic\" : (fe->IsOblique() ? \"oblique\" : \"normal\"),\n> +                 fe->Weight().Min().ToFloat(), fe->Weight().Max().ToFloat(),\n\nThis sort of serialization is going to be a bit ugly in the common case of IsSingle() returning true. How about adding a ToString(nsACString& aString, const char* aSeparator) method to allow us to be smarter about this?\n\n::: gfx/thebes/gfxFontEntry.cpp\n@@ +1053,5 @@\n> +                Weight().Min() <= FontWeight(axis.mMaxValue)) {\n> +                mStandardFace = FontWeight(axis.mDefaultValue) == Weight().Min();\n> +                mWeightRange =\n> +                    WeightRange(FontWeight(std::max(1.0f, axis.mMinValue)),\n> +                                FontWeight(std::min(1000.0f, axis.mMaxValue)));\n\nMaybe we should we log/warn if the font is using out of range values that we end up clamping?\n\n::: gfx/thebes/gfxFontEntry.h\n@@ +140,5 @@\n>      // The \"real\" name of the face, if available from the font resource;\n>      // returns Name() if nothing better is available.\n>      virtual nsString RealFaceName();\n>  \n> +    mozilla::WeightRange Weight() const { return mWeightRange; }\n\nWe shouldn't need the namespace prefix here.\n\n@@ +149,5 @@\n>      bool IsFixedPitch() const { return mFixedPitch; }\n>      bool IsItalic() const { return mStyle == NS_FONT_STYLE_ITALIC; }\n>      bool IsOblique() const { return mStyle == NS_FONT_STYLE_OBLIQUE; }\n>      bool IsUpright() const { return mStyle == NS_FONT_STYLE_NORMAL; }\n> +    bool IsBold() const { return Weight().Max().IsBold(); } // bold == weights 600 and above\n\nIt seems like we should change these Is* method names. I'm not sure what to though... CanBe* and CanInclude* don't seem quite right either.\n\n::: gfx/thebes/gfxGDIFont.cpp\n@@ +460,5 @@\n>              weight = mNeedsBold ? 700 : 200;\n>          }\n>      } else {\n> +        // GDI doesn't support variation fonts, so it's fine to just use\n> +        // one of the weight-range values.\n\nIt seems to expect values that are a multiple of 100 in the range 1 - 900. It's not clear to me that it's okay to pass a value that is not one of these values to GDI.\n\nSay the CSS specifies a weight in the range 101-250, wouldn't it be better to pass 200 to GDI rather than 101? Is so, maybe add a MultipleOf100OrClosestValue() method to WeightRange to use in places like this? And have that prefer the multiple of 100 closest to the midpoint of the range is more than one multiple is available?\n\nIf these comments are all off, it seems worth expanding the comment in tho code.", "author": "jwatt@jwatt.org", "id": 13216135, "time": "2018-04-18T17:49:19Z"}, {"text": "(In reply to Jonathan Watt [:jwatt] from comment #5)\n> > +    MOZ_ASSERT(aMin <= aMax);\n> \n> Is it possible that a malicious font file could end up violating this (and\n> not being caught in Release builds of course).\n\nI don't believe so; for webfonts, the range doesn't come from the font file at all, it's provided by the descriptors in the @font-face rule. So the values should be clamped by the style system at parsing or computation time.\n\n> ::: gfx/thebes/gfxFontEntry.h\n> @@ +140,5 @@\n> >      // The \"real\" name of the face, if available from the font resource;\n> >      // returns Name() if nothing better is available.\n> >      virtual nsString RealFaceName();\n> >  \n> > +    mozilla::WeightRange Weight() const { return mWeightRange; }\n> \n> We shouldn't need the namespace prefix here.\n\nWe're not in the scope of a \"using namespace mozilla;\" here in the header, so we do need it.\n\n> @@ +149,5 @@\n> >      bool IsFixedPitch() const { return mFixedPitch; }\n> >      bool IsItalic() const { return mStyle == NS_FONT_STYLE_ITALIC; }\n> >      bool IsOblique() const { return mStyle == NS_FONT_STYLE_OBLIQUE; }\n> >      bool IsUpright() const { return mStyle == NS_FONT_STYLE_NORMAL; }\n> > +    bool IsBold() const { return Weight().Max().IsBold(); } // bold == weights 600 and above\n> \n> It seems like we should change these Is* method names. I'm not sure what to\n> though... CanBe* and CanInclude* don't seem quite right either.\n\nHmm, I'm not sure what I think about this. I don't have an idea that I like better offhand; can we defer this for now? (We could potentially change them all once stretch and style are also updated, if we decide on something that makes sense.)\n\n> ::: gfx/thebes/gfxGDIFont.cpp\n> @@ +460,5 @@\n> >              weight = mNeedsBold ? 700 : 200;\n> >          }\n> >      } else {\n> > +        // GDI doesn't support variation fonts, so it's fine to just use\n> > +        // one of the weight-range values.\n> \n> It seems to expect values that are a multiple of 100 in the range 1 - 900.\n> It's not clear to me that it's okay to pass a value that is not one of these\n> values to GDI.\n\nAccording to the MSDN docs[1], LOGFONT.lfWeight is \"in the range 0 through 1000\"; the defined constants that are multiples of 100 are just provided \"for convenience\", but there's no suggestion that only these values are allowed. The LOGFONT struct isn't required to match any specific available face; it just provides a request, and GDI does its best to satisfy it.\n\nStill, I guess snapping to a \"standard\" value here would be reasonable.\n\n[1] https://msdn.microsoft.com/en-us/library/windows/desktop/dd145037(v=vs.85).aspx", "author": "jfkthame@gmail.com", "id": 13216788, "time": "2018-04-18T21:14:56Z"}, {"text": "(In reply to Jonathan Kew (:jfkthame) from comment #6)\n> > ::: gfx/thebes/gfxGDIFont.cpp\n> > @@ +460,5 @@\n> > >              weight = mNeedsBold ? 700 : 200;\n> > >          }\n> > >      } else {\n> > > +        // GDI doesn't support variation fonts, so it's fine to just use\n> > > +        // one of the weight-range values.\n> > \n> > It seems to expect values that are a multiple of 100 in the range 1 - 900.\n> > It's not clear to me that it's okay to pass a value that is not one of these\n> > values to GDI.\n> \n> According to the MSDN docs[1], LOGFONT.lfWeight is \"in the range 0 through\n> 1000\"; the defined constants that are multiples of 100 are just provided\n> \"for convenience\", but there's no suggestion that only these values are\n> allowed. The LOGFONT struct isn't required to match any specific available\n> face; it just provides a request, and GDI does its best to satisfy it.\n> \n> Still, I guess snapping to a \"standard\" value here would be reasonable.\n\nOh, wait... this code path is only for system fonts (user fonts were handled above), so we don't need to worry about ranges at all. The GDI font back-end doesn't support variations, so for system fonts we can be sure that weight.min == weight.max, and it's a value that we got from GDI in the first place.", "author": "jfkthame@gmail.com", "id": 13216927, "time": "2018-04-18T22:11:13Z"}, {"text": "Created attachment 8969102\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges\n\nThanks for the comments, updated where it seemed appropriate (see responses above re some of the issues).", "author": "jfkthame@gmail.com", "id": 13216957, "time": "2018-04-18T22:20:47Z"}, {"text": "(In reply to Jonathan Watt [:jwatt] from comment #5)\n\n> ::: gfx/thebes/gfxFontEntry.cpp\n> @@ +1053,5 @@\n> > +                Weight().Min() <= FontWeight(axis.mMaxValue)) {\n> > +                mStandardFace = FontWeight(axis.mDefaultValue) == Weight().Min();\n> > +                mWeightRange =\n> > +                    WeightRange(FontWeight(std::max(1.0f, axis.mMinValue)),\n> > +                                FontWeight(std::min(1000.0f, axis.mMaxValue)));\n> \n> Maybe we should we log/warn if the font is using out of range values that we\n> end up clamping?\n\nAh... actually, we don't need to clamp the max here, because if it's out of range we skip this code altogether (the font's weight axis doesn't seem to be using the same scale as CSS font-weight, so we don't attempt to map the property). And for min, the only clamping is that a value between 0.0 and 1.0 will be snapped up to 1.0; that's likely to be an imperceptible change, probably not worth warning.", "author": "jfkthame@gmail.com", "id": 13216989, "time": "2018-04-18T22:32:15Z"}, {"text": "Created attachment 8969109\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges", "author": "jfkthame@gmail.com", "id": 13216991, "time": "2018-04-18T22:32:45Z"}, {"text": "Tryserver: https://treeherder.mozilla.org/#/jobs?repo=try&revision=f90615c63525c704e5a0592d6bf9e09a70230d9d. There's a lot of orange scattered about, but none of it looks related to this bug AFAICT.", "author": "jfkthame@gmail.com", "id": 13217650, "time": "2018-04-19T07:34:49Z"}, {"text": "(In reply to Jonathan Kew (:jfkthame) from comment #6)\n> (In reply to Jonathan Watt [:jwatt] from comment #5)\n> > It seems like we should change these Is* method names. I'm not sure what to\n> > though... CanBe* and CanInclude* don't seem quite right either.\n> \n> Hmm, I'm not sure what I think about this. I don't have an idea that I like\n> better offhand; can we defer this for now? (We could potentially change them\n> all once stretch and style are also updated, if we decide on something that\n> makes sense.)\n\nYeah, let's.", "author": "jwatt@jwatt.org", "id": 13218144, "time": "2018-04-19T11:48:11Z"}, {"text": "(In reply to Jonathan Kew (:jfkthame) from comment #6)\n> (In reply to Jonathan Watt [:jwatt] from comment #5)\n> > ::: gfx/thebes/gfxFontEntry.h\n> > @@ +140,5 @@\n> > >      // The \"real\" name of the face, if available from the font resource;\n> > >      // returns Name() if nothing better is available.\n> > >      virtual nsString RealFaceName();\n> > >  \n> > > +    mozilla::WeightRange Weight() const { return mWeightRange; }\n> > \n> > We shouldn't need the namespace prefix here.\n> \n> We're not in the scope of a \"using namespace mozilla;\" here in the header,\n> so we do need it.\n\nYeah, you're right. You'd need to add a typedef at the top of the class like we have for FontWeight. Could you do that though just to avoid making this more verbose than it needs to be? Same in the other headers where you're prefixing but we have typedefs for FontWeight.", "author": "jwatt@jwatt.org", "id": 13218162, "time": "2018-04-19T11:53:30Z"}, {"text": "Comment on attachment 8969109\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges\n\nReview of attachment 8969109:\n-----------------------------------------------------------------\n\n::: gfx/src/FontPropertyTypes.h\n@@ +16,2 @@\n>  #include \"mozilla/Assertions.h\"\n> +#include \"nsString.h\"\n\n(I wonder if we shouldn't create a .cpp file for some of this to keep this header lighter.)", "author": "jwatt@jwatt.org", "id": 13218177, "time": "2018-04-19T12:00:09Z"}, {"text": "Pushed by jkew@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/072dc1504ce6\npart 1 - Make gfxFcPlatformFontList::GetFTLibrary work before font system is fully up and running, so that the global FT_Library can be used during initialization of the font list itself.\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/b673e87d6134\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges. r=jwatt", "author": "pulsebot@bots.tld", "id": 13218249, "time": "2018-04-19T12:29:55Z"}, {"text": "Tagging as leave-open, as there's a further patch coming here...", "author": "jfkthame@gmail.com", "id": 13218250, "time": "2018-04-19T12:31:00Z"}, {"text": "Created attachment 8969271\npart 3 - Use WeightRange more extensively in place of FontWeight throughout user-font handling and font-entry creation", "author": "jfkthame@gmail.com", "id": 13218355, "time": "2018-04-19T13:10:25Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=284ff89402e422cd02efcf6f13a500b3dd05444a", "author": "jfkthame@gmail.com", "id": 13218617, "time": "2018-04-19T14:26:23Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/072dc1504ce6\nhttps://hg.mozilla.org/mozilla-central/rev/b673e87d6134", "author": "csabou@mozilla.com", "id": 13220042, "time": "2018-04-19T22:35:10Z"}, {"text": "This has caused a bad regression with bug 1455494, can we back it out until fixed please?", "author": "dtownsend@mozilla.com", "id": 13220440, "time": "2018-04-20T03:16:31Z"}, {"text": "Backout by csabou@mozilla.com:\nhttps://hg.mozilla.org/mozilla-central/rev/b95ae0e1e9e0\nBacked out 2 changesets as requested by Mossop in developers channel. a=backout", "author": "pulsebot@bots.tld", "id": 13220469, "time": "2018-04-20T03:58:45Z"}, {"text": "When this landed (comment 15), we noticed these huge AWSY perf regressions.\nThe backout that followed canceled them.\n\n== Change summary for alert #12802 (as of Thu, 19 Apr 2018 09:29:44 GMT) ==\n\nRegressions:\n\n 73%  Heap Unclassified linux64 opt stylo     56,870,163.90 -> 98,551,358.49\n 72%  Heap Unclassified linux64-stylo-sequential opt stylo-sequential56,646,192.60 -> 97,532,853.00\n 15%  Resident Memory linux64 opt stylo       517,567,543.28 -> 596,491,806.59\n 15%  Explicit Memory linux64 opt stylo       300,355,830.78 -> 346,093,005.61\n 14%  Explicit Memory linux64-stylo-sequential opt stylo-sequential298,131,469.91 -> 340,700,020.37\n 13%  Heap Unclassified linux64-qr opt stylo  317,926,270.58 -> 360,014,790.29\n 13%  Resident Memory linux64-stylo-sequential opt stylo-sequential520,450,101.10 -> 589,003,103.91\n  8%  Explicit Memory linux64-qr opt stylo    556,856,302.79 -> 599,283,585.49\n  6%  Resident Memory windows7-32 pgo stylo   480,362,707.43 -> 508,232,011.12\n  6%  Resident Memory linux64-qr opt stylo    1,161,788,300.33 -> 1,225,801,228.31\n  5%  Resident Memory windows7-32 opt stylo   487,927,765.79 -> 509,996,617.62\n\nFor up to date results, see: https://treeherder.mozilla.org/perf.html#/alerts?id=12802", "author": "igoldan@mozilla.com", "id": 13221147, "time": "2018-04-20T12:11:48Z"}, {"text": "Created attachment 8969894\npart 2.1 - For system-installed fonts, query FC_VARIABLE to determine if a face has variations rather than instantiating a FT_Face\n\nThis reduces the memory footprint of checking each face to see if it supports variations; instead of using FreeType, we can check the font pattern.", "author": "jfkthame@gmail.com", "id": 13223416, "time": "2018-04-21T13:14:04Z"}, {"text": "Comment on attachment 8969271\npart 3 - Use WeightRange more extensively in place of FontWeight throughout user-font handling and font-entry creation\n\nReview of attachment 8969271:\n-----------------------------------------------------------------\n\nNice.\n\n::: gfx/thebes/gfxPlatformFontList.h\n@@ +185,5 @@\n>  \n>      // get the system default font family\n>      gfxFontFamily* GetDefaultFont(const gfxFontStyle* aStyle);\n>  \n> +    // Look up a font by name on the host platform.\n\nThis seems like good documentation, and worth using a Doxygen style comment for.", "author": "jwatt@jwatt.org", "id": 13226166, "time": "2018-04-23T10:20:31Z"}, {"text": "Will do, thanks.\n\n(I'm holding off on actually landing anything here for now, so as not to bitrot the remaining patches in bug 1436048. As soon as that lands, I'll rebase here.)", "author": "jfkthame@gmail.com", "id": 13226185, "time": "2018-04-23T10:32:48Z"}, {"text": "Created attachment 8970479\npart 3 - Use WeightRange more extensively in place of FontWeight throughout user-font handling and font-entry creation, and handle Stretch and SlantStyle similarly\n\nThis replaces the \"part 3\" that you previously reviewed; it now incorporates range support for all three properties, rather than going over all the same code repeatedly in separate patches. (Hope that's OK.) I'm just waiting on a new try build to see how many platforms are green, but think this is close enough to start reviewing - thanks.", "author": "jfkthame@gmail.com", "id": 13229034, "time": "2018-04-24T09:40:54Z"}, {"text": "Comment on attachment 8970479\npart 3 - Use WeightRange more extensively in place of FontWeight throughout user-font handling and font-entry creation, and handle Stretch and SlantStyle similarly\n\nReview of attachment 8970479:\n-----------------------------------------------------------------\n\nr+ for this plus the changes discussed on IRC. If the outstanding reftest failure requires substantial changes please request review on an interdiff.\n\n::: gfx/src/FontPropertyTypes.h\n@@ +340,5 @@\n> +      return Normal();\n> +    } else if (strcmp(aString, \"italic\") == 0) {\n> +      return Italic();\n> +    } else {\n> +      float angle = strtof(aString, nullptr);\n\nMaybe worth a MOZ_ASSERT?\n\n@@ +426,5 @@\n>    {\n>    }\n>  \n> +  explicit FontPropertyRange(const FontPropertyRange& aOther) = default;\n> +  FontPropertyRange& operator= (const FontPropertyRange& aOther) = default;\n\noperator=(\n\n(no space)\n\n@@ +474,5 @@\n> +    return (mValues.first.ForHash() << 16) | mValues.second.ForHash();\n> +  }\n> +\n> +  /*\n> +   * FromScalar is defined in each individual subclass, because I can't\n\nCan you add the string FIXME here?\n\n@@ +507,3 @@\n>    void ToString(nsACString& aOutString, const char* aDelim = \"..\") const\n>    {\n> +    aOutString.AppendFloat(Min().ToFloat());\n\nIt looks like this change will mean that we'll end up with 6 digits of precision, regardless of the value. I'm not sure why that's desirable. Using AppendPrintf(\"%g\", ...) seems preferable to me on the face of it unless we have a specific reason to do otherwise.\n\nThis comment applies elsewhere too.\n\n::: gfx/thebes/gfxDWriteFontList.h\n@@ +119,5 @@\n> +            (dwriteStyle == DWRITE_FONT_STYLE_ITALIC\n> +                ? FontSlantStyle::Italic()\n> +                : (dwriteStyle == DWRITE_FONT_STYLE_OBLIQUE\n> +                   ? FontSlantStyle::Oblique()\n> +                   : FontSlantStyle::Normal()));\n\nNit: I guess one more space of indent on this line if we're being pedantic?\n\n::: gfx/thebes/gfxFT2FontList.cpp\n@@ -655,5 @@\n>              continue;\n>          }\n>  \n> -        // We convert the weight to a float purely for transport across IPC.\n> -        // Ideally we'd avoid doing that.\n\nNice.\n\n::: gfx/thebes/gfxPlatformFontList.h\n@@ +205,5 @@\n> +     *\n> +     * Note that the style attributes (weight, stretch, style) are NOT related\n> +     * (necessarily) to any values within the font resource itself; these are\n> +     * values to be recorded in the new font entry and used for face selection,\n> +     * in place of whatever inherent style attributes the resource may have.\n\nI wonder if the parameter names could be modified to indicate this.", "author": "jwatt@jwatt.org", "id": 13229395, "time": "2018-04-24T12:57:33Z"}, {"text": "(In reply to Jonathan Watt [:jwatt] from comment #27)\n> @@ +507,3 @@\n> >    void ToString(nsACString& aOutString, const char* aDelim = \"..\") const\n> >    {\n> > +    aOutString.AppendFloat(Min().ToFloat());\n> \n> It looks like this change will mean that we'll end up with 6 digits of\n> precision, regardless of the value. I'm not sure why that's desirable. Using\n> AppendPrintf(\"%g\", ...) seems preferable to me on the face of it unless we\n> have a specific reason to do otherwise.\n\nNo, nsTSubstring::AppendFloat does the \"nice\" thing, as it calls a helper FormatWithoutTrailingZeros() internally:\n\nhttps://searchfox.org/mozilla-central/rev/8f06c1b9a080b84435a2906e420fe102e1ed780b/xpcom/string/nsTSubstring.cpp#1205-1210\n\nSo we normally get things like \"weight: 400\" in the log messages based on this, but it'll add decimals when required.", "author": "jfkthame@gmail.com", "id": 13230479, "time": "2018-04-24T18:34:12Z"}, {"text": "Pushed by jkew@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/5af215d265b6\npart 1 - Make gfxFcPlatformFontList::GetFTLibrary work before font system is fully up and running, so that the global FT_Library can be used during initialization of the font list itself. r=lsalzman\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/bac001216577\npart 2.1 - For system-installed fonts, query FC_VARIABLE to determine if a face has variations rather than instantiating a FT_Face. r=lsalzman\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/bc910e36a7d7\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges. r=jwatt\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/26e036b1c703\npart 3 - Use WeightRange more extensively in place of FontWeight throughout user-font handling and font-entry creation, and handle Stretch and SlantStyle similarly. r=jwatt", "author": "pulsebot@bots.tld", "id": 13231738, "time": "2018-04-25T06:19:16Z"}, {"text": "Backed out in https://hg.mozilla.org/integration/mozilla-inbound/rev/aa4185068f2e because :daleharvey reported in #fx-team that an inbound build on macOS 10.12 showed ugly bold system fonts. :\\", "author": "jfkthame@gmail.com", "id": 13232006, "time": "2018-04-25T09:31:03Z"}, {"text": "Created attachment 8970848\npart 4 - Disable font variations on macOS Sierra due to Core Text unreliability\n\nThe quick fix we looked at earlier wasn't sufficient, so here's a patch that more completely neuters variation-font support on pre-HighSierra machines. I'm a bit sad about this, but I think for now, at least, we should just disable entirely on 10.12, as it seems to be too trouble-prone. (Note that Apple also decided not to support it in Safari, so there's a good precedent for this.) :daleharvey confirmed that a try build with this patch behaves normally for him.", "author": "jfkthame@gmail.com", "id": 13232195, "time": "2018-04-25T11:26:12Z"}, {"text": "Pushed by jkew@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/de118016272b\npart 1 - Make gfxFcPlatformFontList::GetFTLibrary work before font system is fully up and running, so that the global FT_Library can be used during initialization of the font list itself. r=lsalzman\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/53b86f2f71a8\npart 2.1 - For system-installed fonts, query FC_VARIABLE to determine if a face has variations rather than instantiating a FT_Face. r=lsalzman\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/3c05b11ca2b8\npart 2 - Allow variation fonts to record a weight range in gfxFontEntry, and update font-matching to handle ranges. r=jwatt\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/ee068c7ae8f4\npart 3 - Use WeightRange more extensively in place of FontWeight throughout user-font handling and font-entry creation, and handle Stretch and SlantStyle similarly. r=jwatt\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/2e9eda40f477\npart 4 - Disable font variations on macOS Sierra due to Core Text unreliability. r=jwatt", "author": "pulsebot@bots.tld", "id": 13232348, "time": "2018-04-25T13:04:59Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/de118016272b\nhttps://hg.mozilla.org/mozilla-central/rev/53b86f2f71a8\nhttps://hg.mozilla.org/mozilla-central/rev/3c05b11ca2b8\nhttps://hg.mozilla.org/mozilla-central/rev/ee068c7ae8f4\nhttps://hg.mozilla.org/mozilla-central/rev/2e9eda40f477", "author": "apavel@mozilla.com", "id": 13234464, "time": "2018-04-26T06:14:42Z"}], "id": 1454598, "priority": "--", "cc": ["dschubert@mozilla.com", "igoldan@mozilla.com", "jwatt@jwatt.org", "kdubost@mozilla.com", "lsalzman@mozilla.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://webcompat.com/issues/16542"], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1454597], "qa_contact": "", "creation_time": "2018-04-17T09:33:01Z", "cf_status_firefox_esr52": "---", "component": "Layout: Text", "assigned_to_detail": {"email": "jfkthame@gmail.com", "id": 329583, "name": "jfkthame@gmail.com", "real_name": "Jonathan Kew (:jfkthame)"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "fixed", "cf_status_firefox60": "---", "target_milestone": "mozilla61", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "jfkthame@gmail.com", "id": 329583, "name": "jfkthame@gmail.com", "real_name": "Jonathan Kew (:jfkthame)"}, "whiteboard": "", "mentors": [], "summary": "Allow variation fonts to record property ranges in gfxFontEntry, and update font-matching to handle ranges", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-01T05:03:25Z", "assigned_to": "jfkthame@gmail.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "lsalzman@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968664, "added": "review?(lsalzman@mozilla.com)"}], "who": "jfkthame@gmail.com", "when": "2018-04-18T13:58:36Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968926, "added": "review?(jwatt@jwatt.org)"}, {"removed": "", "field_name": "cc", "added": "jwatt@jwatt.org"}], "who": "jfkthame@gmail.com", "when": "2018-04-18T15:03:47Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8968505, "added": "1"}], "who": "jfkthame@gmail.com", "when": "2018-04-18T15:03:50Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "jfkthame@gmail.com"}], "who": "jfkthame@gmail.com", "when": "2018-04-18T15:03:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968941, "added": "review?(jwatt@jwatt.org)"}], "who": "jfkthame@gmail.com", "when": "2018-04-18T15:32:33Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8968926, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(jwatt@jwatt.org)", "attachment_id": 8968926, "added": ""}], "who": "jfkthame@gmail.com", "when": "2018-04-18T15:32:35Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "1", "attachment_id": 8968926, "added": "0"}], "who": "jwatt@jwatt.org", "when": "2018-04-18T17:49:19Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8968926, "added": "1"}], "who": "jwatt@jwatt.org", "when": "2018-04-18T17:50:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(lsalzman@mozilla.com)", "attachment_id": 8968664, "added": "review+"}], "who": "lsalzman@mozilla.com", "when": "2018-04-18T17:57:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969102, "added": "review?(jwatt@jwatt.org)"}], "who": "jfkthame@gmail.com", "when": "2018-04-18T22:20:47Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8968941, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(jwatt@jwatt.org)", "attachment_id": 8968941, "added": ""}], "who": "jfkthame@gmail.com", "when": "2018-04-18T22:20:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969109, "added": "review?(jwatt@jwatt.org)"}], "who": "jfkthame@gmail.com", "when": "2018-04-18T22:32:45Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8969102, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(jwatt@jwatt.org)", "attachment_id": 8969102, "added": ""}], "who": "jfkthame@gmail.com", "when": "2018-04-18T22:32:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwatt@jwatt.org)", "attachment_id": 8969109, "added": "review+"}], "who": "jwatt@jwatt.org", "when": "2018-04-19T12:00:09Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "leave-open"}], "who": "jfkthame@gmail.com", "when": "2018-04-19T12:31:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969271, "added": "review?(jwatt@jwatt.org)"}], "who": "jfkthame@gmail.com", "when": "2018-04-19T13:10:25Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1455494"}], "who": "dtownsend@mozilla.com", "when": "2018-04-20T03:12:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dtownsend@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jfkthame@gmail.com)"}], "who": "dtownsend@mozilla.com", "when": "2018-04-20T03:16:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dschubert@mozilla.com"}], "who": "dschubert@mozilla.com", "when": "2018-04-20T07:16:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kdubost@mozilla.com"}, {"removed": "", "field_name": "see_also", "added": "https://webcompat.com/issues/16542"}], "who": "kdubost@mozilla.com", "when": "2018-04-20T07:22:41Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1455531"}], "who": "cdenizet@mozilla.com", "when": "2018-04-20T07:24:21Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1455526"}], "who": "pascalc@gmail.com", "when": "2018-04-20T08:46:39Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "igoldan@mozilla.com"}], "who": "igoldan@mozilla.com", "when": "2018-04-20T12:11:48Z"}, {"changes": [{"removed": "dtownsend@mozilla.com", "field_name": "cc", "added": ""}], "who": "dtownsend@mozilla.com", "when": "2018-04-20T15:54:52Z"}, {"changes": [{"removed": "needinfo?(jfkthame@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "dtownsend@mozilla.com", "when": "2018-04-20T15:54:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969894, "added": "review?(lsalzman@mozilla.com)"}], "who": "jfkthame@gmail.com", "when": "2018-04-21T13:14:04Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(lsalzman@mozilla.com)", "attachment_id": 8969894, "added": "review+"}], "who": "lsalzman@mozilla.com", "when": "2018-04-21T13:20:23Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwatt@jwatt.org)", "attachment_id": 8969271, "added": "review+"}], "who": "jwatt@jwatt.org", "when": "2018-04-23T10:20:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8970479, "added": "review?(jwatt@jwatt.org)"}], "who": "jfkthame@gmail.com", "when": "2018-04-24T09:40:54Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8969271, "added": "1"}], "who": "jfkthame@gmail.com", "when": "2018-04-24T09:40:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwatt@jwatt.org)", "attachment_id": 8970479, "added": "review+"}], "who": "jwatt@jwatt.org", "when": "2018-04-24T12:57:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8970848, "added": "review?(jwatt@jwatt.org)"}], "who": "jfkthame@gmail.com", "when": "2018-04-25T11:26:12Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwatt@jwatt.org)", "attachment_id": 8970848, "added": "review+"}], "who": "jwatt@jwatt.org", "when": "2018-04-25T13:01:41Z"}, {"changes": [{"removed": "leave-open", "field_name": "keywords", "added": ""}], "who": "jfkthame@gmail.com", "when": "2018-04-25T13:15:41Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-04-26 06:14:42"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "apavel@mozilla.com", "when": "2018-04-26T06:14:42Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1457254"}], "who": "bugmail@mozilla.staktrace.com", "when": "2018-04-26T19:08:41Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1458158"}], "who": "over68@hotmail.com", "when": "2018-05-01T05:03:25Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}