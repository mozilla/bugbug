{"cf_tracking_thunderbird_esr52": "---", "cf_status_firefox39": "---", "cf_tracking_firefox60": "---", "attachments": [{"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2015-04-03T22:47:23Z", "type_id": 607, "creation_date": "2015-04-02T00:01:09Z", "id": 1137427, "setter": "sphink@gmail.com"}], "content_type": "text/plain", "id": 8587074}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8587075}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-14T00:58:04Z", "type_id": 4, "creation_date": "2015-04-13T21:26:02Z", "id": 1145527, "setter": "sphink@gmail.com"}], "content_type": "text/plain", "id": 8591916}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-04-14T17:19:22Z", "type_id": 4, "creation_date": "2015-04-13T21:26:15Z", "id": 1145529, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8591919}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-16T16:40:54Z", "type_id": 4, "creation_date": "2015-04-13T21:26:25Z", "id": 1145530, "setter": "sphink@gmail.com"}], "content_type": "text/plain", "id": 8591921}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-18T20:28:44Z", "type_id": 4, "creation_date": "2015-04-18T20:28:44Z", "id": 1149772, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8594371}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-20T17:28:32Z", "type_id": 4, "creation_date": "2015-04-18T20:28:54Z", "id": 1149773, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8594372}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-18T20:29:07Z", "type_id": 4, "creation_date": "2015-04-18T20:29:07Z", "id": 1149774, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8594373}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-20T18:31:16Z", "type_id": 4, "creation_date": "2015-04-20T18:31:16Z", "id": 1150591, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8594898}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-20T22:32:56Z", "type_id": 4, "creation_date": "2015-04-20T22:32:56Z", "id": 1150781, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8595007}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-20T22:33:06Z", "type_id": 4, "creation_date": "2015-04-20T22:33:06Z", "id": 1150782, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8595008}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-20T22:33:15Z", "type_id": 4, "creation_date": "2015-04-20T22:33:15Z", "id": 1150783, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8595009}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-21T00:02:44Z", "type_id": 4, "creation_date": "2015-04-21T00:02:44Z", "id": 1150836, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8595045}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-21T00:02:54Z", "type_id": 4, "creation_date": "2015-04-21T00:02:54Z", "id": 1150837, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8595046}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-04-21T18:55:44Z", "type_id": 4, "creation_date": "2015-04-21T18:55:44Z", "id": 1151596, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8595491}], "classification": "Components", "creator": "nfitzgerald@mozilla.com", "cc": ["cbook@mozilla.com", "continuation@gmail.com", "nfitzgerald@mozilla.com", "sphink@gmail.com"], "depends_on": [1153922, 1379957], "creation_time": "2015-04-01T22:31:45Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "x86", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "[jsdbg2] Post a runnable to fire the onGarbageCollection hook", "id": 1150253, "assigned_to_detail": {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "nfitzgerald@mozilla.com", "comment_count": 33, "comments": [{"text": "There are various assertion failures because a lot of code expects the nursery to be empty after a GC, but that isn't currently the case because the Debugger's onGarbageCollection hook can run JS at the end of a GC. We should change that so that it just posts a runnable to gecko which then calls back into SpiderMonkey to fire the Debugger's hook.", "author": "nfitzgerald@mozilla.com", "id": 10108586, "time": "2015-04-01T22:31:45Z"}, {"text": "Created attachment 8587074\nPart 1: SpiderMonkey should call an embedder-provided callback instead of running the onGarbageCollection hook immediately", "author": "nfitzgerald@mozilla.com", "id": 10108951, "time": "2015-04-02T00:01:09Z"}, {"text": "Created attachment 8587075\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable", "author": "nfitzgerald@mozilla.com", "id": 10108953, "time": "2015-04-02T00:01:18Z"}, {"text": "Comment on attachment 8587074\nPart 1: SpiderMonkey should call an embedder-provided callback instead of running the onGarbageCollection hook immediately\n\nReview of attachment 8587074:\n-----------------------------------------------------------------\n\n::: js/public/Debug.h\n@@ +272,5 @@\n> +\n> +class GarbageCollectionData;\n> +\n> +// TODO FITZGEN\n> +typedef bool (*EnqueueOnGCRunnable)(JSRuntime* rt, UniquePtr<GarbageCollectionData>&& data);\n\nThe name seems weird. It's saying what the embedding is going to use it for. Shouldn't this be from the perspective of the engine, where it's a PostGCHook or HandleGCRecord or GCStatsCollectionHook or something?\n\n@@ +280,5 @@\n> +SetEnqueueOnGCRunnable(JSRuntime* rt, EnqueueOnGCRunnable enqueueOnGCRunnable);\n> +\n> +// TODO FITZGEN\n> +JS_PUBLIC_API(bool)\n> +FireOnGarbageCollectionHook(JSContext* cx, UniquePtr<GarbageCollectionData>&& data);\n\nWhy is this exposed publicly?\n\n::: js/src/gc/Statistics.cpp\n@@ +972,5 @@\n> +\n> +        if (runtime->debuggerEnqueueOnGCRunnable) {\n> +            auto gcData = JS::dbg::GarbageCollectionData::Create(*this, runtime->gc.majorGCCount());\n> +            if (!gcData || !runtime->debuggerEnqueueOnGCRunnable(runtime, mozilla::Move(gcData)))\n> +                aborted = true;\n\nI'm not sure how I feel about the 'aborted' flag being shared by internal stats generation failures as well as embedder failures. I think I'd rather those were split. (So eg you would still get the internal dumps even if you mistakenly set a GCStatsCollectionHook that always fails.) In fact, it makes more sense for these failures to be tracked by the embedding, not the engine, though I'm not 100% confident of that (given that the GCData::Create is most naturally detectable right here as you are doing it. The embedding would need to accept a nullptr and interpret it as an abort.)\n\n::: js/src/vm/Debugger.h\n@@ +969,5 @@\n> + * The `GarbageCollectionData` class is essentially a view of the\n> + * `js::gcstats::Statistics` data without the uber implementation-specific bits.\n> + * It should generally be palatable for web developers.\n> + */\n> +class GarbageCollectionData {\n\nGarbageCollectionRecord? GarbageCollectionEvent?", "author": "sphink@gmail.com", "id": 10117886, "time": "2015-04-03T22:47:23Z"}, {"text": "Comment on attachment 8587075\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable\n\nReview of attachment 8587075:\n-----------------------------------------------------------------\n\n::: dom/base/nsJSEnvironment.cpp\n@@ +2232,5 @@\n> +  // TODO FITZGEN: should assert that we are on the originally provided\n> +  // runtime's thread here.\n> +\n> +  AutoJSAPI jsapi;\n> +  if (!JS::dbg::FireOnGarbageCollectionHook(jsapi.cx(), mozilla::Move(mGCData))) {\n\nOh! *This* is why you're exposing it publicly. Hm... if JS::dbg is meant for Debugger stuff, then I guess this is probably the right place and right name, but then setting the GC data collection hook should be in plain JS:: or js::.", "author": "sphink@gmail.com", "id": 10117893, "time": "2015-04-03T22:50:16Z"}, {"text": "Hm. In the process of converting the jit-tests for onGarbageCollection to xpcshell tests. Can't figure out how to create a global in any zone other than the system zone. Default is the system zone, however there is the `sameZoneAs` option, but then you need an object from another zone! Chicken and egg!", "author": "nfitzgerald@mozilla.com", "id": 10144293, "time": "2015-04-11T03:50:50Z"}, {"text": "Created attachment 8591916\nPart 1: SpiderMonkey should call an embedder-provided callback instead of running the onGarbageCollection hook immediately", "author": "nfitzgerald@mozilla.com", "id": 10150124, "time": "2015-04-13T21:26:02Z"}, {"text": "Created attachment 8591919\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable", "author": "nfitzgerald@mozilla.com", "id": 10150127, "time": "2015-04-13T21:26:15Z"}, {"text": "Created attachment 8591921\nPart 3: Migrate onGarbageCollection tests", "author": "nfitzgerald@mozilla.com", "id": 10150130, "time": "2015-04-13T21:26:25Z"}, {"text": "Comment on attachment 8591916\nPart 1: SpiderMonkey should call an embedder-provided callback instead of running the onGarbageCollection hook immediately\n\nReview of attachment 8591916:\n-----------------------------------------------------------------\n\n::: js/public/Debug.h\n@@ +287,5 @@\n> +// It should generally be palatable for web developers.\n> +class GarbageCollectionEvent\n> +{\n> +    // The major GC number of the GC cycle this data pertains to.\n> +    uint64_t gcNumber_;\n\nSorry for being picky, but we seem to have grown 3 types of \"GC number\": minorGCNumber, majorGCNumber, and plain gcNumber. That last is all we used to have, and most places assume that's what you mean by gcNumber. At this point, we probably ought to make distinct type names for all of them (perhaps just typedefs of uint64_t), but until then, I'd prefer if you called this majorGCNumber or gcMajorNumber everywhere, since it does not match the \"normal\" GC number and I'm afraid someone is going to end up doing if (event.gcNumber == rt->gc.gcNumber()).\n\nNote that as far as I can tell, gcNumber will always be the same as minorGCNumber, though they're incremented in slightly different places. (Every major GC slice has to do a nursery GC, so it sort of makes sense.) But the way it's done kind of terrifies me. I'm going to ask Terrence about that.\n\n@@ +298,5 @@\n> +    // collection was forced to be non-incremental, this is a short reason of\n> +    // why the GC could not perform an incremental collection.\n> +    const char* nonincrementalReason;\n> +\n> +    // Represents a single garbage collection slice.\n\n\"Represents a single slice of a possibly multi-slice incremental garbage collection\"?\n\n@@ +332,5 @@\n> +\n> +// Provide SpiderMonkey with a function that notifies the embedder to call\n> +// `JS::dbg::FireOnGarbageCollectionHook` \"soon, but not now\".\n> +JS_PUBLIC_API(void)\n> +SetEnqueueOnGCRunnable(JSRuntime* rt, JS::EnqueueOnGCRunnable enqueueOnGCRunnable);\n\nI still think this is leaking embedder semantics. I would rather these be\n\ntypedef void (*GCEventHandler)(JSRuntime* rt, UniquePtr<dbg::GarbageCollectionEvent>&& data);\nSetGCEventHandler(...);\n\nOr PostGCEventHandler. Or something. Anything that doesn't say what you're going to do with it.\n\n::: js/src/gc/Statistics.cpp\n@@ +974,5 @@\n> +            auto gcData = JS::dbg::GarbageCollectionEvent::Create(*this, runtime->gc.majorGCCount());\n> +            if (gcData)\n> +                runtime->debuggerEnqueueOnGCRunnable(runtime, mozilla::Move(gcData));\n> +            else\n> +                aborted = true;\n\nI don't think this should set 'aborted'. If you need to use the flag for your own purposes, create a new flag. As it is, this is a no-op since aborted will be set back to false a few lines down.\n\nAs for what to do if the gcData creation fails, I'm not sure. We don't have a MOZ_WARN or anything that I can see. I'm ok if you just ignore it. The more pure solution would be to just pass the null in and say the embedding is supposed to accept null (or register an error callback for this purpose.)\n\nIf you're doing a DEBUG-only bare printf over in Zone.cpp, you may as well do one here too?\n\n::: js/src/gc/Zone.cpp\n@@ +270,5 @@\n> +            if (!r.front()->debuggeeIsBeingCollected(rt->gc.majorGCCount())) {\n> +#ifdef DEBUG\n> +                printf(\"OOM while notifying observing Debuggers of a GC: The onGarbageCollection\\n\"\n> +                       \"hook will not be fired for this GC for some Debuggers!\\n\");\n> +#endif\n\nI don't think a bare printf is kosher. I have no idea what it'll do eg on b2g or android. But I could be wrong; I don't really know for sure. If it compiles everywhere, I have no fundamental objection given that it's DEBUG only.\n\n::: js/src/vm/Debugger.cpp\n@@ +7817,5 @@\n> +    for (auto range = stats.sliceRange(); !range.empty(); range.popFront()) {\n> +        if (!data->reason) {\n> +            // XXX: There is only one GC reason for the whole cycle, but for\n> +            // legacy reasons this data is stored and replicated on each\n> +            // slice.\n\nI would get rid of the \"XXX: \". And would it be possible to explain the legacy reasons?\n\nFor the record, I'm not entirely happy with losing the per-slice reasons. But then, I don't know the full story; perhaps they weren't really valid. Anyway, if you wanted to claim that you're leaving it open for per-slice reasons to be added (back) in the future, I'd be fine with that.\n\n@@ +7836,5 @@\n> +\n> +static bool\n> +DefineStringProperty(JSContext* cx, HandleObject obj, PropertyName* propName, const char* strVal)\n> +{\n> +    RootedValue val(cx, NullValue());\n\nShould this be UndefinedValue()? It seems like JS spec people, at least, are using \"undefined\" for \"omitted or not meaningful\" and null for the explicit absence of an object. Or something like that.\n\n@@ +7884,5 @@\n> +    RootedValue slicesValue(cx, ObjectValue(*slicesArray));\n> +    if (!DefineProperty(cx, obj, cx->names().collections, slicesValue))\n> +        return nullptr;\n> +\n> +    return obj.get();\n\nA plain |return obj| will do.", "author": "sphink@gmail.com", "id": 10151180, "time": "2015-04-14T00:58:04Z"}, {"text": "Comment on attachment 8591919\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable\n\nReview of attachment 8591919:\n-----------------------------------------------------------------\n\nAs far as I can tell, you don't need to register the runnable in three different places, just once per JS runtime.  Is this supposed to cover the main thread and workers?  If so, you just need the code in CycleCollectedJSRuntime.  If it is mainthread only, you just need the code in XPCJSRuntime.\n\nIf you end up changing it so that the only use of the runnable is in CycleCollectedJSRuntime.cpp, you should move the new files you define into xpcom/.\n\n::: dom/base/DebuggerOnGCRunnable.cpp\n@@ +13,5 @@\n> +/* static */ void\n> +DebuggerOnGCRunnable::Enqueue(JSRuntime* aRuntime,\n> +                              UniquePtr<JS::dbg::GarbageCollectionEvent>&& aGCData)\n> +{\n> +  // Make sure we are getting the right runtime for this thread.\n\nThis comment and the same one below seem superfluous.\n\n::: dom/base/DebuggerOnGCRunnable.h\n@@ +4,5 @@\n> + * License, v. 2.0. If a copy of the MPL was not distributed with this\n> + * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n> +\n> +#ifndef __mozilla_dom_DebuggerOnGCRunnable_h_\n> +#define __mozilla_dom_DebuggerOnGCRunnable_h_\n\nnit: No _ at the start or end of this symbol please.  See the include guard section here: https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style\n\n@@ +8,5 @@\n> +#define __mozilla_dom_DebuggerOnGCRunnable_h_\n> +\n> +#include \"nsThreadUtils.h\"\n> +#include \"js/Debug.h\"\n> +#include \"mozilla/dom/ScriptSettings.h\"\n\nnit: I think this include should go in the .cpp file.\n\n@@ +16,5 @@\n> +\n> +namespace mozilla {\n> +namespace dom {\n> +\n> +// Runnable to fire SpiderMonkey's Debugger API's onGarbageCollection hook.\n\nnit: This phrasing is awkward to me.  Maybe \"Runnable to fire the SpiderMonkey Debugger API's onGarbageCollection hook.\"?\n\n@@ +19,5 @@\n> +\n> +// Runnable to fire SpiderMonkey's Debugger API's onGarbageCollection hook.\n> +class DebuggerOnGCRunnable : public nsRunnable\n> +{\n> +  DebugOnly<JSRuntime*> mRuntime;\n\nnit: Maybe put the debug-only thing second?  Seems a little weird for the first field of an opt version of this to be this weird void thing.  Maybe that's ridiculous.", "author": "continuation@gmail.com", "id": 10154035, "time": "2015-04-14T17:19:22Z"}, {"text": "Comment on attachment 8591921\nPart 3: Migrate onGarbageCollection tests\n\nReview of attachment 8591921:\n-----------------------------------------------------------------\n\nI didn't look that closely at the tests, but they seem generally sane.\n\n::: js/src/builtin/TestingFunctions.cpp\n@@ +225,5 @@\n>              if (!JS_StringEqualsAscii(cx, arg.toString(), \"compartment\", &compartment))\n>                  return false;\n>          } else if (arg.isObject()) {\n> +            for (ZonesIter z(cx->runtime(), WithAtoms); !z.done(); z.next())\n> +                JS::SkipZoneForGC(z.get());\n\nSo, this seems reasonable yet dangerous. Nobody seems to know for sure whether it is safe to unschedule zones. And yet, this function is only for testing, so we're ok letting the try server decide.", "author": "sphink@gmail.com", "id": 10164124, "time": "2015-04-16T16:40:54Z"}, {"text": "Created attachment 8594371\nPart 1: SpiderMonkey should call an embedder-provided callback instead of running the onGarbageCollection hook immediately", "author": "nfitzgerald@mozilla.com", "id": 10171867, "time": "2015-04-18T20:28:44Z"}, {"text": "Created attachment 8594372\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable", "author": "nfitzgerald@mozilla.com", "id": 10171868, "time": "2015-04-18T20:28:54Z"}, {"text": "Created attachment 8594373\nPart 3: Migrate onGarbageCollection tests", "author": "nfitzgerald@mozilla.com", "id": 10171869, "time": "2015-04-18T20:29:07Z"}, {"text": "Comment on attachment 8594372\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable\n\nReview of attachment 8594372:\n-----------------------------------------------------------------\n\n::: dom/base/nsJSEnvironment.cpp\n@@ +44,5 @@\n>  #include \"xpcpublic.h\"\n>  \n>  #include \"jsapi.h\"\n>  #include \"jswrapper.h\"\n> +#include \"js/Debug.h\"\n\nRemove this include.\n\n::: xpcom/base/CycleCollectedJSRuntime.cpp\n@@ +771,5 @@\n> +    NS_WARN_IF(NS_FAILED(DebuggerOnGCRunnable::Enqueue(aRuntime, aDesc)));\n> +  }\n> +\n> +  if (self->mPrevGCSliceCallback) {\n> +    (self->mPrevGCSliceCallback(aRuntime, aProgress, aDesc));\n\nnit: no outer parens here.\n\n::: xpcom/base/DebuggerOnGCRunnable.cpp\n@@ +4,5 @@\n> + * License, v. 2.0. If a copy of the MPL was not distributed with this\n> + * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n> +\n> +#include \"mozilla/CycleCollectedJSRuntime.h\"\n> +#include \"mozilla/DebuggerOnGCRunnable.h\"\n\nnit: put the DebuggerOnGCRunnable.h header first, to ensure that it doesn't implicitly depend on other files. (Well, I guess with unified builds that isn't necessarily true, but still.)\n\n@@ +14,5 @@\n> +/* static */ NS_METHOD\n> +DebuggerOnGCRunnable::Enqueue(JSRuntime* aRt, const JS::GCDescription& aDesc)\n> +{\n> +  auto gcEvent = aDesc.toGCEvent(aRt);\n> +  if (!gcEvent)\n\nnit: brace the body of the if.\n\n::: xpcom/base/DebuggerOnGCRunnable.h\n@@ +8,5 @@\n> +#define mozilla_DebuggerOnGCRunnable_h\n> +\n> +#include \"nsThreadUtils.h\"\n> +#include \"js/GCAPI.h\"\n> +#include \"mozilla/dom/ScriptSettings.h\"\n\nPlease move the include of ScriptSettings.h into the .cpp.\n\n@@ +9,5 @@\n> +\n> +#include \"nsThreadUtils.h\"\n> +#include \"js/GCAPI.h\"\n> +#include \"mozilla/dom/ScriptSettings.h\"\n> +#include \"mozilla/DebugOnly.h\"\n\nPlease remove the include of DebugOnly, which doesn't seem to be used any more.", "author": "continuation@gmail.com", "id": 10176252, "time": "2015-04-20T17:28:32Z"}, {"text": "Created attachment 8594898\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable", "author": "nfitzgerald@mozilla.com", "id": 10176646, "time": "2015-04-20T18:31:16Z"}, {"text": "Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=d2011162a1a1", "author": "nfitzgerald@mozilla.com", "id": 10176652, "time": "2015-04-20T18:34:00Z"}, {"text": "Created attachment 8595007\nPart 1: SpiderMonkey should call an embedder-provided callback instead of running the onGarbageCollection hook immediately", "author": "nfitzgerald@mozilla.com", "id": 10177739, "time": "2015-04-20T22:32:56Z"}, {"text": "Created attachment 8595008\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable", "author": "nfitzgerald@mozilla.com", "id": 10177742, "time": "2015-04-20T22:33:06Z"}, {"text": "Created attachment 8595009\nPart 3: Migrate onGarbageCollection tests", "author": "nfitzgerald@mozilla.com", "id": 10177743, "time": "2015-04-20T22:33:15Z"}, {"text": "Carrying over r+.\n\nChanges:\n\n* Don't unschedule zones for gc in the testing function, just set the JSGC_MODE_WHATEVER.\n\n* Use JS::DeletePolicy with the UniquePtr<GarbageCollectionEvent>\n\n* Fix shadowing warning that was causing builds to fail\n\n* Only call gczeal in xpcshell tests if it is available (not available in opt builds, I think)\n\nNew try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=3562272b8caf", "author": "nfitzgerald@mozilla.com", "id": 10177751, "time": "2015-04-20T22:35:34Z"}, {"text": "Created attachment 8595045\nPart 1: SpiderMonkey should call an embedder-provided callback instead of running the onGarbageCollection hook immediately", "author": "nfitzgerald@mozilla.com", "id": 10178130, "time": "2015-04-21T00:02:44Z"}, {"text": "Created attachment 8595046\nPart 2: Gecko should provide a callback for SpiderMonkey to enqueue the onGarbageCollection hook runnable", "author": "nfitzgerald@mozilla.com", "id": 10178132, "time": "2015-04-21T00:02:54Z"}, {"text": "Carrying over r+ again.\n\nChanges:\n\n* Use JSRuntime::make_unique to create the GarbageCollectionEvent UniquePtrs so that check_vanilla_allocations.py is happy. This involved typing out a TON of `mozilla::UniquePtr<JS::dbg::GarbageCollectionEvent, JS::DeletePolicy<JS::dbg::GarbageCollectionEvent>>` everywhere, so I just aliased that to `JS::dbg::GarbageCollectionEvent::Ptr` for sanity and line length concerns.\n\nTry push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=1accc56ff1e4", "author": "nfitzgerald@mozilla.com", "id": 10178142, "time": "2015-04-21T00:05:54Z"}, {"text": "(In reply to Nick Fitzgerald [:fitzgen] from comment #24)\n> This involved typing out a\n> TON of `mozilla::UniquePtr<JS::dbg::GarbageCollectionEvent,\n> JS::DeletePolicy<JS::dbg::GarbageCollectionEvent>>` everywhere, so I just\n> aliased that to `JS::dbg::GarbageCollectionEvent::Ptr` for sanity and line\n> length concerns.\n\nNote that bug 1156562 will help with this in the future.", "author": "nfitzgerald@mozilla.com", "id": 10178150, "time": "2015-04-21T00:06:46Z"}, {"text": "Ok, so it looks like the jit-tests aren't happy about messing with the JSGC_MODE_WHATEVER in the gc() testing function. Exploring workarounds.", "author": "nfitzgerald@mozilla.com", "id": 10181647, "time": "2015-04-21T18:00:03Z"}, {"text": "Created attachment 8595491\nPart 3: Migrate onGarbageCollection tests", "author": "nfitzgerald@mozilla.com", "id": 10181947, "time": "2015-04-21T18:55:44Z"}, {"text": "(In reply to Nick Fitzgerald [:fitzgen] from comment #27)\n> Created attachment 8595491\n> Part 3: Migrate onGarbageCollection tests\n\nAs discussed with sfink on irc, we are loosening the assertions around other zones _not_ GC'ing.\n\nNew try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=8a76b9cd28cb", "author": "nfitzgerald@mozilla.com", "id": 10181954, "time": "2015-04-21T18:58:16Z"}, {"text": "Looks good!", "author": "nfitzgerald@mozilla.com", "id": 10182744, "time": "2015-04-21T21:44:27Z"}, {"text": "part 1 seems to have problems to apply:\n\nrenamed 1150253 -> Bug-1150253---Part-1-SpiderMonkey-should-call-an-e.patch\napplying Bug-1150253---Part-1-SpiderMonkey-should-call-an-e.patch\npatching file js/src/vm/Debugger.h\nHunk #3 FAILED at 240\nHunk #5 FAILED at 666\nHunk #7 FAILED at 975\n3 out of 7 hunks FAILED -- saving rejects to file js/src/vm/Debugger.h.rej\npatch failed, unable to continue (try -v)\npatch failed, rejects left in working dir\nerrors during apply, please fix and refresh Bug-1150253---Part-1-SpiderMonkey-should-call-an-e.patch\n\ncould you take a look, thanks!", "author": "cbook@mozilla.com", "id": 10184897, "time": "2015-04-22T11:05:37Z"}, {"text": "remote:   https://hg.mozilla.org/integration/mozilla-inbound/rev/dcf12f5e9a96\nremote:   https://hg.mozilla.org/integration/mozilla-inbound/rev/9ef1368b7c9f\nremote:   https://hg.mozilla.org/integration/mozilla-inbound/rev/feeed2f82c6f", "author": "nfitzgerald@mozilla.com", "id": 10186251, "time": "2015-04-22T16:43:34Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/dcf12f5e9a96\nhttps://hg.mozilla.org/mozilla-central/rev/9ef1368b7c9f\nhttps://hg.mozilla.org/mozilla-central/rev/feeed2f82c6f", "author": "kwierso@gmail.com", "id": 10188253, "time": "2015-04-23T00:24:42Z"}], "cf_last_resolved": "2015-04-23T00:24:42Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2017-07-11T11:50:03Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1137527, 1144356, 1148925], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript Engine", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla40", "is_cc_accessible": true, "status": "RESOLVED", "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "cbook@mozilla.com", "id": 277293, "name": "cbook@mozilla.com", "real_name": "Carsten Book [:Tomcat]"}, {"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, {"email": "sphink@gmail.com", "id": 359004, "name": "sphink@gmail.com", "real_name": "Steve Fink [:sfink] [:s:]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "nfitzgerald@mozilla.com"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-01T22:32:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8587074, "added": "feedback?(sphink@gmail.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-02T00:01:09Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1137527"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-02T18:35:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(sphink@gmail.com)", "attachment_id": 8587074, "added": "feedback+"}], "who": "sphink@gmail.com", "when": "2015-04-03T22:47:23Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1148925"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-07T04:59:52Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1153922"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-13T16:35:22Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8587074, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8591916, "added": "review?(sphink@gmail.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-13T21:26:02Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8587075, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8591919, "added": "review?(continuation@gmail.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-13T21:26:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8591921, "added": "review?(sphink@gmail.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-13T21:26:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(sphink@gmail.com)", "attachment_id": 8591916, "added": "review+"}], "who": "sphink@gmail.com", "when": "2015-04-14T00:58:04Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8591919, "added": "review-"}], "who": "continuation@gmail.com", "when": "2015-04-14T17:19:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(sphink@gmail.com)", "attachment_id": 8591921, "added": "review+"}], "who": "sphink@gmail.com", "when": "2015-04-16T16:40:54Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8591916, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8594371, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-18T20:28:44Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8591919, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8594372, "added": "review?(continuation@gmail.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-18T20:28:54Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8591921, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8594373, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-18T20:29:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8594372, "added": "review+"}], "who": "continuation@gmail.com", "when": "2015-04-20T17:28:32Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8594372, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8594898, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-20T18:31:16Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1144356"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-20T21:42:20Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8594371, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8595007, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-20T22:32:56Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8594898, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8595008, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-20T22:33:06Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8594373, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8595009, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-20T22:33:15Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8595007, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8595045, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-21T00:02:44Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8595008, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8595046, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-21T00:02:54Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8595009, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8595491, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-21T18:55:44Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "checkin-needed"}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-21T21:44:27Z"}, {"changes": [{"removed": "checkin-needed", "field_name": "keywords", "added": ""}, {"removed": "", "field_name": "cc", "added": "cbook@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(nfitzgerald@mozilla.com)"}], "who": "cbook@mozilla.com", "when": "2015-04-22T11:05:37Z"}, {"changes": [{"removed": "needinfo?(nfitzgerald@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "nfitzgerald@mozilla.com", "when": "2015-04-22T16:43:34Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla40"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-04-22 17:24:42"}, {"removed": "---", "field_name": "cf_status_firefox40", "added": "fixed"}], "who": "kwierso@gmail.com", "when": "2015-04-23T00:24:42Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1379957"}], "who": "jcoppeard@mozilla.com", "when": "2017-07-11T11:50:03Z"}], "resolution": "FIXED", "op_sys": "Mac OS X", "cf_fx_points": "---", "cf_blocking_fennec": "---"}