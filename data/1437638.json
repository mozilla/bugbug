{"cf_tracking_thunderbird_esr52": "---", "status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "gijskruitbosch+bugs@gmail.com", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "bgrinstead@mozilla.com", "id": 476442, "name": "bgrinstead@mozilla.com", "real_name": "Brian Grinstead [:bgrins]"}, {"email": "bugzilla-mozilla@dorando.at", "id": 110580, "name": "bugzilla-mozilla@dorando.at", "real_name": "Dorando"}, {"email": "bzbarsky@mit.edu", "id": 20209, "name": "bzbarsky@mit.edu", "real_name": "Boris Zbarsky [:bz] (Vacation Jun 16-24) (no decent commit message means r-)"}, {"email": "dietrich@mozilla.com", "id": 213632, "name": "dietrich@mozilla.com", "real_name": "Dietrich Ayala (:dietrich)"}, {"email": "enndeakin@gmail.com", "id": 6102, "name": "enndeakin@gmail.com", "real_name": "Neil Deakin"}, {"email": "florian@queze.net", "id": 149052, "name": "florian@queze.net", "real_name": "Florian Qu\u00e8ze [:florian]"}, {"email": "gandalf@aviary.pl", "id": 41270, "name": "gandalf@aviary.pl", "real_name": "Zibi Braniecki [:gandalf][:zibi]"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "mconley@mozilla.com", "id": 403756, "name": "mconley@mozilla.com", "real_name": "Mike Conley (:mconley) (:\u2699\ufe0f) (Catching up on needinfos / reviews)"}, {"email": "mkmelin+mozilla@iki.fi", "id": 101158, "name": "mkmelin+mozilla@iki.fi", "real_name": "Magnus Melin"}, {"email": "paolo.mozmail@amadzone.org", "id": 332229, "name": "paolo.mozmail@amadzone.org", "real_name": ":Paolo Amadini"}, {"email": "philipp@bugzilla.kewis.ch", "id": 253233, "name": "philipp@bugzilla.kewis.ch", "real_name": "Philipp Kewisch [:Fallen] "}], "cf_last_resolved": null, "attachments": [{"creator": "enndeakin@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8971993}, {"creator": "enndeakin@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8971995}, {"creator": "enndeakin@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8971996}, {"creator": "enndeakin@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8974088}, {"creator": "enndeakin@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8976015}, {"creator": "enndeakin@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8976016}, {"creator": "enndeakin@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-06-01T15:12:36Z", "type_id": 4, "creation_date": "2018-06-01T00:50:39Z", "id": 1764439, "setter": "paolo.mozmail@amadzone.org"}, {"status": "+", "name": "review", "modification_date": "2018-06-02T05:24:39Z", "type_id": 4, "creation_date": "2018-06-01T00:52:23Z", "id": 1764440, "setter": "bzbarsky@mit.edu"}], "content_type": "text/plain", "id": 8982389}], "votes": 1, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 23, "comments": [{"text": "In bug 1403231 we simply added a \"src\" property to all XUL nodes, and it only really does something useful for image elements.\n\nThere are other simple-ish XUL elements around that are implemented in XBL and would benefit from moving into compiled code (that is, the actual implementation is sufficiently simple that as a custom element there'd be more overhead from it being a custom element than we'd gain). :bgrins and I were talking about whether it would be possible to come up with a scheme where these implementations would move directly into C++ without having the overhead of having those properties on every element.\n\nExamples include:\n\n<deck>\n<iframe>\npotentially \"basecontrol\"\n<resizer>\n\netc. \n\nAIUI the current issue is that there's no inheritance on the C++ side - only XULElement - so making those properties not do anything on non-relevant elements is not trivial. This bug is about evaluating whether it's worth changing that for the purposes of implementing \"simple\" elements in C++ (instead of Custom Elements).", "author": "gijskruitbosch+bugs@gmail.com", "id": 13036893, "time": "2018-02-12T19:29:11Z"}, {"text": "> without having the overhead of having those properties on every element\n\nMental overhead or runtime overhead?\n\nThere's basically no runtime overhead: they get installed once on the prototype and that's it.\n\nI agree there is mental overhead.\n\nAdding inheritance on the C++ side would not be too terrible work-wise, but would add a bit of overhead to either element creation or element wrapper creation.  You basically have two options.  Either you change nsXULElement::WrapNode to check the tag and call the right binding's Wrap() (so an if cascade in there) or you create C++ subclasses of nsXULElement and make sure that all the places that currently call the constructor call some function that returns the right subclass (with branching on the tag name at that point).", "author": "bzbarsky@mit.edu", "id": 13037096, "time": "2018-02-12T20:32:03Z"}, {"text": "(In reply to Boris Zbarsky [:bz] (no decent commit message means r-) from comment #1)\n> > without having the overhead of having those properties on every element\n> \n> Mental overhead or runtime overhead?\n> \n> There's basically no runtime overhead: they get installed once on the\n> prototype and that's it.\n> \n> I agree there is mental overhead.\n\nWell, `selectedIndex` also exist on other things (<radio>, maybe <tabbox>, etc.) so I think it'd be confusing to have one implementation in C++ land specific to one consumer (<deck>) and then overriding them from XBL for other consumers. But maybe I'm overly paranoid in that respect. And then yes, mental overhead in terms of \"why does this <box> have a `selectedIndex` property, and what does it even do?\".\n\n> Adding inheritance on the C++ side would not be too terrible work-wise, but\n> would add a bit of overhead to either element creation or element wrapper\n> creation.  You basically have two options.  Either you change\n> nsXULElement::WrapNode to check the tag and call the right binding's Wrap()\n> (so an if cascade in there) or you create C++ subclasses of nsXULElement and\n> make sure that all the places that currently call the constructor call some\n> function that returns the right subclass (with branching on the tag name at\n> that point).\n\nThe overhead will almost certainly be less than the overhead of actually creating XBL bindings, I suppose, but then again we don't create that many <deck> bindings in browser.xul and we'd take the overhead for every XUL element... There's about 1300 non-anon-content ones of those in a blank browser window for me, about 2770 if I log the constructor from the commandline and just open + close Firefox with 1 window. That sounds pretty performance-sensitive.\n\nWould it be possible to hide the properties from JS with webidl based on the element tag name, thus avoiding any constructor overhead? Or is that not clever (or maybe just impossible!) for other reasons?", "author": "gijskruitbosch+bugs@gmail.com", "id": 13038985, "time": "2018-02-13T15:24:49Z"}, {"text": "> Would it be possible to hide the properties from JS with webidl based on the element tag name\n\nNot easily.  The properties are defined on the prototype.  We could do something where we skip the proto lookup based on tagname, but that means making the element wrapper itself a proxy and that has its own performance costs.\n\nNote that for HTML we already pay the cost of a branch on tag to create the right HTML element.  The way it's implemented in the parser is that we have a hashtable mapping tagnames to constructor functions (see the nsHtml5ElementName struct).  For createElement we end up doing a hashtable lookup on the tagname to find an nsHTMLTag id, then indexing into an array of constructor functions with that id.  I think doing something like that for XUL should be fine, fwiw, though obviously we can measure.", "author": "bzbarsky@mit.edu", "id": 13039113, "time": "2018-02-13T16:08:53Z"}, {"text": "I tried an implementation of both a) subclassing nsXULElement and b) changing WrapNode for popup in bug 1446961.", "author": "enndeakin@gmail.com", "id": 13140185, "time": "2018-03-19T17:25:03Z"}, {"text": "Sounds like the main request in this bug is going to be handled in Bug 1446961. Neil, would implementing <iframe> be possible using the same mechanism from that bug? If so, what do you think about repurposing this one to do that?", "author": "bgrinstead@mozilla.com", "id": 13238430, "time": "2018-04-27T15:22:56Z"}, {"text": "Created attachment 8971993\nImplement frame subclass\n\nOK, here is a patch to implement iframe (and browser/editor) that way.", "author": "enndeakin@gmail.com", "id": 13243214, "time": "2018-04-30T14:32:01Z"}, {"text": "Created attachment 8971995\nImplement frame subclass", "author": "enndeakin@gmail.com", "id": 13243230, "time": "2018-04-30T14:35:28Z"}, {"text": "Created attachment 8971996\nImplement frame subclass", "author": "enndeakin@gmail.com", "id": 13243283, "time": "2018-04-30T14:43:29Z"}, {"text": "Looks like XULFrameElement is quite fitting as a base class for the bindings that currently use these properties.\n\nWhen all of these binding have also been converted to Custom Elements, I wonder if we could have XULFrameElement implemented in JavaScript and used as a base class, since none of the implementations depend on C++-only internals.", "author": "paolo.mozmail@amadzone.org", "id": 13243523, "time": "2018-04-30T16:05:27Z"}, {"text": "(In reply to :Paolo Amadini from comment #9)\n> Looks like XULFrameElement is quite fitting as a base class for the bindings\n> that currently use these properties.\n> \n> When all of these binding have also been converted to Custom Elements, I\n> wonder if we could have XULFrameElement implemented in JavaScript and used\n> as a base class, since none of the implementations depend on C++-only\n> internals.\n\nI don't think <xul:iframe> will need to be a Custom Element after this change - there's no behavior beyond these properties. Having iframe be a Custom Element (as prototyped in Bug 1411707) felt a bit wrong anyway.\n\nI guess browser and editor will still need JS attached (although I haven't looked closely). We could always look into making those customized autonomous elements (something like <iframe is=\"moz-editor\">).", "author": "bgrinstead@mozilla.com", "id": 13243576, "time": "2018-04-30T16:20:29Z"}, {"text": "Created attachment 8974088\nImplement frame subclass\n\nNow with all tests fixed.", "author": "enndeakin@gmail.com", "id": 13262971, "time": "2018-05-08T16:44:04Z"}, {"text": "Created attachment 8976015\nPart 2 - move the frame loader to XULFrameLoader\n\nThis part moves the frame loader to the subclass, allowing various checks that currently occur on every element to be removed.", "author": "enndeakin@gmail.com", "id": 13280342, "time": "2018-05-16T00:20:13Z"}, {"text": "Created attachment 8976016\nAlternate patch using custom elements\n\nThis alternate implementation replaces both of the other patches. Instead of a subclass, it moves iframe to use a custom element and makes browser/editor inherit it. This is simpler code and requires no C++ changes, but prevents the optimization from part 2 from being applicable.", "author": "enndeakin@gmail.com", "id": 13280348, "time": "2018-05-16T00:22:08Z"}, {"text": "(In reply to Neil Deakin from comment #13)\n> Created attachment 8976016\n> Alternate patch using custom elements\n> \n> This alternate implementation replaces both of the other patches. Instead of\n> a subclass, it moves iframe to use a custom element and makes browser/editor\n> inherit it. This is simpler code and requires no C++ changes, but prevents\n> the optimization from part 2 from being applicable.\n\nI like the idea and simplicity here but my only concern with this is that browser and editor would presumably then have both a XBL binding and a Custom Element attached to them. This is something DOM folks have seemed generally concerned about doing - we'd at least want to have them look closer to make sure that won't cause problems.\n\nI'm guessing we could fully convert `editor` to Custom Element but that `browser` would be harder because of the three inherited bindings bound to the same tag name (https://bgrins.github.io/xbl-analysis/tree/#browser). That said, if we could figure out how to flatten those bindings together or otherwise handle `browser` as a Custom Element I'd be all for it. There's some prior discussion about it in Bug 1442058 and Bug 1441935.", "author": "bgrinstead@mozilla.com", "id": 13281842, "time": "2018-05-16T15:59:07Z"}, {"text": "I generally think the first approach is probably the way to go anyway.", "author": "enndeakin@gmail.com", "id": 13281908, "time": "2018-05-16T16:22:44Z"}, {"text": "Created attachment 8982389\nPart 1 - Implement frame subclass\n\nAdds some additonal tests.", "author": "enndeakin@gmail.com", "id": 13379240, "time": "2018-06-01T00:50:39Z"}, {"text": "Comment on attachment 8982389\nPart 1 - Implement frame subclass\n\nwebidl changes. I'm wondering if I should put these in chrome-webidl instead, but test_interfaces fails when running in an xbl context if I do that.", "author": "enndeakin@gmail.com", "id": 13379241, "time": "2018-06-01T00:52:23Z"}, {"text": "> but test_interfaces fails when running in an xbl context if I do that.\n\nWell... what behavior do you want?  This bit:\n\n [HTMLConstructor, Func=\"IsChromeOrXBL\"]\n interface XULFrameElement : XULElement\n\nsays the constructor should be exposed to chrome and to XBL scopes.  Then this line in test_interfaces.js:\n\n>+    {name: \"XULFrameElement\", insecureContext: true, xbl: true},\n\nSays that the test should check that it _is_ exposed in xbl scopes and is _not_ exposed in a normal web page scope.\n\nWhen you put it in chrome-webidl, did you leave that Func annotation?  What did you put in test_interface.js?  And more importantly, what would you expect the behavior to be in that case?", "author": "bzbarsky@mit.edu", "id": 13379372, "time": "2018-06-01T03:26:50Z"}, {"text": "Comment on attachment 8982389\nPart 1 - Implement frame subclass\n\nReview of attachment 8982389:\n-----------------------------------------------------------------\n\nThe implementation bits look good to me, including aligning the subtle differences in how null and QueryInterface were handled in the different elements.\n\n::: dom/xul/nsXULElement.cpp\n@@ +177,5 @@\n>        nodeInfo->Equals(nsGkAtoms::panel) ||\n>        nodeInfo->Equals(nsGkAtoms::tooltip)) {\n>      return NS_NewXULPopupElement(nodeInfo.forget());\n>    }\n> +  else if (nodeInfo->Equals(nsGkAtoms::iframe) ||\n\nnit: \"else\" on the same line as the brace", "author": "paolo.mozmail@amadzone.org", "id": 13380477, "time": "2018-06-01T15:12:36Z"}, {"text": "(In reply to Boris Zbarsky [:bz] (no decent commit message means r-) from comment #18)\n> > but test_interfaces fails when running in an xbl context if I do that.\n> \n> Well... what behavior do you want?\n\nI think I want it be exposed the same way that XULElement is now, but without needing an extra review from a dom person for every change. But otherwise, the patch could be left as is.", "author": "enndeakin@gmail.com", "id": 13381343, "time": "2018-06-01T20:32:00Z"}, {"text": "That sounds like we should allow IsChromeOrXBL things to live in chrome-webidl.  How about we do that?  I filed bug 1466255.", "author": "bzbarsky@mit.edu", "id": 13381700, "time": "2018-06-01T23:04:07Z"}, {"text": "Comment on attachment 8982389\nPart 1 - Implement frame subclass\n\n>+++ b/dom/webidl/XULFrameElement.webidl\n\nOnce bug 1466255 is fixed this can go in chrome-webidl.\n\n>+++ b/dom/xul/XULFrameElement.cpp\n>+already_AddRefed<nsIDocShell>\n>+XULFrameElement::GetDocShell()\n\nWhy not just return nsIDocShell*?\n\n>+already_AddRefed<nsIDocument>\n>+XULFrameElement::GetContentDocument()\n\nAnd just nsIDocument* here.\n\n>+++ b/dom/xul/XULFrameElement.h\n>+struct JSContext;\n\nOr #include \"js/TypeDecls.h\" might be better.\n\n>+++ b/dom/xul/nsXULElement.cpp\n>+    return NS_NewXULFrameElement(nodeInfo.forget());\n\nThis is the only use of NS_NewXULFrameElement, right?  Why does that function even exist, instead of just calling the constructor directly?", "author": "bzbarsky@mit.edu", "id": 13381974, "time": "2018-06-02T05:24:39Z"}], "id": 1437638, "priority": "P5", "cc": ["bgrinstead@mozilla.com", "bugzilla-mozilla@dorando.at", "bzbarsky@mit.edu", "dietrich@mozilla.com", "enndeakin@gmail.com", "florian@queze.net", "gandalf@aviary.pl", "mcastelluccio@mozilla.com", "mconley@mozilla.com", "mkmelin+mozilla@iki.fi", "paolo.mozmail@amadzone.org", "philipp@bugzilla.kewis.ch"], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1403231", "https://bugzilla.mozilla.org/show_bug.cgi?id=1436351", "https://bugzilla.mozilla.org/show_bug.cgi?id=1446961"], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1397874], "qa_contact": "", "creation_time": "2018-02-12T19:29:11Z", "cf_status_firefox_esr52": "---", "component": "XUL", "assigned_to_detail": {"email": "enndeakin@gmail.com", "id": 6102, "name": "enndeakin@gmail.com", "real_name": "Neil Deakin"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "affected", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "gijskruitbosch+bugs@gmail.com", "id": 159069, "name": "gijskruitbosch+bugs@gmail.com", "real_name": ":Gijs (he/him)"}, "whiteboard": "", "mentors": [], "summary": "Implement iframe as a child class of nsXULElement", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-02T05:24:39Z", "assigned_to": "enndeakin@gmail.com", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "dietrich@mozilla.com"}], "who": "dietrich@mozilla.com", "when": "2018-02-12T19:29:53Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2018-02-12T19:31:06Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1436351"}], "who": "bgrinstead@mozilla.com", "when": "2018-02-12T19:43:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mkmelin+mozilla@iki.fi"}], "who": "mkmelin+mozilla@iki.fi", "when": "2018-02-12T19:47:38Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gandalf@aviary.pl"}], "who": "gandalf@aviary.pl", "when": "2018-02-12T20:21:00Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "philipp@bugzilla.kewis.ch"}], "who": "philipp@bugzilla.kewis.ch", "when": "2018-02-12T21:35:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "florian@queze.net"}], "who": "florian@queze.net", "when": "2018-02-12T21:54:03Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bzbarsky@mit.edu)"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2018-02-13T15:24:49Z"}, {"changes": [{"removed": "needinfo?(bzbarsky@mit.edu)", "field_name": "flagtypes.name", "added": ""}], "who": "bzbarsky@mit.edu", "when": "2018-02-13T16:08:53Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla-mozilla@dorando.at"}], "who": "bugzilla-mozilla@dorando.at", "when": "2018-02-14T14:33:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "enndeakin@gmail.com"}], "who": "enndeakin@gmail.com", "when": "2018-03-19T17:25:03Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1446961"}], "who": "bgrinstead@mozilla.com", "when": "2018-03-19T17:42:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mconley@mozilla.com"}], "who": "mconley@mozilla.com", "when": "2018-03-19T17:42:38Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P5"}], "who": "enndeakin@gmail.com", "when": "2018-04-19T14:40:56Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(enndeakin@gmail.com)"}], "who": "bgrinstead@mozilla.com", "when": "2018-04-27T15:22:56Z"}, {"changes": [{"removed": "Consider coming up with a scheme to move simple XUL elements into C++", "field_name": "summary", "added": "Implement iframe as a child class of nsXULElement"}, {"removed": "needinfo?(enndeakin@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "enndeakin@gmail.com", "when": "2018-04-30T14:30:34Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "enndeakin@gmail.com"}], "who": "enndeakin@gmail.com", "when": "2018-04-30T14:32:01Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8971993, "added": "1"}], "who": "enndeakin@gmail.com", "when": "2018-04-30T14:35:39Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8971995, "added": "1"}], "who": "enndeakin@gmail.com", "when": "2018-04-30T14:43:29Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8971996, "added": "1"}], "who": "enndeakin@gmail.com", "when": "2018-05-08T16:44:04Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8974088, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8982389, "added": "review?(paolo.mozmail@amadzone.org)"}], "who": "enndeakin@gmail.com", "when": "2018-06-01T00:50:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8982389, "added": "review?(bzbarsky@mit.edu)"}], "who": "enndeakin@gmail.com", "when": "2018-06-01T00:52:23Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(enndeakin@gmail.com)"}], "who": "bzbarsky@mit.edu", "when": "2018-06-01T03:26:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(paolo.mozmail@amadzone.org)", "attachment_id": 8982389, "added": "review+"}], "who": "paolo.mozmail@amadzone.org", "when": "2018-06-01T15:12:36Z"}, {"changes": [{"removed": "needinfo?(enndeakin@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "enndeakin@gmail.com", "when": "2018-06-01T20:32:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bzbarsky@mit.edu)", "attachment_id": 8982389, "added": "review+"}], "who": "bzbarsky@mit.edu", "when": "2018-06-02T05:24:39Z"}], "resolution": "", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}