{"cf_tracking_thunderbird_esr52": "---", "status": "VERIFIED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "jh+bugzilla@buttercookie.de", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/png", "id": 8611264}, {"creator": "aethanyc@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-04-11T23:59:17Z", "type_id": 4, "creation_date": "2016-04-11T10:07:50Z", "id": 1374251, "setter": "mats@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8738891}, {"creator": "aethanyc@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2016-04-11T23:59:54Z", "type_id": 4, "creation_date": "2016-04-11T10:07:50Z", "id": 1374252, "setter": "mats@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8738892}], "classification": "Components", "creator": "jh+bugzilla@buttercookie.de", "cc": ["aethanyc@gmail.com", "brad@lassey.us", "huskyomega@gmail.com", "kbrosnan@mozilla.com", "mark.finkle@gmail.com", "markcapella@twcny.rr.com", "mats@mozilla.com", "mephisto41@gmail.com", "s.kaspari@gmail.com", "snorp@snorp.net"], "depends_on": [1283828], "creation_time": "2015-05-27T16:10:11Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "New Gecko selection carets cannot reverse their positions", "id": 1168891, "assigned_to_detail": {"email": "aethanyc@gmail.com", "id": 503090, "name": "aethanyc@gmail.com", "real_name": "Ting-Yu Lin [:TYLin] (UTC+8) (Away, needinfo me if you need anything)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "aethanyc@gmail.com", "comment_count": 26, "comments": [{"text": "Created attachment 8611264\nvisualisation of old and new behaviour\n\nSteps to reproduce:\nActivate the new selection carets by setting selectioncaret.enabled and touchcaret.enabled to true.\nPick a paragraph with a bit of text and select some text in the middle of it.\nTake the second selection caret (end of selection) and try dragging it towards the beginning of the paragraph.\n\nResults:\nDragging stops when you reach the first selection caret (beginning of selection).\n\nExpected result:\nWith the old selection carets, it is possible to continue dragging the second caret right across the beginning of the selection. After releasing the caret, the two carets (beginning and end) will simply swap their positions. See also the attached visualisation.", "author": "jh+bugzilla@buttercookie.de", "id": 10315767, "time": "2015-05-27T16:10:11Z"}, {"text": "This is normal behaviour with the new Carets.", "author": "markcapella@twcny.rr.com", "id": 10315796, "time": "2015-05-27T16:18:52Z"}, {"text": "cc: tylin for historical perspective? I haven't looked into the original b2g implementation detail here, but I've been imagining this is pretty in-grained. Is it feasible / worth the time to guess-timate an effort to retro-fit the original Fennec Handle behaviour?", "author": "markcapella@twcny.rr.com", "id": 10315833, "time": "2015-05-27T16:26:53Z"}, {"text": "This behavior is by design as described in page 12 \"Carets can\u2019t cross each other\" in [1], so the minimum selection is one character. This in in-grained in the caret dragging logic. From the UX perspective, the user won't accidentally reverse the selection if he/she drags the end caret upward as in page 12 \"Dragging Upward\". If possible, I would prefer not to maintain two different behaviors on two platforms.\n\n[1] https://bug921965.bugzilla.mozilla.org/attachment.cgi?id=8548759", "author": "aethanyc@gmail.com", "id": 10319780, "time": "2015-05-28T04:04:11Z"}, {"text": "Hmm, I guess on the one hand I can understand the desire for a consistent behaviour across all of Mozilla's products. On the other hand, I'd like to argue that there's also the consistency across the Android platform to be considered.\n\nFirst, I've done a non-representative survey across the apps installed on my phone. I have to admit the picture there is rather inconsistent - some apps allow crossing the text selection handles, others don't, without a really clear pattern discernible.\nNext, I've focussed specifically on browsers, so I installed a number of alternative browsers. I've tested the JB 4.1.2 stock browser, Chrome, UC Browser, Opera, Opera Mini, Maxthon, Boat Browser and Dolphin. All of them allow the selection handles to cross each other.", "author": "jh+bugzilla@buttercookie.de", "id": 10320742, "time": "2015-05-28T10:40:06Z"}, {"text": "Android platform behavior and convenience should be considered here.", "author": "kbrosnan@mozilla.com", "id": 10333459, "time": "2015-06-01T22:21:53Z"}, {"text": "(In reply to Kevin Brosnan [:kbrosnan] from comment #5)\n> Android platform behavior and convenience should be considered here.\n\nChrome for Android does flip the handles. We think that we want the Gecko handles to flip as well, but it won't block shipping the Gecko handles, hence tracking +.", "author": "mark.finkle@gmail.com", "id": 10405549, "time": "2015-06-18T17:16:01Z"}, {"text": "Whoops", "author": "snorp@snorp.net", "id": 11213003, "time": "2016-03-02T22:58:49Z"}, {"text": "(In reply to Kevin Brosnan [:kbrosnan] from comment #5)\n> Android platform behavior and convenience should be considered here.\n\nI absolutely agree here. As an Android user it feels absolutely odd.", "author": "s.kaspari@gmail.com", "id": 11299075, "time": "2016-04-04T17:19:48Z"}, {"text": "I'm working on this.", "author": "aethanyc@gmail.com", "id": 11304377, "time": "2016-04-06T12:48:14Z"}, {"text": "Created attachment 8738891\nMozReview Request: Bug 1168891 Part 1 - Refine two functions related to caret positioning.\n\nFindFirstNodeWithFrame() and CompareRangeWithContentOffset() share a lot\nduplication code. I refactor and rename the two functions to improve the\nreadability.\n\nReview commit: https://reviewboard.mozilla.org/r/44741/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/44741/", "author": "aethanyc@gmail.com", "id": 11306998, "time": "2016-04-07T06:47:55Z"}, {"text": "Created attachment 8738892\nMozReview Request: Bug 1168891 Part 2 - Allow one caret to be dragged across the other caret.\n\nThis is the convention of the Android platform.\n\nReview commit: https://reviewboard.mozilla.org/r/44743/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/44743/", "author": "aethanyc@gmail.com", "id": 11306999, "time": "2016-04-07T06:47:55Z"}, {"text": "I don't see any reason to make this preffable.  If we think flipping the carets\nis the best user experience then that should be the default on all platforms.\nHaving to maintain code and tests for both behaviors has a cost.", "author": "mats@mozilla.com", "id": 11308629, "time": "2016-04-07T17:38:58Z"}, {"text": "(In reply to Mats Palmgren (:mats) from comment #12)\n> I don't see any reason to make this preffable.  If we think flipping the carets \n> is the best user experience then that should be the default on all platforms.\n> Having to maintain code and tests for both behaviors has a cost.\n\nI had the same feeling for not to maintain two behaviors in comment 3.  However, the current non-swappable carets are required per B2G text selection spec, and AFAIK iOS carets cannot swap positions, too.  If we want to match the convention on different platforms, the cost might be unavoidable. \n\nIt would be hard if we have to choose one convention over the other this moment especially AccessibleCaret might be needed on Windows in bug 1195722 (I don't know the convention yet) or on iOS (if we can get gecko into iOS).  We should have a separate bug to discuss removing one behavior if it's proven that the maintenance cost is too much, or the particular behavior isn't used anymore.", "author": "aethanyc@gmail.com", "id": 11310122, "time": "2016-04-08T03:51:11Z"}, {"text": "Comment on attachment 8738891\nMozReview Request: Bug 1168891 Part 1 - Refine two functions related to caret positioning.\n\nhttps://reviewboard.mozilla.org/r/44741/#review41877\n\n::: layout/base/AccessibleCaretManager.cpp:887\n(Diff revision 1)\n> -  }\n> +  int32_t nodeOffset = 0;\n> +  CaretAssociationHint hint;\n>  \n> -  uint32_t rangeCount = selection->RangeCount();\n> -  if (rangeCount <= 0) {\n> -    return nullptr;\n> +  RefPtr<Selection> selection = GetSelection();\n> +  bool findInFirstRangeStart = aDirection == eDirNext;\n> +\n\nI think we still need this check (that we have at least one range).\n\n::: layout/base/AccessibleCaretManager.cpp:966\n(Diff revision 1)\n> -  if (!theFrame) {\n> -    return false;\n> -  }\n>  \n> -  // Move one character forward/backward from point and get offset\n> -  nsPeekOffsetStruct pos(eSelectCluster,\n> +  // Move one character in the direction of dir from the node offset and get\n> +  // the new offset.\n\nI think calling it \"new offset\" is confusing since it can be misread as \"the active caret's new position\" (which is what aOffsets is if I'm not mistaken).\n\n|pos| is one character forward/backward from the inactive caret, right?\n\nSo this comment would be clearer as something like:\n\"Move one character (in the direction of dir) from the inactive caret's position.  This is the limit for the active caret's new position.\"\n\n::: layout/base/AccessibleCaretManager.cpp:975\n(Diff revision 1)\n>    if (NS_FAILED(rv)) {\n>      pos.mResultContent = content;\n>      pos.mContentOffset = nodeOffset;\n>    }\n>  \n> -  // Compare with current point\n> +  // Compare the new offset with the given aOffsets.\n\nThis comment would be clearer as:\n\"Compare the active caret's new position (aOffsets) to the limit.\"\n\n::: layout/base/AccessibleCaretManager.cpp:976\n(Diff revision 1)\n>      pos.mResultContent = content;\n>      pos.mContentOffset = nodeOffset;\n>    }\n>  \n> -  // Compare with current point\n> -  int32_t result = nsContentUtils::ComparePoints(aOffsets.content,\n> +  // Compare the new offset with the given aOffsets.\n> +  int32_t cmp_pos =\n\nnit: \"cmp_pos\" doesn't follow naming conventions for local variables (which is camelCase).\n\nAnd looking ahead to the next patch, you use \"cmp_other_caret\" for basically the same ComparePoints call.\n\nIt would be nice to have a description of the aOffsets param to RestrictCaretDraggingOffset in the header file.  As far as I can tell it's the new position of the caret that is being dragged(?) and the local variables node/nodeOffset is the position of the other (inactive) caret(?)\n\n::: layout/base/AccessibleCaretManager.cpp:981\n(Diff revision 1)\n> -  int32_t result = nsContentUtils::ComparePoints(aOffsets.content,\n> -                                                 aOffsets.StartOffset(),\n> -                                                 pos.mResultContent,\n> -                                                 pos.mContentOffset);\n> -  if ((mActiveCaret == mFirstCaret.get() && result == 1) ||\n> -      (mActiveCaret == mSecondCaret.get() && result == -1)) {\n> +  int32_t cmp_pos =\n> +    nsContentUtils::ComparePoints(aOffsets.content, aOffsets.StartOffset(),\n> +                                  pos.mResultContent, pos.mContentOffset);\n> +  if ((mActiveCaret == mFirstCaret.get() && cmp_pos == 1) ||\n> +      (mActiveCaret == mSecondCaret.get() && cmp_pos == -1)) {\n> +    // aOffset is across the new offset. Set it to the new offset.\n\nThis comment would be clearer as:\n\"The active caret's position is past the limit, which we don't allow here.  So set it to the limit, resulting in one character being selected.\"\n\nPerhaps the code would be clearer if we renamed |pos| to |limit| ?\nand |cmp_pos| to |cmpToLimit| ?", "author": "mats@mozilla.com", "id": 11313258, "time": "2016-04-09T23:11:33Z"}, {"text": "Comment on attachment 8738892\nMozReview Request: Bug 1168891 Part 2 - Allow one caret to be dragged across the other caret.\n\nhttps://reviewboard.mozilla.org/r/44743/#review41881\n\n::: layout/base/AccessibleCaretManager.h:304\n(Diff revision 1)\n>    // UI interactions. Optionally, we can try to maintain the active UI, keeping\n>    // carets and ActionBar available.\n>    static bool sCaretsScriptUpdates;\n>  \n> +  // Preference to allow one caret to be dragged across the other caret without\n> +  // any limitation. By default, one caret cannot be dragged across the other\n\nPlease update the comment so that it's neutral on what is the default.  For example by replacing the second sentence with \"When set to false, ...\"\n\n::: layout/base/AccessibleCaretManager.cpp:81\n(Diff revision 1)\n>  /*static*/ bool\n>  AccessibleCaretManager::sCaretsAlwaysTilt = false;\n>  /*static*/ bool\n>  AccessibleCaretManager::sCaretsScriptUpdates = false;\n>  /*static*/ bool\n> +AccessibleCaretManager::sCaretsAllowDraggingAcrossOtherCaret = false;\n\nPlease initialize it to true here. (see last comment below)\n\n::: layout/base/AccessibleCaretManager.cpp:109\n(Diff revision 1)\n>                                   \"layout.accessiblecaret.extendedvisibility\");\n>      Preferences::AddBoolVarCache(&sCaretsAlwaysTilt,\n>                                   \"layout.accessiblecaret.always_tilt\");\n>      Preferences::AddBoolVarCache(&sCaretsScriptUpdates,\n>        \"layout.accessiblecaret.allow_script_change_updates\");\n> +    Preferences::AddBoolVarCache(&sCaretsAllowDraggingAcrossOtherCaret,\n\nPlease add a third arg, true, here.  (see last comment below)\n\n::: layout/base/AccessibleCaretManager.cpp:970\n(Diff revision 1)\n>    }\n>  \n>    nsCOMPtr<nsIContent> content = do_QueryInterface(node);\n>  \n> +  if (sCaretsAllowDraggingAcrossOtherCaret) {\n> +    // Compare the position of the other caret with the given aOffsets.\n\nThe comment would slightly clearer if you replace \"other\" with \"inactive\", or \"other (inactive)\".\n\n::: layout/base/AccessibleCaretManager.cpp:971\n(Diff revision 1)\n>  \n>    nsCOMPtr<nsIContent> content = do_QueryInterface(node);\n>  \n> +  if (sCaretsAllowDraggingAcrossOtherCaret) {\n> +    // Compare the position of the other caret with the given aOffsets.\n> +    int32_t cmp_other_caret =\n\nPlease rename |cmp_other_caret| to |cmpToOtherCaretPos| or |cmpToInactiveCaretPos| or something like that.\n\n::: layout/base/AccessibleCaretManager.cpp:975\n(Diff revision 1)\n> +    // Compare the position of the other caret with the given aOffsets.\n> +    int32_t cmp_other_caret =\n> +      nsContentUtils::ComparePoints(aOffsets.content, aOffsets.StartOffset(),\n> +                                    content, nodeOffset);\n> +    if (mActiveCaret == mFirstCaret.get()) {\n> +      if (cmp_other_caret == 0) {\n\nWouldn't it be simpler to use a switch, like so:\n\nswitch (cmp_other_caret) {\n  case 0:\n    // aOffset is the same as the offset of the other caret...\n    return false;\n  case 1:\n    if (mActiveCaret == mFirstCaret.get()) {\n      ...\n    }\n    break;\n  case -1:\n    if (mActiveCaret == mSecondCaret.get()) {\n      ...\n    }\n    break;\n}\n\n::: layout/base/AccessibleCaretManager.cpp:980\n(Diff revision 1)\n> +      if (cmp_other_caret == 0) {\n> +        // The aOffset is the same as the offset of the second caret. Return\n> +        // false so that the selection range is not collapsed by the caller.\n> +        return false;\n> +      } else if (cmp_other_caret == 1) {\n> +        // aOffset is moved bypass the second caret. After making change to the\n\nPlease change \"is moved bypass\" to \"was moved across\".\n\n::: modules/libpref/init/all.js:5019\n(Diff revision 1)\n>  // AccessibleCarets and close UI interaction by default.\n>  pref(\"layout.accessiblecaret.allow_script_change_updates\", false);\n>  \n> +// By default, one caret cannot be dragged across the other one, i.e. the\n> +// minimum selection range will be one character.\n> +pref(\"layout.accessiblecaret.allow_dragging_across_other_caret\", false);\n\nI think this should be true by default, and then we should set it to false in case some platform needs that in the future.\n\n(When 'layout.accessiblecaret.enabled' is enabled in a Firefox desktop build, we should allow dragging across the other caret by default since that's how native selection works on all desktop platforms.)", "author": "mats@mozilla.com", "id": 11313261, "time": "2016-04-09T23:13:24Z"}, {"text": "(In reply to Ting-Yu Lin [:TYLin] (UTC+8) from comment #13)\n> non-swappable carets are required per B2G text selection spec\n\nWell, since we now think that swappable carets is a better\nuser experience shouldn't we update that document?\n\n> If we want to match the convention on different platforms,\n> the cost might be unavoidable.\n\nSure, but is selection behavior merely built-in convention?\nor is it more like a feature of the app where apps can make\nimprovements?  To me, it seems a pity to deny users a better\nUX just because of conventions.  But, that's for UX people\nto decide I guess...", "author": "mats@mozilla.com", "id": 11313263, "time": "2016-04-09T23:14:25Z"}, {"text": "Comment on attachment 8738891\nMozReview Request: Bug 1168891 Part 1 - Refine two functions related to caret positioning.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/44741/diff/1-2/", "author": "aethanyc@gmail.com", "id": 11315120, "time": "2016-04-11T10:07:50Z"}, {"text": "Comment on attachment 8738892\nMozReview Request: Bug 1168891 Part 2 - Allow one caret to be dragged across the other caret.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/44743/diff/1-2/", "author": "aethanyc@gmail.com", "id": 11315121, "time": "2016-04-11T10:07:50Z"}, {"text": "https://reviewboard.mozilla.org/r/44741/#review41877\n\n> I think we still need this check (that we have at least one range).\n\nThe above \"GetCaretMode() == CaretMode::Selection\" should guarentee we have at least one range.\n\n> I think calling it \"new offset\" is confusing since it can be misread as \"the active caret's new position\" (which is what aOffsets is if I'm not mistaken).\n> \n> |pos| is one character forward/backward from the inactive caret, right?\n> \n> So this comment would be clearer as something like:\n> \"Move one character (in the direction of dir) from the inactive caret's position.  This is the limit for the active caret's new position.\"\n\nYou're right. |pos| will be used to get the limit for the active caret's new position. Your comment is better.\n\n> This comment would be clearer as:\n> \"Compare the active caret's new position (aOffsets) to the limit.\"\n\nFixed.\n\n> nit: \"cmp_pos\" doesn't follow naming conventions for local variables (which is camelCase).\n> \n> And looking ahead to the next patch, you use \"cmp_other_caret\" for basically the same ComparePoints call.\n> \n> It would be nice to have a description of the aOffsets param to RestrictCaretDraggingOffset in the header file.  As far as I can tell it's the new position of the caret that is being dragged(?) and the local variables node/nodeOffset is the position of the other (inactive) caret(?)\n\nAha! I must rename the variable cmp_pos after writing the test in Python ...\n\nYes. aOffsets is the new position of the active caret where the local variables node/nodeOffset is the position of the inactive caret.\n\n> This comment would be clearer as:\n> \"The active caret's position is past the limit, which we don't allow here.  So set it to the limit, resulting in one character being selected.\"\n> \n> Perhaps the code would be clearer if we renamed |pos| to |limit| ?\n> and |cmp_pos| to |cmpToLimit| ?\n\nAgree. Rename in the next patch.", "author": "aethanyc@gmail.com", "id": 11315122, "time": "2016-04-11T10:08:04Z"}, {"text": "https://reviewboard.mozilla.org/r/44743/#review41881\n\n> Wouldn't it be simpler to use a switch, like so:\n> \n> switch (cmp_other_caret) {\n>   case 0:\n>     // aOffset is the same as the offset of the other caret...\n>     return false;\n>   case 1:\n>     if (mActiveCaret == mFirstCaret.get()) {\n>       ...\n>     }\n>     break;\n>   case -1:\n>     if (mActiveCaret == mSecondCaret.get()) {\n>       ...\n>     }\n>     break;\n> }\n\nYes. I would be simpler to use a switch! BTW, in case 0: I feel it would clearer to set the aOffsets to |limit| then `return false` to make the caller to skip `HandleClick`. See my patch set 2.\n\n> I think this should be true by default, and then we should set it to false in case some platform needs that in the future.\n> \n> (When 'layout.accessiblecaret.enabled' is enabled in a Firefox desktop build, we should allow dragging across the other caret by default since that's how native selection works on all desktop platforms.)\n\nYou convinced me. Allowing dragging caret across other caret is closed to the built-in selection behavior on all desktop platform. I'll make it true by default.", "author": "aethanyc@gmail.com", "id": 11315123, "time": "2016-04-11T10:08:12Z"}, {"text": "Comment on attachment 8738891\nMozReview Request: Bug 1168891 Part 1 - Refine two functions related to caret positioning.\n\nhttps://reviewboard.mozilla.org/r/44741/#review42139", "author": "mats@mozilla.com", "id": 11317446, "time": "2016-04-11T23:59:17Z"}, {"text": "Comment on attachment 8738892\nMozReview Request: Bug 1168891 Part 2 - Allow one caret to be dragged across the other caret.\n\nhttps://reviewboard.mozilla.org/r/44743/#review42141\n\nLooks great!", "author": "mats@mozilla.com", "id": 11317448, "time": "2016-04-11T23:59:54Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/0fed9d8896b2\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/6915c6f22667", "author": "pulsebot@bots.tld", "id": 11317796, "time": "2016-04-12T03:12:59Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/0fed9d8896b2\nhttps://hg.mozilla.org/mozilla-central/rev/6915c6f22667", "author": "cbook@mozilla.com", "id": 11318711, "time": "2016-04-12T11:57:42Z"}, {"text": "Working beautifully on today's Nightly, thanks very much.", "author": "jh+bugzilla@buttercookie.de", "id": 11326311, "time": "2016-04-14T14:10:35Z"}], "cf_last_resolved": "2016-04-12T11:57:42Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2017-05-01T15:59:27Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1124074, 1230609, 988143, 1168847, 1263578, 1361072], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "Selection", "votes": 0, "cf_status_firefox48": "verified", "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla48", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "jh+bugzilla@buttercookie.de", "id": 470713, "name": "jh+bugzilla@buttercookie.de", "real_name": "Jan Henning [:JanH]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "aethanyc@gmail.com", "id": 503090, "name": "aethanyc@gmail.com", "real_name": "Ting-Yu Lin [:TYLin] (UTC+8) (Away, needinfo me if you need anything)"}, {"email": "brad@lassey.us", "id": 181004, "name": "brad@lassey.us", "real_name": "Brad Lassey [:blassey] (use needinfo?)"}, {"email": "huskyomega@gmail.com", "id": 494902, "name": "huskyomega@gmail.com", "real_name": "Omega Feng [:Omega] [:\u99ae\u65bc\u61cb]"}, {"email": "kbrosnan@mozilla.com", "id": 406670, "name": "kbrosnan@mozilla.com", "real_name": "Kevin Brosnan [:kbrosnan]"}, {"email": "mark.finkle@gmail.com", "id": 252194, "name": "mark.finkle@gmail.com", "real_name": "Mark Finkle (:mfinkle) (use needinfo?)"}, {"email": "markcapella@twcny.rr.com", "id": 433343, "name": "markcapella@twcny.rr.com", "real_name": "Mark Capella [:capella]"}, {"email": "mats@mozilla.com", "id": 5168, "name": "mats@mozilla.com", "real_name": "Mats Palmgren (:mats)"}, {"email": "mephisto41@gmail.com", "id": 473875, "name": "mephisto41@gmail.com", "real_name": "Morris Tseng [:mtseng] [:Morris] (Inactive)"}, {"email": "s.kaspari@gmail.com", "id": 472516, "name": "s.kaspari@gmail.com", "real_name": "Sebastian Kaspari (:sebastian)"}, {"email": "snorp@snorp.net", "id": 227322, "name": "snorp@snorp.net", "real_name": "James Willcox (:snorp) (jwillcox@mozilla.com)"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "markcapella@twcny.rr.com"}], "who": "markcapella@twcny.rr.com", "when": "2015-05-27T16:18:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tlin@mozilla.com"}], "who": "markcapella@twcny.rr.com", "when": "2015-05-27T16:26:53Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mtseng@mozilla.com, ofeng@mozilla.com"}], "who": "aethanyc@gmail.com", "when": "2015-05-28T04:04:11Z"}, {"changes": [{"removed": "UNCONFIRMED", "field_name": "status", "added": "NEW"}, {"removed": "", "field_name": "cc", "added": "kbrosnan@mozilla.com"}, {"removed": "0", "field_name": "is_confirmed", "added": "1"}, {"removed": "---", "field_name": "cf_blocking_fennec", "added": "?"}], "who": "kbrosnan@mozilla.com", "when": "2015-06-01T22:21:53Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "988143"}], "who": "kbrosnan@mozilla.com", "when": "2015-06-01T22:22:41Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1168847"}], "who": "margaret.leibovic@gmail.com", "when": "2015-06-02T19:06:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "blassey.bugs@lassey.us"}, {"removed": "?", "field_name": "cf_blocking_fennec", "added": "+"}], "who": "brad@lassey.us", "when": "2015-06-18T17:13:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mark.finkle@gmail.com"}], "who": "mark.finkle@gmail.com", "when": "2015-06-18T17:16:01Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1230609"}], "who": "jh+bugzilla@buttercookie.de", "when": "2015-12-04T19:30:39Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1252552"}], "who": "snorp@snorp.net", "when": "2016-03-01T18:29:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "snorp@snorp.net"}, {"removed": "1252552", "field_name": "depends_on", "added": ""}], "who": "snorp@snorp.net", "when": "2016-03-02T22:58:49Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "s.kaspari@gmail.com"}], "who": "s.kaspari@gmail.com", "when": "2016-04-04T17:16:17Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "tlin@mozilla.com"}], "who": "aethanyc@gmail.com", "when": "2016-04-06T12:48:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8738891, "added": "review?(mats@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8738892, "added": "review?(mats@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "mats@mozilla.com"}], "who": "aethanyc@gmail.com", "when": "2016-04-07T06:47:55Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mats@mozilla.com)", "attachment_id": 8738891, "added": ""}], "who": "mats@mozilla.com", "when": "2016-04-09T23:11:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mats@mozilla.com)", "attachment_id": 8738892, "added": ""}], "who": "mats@mozilla.com", "when": "2016-04-09T23:13:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8738891, "added": "review?(mats@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8738892, "added": "review?(mats@mozilla.com)"}], "who": "aethanyc@gmail.com", "when": "2016-04-11T10:07:50Z"}, {"changes": [{"removed": "Text Selection", "field_name": "component", "added": "Selection"}, {"removed": "41 Branch", "field_name": "version", "added": "Trunk"}, {"removed": "Firefox for Android", "field_name": "product", "added": "Core"}], "who": "aethanyc@gmail.com", "when": "2016-04-11T10:10:32Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1124074"}], "who": "aethanyc@gmail.com", "when": "2016-04-11T10:11:04Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1263578"}], "who": "aethanyc@gmail.com", "when": "2016-04-11T10:31:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mats@mozilla.com)", "attachment_id": 8738891, "added": "review+"}], "who": "mats@mozilla.com", "when": "2016-04-11T23:59:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mats@mozilla.com)", "attachment_id": 8738892, "added": "review+"}], "who": "mats@mozilla.com", "when": "2016-04-11T23:59:54Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla48"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-04-12 04:57:42"}, {"removed": "---", "field_name": "cf_status_firefox48", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2016-04-12T11:57:42Z"}, {"changes": [{"removed": "RESOLVED", "field_name": "status", "added": "VERIFIED"}, {"removed": "fixed", "field_name": "cf_status_firefox48", "added": "verified"}], "who": "jh+bugzilla@buttercookie.de", "when": "2016-04-14T14:10:35Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1283828"}], "who": "kanru@kanru.info", "when": "2016-07-01T11:50:06Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1361072"}], "who": "dholbert@mozilla.com", "when": "2017-05-01T15:59:27Z"}], "resolution": "FIXED", "op_sys": "Android", "cf_fx_points": "---", "cf_blocking_fennec": "+"}