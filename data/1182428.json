{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "jcoppeard@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-07-10T19:29:31Z", "type_id": 4, "creation_date": "2015-07-10T15:42:32Z", "id": 1206039, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8632134}, {"creator": "jcoppeard@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-07-14T18:32:42Z", "type_id": 4, "creation_date": "2015-07-13T13:13:16Z", "id": 1207052, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8632760}, {"creator": "cbook@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/plain", "id": 8634132}, {"creator": "sphink@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-07-22T12:12:24Z", "type_id": 4, "creation_date": "2015-07-22T00:11:30Z", "id": 1215067, "setter": "jcoppeard@mozilla.com"}], "content_type": "text/plain", "id": 8636878}, {"creator": "sphink@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-07-22T12:14:11Z", "type_id": 4, "creation_date": "2015-07-22T00:16:16Z", "id": 1215069, "setter": "jcoppeard@mozilla.com"}], "content_type": "text/plain", "id": 8636881}, {"creator": "sphink@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-07-22T12:20:32Z", "type_id": 4, "creation_date": "2015-07-22T00:18:27Z", "id": 1215070, "setter": "jcoppeard@mozilla.com"}], "content_type": "text/plain", "id": 8636882}, {"creator": "sphink@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-07-22T12:24:26Z", "type_id": 4, "creation_date": "2015-07-22T00:20:11Z", "id": 1215073, "setter": "jcoppeard@mozilla.com"}], "content_type": "text/plain", "id": 8636884}, {"creator": "sphink@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-07-22T12:24:52Z", "type_id": 4, "creation_date": "2015-07-22T00:22:01Z", "id": 1215074, "setter": "jcoppeard@mozilla.com"}], "content_type": "text/plain", "id": 8636885}], "classification": "Components", "creator": "jcoppeard@mozilla.com", "cc": ["cbook@mozilla.com", "jcoppeard@mozilla.com", "luke@mozilla.com", "sphink@gmail.com"], "depends_on": [], "creation_time": "2015-07-10T10:24:47Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Investigate refactoring bytecode compilation", "id": 1182428, "assigned_to_detail": {"email": "sphink@gmail.com", "id": 359004, "name": "sphink@gmail.com", "real_name": "Steve Fink [:sfink] [:s:]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "sphink@gmail.com", "comment_count": 26, "comments": [{"text": "Currently there are three functions in frontend/BytecodeCompiler.cpp that are take source as input and compile it to bytecode - CompileScript(), CompileLazyFunction() and CompileFunctionBody() - and there will soon be a fourth to compile modules.\n\nThese functions are all pretty monolithic and share much code, although they also have many differences.  This bug is to try to find a way to refactor this to allow adding CompileModule() without duplicating more code.", "author": "jcoppeard@mozilla.com", "id": 10478935, "time": "2015-07-10T10:24:47Z"}, {"text": "The first thing to notice is that CompileLazyFunction() is pretty different to the others and doesn't contain much common code, so I'm going to leave that.\n\nThe others have the following common steps that could be factored out:\n\n - create script source\n - source code compression\n - create syntax parser\n - create full parser\n\nThey also have these steps which although common aren't so easy to factor:\n\n - a loop to retry parsing if syntax parsing fails, which for scripts also compiles one statement at a time\n - creation of a bytecode emitter which happens before parsing for scripts and afterwards for function bodies", "author": "jcoppeard@mozilla.com", "id": 10479038, "time": "2015-07-10T10:49:41Z"}, {"text": "Created attachment 8632134\nauto-compilation-trace-logger\n\nAs a first step we can factor out the tracelogger code.", "author": "jcoppeard@mozilla.com", "id": 10479991, "time": "2015-07-10T15:42:32Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/cc263dfb7b13", "author": "pulsebot@bots.tld", "id": 10485154, "time": "2015-07-13T10:33:55Z"}, {"text": "Created attachment 8632760\nrefactor-bytecode-compilation\n\nThis patch adds a BytecodeCompiler class to hold common state and splits most of the compiler work into separate methods which can then be shared.  This roughly halves the size of compileScript() and compileFunctionBody().  This should all be code motion with no semantic changes.\n\nThe changes ended up being more drastic than expected, but hopefully this is better that what we had before.", "author": "jcoppeard@mozilla.com", "id": 10485616, "time": "2015-07-13T13:13:16Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/cc263dfb7b13", "author": "kwierso@gmail.com", "id": 10488738, "time": "2015-07-13T22:58:46Z"}, {"text": "Comment on attachment 8632760\nrefactor-bytecode-compilation\n\nReview of attachment 8632760:\n-----------------------------------------------------------------\n\nNice refactoring.\n\n::: js/src/frontend/BytecodeCompiler.cpp\n@@ +548,5 @@\n>  \n> +bool\n> +BytecodeCompiler::finish()\n> +{\n> +    return !maybeSourceCompressor || maybeSourceCompressor->complete();\n\nFor visual symmetry with maybeCompressSource(), perhaps rename this to maybeCompleteCompressSource().\n\n@@ +551,5 @@\n> +{\n> +    return !maybeSourceCompressor || maybeSourceCompressor->complete();\n> +}\n> +\n> +JSScript* BytecodeCompiler::compileScript(HandleObject scopeChain, HandleScript evalCaller,\n\n\\n after \"JScript*\"\n\n@@ +556,5 @@\n> +                                          unsigned staticLevel)\n> +{\n> +    if (!createScriptSource() ||\n> +        !maybeCompressSource() ||\n> +        !createParser())\n\nThese 3 appear together in all cases so perhaps you could fold them into one createSourceAndParser()?", "author": "luke@mozilla.com", "id": 10492890, "time": "2015-07-14T18:32:42Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/999b9a743bed", "author": "pulsebot@bots.tld", "id": 10496238, "time": "2015-07-15T10:51:34Z"}, {"text": "sorry had to back this out for hazard failures", "author": "cbook@mozilla.com", "id": 10497513, "time": "2015-07-15T14:53:09Z"}, {"text": "Created attachment 8634132\nhazard failures", "author": "cbook@mozilla.com", "id": 10497520, "time": "2015-07-15T14:53:28Z"}, {"text": "Backout:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/d693dbecbaaf", "author": "pulsebot@bots.tld", "id": 10497603, "time": "2015-07-15T15:03:00Z"}, {"text": "So the hazard analysis thinks the new BytecodeCompiler stack class is a GC pointer for several reasons:\n\nGCPointer: BytecodeCompiler\n  contains field 'script' of type class JS::Rooted<JSScript*>\n    contains field 'ptr' pointing to type JSScript\n      which is a GCThing because I said so\n  contains field 'startPosition' of type js::frontend::TokenStream::Position\n    contains field 'currentToken' of type js::frontend::Token\n      contains field 'u' of type js::frontend::Token:u\n        contains field 'name' pointing to type js::PropertyName\n          contains field 'field:0' of type JSAtom (probably via inheritance)\n            contains field 'field:0' of type JSFlatString (probably via inheritance)\n              contains field 'field:0' of type JSLinearString (probably via inheritance)\n                contains field 'field:0' of type JSString (probably via inheritance)\n                  which is a GCThing because I said so\n        contains field 'atom' pointing to type JSAtom\n    contains field 'lookaheadTokens' of type js::frontend::Token\n  contains field 'sourceObject' of type class JS::Rooted<js::ScriptSourceObject*>\n    contains field 'ptr' pointing to type js::ScriptSourceObject\n      contains field 'field:0' of type js::NativeObject (probably via inheritance)\n        contains field 'field:0' of type JSObject (probably via inheritance)\n          which is a GCThing because I said so\n        contains field 'slots_' pointing to type js::HeapSlot\n          contains field 'field:0' of type class js::BarrieredBase<JS::Value> (probably via inheritance)\n            contains field 'value' of type JS::Value\n              which is a GCPointer because I said so\n        contains field 'elements_' pointing to type js::HeapSlot\n        contains field 'shape_' of type class js::HeapPtr<js::Shape*>\n          contains field 'field:0' of type class js::BarrieredBase<js::Shape*> (probably via inheritance)\n            contains field 'value' pointing to type js::Shape\n              which is a GCThing because I said so\n  contains field 'enclosingStaticScope' of type class JS::Rooted<js::ScopeObject*>\n    contains field 'ptr' pointing to type js::ScopeObject\n      contains field 'field:0' of type js::NativeObject (probably via inheritance)\n\nThe 'startPosition' field I understand - we contain something that has a JSAtom*.  This is actually safe because we also contain an AutoKeepAtoms instance but the analysis doesn't know this.\n\nI don't understand why containing a Rooted<T> is a reason though.  Other classes (e.g. CompileOptions) do this and don't get treated as GC pointers.  Steve, do you know why this is?", "author": "jcoppeard@mozilla.com", "id": 10497981, "time": "2015-07-15T16:03:32Z"}, {"text": "(In reply to Jon Coppeard (:jonco) from comment #11)\n> So the hazard analysis thinks the new BytecodeCompiler stack class is a GC\n> pointer for several reasons:\n> \n> The 'startPosition' field I understand - we contain something that has a\n> JSAtom*.  This is actually safe because we also contain an AutoKeepAtoms\n> instance but the analysis doesn't know this.\n> \n> I don't understand why containing a Rooted<T> is a reason though.  Other\n> classes (e.g. CompileOptions) do this and don't get treated as GC pointers. \n> Steve, do you know why this is?\n\nYou are correct. That's a bug. But it *might* only be a bug in the gcTypes.txt reporting? As in, it may be computing the set of types correctly (and the JSAtom* correctly catches this one), but reporting the reasons incorrectly. Which is kind of weird, because it records the reasons while it's computing the set of types in the first place. So I'll need to look at this, but hopefully if you clear up the JSAtom* one then it'll work for your case?\n\nFiled bug 1184199 for this. If it turns out that \"fixing\" the JSAtom* does not clear this up, then you can mark it as blocking this bug. (Quotes around fixing given that JSAtoms don't currently need to be rooted in the first place.)", "author": "sphink@gmail.com", "id": 10498246, "time": "2015-07-15T16:47:42Z"}, {"text": "Created attachment 8636878\nImprove naming\n\nSorry, this is really two changes in one. It renames depth -> typePtrLevel (the ptrdness of the typeName parameter) and ptrdness -> fieldPtrLevel (the ptrdness of the 'child' field parameter).\n\nBut it also fixes places where the child,why were swapped (child == field name, why == field type, and I probably ought to rename those too.) That causes the isRooted* calls to be applied to the right things, which fixes the bogohazard here (where BytecodeCompiler was incorrectly believed to be a GCPointer.)\n\nAt least, I *think* it was this patch that fixed it. It might have been a later one.", "author": "sphink@gmail.com", "id": 10521982, "time": "2015-07-22T00:11:30Z"}, {"text": "Created attachment 8636881\nRecognize more rooted type names\n\nThis patch should look familiar. I used different names, but it's very similar to what you posted to the other bug.\n\nAlthough it doesn't touch analyzeRoots.js, it changes what it's doing by redefining isRootedTypeName to accept *any* rooted type, regardless of ptrdness. That causes more things to flow into the \"unnecessary roots\" branch, but otherwise has little effect -- in order to be considered a hazard, a variable type must pass the isUnrootedType check, and that does not overlap with the isRootedType check.\n\nIn summary, this adds in some missing \"unnecessary roots\" reports, which we never look at anyway. Oh, and it means the code sees more tyeps of code, which broke a couple of things and I just realized my patch stack is in the wrong order. I want to land fixes before breakages. :-)", "author": "sphink@gmail.com", "id": 10521990, "time": "2015-07-22T00:16:16Z"}, {"text": "Created attachment 8636882\nAccept more edge types in edgeCanGC\n\nThis fixes the breakage in the patch I just posted. (I've reordered them in my stack, so I'll land in the right order.) As a result of passing more types through isRootedType, the analysis encountered several code patterns that previously had not been seen and caused assert failures in edgeCanGC. So this generalizes edgeCanGC to handle them. (They're all cases where we have function pointers in args, locals, or temporaries.)", "author": "sphink@gmail.com", "id": 10521994, "time": "2015-07-22T00:18:27Z"}, {"text": "Created attachment 8636884\nFix the ObjectGroup hazards\n\nAdding things like TypeSet::Type to the set of GCPointers is going to introduce two hazards. This fixes them. ('elementType' and 'key' are both live across a GC.) The new rooting infrastructure was very helpful here, especially since Terrence just un-implemented Rooted<TypeSet::Type>!", "author": "sphink@gmail.com", "id": 10522004, "time": "2015-07-22T00:20:11Z"}, {"text": "Created attachment 8636885\nConsider TypeSet stuff to be GCPointers, since they can contain them\n\nAnnotate TypeSet stuff. My local shell-only run, at least, has no hazards with the previous patch and this one applied.", "author": "sphink@gmail.com", "id": 10522007, "time": "2015-07-22T00:22:01Z"}, {"text": "Comment on attachment 8636878\nImprove naming\n\nReview of attachment 8636878:\n-----------------------------------------------------------------\n\n::: js/src/devtools/rootAnalysis/computeGCTypes.js\n@@ +85,2 @@\n>  {\n> +    //printErr(`${indent}${typeName}${stars(typePtrLevel)} may be a gctype/ptr because of its child '${child}' of type ${why}${stars(fieldPtrLevel)}`);\n\nYou probably meant to remove this.", "author": "jcoppeard@mozilla.com", "id": 10523797, "time": "2015-07-22T12:12:24Z"}, {"text": "Comment on attachment 8636881\nRecognize more rooted type names\n\nReview of attachment 8636881:\n-----------------------------------------------------------------\n\nLooks good!\n\n::: js/src/devtools/rootAnalysis/annotations.js\n@@ +271,5 @@\n> +{\n> +    if (name == \"JSAddonId\")\n> +    {\n> +        return true;\n> +    }\n\nNit: braces not needed for single line if statement.", "author": "jcoppeard@mozilla.com", "id": 10523799, "time": "2015-07-22T12:14:11Z"}, {"text": "Comment on attachment 8636882\nAccept more edge types in edgeCanGC\n\nReview of attachment 8636882:\n-----------------------------------------------------------------\n\n::: js/src/devtools/rootAnalysis/analyzeRoots.js\n@@ +285,2 @@\n>      var callee = edge.Exp[0];\n> +    while (true) {\n\nWould it be simpler to do this?\n\n  while (callee.Kind == \"Drf\")\n    callee = callee.Exp[0];\n\n@@ +298,5 @@\n> +            return indirectCallCannotGC(functionName, varName) ? null : \"*\" + varName;\n> +        }\n> +\n> +        if (callee.Kind == \"Fld\") {\n> +            //var field = callee.Exp[0].Field;\n\nPlease remove commented out code.\n\n@@ +301,5 @@\n> +        if (callee.Kind == \"Fld\") {\n> +            //var field = callee.Exp[0].Field;\n> +            var field = callee.Field;\n> +            if (!field)\n> +                printErr(JSON.stringify(callee, null, 4));\n\nShould probably print a meaningful error here.", "author": "jcoppeard@mozilla.com", "id": 10523815, "time": "2015-07-22T12:20:32Z"}, {"text": "(In reply to Jon Coppeard (:jonco) from comment #20)\n> Comment on attachment 8636882\n> Accept more edge types in edgeCanGC\n> \n> Review of attachment 8636882:\n> -----------------------------------------------------------------\n> \n> ::: js/src/devtools/rootAnalysis/analyzeRoots.js\n> @@ +285,2 @@\n> >      var callee = edge.Exp[0];\n> > +    while (true) {\n> \n> Would it be simpler to do this?\n> \n>   while (callee.Kind == \"Drf\")\n>     callee = callee.Exp[0];\n\nUm... yes. But only an idiot wouldn't have seen that. Are you calling me an idiot?\n\n(Fixed, thanks.)", "author": "sphink@gmail.com", "id": 10531079, "time": "2015-07-23T19:39:17Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/237d71f50a16\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/15ee99905e6d\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/1805b2713be9\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/d08ebf664561\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/0599431ae5b1", "author": "pulsebot@bots.tld", "id": 10532184, "time": "2015-07-23T23:41:09Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/cece92779e6e", "author": "pulsebot@bots.tld", "id": 10533894, "time": "2015-07-24T11:51:51Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/e9b2910c25f9", "author": "pulsebot@bots.tld", "id": 10534064, "time": "2015-07-24T12:56:51Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/237d71f50a16\nhttps://hg.mozilla.org/mozilla-central/rev/15ee99905e6d\nhttps://hg.mozilla.org/mozilla-central/rev/1805b2713be9\nhttps://hg.mozilla.org/mozilla-central/rev/d08ebf664561\nhttps://hg.mozilla.org/mozilla-central/rev/0599431ae5b1\nhttps://hg.mozilla.org/mozilla-central/rev/cece92779e6e\nhttps://hg.mozilla.org/mozilla-central/rev/e9b2910c25f9", "author": "kwierso@gmail.com", "id": 10535839, "time": "2015-07-24T20:11:58Z"}], "cf_last_resolved": "2015-07-27T08:49:08Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2015-07-27T08:49:08Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript Engine", "votes": 0, "groups": [], "cf_status_firefox60": "---", "cf_status_firefox41": "---", "target_milestone": "mozilla42", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "jcoppeard@mozilla.com", "id": 443194, "name": "jcoppeard@mozilla.com", "real_name": "Jon Coppeard (:jonco) (PTO until 13th March)"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "cbook@mozilla.com", "id": 277293, "name": "cbook@mozilla.com", "real_name": "Carsten Book [:Tomcat]"}, {"email": "jcoppeard@mozilla.com", "id": 443194, "name": "jcoppeard@mozilla.com", "real_name": "Jon Coppeard (:jonco) (PTO until 13th March)"}, {"email": "luke@mozilla.com", "id": 347312, "name": "luke@mozilla.com", "real_name": "Luke Wagner [:luke]"}, {"email": "sphink@gmail.com", "id": 359004, "name": "sphink@gmail.com", "real_name": "Steve Fink [:sfink] [:s:]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "luke@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8632134, "added": "review?(luke@mozilla.com)"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-10T15:42:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8632134, "added": "review+"}], "who": "luke@mozilla.com", "when": "2015-07-10T19:29:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8632760, "added": "review?(luke@mozilla.com)"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-13T13:13:16Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla42"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-07-13 15:58:46"}, {"removed": "---", "field_name": "cf_status_firefox42", "added": "fixed"}], "who": "kwierso@gmail.com", "when": "2015-07-13T22:58:46Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "leave-open"}, {"removed": "RESOLVED", "field_name": "status", "added": "REOPENED"}, {"removed": "FIXED", "field_name": "resolution", "added": ""}], "who": "jcoppeard@mozilla.com", "when": "2015-07-14T11:58:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8632760, "added": "review+"}], "who": "luke@mozilla.com", "when": "2015-07-14T18:32:42Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cbook@mozilla.com, jcoppeard@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jcoppeard@mozilla.com)"}], "who": "cbook@mozilla.com", "when": "2015-07-15T14:53:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "sphink@gmail.com"}, {"removed": "needinfo?(jcoppeard@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(sphink@gmail.com)"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-15T16:03:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8636878, "added": "review?(jcoppeard@mozilla.com)"}], "who": "sphink@gmail.com", "when": "2015-07-22T00:11:30Z"}, {"changes": [{"removed": "REOPENED", "field_name": "status", "added": "ASSIGNED"}, {"removed": "jcoppeard@mozilla.com", "field_name": "assigned_to", "added": "sphink@gmail.com"}], "who": "sphink@gmail.com", "when": "2015-07-22T00:11:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8636881, "added": "review?(jcoppeard@mozilla.com)"}], "who": "sphink@gmail.com", "when": "2015-07-22T00:16:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8636882, "added": "review?(jcoppeard@mozilla.com)"}], "who": "sphink@gmail.com", "when": "2015-07-22T00:18:27Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8636884, "added": "review?(jcoppeard@mozilla.com)"}], "who": "sphink@gmail.com", "when": "2015-07-22T00:20:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8636885, "added": "review?(jcoppeard@mozilla.com)"}], "who": "sphink@gmail.com", "when": "2015-07-22T00:22:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jcoppeard@mozilla.com)", "attachment_id": 8636878, "added": "review+"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-22T12:12:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jcoppeard@mozilla.com)", "attachment_id": 8636881, "added": "review+"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-22T12:14:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jcoppeard@mozilla.com)", "attachment_id": 8636882, "added": "review+"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-22T12:20:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jcoppeard@mozilla.com)", "attachment_id": 8636884, "added": "review+"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-22T12:24:26Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jcoppeard@mozilla.com)", "attachment_id": 8636885, "added": "review+"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-22T12:24:52Z"}, {"changes": [{"removed": "needinfo?(sphink@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "sphink@gmail.com", "when": "2015-07-23T19:39:17Z"}, {"changes": [{"removed": "leave-open", "field_name": "keywords", "added": ""}, {"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "2015-07-13 15:58:46", "field_name": "cf_last_resolved", "added": "2015-07-27 01:49:08"}], "who": "jcoppeard@mozilla.com", "when": "2015-07-27T08:49:08Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}