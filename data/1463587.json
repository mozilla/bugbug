{"cf_tracking_thunderbird_esr52": "---", "status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "kmaglione+bmo@mozilla.com", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, {"email": "erahm@mozilla.com", "id": 496127, "name": "erahm@mozilla.com", "real_name": "Eric Rahm [:erahm] (please no mozreview requests)"}, {"email": "jld@mozilla.com", "id": 462836, "name": "jld@mozilla.com", "real_name": "Jed Davis [:jld] (\u23f0UTC-6)"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}], "cf_last_resolved": null, "attachments": [], "votes": 1, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 4, "comments": [{"text": "Right now, initial process data is sent as a single structured-cloned blob, which is eagerly decoded at process startup. While that's fine for a small amount of data needed at process startup, it's bad for larger amounts of data that need to be available synchronously when necessary, but may not be needed all at one, or in every process. It's also not great for synchronizing data updates across processes.\n\nThe particular use case I'm thinking of is extension locale data. The extension l10n APIs are synchronous, which means that we need to have the data available in case any extension needs it. But we may never load an extension content script in a process, and if we do, that content script may never need l10n data.\n\nIf we put that data in a shared-memory key-value store, though, we could decode it when needed, and throw it away when we're unlikely to need it again, without having to worry about sync IPC overhead.", "author": "kmaglione+bmo@mozilla.com", "id": 13298008, "time": "2018-05-22T22:02:50Z"}, {"text": "There are some sandboxing implications here \u2014 we don't want one content process to be able to overwrite the shared memory and attack other processes.\n\nOn Windows it looks like DuplicateHandle can drop write access, so if it actually does that and there isn't some obscure way for the child process to give itself back those access rights (DuplicateHandle does have some footguns, but I think that's not one of them?), then that would work.\n\nUnix is harder.  If the data won't change, then it could be mapped MAP_PRIVATE (and make absolutely sure the fd is closed before the process starts handling hostile data), but given the verbiage about \u201csynchronizing data updates\u201d it may need to be writable by the parent.  In that case, the only way to do this as far as I know is to create a temporary file and open it twice, as read/write and read-only, before unlinking it.  This also excludes optimizations like Linux's memfd_create and FreeBSD's SHM_ANON, which create truly anonymous shared memory.  (For memfd_create there's F_SEAL_WRITE but that applies to the file, not individual file descriptors.)\n\nOn MacOS we use Mach shared memory in IPC, and offhand I have no idea how that works as far as access rights, but POSIX APIs are also available.\n\nAndroid may be a problem \u2014 the recommended API, ashmem, is similar to SHM_ANON/memfd_create and doesn't seem able to allow read-only access to a writable memory area.  There is ASHMEM_SET_PROT_MASK, but that looks like it applies to the file; it might not check for consistency with existing mappings like F_SEAL_WRITE does, but if so that might also be considered a bug that gets fixed someday.  I don't know if we'd have access to someplace where we can write temporary files.  We also don't have sandboxing for GeckoView yet, but we'll probably need to deal with this at some point.", "author": "jld@mozilla.com", "id": 13298371, "time": "2018-05-23T01:18:22Z"}, {"text": "(In reply to Jed Davis [:jld] (\u23f0UTC-6) from comment #1)\n> There are some sandboxing implications here \u2014 we don't want one content\n> process to be able to overwrite the shared memory and attack other processes.\n\nAgreed. My intention is for the content side to be read-only, and for the data to only ever be updated in the parent process.\n\n> Unix is harder.  If the data won't change, then it could be mapped\n> MAP_PRIVATE (and make absolutely sure the fd is closed before the process\n> starts handling hostile data), but given the verbiage about \u201csynchronizing\n> data updates\u201d it may need to be writable by the parent.\n\nUnix isn't that hard. We already do this in places (e.g., the script preloader). My intention was for updates to happen in the parent process and send a new blob of the entire key-value store to all child processes, which would then drop their references to the old blob.\n\nOr something along those lines. I'm expecting most keys to be smaller than a single page, so I don't think piecemeal updates are a good idea.\n\n> Android may be a problem \u2014 the recommended API, ashmem, is similar to\n> SHM_ANON/memfd_create and doesn't seem able to allow read-only access to a\n> writable memory area.\n\nFor now, I'm not super worried about Android. When we figure out what the e10s situation will be there, we can figure out how this should be handled, but for now, I'm not sure it should be a concern.", "author": "kmaglione+bmo@mozilla.com", "id": 13298391, "time": "2018-05-23T01:26:37Z"}, {"text": "(In reply to Kris Maglione [:kmag] (long backlog; ping on IRC if you're blocked) from comment #2)\n> Unix isn't that hard. We already do this in places (e.g., the script\n> preloader). My intention was for updates to happen in the parent process and\n> send a new blob of the entire key-value store to all child processes, which\n> would then drop their references to the old blob.\n> \n> Or something along those lines. I'm expecting most keys to be smaller than a\n> single page, so I don't think piecemeal updates are a good idea.\n\nThat does simplify things, and thanks for the pointer to the script preloader / AutoMemMap, in which you're already doing the thing I was suggesting (and which I'd assumed would be a feature request for IPC shared memory, because I didn't know there was already code for it).", "author": "jld@mozilla.com", "id": 13350161, "time": "2018-05-24T14:56:58Z"}], "id": 1463587, "priority": "--", "cc": ["continuation@gmail.com", "erahm@mozilla.com", "jld@mozilla.com", "nfroyd@mozilla.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1436250], "qa_contact": "", "creation_time": "2018-05-22T22:02:50Z", "cf_status_firefox_esr52": "---", "component": "IPC", "assigned_to_detail": {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, "whiteboard": "", "mentors": [], "summary": "Refactor initial process data into a shared memory key-value store that lazily decodes", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-24T14:56:58Z", "assigned_to": "kmaglione+bmo@mozilla.com", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "jld@mozilla.com"}], "who": "jld@mozilla.com", "when": "2018-05-23T01:18:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}], "who": "nfroyd@mozilla.com", "when": "2018-05-23T13:58:11Z"}], "resolution": "", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}