{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "dteller@mozilla.com", "mentors_detail": [], "depends_on": [1377007, 1451826], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "wontfix", "cf_status_firefox59": "?", "keywords": [], "summary": "[BinAST] Compile BinAST to bytecode", "cf_last_resolved": "2018-05-01T10:22:13Z", "attachments": [{"creator": "efaustbmo@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-30T21:50:44Z", "type_id": 4, "creation_date": "2018-04-28T00:50:31Z", "id": 1750207, "setter": "jwalden+bmo@mit.edu"}, {"status": "+", "name": "review", "modification_date": "2018-04-30T12:35:33Z", "type_id": 4, "creation_date": "2018-04-28T00:50:31Z", "id": 1750208, "setter": "dteller@mozilla.com"}, {"status": "+", "name": "review", "modification_date": "2018-04-30T20:52:26Z", "type_id": 4, "creation_date": "2018-04-30T20:16:45Z", "id": 1750869, "setter": "jorendorff@mozilla.com"}], "content_type": "text/plain", "id": 8971745}, {"creator": "efaustbmo@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2018-04-30T12:44:00Z", "type_id": 607, "creation_date": "2018-04-30T12:44:00Z", "id": 1750581, "setter": "dteller@mozilla.com"}], "content_type": "text/plain", "id": 8971746}, {"creator": "efaustbmo@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-30T21:50:51Z", "type_id": 4, "creation_date": "2018-04-30T18:30:09Z", "id": 1750805, "setter": "jwalden+bmo@mit.edu"}, {"status": "+", "name": "review", "modification_date": "2018-04-30T21:12:07Z", "type_id": 4, "creation_date": "2018-04-30T20:17:35Z", "id": 1750870, "setter": "jorendorff@mozilla.com"}], "content_type": "text/plain", "id": 8972096}, {"creator": "efaustbmo@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-30T22:44:08Z", "type_id": 4, "creation_date": "2018-04-30T22:37:53Z", "id": 1750947, "setter": "jwalden+bmo@mit.edu"}], "content_type": "text/plain", "id": 8972181}], "votes": 1, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 17, "comments": [{"text": "", "author": "dteller@mozilla.com", "id": 12770619, "time": "2017-10-18T17:30:53Z"}, {"text": "https://wiki.mozilla.org/Bug_Triage/Projects/Bug_Handling/Bug_Husbandry#Move_fix-optionals", "author": "bug-husbandry-bot@mozilla.bugs", "id": 12974434, "time": "2018-01-16T23:25:54Z"}, {"text": "Created attachment 8971745\nPart 1: Implement CompileGlobalBinASTScript", "author": "efaustbmo@gmail.com", "id": 13239505, "time": "2018-04-28T00:50:31Z"}, {"text": "Created attachment 8971746\nPart 2: As a convenience, allow running multipart binjs files from the shell cli", "author": "efaustbmo@gmail.com", "id": 13239506, "time": "2018-04-28T00:51:11Z"}, {"text": "Comment on attachment 8971745\nPart 1: Implement CompileGlobalBinASTScript\n\nReview of attachment 8971745:\n-----------------------------------------------------------------\n\nr+ on everything except the BytecodeCompiler, which I don't know enough to review.", "author": "dteller@mozilla.com", "id": 13242949, "time": "2018-04-30T12:35:33Z"}, {"text": "Comment on attachment 8971746\nPart 2: As a convenience, allow running multipart binjs files from the shell cli\n\nReview of attachment 8971746:\n-----------------------------------------------------------------\n\n::: js/src/shell/js.cpp\n@@ +853,5 @@\n> +           .setNoScriptRval(true);\n> +\n> +    Vector<uint8_t> fileContents(cx);\n> +    for (;;) {\n> +        int c = getc(file);\n\nThat looks unreasonably slow.\n\nAny chance you could read the entire file, as we do in os.file.readFile? https://searchfox.org/mozilla-central/source/js/src/shell/OSObject.cpp#158", "author": "dteller@mozilla.com", "id": 13242969, "time": "2018-04-30T12:44:00Z"}, {"text": "Created attachment 8972096\nPart 2 (take 2): As a convenience, allow invoking BinAST from the shell\n\nThis is kinda doubling down against the previous review feedback (which was totally reasonable), but it's \"no worse\" than the other guy had it.\n\nUse the identical mechanism to reading JS files from shell to read BinAST.", "author": "efaustbmo@gmail.com", "id": 13243952, "time": "2018-04-30T18:30:09Z"}, {"text": "Comment on attachment 8971745\nPart 1: Implement CompileGlobalBinASTScript\n\nReview of attachment 8971745:\n-----------------------------------------------------------------\n\nIt's disappointing that this complex setup must be repeated. I don't see a better way, but there's further annoyance ahead when you integrate this with off-thread parsing. :-\\\n\n::: js/src/frontend/BytecodeCompiler.cpp\n@@ +600,5 @@\n> +\n> +    auto parsed = parser.parse(src);\n> +\n> +    if (parsed.isErr())\n> +        return nullptr;\n\nBetter:\n\n    ParseNode* pn;\n    JS_TRY_VAR_OR_RETURN_NULL(cx, pn, parser.parse(src));\n\nThis takes care of the error check, early return, and unwrap, and eliminates a temporary.", "author": "jorendorff@mozilla.com", "id": 13244679, "time": "2018-04-30T20:52:26Z"}, {"text": "Comment on attachment 8972096\nPart 2 (take 2): As a convenience, allow invoking BinAST from the shell\n\nReview of attachment 8972096:\n-----------------------------------------------------------------\n\nr=me with misgivings.\n\n::: js/src/jsapi.cpp\n@@ -3886,5 @@\n> -}\n> -\n> -namespace {\n> -\n> -class AutoFile\n\nThis code is so bad that I hate to see it in a header file. It could lead to other people thinking it's OK to use it.\n\nConsider leaving AutoFile where it is (since ReadCompleteFile does not need it).\n\n@@ +4042,4 @@\n>      if (!ReadCompleteFile(cx, fp, buffer))\n>          return false;\n>  \n> +    return ::Compile(cx, options, reinterpret_cast<char*>(buffer.begin()), buffer.length(), script);\n\nExplicitly deferring to Waldo on whether this reinterpret_cast is kosher.\n\n@@ +4764,4 @@\n>  \n>      CompileOptions options(cx, optionsArg);\n>      options.setFileAndLine(filename, 1);\n> +    return Evaluate(cx, options, reinterpret_cast<char*>(buffer.begin()), buffer.length(), rval);\n\nAnd here.\n\n::: js/src/shell/js.cpp\n@@ +848,5 @@\n> +static MOZ_MUST_USE bool\n> +RunBinAST(JSContext* cx, const char* filename, FILE* file)\n> +{\n> +    CompileOptions options(cx);\n> +    options.setFileAndLine(filename, 0)\n\nIs this right? Usually files start at line 1, and saying 0 instead has been kind of a classic mistake for us...\n\n@@ +1313,5 @@\n>                  return false;\n> +            break;\n> +#if defined(JS_BUILD_BINAST)\n> +          case FileBinAST:\n> +            if (!RunBinAST(cx, filename, file))\n\nConsider plumbing this one through jsapi.h the same way as the others, which would eliminate the need for moving ReadCompleteFile. I would love to keep that private to jsapi.cpp.", "author": "jorendorff@mozilla.com", "id": 13244741, "time": "2018-04-30T21:12:07Z"}, {"text": "Comment on attachment 8971745\nPart 1: Implement CompileGlobalBinASTScript\n\nReview of attachment 8971745:\n-----------------------------------------------------------------\n\n::: js/src/frontend/BytecodeCompiler.cpp\n@@ +586,5 @@\n> +    if (!usedNames.init())\n> +        return nullptr;\n> +\n> +    RootedObject sourceObj(cx, CreateScriptSourceObject(cx, options));\n> +\n\nBlank lines between decl/fallible thing and check-of-fallibility is not SpiderMonkey style, even tho it seems to be ubiquitous in this function.\n\n@@ +590,5 @@\n> +\n> +    if (!sourceObj)\n> +        return nullptr;\n> +\n> +    RootedScript script(cx, JSScript::Create(cx, options, sourceObj, 0, src.length(), 0, src.length()));\n\nI am going to pretend those arguments that I'd have thought only made sense in the actual-code context are the right ones.\n\n::: js/src/frontend/BytecodeCompiler.h\n@@ +40,5 @@\n> +\n> +JSScript*\n> +CompileGlobalBinASTScript(JSContext *cx, LifoAlloc& alloc,\n> +                          const ReadOnlyCompileOptions& options,\n> +                          Vector<uint8_t> &src);\n\n*/& by type names.", "author": "jwalden+bmo@mit.edu", "id": 13244852, "time": "2018-04-30T21:50:44Z"}, {"text": "Comment on attachment 8972096\nPart 2 (take 2): As a convenience, allow invoking BinAST from the shell\n\nReview of attachment 8972096:\n-----------------------------------------------------------------\n\n::: js/src/frontend/BytecodeCompiler.h\n@@ +41,4 @@\n>  JSScript*\n>  CompileGlobalBinASTScript(JSContext *cx, LifoAlloc& alloc,\n>                            const ReadOnlyCompileOptions& options,\n> +                          uint8_t* src, size_t len);\n\nmozilla::Span<uint8_t> might be nice for this.\n\n::: js/src/jsapi.cpp\n@@ +4042,4 @@\n>      if (!ReadCompleteFile(cx, fp, buffer))\n>          return false;\n>  \n> +    return ::Compile(cx, options, reinterpret_cast<char*>(buffer.begin()), buffer.length(), script);\n\nYou can reinterpret any C++ data at all as char or unsigned char, so this is kosher.  Frowny perhaps, but kosher.\n\nIs it necessary that it be non-const?  Tacking on a const here and below would be nice.\n\n::: js/src/util/ReadFile.h\n@@ +12,5 @@\n> +#include \"js/Vector.h\"\n> +\n> +namespace js {\n> +\n> +typedef Vector<uint8_t, 8, TempAllocPolicy> FileContents;\n\nusing!", "author": "jwalden+bmo@mit.edu", "id": 13244853, "time": "2018-04-30T21:50:51Z"}, {"text": "Created attachment 8972181\nPart 2 (take 3): Take Jason's feedback to heart. Diff from results of last patch.\n\nDon't factor out a new file. Instead, add functions to JSAPI that we'll need to browser integration anyways...", "author": "efaustbmo@gmail.com", "id": 13244994, "time": "2018-04-30T22:37:53Z"}, {"text": "Comment on attachment 8972181\nPart 2 (take 3): Take Jason's feedback to heart. Diff from results of last patch.\n\nReview of attachment 8972181:\n-----------------------------------------------------------------\n\n::: js/src/jsapi.cpp\n@@ +4236,5 @@\n> +    CHECK_REQUEST(cx);\n> +\n> +    script.set(frontend::CompileGlobalBinASTScript(cx, cx->tempLifoAlloc(), options, buf, length));\n> +\n> +    return script != nullptr;\n\nSeems like this would be better returning its JSScript* directly.\n\n::: js/src/jsapi.h\n@@ +4238,5 @@\n> +             FILE* file, JS::MutableHandleScript script);\n> +\n> +extern JS_PUBLIC_API(bool)\n> +DecodeBinAST(JSContext* cx, const ReadOnlyCompileOptions& options,\n> +             const uint8_t* buf, size_t length, JS::MutableHandleScript script);\n\nIMO it would be good for these functions to be in js/public/BinAST.h rather than accreting onto jsapi.h.\n\n::: js/src/shell/js.cpp\n@@ +857,4 @@\n>  \n> +        if (!JS::DecodeBinAST(cx, options, file, &script))\n> +            return false;\n> +        MOZ_ASSERT(script);\n\nThis seems like a reasonably elegant formulation of the way you do the thing.", "author": "jwalden+bmo@mit.edu", "id": 13245008, "time": "2018-04-30T22:44:08Z"}, {"text": "Pushed by efaustbmo@gmail.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/1c19a65b35f7\nPart 1: Implement CompileGlobalBinASTScript. (r=Waldo, r=Yoric, r=jorendorff)\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/f7ad9a51e45b\nPart 2: Allow running BinAST files from shell CLI. (r=Waldo)", "author": "pulsebot@bots.tld", "id": 13245120, "time": "2018-05-01T00:08:32Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/1c19a65b35f7\nhttps://hg.mozilla.org/mozilla-central/rev/f7ad9a51e45b", "author": "apavel@mozilla.com", "id": 13245735, "time": "2018-05-01T10:22:13Z"}, {"text": "This seems like a huge change to land during a code freeze. Is there any reason this can't wait until after next week's version bump?", "author": "ryanvm@gmail.com", "id": 13248497, "time": "2018-05-02T12:57:02Z"}, {"text": "As discussed on irc, this bug is all behind ifdefs, so it shouldn't have frightening vibes for release.", "author": "efaustbmo@gmail.com", "id": 13253157, "time": "2018-05-03T20:02:52Z"}], "id": 1409815, "priority": "P3", "cc": ["efaustbmo@gmail.com", "jcoppeard@mozilla.com", "jorendorff@mozilla.com", "jwalden+bmo@mit.edu", "luke@mozilla.com", "nihsanullah@invalid.bugs", "nissan4321@gmail.com", "ryanvm@gmail.com", "tcampbell@mozilla.com", "Tobias.Marty@gmx.de"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1349917, 1451344, 1455547, 1454352], "qa_contact": "", "creation_time": "2017-10-18T17:30:53Z", "cf_status_firefox_esr52": "---", "component": "JavaScript Engine", "assigned_to_detail": {"email": "efaustbmo@gmail.com", "id": 442736, "name": "efaustbmo@gmail.com", "real_name": "Eric Faust [:efaust]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "fixed", "cf_status_firefox60": "---", "target_milestone": "mozilla61", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "dteller@mozilla.com", "id": 181388, "name": "dteller@mozilla.com", "real_name": "David Teller [:Yoric] (please use \"needinfo\")"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "efaustbmo@gmail.com", "id": 442736, "name": "efaustbmo@gmail.com", "real_name": "Eric Faust [:efaust]"}, {"email": "jcoppeard@mozilla.com", "id": 443194, "name": "jcoppeard@mozilla.com", "real_name": "Jon Coppeard (:jonco)"}, {"email": "jorendorff@mozilla.com", "id": 281791, "name": "jorendorff@mozilla.com", "real_name": "Jason Orendorff [:jorendorff]"}, {"email": "jwalden+bmo@mit.edu", "id": 83595, "name": "jwalden+bmo@mit.edu", "real_name": "Jeff Walden [:Waldo]"}, {"email": "luke@mozilla.com", "id": 347312, "name": "luke@mozilla.com", "real_name": "Luke Wagner [:luke]"}, {"email": "nihsanullah@invalid.bugs", "id": 441971, "name": "nihsanullah@invalid.bugs", "real_name": "Naveed Ihsanullah [:naveed]"}, {"email": "nissan4321@gmail.com", "id": 414417, "name": "nissan4321@gmail.com", "real_name": "Mikel"}, {"email": "ryanvm@gmail.com", "id": 75935, "name": "ryanvm@gmail.com", "real_name": "Ryan VanderMeulen [:RyanVM]"}, {"email": "tcampbell@mozilla.com", "id": 586681, "name": "tcampbell@mozilla.com", "real_name": "Ted Campbell [:tcampbell]"}, {"email": "Tobias.Marty@gmx.de", "id": 572549, "name": "Tobias.Marty@gmx.de", "real_name": "TMart"}], "cf_has_str": "---", "alias": "binjs-bytecode", "dupe_of": null, "flags": [], "last_change_time": "2018-05-03T20:02:52Z", "assigned_to": "efaustbmo@gmail.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "luke@mozilla.com"}], "who": "luke@mozilla.com", "when": "2017-10-18T18:01:54Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1349917"}], "who": "dteller@mozilla.com", "when": "2017-10-18T19:17:20Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P3"}, {"removed": "", "field_name": "cc", "added": "nihsanullah@mozilla.com"}, {"removed": "---", "field_name": "cf_status_firefox58", "added": "fix-optional"}], "who": "nihsanullah@invalid.bugs", "when": "2017-10-19T10:14:46Z"}, {"changes": [{"removed": "fix-optional", "field_name": "cf_status_firefox58", "added": "wontfix"}, {"removed": "---", "field_name": "cf_status_firefox59", "added": "?"}], "who": "bug-husbandry-bot@mozilla.bugs", "when": "2018-01-16T23:25:54Z"}, {"changes": [{"removed": "Compile BinAST to bytecode", "field_name": "summary", "added": "[BinAST] Compile BinAST to bytecode"}], "who": "dteller@mozilla.com", "when": "2018-03-22T13:16:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tcampbell@mozilla.com"}], "who": "tcampbell@mozilla.com", "when": "2018-04-03T21:38:02Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1451344"}], "who": "dteller@mozilla.com", "when": "2018-04-04T14:21:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "efaustbmo@gmail.com"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "efaustbmo@gmail.com"}], "who": "efaustbmo@gmail.com", "when": "2018-04-05T17:47:08Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1451826"}], "who": "efaustbmo@gmail.com", "when": "2018-04-05T17:50:56Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Tobias.Marty@gmx.de"}], "who": "Tobias.Marty@gmx.de", "when": "2018-04-19T07:46:35Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1455547"}], "who": "dteller@mozilla.com", "when": "2018-04-20T08:10:02Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nissan4321@gmail.com"}], "who": "nissan4321@gmail.com", "when": "2018-04-20T23:07:44Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jwalden+bmo@mit.edu"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971745, "added": "review?(jwalden+bmo@mit.edu), review?(dteller@mozilla.com)"}], "who": "efaustbmo@gmail.com", "when": "2018-04-28T00:50:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971746, "added": "review?(jwalden+bmo@mit.edu), review?(dteller@mozilla.com)"}], "who": "efaustbmo@gmail.com", "when": "2018-04-28T00:51:11Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}], "who": "efaustbmo@gmail.com", "when": "2018-04-28T01:00:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dteller@mozilla.com)", "attachment_id": 8971745, "added": "review+"}], "who": "dteller@mozilla.com", "when": "2018-04-30T12:35:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(dteller@mozilla.com)", "attachment_id": 8971746, "added": "feedback+"}], "who": "dteller@mozilla.com", "when": "2018-04-30T12:44:00Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8971746, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(jwalden+bmo@mit.edu)", "attachment_id": 8971746, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8972096, "added": "review?(jwalden+bmo@mit.edu)"}], "who": "efaustbmo@gmail.com", "when": "2018-04-30T18:30:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jorendorff@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8971745, "added": "review?(jorendorff@mozilla.com)"}], "who": "efaustbmo@gmail.com", "when": "2018-04-30T20:16:45Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8972096, "added": "review?(jorendorff@mozilla.com)"}], "who": "efaustbmo@gmail.com", "when": "2018-04-30T20:17:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jorendorff@mozilla.com)", "attachment_id": 8971745, "added": "review+"}], "who": "jorendorff@mozilla.com", "when": "2018-04-30T20:52:26Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jorendorff@mozilla.com)", "attachment_id": 8972096, "added": "review+"}], "who": "jorendorff@mozilla.com", "when": "2018-04-30T21:12:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwalden+bmo@mit.edu)", "attachment_id": 8971745, "added": "review+"}], "who": "jwalden+bmo@mit.edu", "when": "2018-04-30T21:50:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwalden+bmo@mit.edu)", "attachment_id": 8972096, "added": "review+"}], "who": "jwalden+bmo@mit.edu", "when": "2018-04-30T21:50:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8972181, "added": "review?(jwalden+bmo@mit.edu)"}], "who": "efaustbmo@gmail.com", "when": "2018-04-30T22:37:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jwalden+bmo@mit.edu)", "attachment_id": 8972181, "added": "review+"}], "who": "jwalden+bmo@mit.edu", "when": "2018-04-30T22:44:08Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-01 10:22:13"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "apavel@mozilla.com", "when": "2018-05-01T10:22:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jcoppeard@mozilla.com"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-01T10:39:21Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1454352"}], "who": "jcoppeard@mozilla.com", "when": "2018-05-01T10:47:27Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ryanvm@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(efaustbmo@gmail.com)"}], "who": "ryanvm@gmail.com", "when": "2018-05-02T12:57:02Z"}, {"changes": [{"removed": "needinfo?(efaustbmo@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "efaustbmo@gmail.com", "when": "2018-05-03T20:02:52Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}