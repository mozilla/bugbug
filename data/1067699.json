{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "n.nethercote@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2014-09-16T15:49:42Z", "type_id": 607, "creation_date": "2014-09-16T15:49:42Z", "id": 979128, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8489749}, {"creator": "n.nethercote@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-09-17T15:20:42Z", "type_id": 4, "creation_date": "2014-09-17T04:39:48Z", "id": 979848, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8490554}, {"creator": "n.nethercote@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-09-17T15:42:50Z", "type_id": 4, "creation_date": "2014-09-17T04:40:44Z", "id": 979849, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8490555}, {"creator": "n.nethercote@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8491190}, {"creator": "n.nethercote@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-09-18T01:00:38Z", "type_id": 4, "creation_date": "2014-09-18T01:00:38Z", "id": 980955, "setter": "n.nethercote@gmail.com"}], "content_type": "text/plain", "id": 8491198}, {"creator": "n.nethercote@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-09-18T01:05:59Z", "type_id": 4, "creation_date": "2014-09-18T01:05:59Z", "id": 980960, "setter": "n.nethercote@gmail.com"}], "content_type": "text/plain", "id": 8491199}], "classification": "Components", "creator": "n.nethercote@gmail.com", "cc": ["continuation@gmail.com", "erahm@mozilla.com", "jwalden+bmo@mit.edu", "nfroyd@mozilla.com"], "depends_on": [1069726], "creation_time": "2014-09-16T00:57:16Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Add mfbt/JSONWriter.h and use it for memory reporting", "id": 1067699, "assigned_to_detail": {"email": "n.nethercote@gmail.com", "id": 334849, "name": "n.nethercote@gmail.com", "real_name": "Nicholas Nethercote [:njn]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "n.nethercote@gmail.com", "comment_count": 18, "comments": [{"text": "Memory reports are JSON, and the code for generating the JSON is ugly and ad\nhoc. I'm in the process of converting DMD to use JSON for output as well (bug\n1044709) so it seems like a good idea to have a library for doing this. Rolling\nour own library seems reasonable because:\n\n- generating JSON isn't very hard, and\n\n- most JSON libs require building up a big data structure, which we want to\n  avoid.", "author": "n.nethercote@gmail.com", "id": 9314328, "time": "2014-09-16T00:57:16Z"}, {"text": "Created attachment 8489749\nAdd mfbt/JSONWriter.h and use it for memory reporting", "author": "n.nethercote@gmail.com", "id": 9314329, "time": "2014-09-16T00:57:23Z"}, {"text": "Comment on attachment 8489749\nAdd mfbt/JSONWriter.h and use it for memory reporting\n\nReview of attachment 8489749:\n-----------------------------------------------------------------\n\nIt would be *most* lovely if whatever JSON writing bits in the JS engine were made to use this instead.  (That's not for this bug, I think, unless you feel really motivated.)  There may be good reasons to keep things separate; I see the JS engine's version contains comments detailing the spec steps involved, for instance.\n\n::: mfbt/JSONWriter.h\n@@ +79,5 @@\n> +// places we don't want it to.\n> +class JSONWriteFunc\n> +{\n> +public:\n> +  virtual void Write(const char* aStr) const = 0;\n\nI am not convinced about the need for |const| here (or on JSONWriter's methods itself, really).  I realize that the idea behind all this stuff is to have a streaming API, but if you have:\n\nclass BufferingJSONWriter : JSONWriterFunc {\n  nsCString mBuffer;   // or similar\n};\n\nthe |const| requirement here forces whatever is storing the buffer in the subclass to be |mutable|.  My perception is that |mutable| is not something that should be widely used, much less that API design should require to be used.\n\nCan you provide some background on why |const| was used so widely in this API?\n\n@@ +101,5 @@\n> +  //\n> +  class EscapedString\n> +  {\n> +    static_assert(sizeof(char) == 1,\n> +                  \"JSONWriter assumes that chars are not multi-byte\");\n\nThis is a tautological assert; see the C++ standard, [expr.sizeof]p1.  I think what you really want is something like:\n\n#include <limits.h>\n\nstatic_assert(CHAR_BIT == 8, ...);\n\n@@ +119,5 @@\n> +      MOZ_ASSERT_IF(!mIsOwned, !mOwnedStr.get() &&  mUnownedStr);\n> +    }\n> +\n> +  public:\n> +    EscapedString(const char* aStr)\n\nThis constructor should be |explicit|.\n\n@@ +126,5 @@\n> +    {\n> +      const char* p;\n> +      char* q;\n> +\n> +      // First, see if we need to modify the string.\n\nInstead of doing a two-pass version, you could do a one-pass version similar to how the JSON engine does it, writing maximal-length unescaped substrings in one go.  mozilla::Vector could be used for the buffer management.  Might get complicated if you want to keep the owned/unowned distinction, though...\n\n@@ +151,5 @@\n> +      }\n> +\n> +      // Escapes are needed. We'll create a new string.\n> +      size_t len = (p - aStr) + nExtra;\n> +      char* str = q = new char[len + 1];\n\nSlightly fancier would be to make this UniquePtr<char[]> so you could Move it into mOwnedStr below.  But that would require keeping a separate index variable.\n\n@@ +185,5 @@\n> +    {\n> +      SanityCheck();\n> +    }\n> +\n> +    static char hexDigitToAsciiChar(uint8_t u)\n\nI daresay this doesn't need to be public.\n\n@@ +287,5 @@\n> +    mWriter->Write(aEndChar);\n> +  }\n> +\n> +public:\n> +  // JSONWriter takes ownership of |aWriter|, which must be heap-allocated.\n\nMaybe have it take UniquePtr instead, to show the ownership constraint in the API?\n\n@@ +298,5 @@\n> +  }\n> +\n> +  // Returns the JSONWriteFunc passed in at creation, for temporary use. The\n> +  // JSONWriter object still owns the JSONWriteFunc.\n> +  JSONWriteFunc* WriteFunc() const { return mWriter.get(); }\n\nHave this return const UniquePtr<JSONWriteFunc>& ?  I guess you could |Move()| the writer out, so that would be bad, but at least the API is a little clearer.\n\nI do like the UniquePtr<> usage for class members in this patch.  I'm not yet sure how wild we should go with sprinkling UniquePtr<> throughout the API contracts in MFBT and/or Gecko code, so please feel free to offer an opinion!\n\n@@ +342,5 @@\n> +  // Prints: <aDouble>\n> +  void DoubleElement(double aDouble) const\n> +  {\n> +    char buf[64];\n> +    sprintf(buf, \"%f\", aDouble);\n\nI am leery of using sprintf widely in this API because of differences between implementations for floating-point printing and because ISTR good reasons why sprintf usage is discouraged on Windows, though I can't recall exact reasons at this time.  Maybe those reasons just relate to return values and/or improper termination of the string in some cases, neither of which are a concern here...\n\nFor doubles, at least, we could use the FP formatting stuff in MFBT itself.\n\n@@ +370,5 @@\n> +    EscapedString escapedStr(aStr);\n> +    QuotedScalar(aName, escapedStr.get());\n> +  }\n> +\n> +  // Prints: \"<aPtr>\"\n\nNit: \"...as a hexadecimal integer with a leading 0x\"?\n\n@@ +371,5 @@\n> +    QuotedScalar(aName, escapedStr.get());\n> +  }\n> +\n> +  // Prints: \"<aPtr>\"\n> +  void PointerAsStringElement(const void* aPtr) const\n\nIt is a little odd to have the previous things be ${THING}{Element,Property} but this be ${THING}AsString{Element,Property}.  I think one could make a reasonable argument that:\n\nvoid PointerProperty(const void* aPtr) const\n\ncould really only print the thing as a string.\n\n@@ +387,5 @@\n> +    QuotedScalar(aName, buf);\n> +  }\n> +\n> +  // Prints: [\n> +  void StartArrayElement() const { StartCollection(nullptr, \"[\"); }\n\nWDYT about having a MOZ_STACK_CLASS |AutoArrayElement| and |AutoArrayProperty(const char* aName)|, along with the analogous Object versions?\n\n@@ +415,5 @@\n> +// The chars with non-'___' entries in this table are those that can be\n> +// represented with a two-char escape sequence. The value is the second char in\n> +// the sequence, that which follows the initial backslash.\n> +#define ___ 0\n> +/*static*/ const char JSONWriter::EscapedString::mTwoCharEscapes[256] = {\n\nI think you want to place this in its own .cpp file, so multiple places that #include \"JSONWriter.h\" don't multiply-define this.\n\n::: mfbt/tests/TestJSONWriter.cpp\n@@ +309,5 @@\n> +    }\n> +    w.StringProperty(\"ascii\", buf);\n> +\n> +    // Test lots of unicode stuff. Note that this file is encoded as UTF-8.\n> +    w.BoolProperty(\"\u0645\u0631\u062d\u0628\u0627 \u0647\u0646\u0627\u0643\", true);\n\nOut of curiosity, have you verified that MSVC does the Right Thing with this?", "author": "nfroyd@mozilla.com", "id": 9317433, "time": "2014-09-16T15:49:42Z"}, {"text": "Thank you for the fast and attentive review, which will result in better code being committed :)\n\n> It would be *most* lovely if whatever JSON writing bits in the JS engine\n> were made to use this instead.  (That's not for this bug, I think, unless\n> you feel really motivated.)  There may be good reasons to keep things\n> separate; I see the JS engine's version contains comments detailing the spec\n> steps involved, for instance.\n\nAlas, I think that would be putting a square peg in a round hole.\n\n\n> Can you provide some background on why |const| was used so widely in this\n> API?\n\nI was ambivalent about this exact point, so I'll remove it and the |mutable| occurrences.\n\n\n> static_assert(CHAR_BIT == 8, ...);\n\nI'll just remove it. I bet that assumption is baked in 100 other places.\n\n\n> Instead of doing a two-pass version, you could do a one-pass version similar\n> to how the JSON engine does it, writing maximal-length unescaped substrings\n> in one go.  mozilla::Vector could be used for the buffer management.  Might\n> get complicated if you want to keep the owned/unowned distinction, though...\n\nMy goal was to minimize memory usage. I don't understand your suggestion.\n\n\n> > +      // Escapes are needed. We'll create a new string.\n> > +      size_t len = (p - aStr) + nExtra;\n> > +      char* str = q = new char[len + 1];\n> \n> Slightly fancier would be to make this UniquePtr<char[]> so you could Move\n> it into mOwnedStr below.  But that would require keeping a separate index\n> variable.\n\nI think I'll leave it as is. I like the setting of the class members at the end, for symmetry with the other case.\n\n\n> > +public:\n> > +  // JSONWriter takes ownership of |aWriter|, which must be heap-allocated.\n> \n> Maybe have it take UniquePtr instead, to show the ownership constraint in\n> the API?\n\nOk. I'll do likewise with JSONWriter's constructor.\n\n\n> > +  // Returns the JSONWriteFunc passed in at creation, for temporary use. The\n> > +  // JSONWriter object still owns the JSONWriteFunc.\n> > +  JSONWriteFunc* WriteFunc() const { return mWriter.get(); }\n> \n> Have this return const UniquePtr<JSONWriteFunc>& ?  I guess you could\n> |Move()| the writer out, so that would be bad, but at least the API is a\n> little clearer.\n\nI tried that, but the uses all involve immediately downcasting, and I couldn't work out how to do that with a |const UniquePtr<JSONWriteFunc>&|. I didn't try *that* hard because I figured it wasn't worth the effort -- a turd with a bow on it is still a turd :)\n\n\n> I do like the UniquePtr<> usage for class members in this patch.  I'm not\n> yet sure how wild we should go with sprinkling UniquePtr<> throughout the\n> API contracts in MFBT and/or Gecko code, so please feel free to offer an\n> opinion!\n\nI'm still learning UniquePtr too. It's got some nice parts, but the inability to nicely express a borrowed use is unfortunate.\n\n\n> For doubles, at least, we could use the FP formatting stuff in MFBT itself.\n\nGood idea. I've changed it, and the output is much nicer. However, it did require some build system jiggery-pokery, because double-conversion.h is currently weird. I've put that in a preliminary patch.\n\n\n> WDYT about having a MOZ_STACK_CLASS |AutoArrayElement| and\n> |AutoArrayProperty(const char* aName)|, along with the analogous Object\n> versions?\n\nI considered that. It's nice if you're emitting all your JSON in a single function. But if you're split across functions -- e.g. as happens with the memory reporter dumping, due to the use of async functions -- then they're no use, because you'd have to maintain an explicit stack of them, which is no better than just calling the End() functions.\n\nFurthermore, unlike many RAII cases where the consequences of non-destruction are subtle, if you forget the End() functions you'll detect the problem with the most basic of testing.\n\nSo I don't think it's worth it. But I'll add a comment about this.\n\n\n> > +/*static*/ const char JSONWriter::EscapedString::mTwoCharEscapes[256] = {\n> \n> I think you want to place this in its own .cpp file, so multiple places that #include \"JSONWriter.h\"\n> don't multiply-define this.\n\nYou're right, but putting it into a .cpp file caused link errors I don't understand. Something about MFBT .cpp files going into libmozglue. So I just made the table creation dynamic instead, which is easy in a table that's mostly zeroes.\n\n\n> > +    // Test lots of unicode stuff. Note that this file is encoded as UTF-8.\n> > +    w.BoolProperty(\"\u0645\u0631\u062d\u0628\u0627 \u0647\u0646\u0627\u0643\", true);\n> \n> Out of curiosity, have you verified that MSVC does the Right Thing with this?\n\nNo, but the try server will have my back!", "author": "n.nethercote@gmail.com", "id": 9321040, "time": "2014-09-17T04:36:34Z"}, {"text": "Created attachment 8490554\n(part 1) - Export double-conversion.h normally from MFBT\n\ndouble-conversion.h isn't exported from MFBT. The two files that use it\n(jsnum.cpp and nsTSubstring.cpp) access it via LOCAL_INCLUDES, which is totally\ngross.\n\nThis patch just exports it like a normal file, such as mfbt/decimal/Decimal.h.\nStraightforward, except that utils.h also must be exported, which is a little\nunfortunate.\n\nfroydnj, feel free to punt this review to mshal if you're not confident in you\nbuild system quasi-peerdom :)", "author": "n.nethercote@gmail.com", "id": 9321041, "time": "2014-09-17T04:39:48Z"}, {"text": "Created attachment 8490555\n(part 2) - Add mfbt/JSONWriter.h and use it for memory reporting\n\nChanges in this version:\n\n- Added a comment why there's no RAII facilities for closing collections.\n\n- Used UniquePtr<> in more places.\n\n- Renamed PointerAsString*() as Pointer*().\n\n- Used MFBT formatting for FP values.\n\n- Removed |const| from JSONWriteFunc::Write().\n\n- Made mTwoCharEscapes dynamic.\n\n- A couple of other small things.", "author": "n.nethercote@gmail.com", "id": 9321044, "time": "2014-09-17T04:40:44Z"}, {"text": "Comment on attachment 8490555\n(part 2) - Add mfbt/JSONWriter.h and use it for memory reporting\n\nReview of attachment 8490555:\n-----------------------------------------------------------------\n\nRandom driveby comments after seeing this in mail, no need for formal reviewing or whatever.\n\n::: mfbt/JSONWriter.h\n@@ +3,5 @@\n> +/* This Source Code Form is subject to the terms of the Mozilla Public\n> + * License, v. 2.0. If a copy of the MPL was not distributed with this\n> + * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n> +\n> +// A typical JSON-writing library requires you to first build up a data\n\nThis could use a /* JSON generation class for non-critical uses. */ comment or so, to act as summary on MXR.\n\n@@ +15,5 @@\n> +//\n> +// The API is slightly uglier than you would see in a typical JSON-writing\n> +// library, but still fairly easy to use. It's possible to generate invalid\n> +// JSON with JSONWriter, but typically the most basic testing will identify any\n> +// such problems.\n\nYou're awfully trusting.\n\n@@ +28,5 @@\n> +// pointers) and the consequences of defects are more subtle.\n> +//\n> +// Importantly, the class does solve the two hard problems of JSON generation,\n> +// which are (a) correctly escaping strings, and (b) adding appropriate\n> +// indentation and commas between items.\n\nAdd in \"human-readable\" before \"JSON generation\", because prettyprinting isn't really a JSON generation concern.\n\n@@ +42,5 @@\n> +//   JSONWriter w(MakeUnique<MyWriteFunc>());\n> +//   w.Start();\n> +//   {\n> +//     w.BoolProperty(\"bool\", true);\n> +//     w.IntProperty(\"int\", 1);\n\nErm, mfbt consistently uses camelCaps for method names.  My understanding was that we were sticking to camelCaps given the the large presence of such names throughout the code, both in Mozilla code (JS, XPConnect, etc.) and in imported code making absolute InterCaps adherence an impossibility.\n\n@@ +57,5 @@\n> +//     w.EndArrayProperty();\n> +//   }\n> +//   w.End();\n> +//\n> +// will produce the following output:\n\nI suggest \"will produce prettyprinted formatting for this JSON structure\", so as to be slightly vague about the exact makeup.  Exact structuring for pretty-printed data usually isn't a great idea, because then people start cheating and expecting more than the baseline syntax.\n\n@@ +66,5 @@\n> +//   \"string\": \"hello\",\n> +//   \"array\": [\n> +//    3.4,\n> +//    {\n> +//     \"0x12345678\"\n\nUh...this is not right.\n\n@@ +134,5 @@\n> +      return u < 10 ? '0' + u : 'a' + (u - 10);\n> +    }\n> +\n> +  public:\n> +    EscapedString(const char* aStr, char aTwoCharEscapes[256])\n\nIf you really want a 256-element array, make it a reference to such an array.  This is just a pointer.\n\n@@ +166,5 @@\n> +      }\n> +\n> +      // Escapes are needed. We'll create a new string.\n> +      size_t len = (p - aStr) + nExtra;\n> +      char* str = q = new char[len + 1];\n\nThe traditional way to do this would be a UniquePtr<char[]> coupled with a |size_t i| to index into it.  Raw pointers into singly-owned arrays aren't much good, and you're almost there with UniquePtr, practically.\n\n@@ +209,5 @@\n> +  };\n> +\n> +  const UniquePtr<JSONWriteFunc> mWriter;\n> +  Vector<bool, 8> mNeedComma;     // do we need a comma at depth N?\n> +  int mDepth;                     // the current nesting depth\n\nThis is never negative, and it's a count, so make it a size_t.  Same for |i| in indent().\n\n@@ +296,5 @@\n> +  }\n> +\n> +public:\n> +  // JSONWriter takes ownership of |aWriter|, which must be heap-allocated.\n> +  explicit JSONWriter(UniquePtr<JSONWriteFunc> aWriter)\n\nThis is inherent in the interface, so no need to call it out.\n\n@@ +304,5 @@\n> +  {\n> +    // The chars with non-'___' entries in this table are those that can be\n> +    // represented with a two-char escape sequence. The value is the second\n> +    // char in the sequence, that which follows the initial backslash.\n> +    mozilla::PodArrayZero(mTwoCharEscapes);\n\nI don't understand why this is a thing in every writer rather than static const data in a JSONWriter.cpp.  Sure, defining big mostly-zeroed arrays is obnoxious, but it only needs to happen once.\n\n@@ +366,5 @@\n> +  // Prints: <aDouble>\n> +  void DoubleElement(double aDouble) { DoubleProperty(nullptr, aDouble); }\n> +\n> +  // Prints: \"<aName>\": \"<aStr>\"\n> +  // Escapes the string as needed.\n\nboth strings\n\n@@ +375,5 @@\n> +  }\n> +\n> +  // Prints: \"<aStr>\"\n> +  // Escapes the string as needed.\n> +  void StringElement(const char* aStr) { StringProperty(nullptr, aStr); }\n\nProbably worth adding nullElement() for JSON-completeness.\n\n::: mfbt/tests/TestJSONWriter.cpp\n@@ +8,5 @@\n> +#include \"mozilla/JSONWriter.h\"\n> +#include <stdio.h>\n> +#include <string.h>\n> +\n> +using namespace mozilla;\n\nWe do specific using statements in tests, rather than open up the entirety of Pandora's box.", "author": "jwalden+bmo@mit.edu", "id": 9321200, "time": "2014-09-17T05:55:59Z"}, {"text": "Comment on attachment 8490554\n(part 1) - Export double-conversion.h normally from MFBT\n\nReview of attachment 8490554:\n-----------------------------------------------------------------\n\nI think I can review this even without being a build peer.", "author": "nfroyd@mozilla.com", "id": 9322899, "time": "2014-09-17T15:20:42Z"}, {"text": "Comment on attachment 8490555\n(part 2) - Add mfbt/JSONWriter.h and use it for memory reporting\n\nReview of attachment 8490555:\n-----------------------------------------------------------------\n\nI have very little to add to Jeff's comments.\n\n::: mfbt/JSONWriter.h\n@@ +35,5 @@\n> +// char*| throughout, and can be ASCII or UTF-8.\n> +//\n> +// EXAMPLE\n> +// -------\n> +// Assume that |MyWriteFunc| is class that implements |JSONWriteFunc|. The\n\nNit: \"is a class\"\n\n@@ +304,5 @@\n> +  {\n> +    // The chars with non-'___' entries in this table are those that can be\n> +    // represented with a two-char escape sequence. The value is the second\n> +    // char in the sequence, that which follows the initial backslash.\n> +    mozilla::PodArrayZero(mTwoCharEscapes);\n\nDitto what Jeff said.  I believe the magic ingredient that you're missing is tagging the declaration with MFBT_DATA.", "author": "nfroyd@mozilla.com", "id": 9323036, "time": "2014-09-17T15:42:50Z"}, {"text": "> Erm, mfbt consistently uses camelCaps for method names.  My understanding\n> was that we were sticking to camelCaps given the the large presence of such\n> names throughout the code, both in Mozilla code (JS, XPConnect, etc.) and in\n> imported code making absolute InterCaps adherence an impossibility.\n\nmfbt/STYLE file says the following.\n\n> Some of the files use a lower-case letter at the start of function names.\n> This is because MFBT used to use a different style, and was later converted\n> to standard Mozilla style. These functions have not been changed to use an\n> upper-case letter because it would cause a lot of churn in other parts of the\n> codebase. However, new files should follow standard Mozilla style and use an\n> upper-case letter at the start of function names.\n\nThank you for the extra review! I've addressed all your other comments.\n\n\n> I believe the magic ingredient that you're missing is tagging the declaration\n> with MFBT_DATA.\n\nAha! Excellent.", "author": "n.nethercote@gmail.com", "id": 9325730, "time": "2014-09-17T23:21:13Z"}, {"text": "Created attachment 8491190\n(part 2) - Add mfbt/JSONWriter.h and use it for memory reporting\n\nUpdated version... the MFBT_DATA thing works locally but causes lots of bustage\non try :(", "author": "n.nethercote@gmail.com", "id": 9326055, "time": "2014-09-18T00:40:03Z"}, {"text": "Here are the try failures: https://tbpl.mozilla.org/?tree=Try&rev=cb3f32596e70", "author": "n.nethercote@gmail.com", "id": 9326060, "time": "2014-09-18T00:40:27Z"}, {"text": "Created attachment 8491198\n(part 2) - Add mfbt/JSONWriter.h and use it for memory reporting\n\nHere's the version using a global variable instead, which avoids the link\nerrors, and which froydnj r+'d via IRC.", "author": "n.nethercote@gmail.com", "id": 9326130, "time": "2014-09-18T01:00:03Z"}, {"text": "Created attachment 8491199\n(part 2) - Add mfbt/JSONWriter.h and use it for memory reporting\n\nfroydnj suggested putting it inside mozilla::detail.", "author": "n.nethercote@gmail.com", "id": 9326135, "time": "2014-09-18T01:03:29Z"}, {"text": "New try run looks good: https://tbpl.mozilla.org/?tree=Try&rev=6c324eba69da", "author": "n.nethercote@gmail.com", "id": 9326710, "time": "2014-09-18T05:55:48Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/6fc33b189e9f\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/abe819e638a9", "author": "n.nethercote@gmail.com", "id": 9326715, "time": "2014-09-18T05:57:56Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/6fc33b189e9f\nhttps://hg.mozilla.org/mozilla-central/rev/abe819e638a9", "author": "kwierso@gmail.com", "id": 9331424, "time": "2014-09-18T22:43:34Z"}, {"text": "(In reply to Nicholas Nethercote [:njn] from comment #9)\n> mfbt/STYLE file says the following.\n> \n> > Some of the files use a lower-case letter at the start of function names.\n> > This is because MFBT used to use a different style, and was later converted\n> > to standard Mozilla style. These functions have not been changed to use an\n> > upper-case letter because it would cause a lot of churn in other parts of the\n> > codebase. However, new files should follow standard Mozilla style and use an\n> > upper-case letter at the start of function names.\n\nThis is not what I remember agreeing to.  My understanding was that camelCaps for method names, InterCaps for class names would remain, precisely because the style is widely used, is prevalent in the JS engine and in XPConnect as well as elsewhere, and there would be no possibility of us expunging the third-party code using this capitalization convention to achieve actual uniformity.\n\nBut whatever, this is landed, I have better things to worry about right now.", "author": "jwalden+bmo@mit.edu", "id": 9332232, "time": "2014-09-19T03:03:23Z"}], "cf_last_resolved": "2014-09-18T22:43:34Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2014-09-19T03:03:23Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "MFBT", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla35", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "n.nethercote@gmail.com", "id": 334849, "name": "n.nethercote@gmail.com", "real_name": "Nicholas Nethercote [:njn]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, {"email": "erahm@mozilla.com", "id": 496127, "name": "erahm@mozilla.com", "real_name": "Eric Rahm [:erahm] (Away until 3/19) (please no mozreview requests)"}, {"email": "jwalden+bmo@mit.edu", "id": 83595, "name": "jwalden+bmo@mit.edu", "real_name": "Jeff Walden [:Waldo]"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8489749, "added": "review?(nfroyd@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}], "who": "n.nethercote@gmail.com", "when": "2014-09-16T00:57:23Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8489749, "added": "feedback+"}], "who": "nfroyd@mozilla.com", "when": "2014-09-16T15:49:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8490554, "added": "review?(nfroyd@mozilla.com)"}], "who": "n.nethercote@gmail.com", "when": "2014-09-17T04:39:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8490555, "added": "review?(nfroyd@mozilla.com)"}], "who": "n.nethercote@gmail.com", "when": "2014-09-17T04:40:44Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8489749, "added": "1"}], "who": "n.nethercote@gmail.com", "when": "2014-09-17T04:40:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8490554, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2014-09-17T15:20:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8490555, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2014-09-17T15:42:50Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8490555, "added": "1"}], "who": "n.nethercote@gmail.com", "when": "2014-09-18T00:40:08Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8491190, "added": "1"}], "who": "n.nethercote@gmail.com", "when": "2014-09-18T01:00:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8491198, "added": "review+"}], "who": "n.nethercote@gmail.com", "when": "2014-09-18T01:00:38Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8491198, "added": "1"}], "who": "n.nethercote@gmail.com", "when": "2014-09-18T01:03:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8491199, "added": "review+"}], "who": "n.nethercote@gmail.com", "when": "2014-09-18T01:05:59Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla35"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2014-09-18 15:43:34"}], "who": "kwierso@gmail.com", "when": "2014-09-18T22:43:34Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1069726"}], "who": "masayuki@d-toybox.com", "when": "2014-09-19T02:53:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jwalden+bmo@mit.edu"}], "who": "jwalden+bmo@mit.edu", "when": "2014-09-19T03:03:23Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}