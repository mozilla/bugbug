{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "kit@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2015-10-05T16:25:31Z", "type_id": 4, "creation_date": "2015-10-02T00:46:23Z", "id": 1264052, "setter": "MattN+bmo@mozilla.com"}, {"status": "+", "name": "review", "modification_date": "2015-10-02T01:43:27Z", "type_id": 4, "creation_date": "2015-10-02T00:46:23Z", "id": 1264053, "setter": "martin.thomson@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8644682}], "classification": "Components", "creator": "kit@mozilla.com", "cc": ["bbangert@mozilla.com", "martin.thomson@gmail.com", "MattN+bmo@mozilla.com", "nsm.nikhil@gmail.com"], "depends_on": [1196512], "creation_time": "2015-08-05T18:32:49Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Drop subscriptions for a site when the user revokes push permissions", "id": 1191453, "assigned_to_detail": {"email": "kit@mozilla.com", "id": 506322, "name": "kit@mozilla.com", "real_name": "Kit Cambridge (they/them) [:kitcambridge]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "kit@mozilla.com", "comment_count": 27, "comments": [{"text": "When the user revokes Push permissions for a site, we should drop all subscriptions for that site, and send an `unregister` message to the Push server.", "author": "kit@mozilla.com", "id": 10581692, "time": "2015-08-05T18:32:49Z"}, {"text": "Should we drop subscriptions or simply not deliver them to the application as we do right now?", "author": "nsm.nikhil@gmail.com", "id": 10581859, "time": "2015-08-05T18:59:45Z"}, {"text": "I think we should at least notify the Push server, like we do for quotas. That way, the sender knows the endpoint is no longer valid, and the server won't need to buffer all those messages. In Facebook's case, maybe they could use this to determine your preferred devices for receiving notifications. What do you think?", "author": "kit@mozilla.com", "id": 10581968, "time": "2015-08-05T19:19:55Z"}, {"text": "(In reply to Kit Cambridge [:kitcambridge] from comment #2)\n> I think we should at least notify the Push server, like we do for quotas.\n> That way, the sender knows the endpoint is no longer valid, and the server\n> won't need to buffer all those messages. In Facebook's case, maybe they\n> could use this to determine your preferred devices for receiving\n> notifications. What do you think?\n\nI had no idea we notified the server when quotas expired. Is that a special message or is it treated as an unregister? The problem is if the user re-enables push (especially on non-desktop UIs, where for example, the re-enabling may be in settings app and not in the page info page or something), they won't actually receive pushes till they visit the specific page on the website that will register for push. That sounds unintuitive.", "author": "nsm.nikhil@gmail.com", "id": 10582241, "time": "2015-08-05T20:15:43Z"}, {"text": ">(In reply to Nikhil Marathe [:nsm] (please needinfo?) from comment #3)\n> I had no idea we notified the server when quotas expired. Is that a special\n> message or is it treated as an unregister?\n\nIt's just an unregister.\n\n> That sounds unintuitive.\n\nThat makes sense; I hadn't thought of that. We'd need to broadcast a `pushsubscriptionchange` to all service workers with push subscriptions for that host if the user re-enables push. And we'd need to mark those push subscriptions as \"expired\" instead of deleting them, so we know which workers to notify. That seems like a lot of extra complexity, and I can see why keeping the current behavior is preferable.", "author": "kit@mozilla.com", "id": 10582294, "time": "2015-08-05T20:28:09Z"}, {"text": "Martin, Ben...would like to hear your thoughts, too. Are we okay with keeping subscriptions around when the user revokes permissions for a site, and just dropping incoming messages?", "author": "kit@mozilla.com", "id": 10582339, "time": "2015-08-05T20:39:25Z"}, {"text": "I've done a lot of back-and-forth on what is the right thing to do for this situation.  If we have no quota, clearly we need to stop delivering events, but how much feedback do we need to provide the application?\n\nNotifying the service worker is fairly straightforward; I believe that I proposed we include a timeRemaining attribute on the global.  We need to be careful about different service workers for the same origin, but I don't have any problem in principle with only notifying the one that runs the quota down in this way.  Activating other service workers just to deliver this news doesn't seem like a good use of limited resources.\n\nNotifying the application server is harder.  If we delete the subscription, then the site will have to re-acquire the push subscription when the user visits the site and redo any signaling.  On the other hand, unless we delete the subscription, we don't have any way of letting the application server know.  They will be sending messages into the aether with no awareness that they will never receive a response (I wonder if we would acknowledge them).  If we unregister, the application server receives a 404 and can mark that subscription as bad.  It also ensures that these application servers can't continue to drain battery by waking the device over time.\n\nOn this basis, I think that the right plan here is to unsubscribe and then automatically re-trigger a subscription when the site is revisited.  That means that we would surface a `pushsubscriptionchange` event for the service workers on that origin that had push subscriptions.", "author": "martin.thomson@gmail.com", "id": 10582378, "time": "2015-08-05T20:45:06Z"}, {"text": "Created attachment 8644682\nMozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN\n\nBug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r?mt,nsm", "author": "kit@mozilla.com", "id": 10588983, "time": "2015-08-06T23:48:20Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=7462fae8c60c", "author": "kit@mozilla.com", "id": 10588986, "time": "2015-08-06T23:49:25Z"}, {"text": "Here's a first cut.\n\nWhen the user revokes push permissions for a site, we unregister all subscriptions, and set their quotas to 0. If the block is lifted (set to either \"allow\" or \"ask permission\"), we drop the subscriptions, then notify the service worker. There's lots of overlap with how we handle expired subscriptions, so I treated permission revocation identical to \"quota expired.\" Not sure if it makes more sense to use a separate flag, though.\n\nIt also looks like we don't receive `perm-changed` notifications when a permission expires, so I added a call to drop expired subscriptions at startup.", "author": "kit@mozilla.com", "id": 10588988, "time": "2015-08-06T23:50:28Z"}, {"text": "Linking to a potentially relevant spec discussion: https://github.com/w3c/push-api/issues/116", "author": "kit@mozilla.com", "id": 10592104, "time": "2015-08-07T17:11:50Z"}, {"text": "Comment on attachment 8644682\nMozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN\n\nhttps://reviewboard.mozilla.org/r/15289/#review13741\n\nWe should have a discussion about what permissions look like when notifications and push are combined.\n\n::: dom/push/PushRecord.jsm:154\n(Diff revision 1)\n> +    return this.getLastVisit().then(lastVisit => {\n> +      return lastVisit > this.lastPush;\n> +    });\n\n```\nreturn this.getLastVisit()\n  .then(lastVisit => lastVisit > this.lastPush);\n```\n\n::: dom/push/PushService.jsm:275\n(Diff revision 1)\n>                  .then(_ => {\n> -                  // courtesy, but don't establish a connection\n> +                  this._unregisterIfConnected(record);\n> -                  // just for it\n> -                  if (this._ws) {\n> -                    debug(\"Had a connection, so telling the server\");\n> -                    this._sendRequest(\"unregister\", {channelID: record.channelID})\n> -                        .catch(function(e) {\n> -                          debug(\"Unregister errored \" + e);\n> -                        });\n> -                  }\n>                  }, err => {\n\n```\n.then(_ => this.unregisterIfConnected(record),\n      err  => {\n```\n\n::: dom/push/PushService.jsm:877\n(Diff revision 1)\n>          if (record.isExpired()) {\n> -          return record.getLastVisit().then(lastVisit => {\n> -            if (lastVisit > record.lastPush) {\n> +          return record.quotaChanged().then(isChanged => {\n> +            if (isChanged) {\n>                // If the user revisited the site, drop the expired push\n>                // registration and re-register.\n\nMove the comment under the if statement, and maybe tweak it, since the registration is now unconditional.\n\n::: dom/push/PushService.jsm:1116\n(Diff revision 1)\n>    _registration: function(aPageRecord) {\n\nLots of code duplication here between _register and _registration.  I won't ask you to fix it now, but keep it in mind.\n\n::: dom/push/PushService.jsm:1160\n(Diff revision 1)\n>        return Promise.all(records.map(record => {\n> -        return record.getLastVisit().then(lastVisit => {\n> -          if (lastVisit > record.lastPush) {\n> +        return this._dropExpiredRegistration(record).catch(error => {\n> +          debug(\"dropExpiredRegistrations: Error dropping registration \" +\n> +            record.keyID + \": \" + error);\n> +        });\n> +      }));\n> +    }).catch(error => {\n> +      debug(\"dropExpiredRegistrations: Error dropping registrations: \" +\n> +        error);\n> +    });\n\nA single catch statement should suffice here (the outer one).  Note that the error will propagate so all you have to do is add record details to the error you generate in _dropExpiredRegistration\n\n::: dom/push/PushService.jsm:1203\n(Diff revision 1)\n> +      return;\n\ndelete this, or return Promise.resolve();\n\nWhy do you need to return true/false here?\n\n::: dom/push/test/xpcshell/test_permissions.js:43\n(Diff revision 1)\n> +    channelID: '10731540-5ce2-49c3-83ab-80b1552bdae0',\n\nCan you make these channelID values more self-explanatory?  a UUID doesn't stick in the mind very well.\n\n::: dom/push/test/xpcshell/test_permissions.js:114\n(Diff revision 1)\n> +    quota: Infinity,\n> +    quota: 16,\n\nOops\n\n::: dom/push/test/xpcshell/test_permissions.js:39\n(Diff revision 1)\n> +add_task(function* setUp() {\n> +  // Two active registrations for a visited site. These will expire when we\n> +  // revoke permissions.\n> +  yield db.put({\n> +    channelID: '10731540-5ce2-49c3-83ab-80b1552bdae0',\n> +    pushEndpoint: 'https://example.org/push/1',\n> +    scope: 'https://example.net/ham',\n> +    pushCount: 0,\n> +    lastPush: 0,\n> +    version: null,\n> +    originAttributes: '',\n> +    quota: 16,\n> +  });\n\nIs there any reason that you can't condense this a little?  The only important fields are the channelID, the URL and the quota.  The rest is just noise.\n\n::: dom/push/test/xpcshell/test_permissions.js:91\n(Diff revision 1)\n> +  // A registration not subject to quota. Permission list changes should\n> +  // not affect this entry.\n\nPlease add the reason to the comment: ... because the quota is set to Infinity.\n\n::: dom/push/test/xpcshell/test_permissions.js:227\n(Diff revision 1)\n> +  yield addVisit({\n> +    uri: 'https://example.com/recipes',\n> +    title: 'Spam musubi recipes',\n> +    visits: [{\n> +      visitDate: Date.now() * 1000,\n> +      transitionType: Ci.nsINavHistoryService.TRANSITION_LINK,\n> +    }],\n> +  });\n> +  Services.obs.notifyObservers(null, 'idle-daily', '');\n\nI don't think that this is complete.  If a site has permission, but an expired registration, then it should create a new registration when the visit is registered, but you aren't testing for that new record being present.", "author": "martin.thomson@gmail.com", "id": 10592276, "time": "2015-08-07T17:40:31Z"}, {"text": "Comment on attachment 8644682\nMozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN\n\nhttps://reviewboard.mozilla.org/r/15289/#review14223\n\n::: dom/push/PushDB.jsm:253\n(Diff revision 1)\n> +            [aPageRecord.scope + \"\\x7f\", aPageRecord.originAttributes + \"\\x7f\"]\n\nShouldn't the originAttributes be checked for a precise match?", "author": "nsm.nikhil@gmail.com", "id": 10612039, "time": "2015-08-13T02:20:51Z"}, {"text": "https://reviewboard.mozilla.org/r/15289/#review18281\n\n::: dom/push/PushService.jsm:1210\n(Diff revision 1)\n> +    // We only expire registrations if push permissions are revoked (the \"block\"\n> +    // case). Adding or changing a grant, or deleting a revocation, drops all\n> +    // expired registrations (the \"always ask\" and \"allow\" case).\n> +    let isBlocked = (data == \"added\" || data == \"changed\") &&\n> +      permission.capability == Ci.nsIPermissionManager.DENY_ACTION;\n\nDoes this patch properly handle switching a permission from allow to always ask? Without knowing much context or terminology, I think it should be treated like getting blocked but it doesn't seem to be here.", "author": "MattN+bmo@mozilla.com", "id": 10774751, "time": "2015-09-25T05:22:20Z"}, {"text": "https://reviewboard.mozilla.org/r/15289/#review14223\n\n> Shouldn't the originAttributes be checked for a precise match?\n\nIndeed. Thanks!", "author": "kit@mozilla.com", "id": 10801139, "time": "2015-10-02T00:42:16Z"}, {"text": "https://reviewboard.mozilla.org/r/15289/#review13741\n\n> A single catch statement should suffice here (the outer one).  Note that the error will propagate so all you have to do is add record details to the error you generate in _dropExpiredRegistration\n\nThe inner catch is intentional; if there's an error dropping one, it shouldn't affect the others. But that makes the outer catch redundant, so I removed that. Good catch!\n\n> I don't think that this is complete.  If a site has permission, but an expired registration, then it should create a new registration when the visit is registered, but you aren't testing for that new record being present.\n\nI'm not sure why I thought it was a good idea to entangle quotas and permissions, but I removed it. Granting permission after a prior revocation will now drop all expired records, even if the user hasn't visited the site recently. Easier to implement and understand.", "author": "kit@mozilla.com", "id": 10801140, "time": "2015-10-02T00:42:22Z"}, {"text": "https://reviewboard.mozilla.org/r/15289/#review18281\n\n> Does this patch properly handle switching a permission from allow to always ask? Without knowing much context or terminology, I think it should be treated like getting blocked but it doesn't seem to be here.\n\nOuch, it doesn't. The latest patch restructures `_onPermissionChange` to behave like this:\n\n* If \"allow\" is set, we drop all expired subscriptions and notify the service worker.\n* If \"deny\" is set, we mark all subscriptions as expired. The worker isn't notified until the permission is granted again, since it can't get a new subscription.\n* If \"allow\" is removed, we treat it the same as \"denied,\" per your comment. I think removing \"allow\" is the same as \"always ask.\" Is that correct?\n* If \"deny\" is removed, we don't do anything. I think that covers switching from \"deny\" to \"always ask.\"\n\nDoes that seem reasonable?", "author": "kit@mozilla.com", "id": 10801148, "time": "2015-10-02T00:45:44Z"}, {"text": "Comment on attachment 8644682\nMozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN\n\nBug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r?MattN,mt", "author": "kit@mozilla.com", "id": 10801150, "time": "2015-10-02T00:46:23Z"}, {"text": "Comment on attachment 8644682\nMozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN\n\nhttps://reviewboard.mozilla.org/r/15289/#review18921\n\nThis looks fine.  I worry that this module is getting more complex though.  I see some serious refactoring in our future.\n\n::: dom/push/PushService.jsm:1304\n(Diff revisions 1 - 2)\n> +      if (data == \"added\" || data == \"changed\") {\n> +        if (capability == Ci.nsIPermissionManager.ALLOW_ACTION) {\n> +          // Permission set to \"allow\". Drop all expired registrations for this\n> +          // site, notify the associated service workers, and reset the quota\n> +          // for active registrations.\n> +          return this._permissionAllowed(records);\n> +        }\n> +        // Permission set to \"block\" or \"always ask\". Expire all registrations\n> +        // for this site.\n> +        return this._permissionDenied(records);\n> +      }\n> +      if (data == \"deleted\") {\n> +        if (capability == Ci.nsIPermissionManager.ALLOW_ACTION) {\n> +          // \"Allow\" permission removed. Treat this as a \"block\" and expire all\n> +          // registrations for this site.\n> +          return this._permissionDenied(records);\n> +        }\n> +        // \"Block\" or \"always ask\" permission removed. At this point, all\n> +        // registrations have expired, so we don't need to call\n> +        // `_permissionDenied`. We don't notify the service worker yet; that\n> +        // happens when the permission is set to \"allow\".\n> +        return null;\n\nThis could be a lot simpler.\nIn a new function:\n\n```\n// if the permission changes to allow\nif (capability == ALLOW && (data == \"added\" || data == \"changed\")) {\n  return this._db.getAllByOrigin(...) // factor this out if you like.\n    .then(records => this._permissionAllowed(records));\n// if the permissions changes to something other than allow,\n// or if the permission to allow is removed\n} else if (data == \"added\" || data == \"changed\" || (capability == ALLOW && data == \"deleted\")) {\n  return this._db.getAllByOrigin(...) // factor this out if you like.\n    .then(records => this._permissionDenied(records));\n}\n```\nNote that this means that you don't query if there is no change to make.\n\n::: dom/push/PushService.jsm:1365\n(Diff revisions 1 - 2)\n> +        return this._db.delete(record.keyID).then(() => {\n> +          this._notifySubscriptionChangeObservers(record);\n>          });\n\nWhat are the rules for notifying change observers?  Because this ad hoc approach we've adopted isn't very reliable.\n\nIt would be better if there were wrapper functions for all these critical updates.\n\n::: dom/push/PushService.jsm:1383\n(Diff revisions 1 - 2)\n> +      debug(\"expireRegistration: Error dropping expired registration \" +\n> +        record.keyID + \": \" + error);\n\nA lot of these debug statements are catching real problems.  You can and probably should log them to console.  Maybe open a bug to track doing that.\n\n::: dom/push/test/xpcshell/test_permissions.js:70\n(Diff revisions 1 - 2)\n> +    '50fffd33-e016-4c9f-8ad1-4e348352a3be',\n\nCan you use nicer strings for the channel ID please?\n\n::: dom/push/test/xpcshell/test_permissions.js:252\n(Diff revisions 1 - 2)\n> +  ok(!droppedRecords.some(Boolean),\n\nclever\n\n::: dom/push/test/xpcshell/test_permissions.js:296\n(Diff revisions 1 - 2)\n> +add_task(function* tearDown() {\n> +  yield db.drop();\n> +  db.close();\n> +});\n\nWhy isn't this a cleanup function like it was previously?", "author": "martin.thomson@gmail.com", "id": 10801245, "time": "2015-10-02T01:43:27Z"}, {"text": "https://reviewboard.mozilla.org/r/15289/#review18921\n\n> Why isn't this a cleanup function like it was previously?\n\nA failure in the final test caused it to run the cleanup function prematurely, but, somehow, the test still ran to completion...so it failed with another error, instead of the one actually responsible. Breaking this out into a separate task revealed the real failure. Reverted to the cleanup function.", "author": "kit@mozilla.com", "id": 10803663, "time": "2015-10-02T18:01:06Z"}, {"text": "Comment on attachment 8644682\nMozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN\n\nBug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN", "author": "kit@mozilla.com", "id": 10803666, "time": "2015-10-02T18:02:21Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=1ab652f44bbd", "author": "kit@mozilla.com", "id": 10803668, "time": "2015-10-02T18:03:07Z"}, {"text": "Comment on attachment 8644682\nMozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN\n\nhttps://reviewboard.mozilla.org/r/15289/#review19141\n\nI'm only reviewing the parts that I previously commented on since I don't have enough context on the push backend and registrations to do a thorough review. My assumption is that mt covered that.\n\n::: dom/push/PushService.jsm:1351\n(Diff revisions 1 - 3)\n> -      // registrations for this site.\n> -      return Promise.all(records.filter(record =>\n> -        record.isExpired()\n> +   * Drops all expired registrations, notifies the associated service\n> +   * workers, and resets the quota for active registrations if the push\n> +   * permission is granted.\n\nWhy do we \"Drop all expired registrations\" when permission is granted? Shouldn't that have happened when the permission was revoked? Is this just some extra handling in case we somehow missed handling the revocation of the permission?\n\n::: dom/push/PushService.jsm:1315\n(Diff revision 3)\n> +    } else if (isChange || isAllow && type == \"deleted\") {\n\nCan you put in braces to make this easier to read i.e. making the operator precedence explicit?", "author": "MattN+bmo@mozilla.com", "id": 10808850, "time": "2015-10-05T16:25:31Z"}, {"text": "(In reply to Matthew N. [:MattN] (behind on mail) from comment #22)\n> Why do we \"Drop all expired registrations\" when permission is granted?\n> Shouldn't that have happened when the permission was revoked? Is this just\n> some extra handling in case we somehow missed handling the revocation of the\n> permission?\n\nIt's tricky. When the permission is revoked, we mark all registrations as expired, but leave them in IndexedDB. When the permission is granted again, we drop the expired registrations and fire `pushsubscriptionchange` events. This addresses the case in comment 3, where the user enables the permission without revisiting the site.\n\n> Can you put in braces to make this easier to read i.e. making the operator\n> precedence explicit?\n\nCertainly. I'll push the change directly once m-i reopens.", "author": "kit@mozilla.com", "id": 10810613, "time": "2015-10-05T22:53:34Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=14372dacf2d5", "author": "kit@mozilla.com", "id": 10812675, "time": "2015-10-06T15:15:23Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/cd18686b904dde3589b682fc934aba47f5cc2bb1\nBug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt,MattN", "author": "kit@mozilla.com", "id": 10814380, "time": "2015-10-06T22:22:48Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/cd18686b904d", "author": "kwierso@gmail.com", "id": 10817140, "time": "2015-10-07T17:37:24Z"}], "cf_last_resolved": "2015-10-07T17:37:24Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2015-10-07T20:20:46Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1210896, 1212593], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "DOM: Push Notifications", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla44", "cf_status_firefox44": "fixed", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "kit@mozilla.com", "id": 506322, "name": "kit@mozilla.com", "real_name": "Kit Cambridge (they/them) [:kitcambridge]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bbangert@mozilla.com", "id": 424312, "name": "bbangert@mozilla.com", "real_name": "Ben Bangert [:benbangert]"}, {"email": "martin.thomson@gmail.com", "id": 438654, "name": "martin.thomson@gmail.com", "real_name": "Martin Thomson [:mt:]"}, {"email": "MattN+bmo@mozilla.com", "id": 305228, "name": "MattN+bmo@mozilla.com", "real_name": "Matthew N. [:MattN] (PM if requests are blocking you)"}, {"email": "nsm.nikhil@gmail.com", "id": 415061, "name": "nsm.nikhil@gmail.com", "real_name": "Nikhil Marathe [:nsm] (No longer reading bugmail, please needinfo?)"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "nsm.nikhil@gmail.com"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-05T18:59:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bbangert@mozilla.com, martin.thomson@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bbangert@mozilla.com), needinfo?(martin.thomson@gmail.com)"}], "who": "kit@mozilla.com", "when": "2015-08-05T20:28:09Z"}, {"changes": [{"removed": "needinfo?(martin.thomson@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "martin.thomson@gmail.com", "when": "2015-08-05T20:45:06Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8644682, "added": "review?(martin.thomson@gmail.com), review?(nsm.nikhil@gmail.com)"}], "who": "kit@mozilla.com", "when": "2015-08-06T23:48:20Z"}, {"changes": [{"removed": "needinfo?(bbangert@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "kit@mozilla.com", "when": "2015-08-06T23:50:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(martin.thomson@gmail.com)", "attachment_id": 8644682, "added": ""}], "who": "martin.thomson@gmail.com", "when": "2015-08-07T17:40:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8644682, "added": ""}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-13T02:20:51Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1196512"}], "who": "kit@mozilla.com", "when": "2015-08-19T23:01:17Z"}, {"changes": [{"field_name": "attachments.description", "removed": "MozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r?mt,nsm", "attachment_id": 8644682, "added": "MozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r?MattN,mt"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8644682, "added": "review?(MattN+bmo@mozilla.com), review?(martin.thomson@gmail.com)"}, {"removed": "", "field_name": "cc", "added": "MattN+bmo@mozilla.com"}], "who": "kit@mozilla.com", "when": "2015-10-02T00:46:23Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(martin.thomson@gmail.com)", "attachment_id": 8644682, "added": "review+"}], "who": "martin.thomson@gmail.com", "when": "2015-10-02T01:43:27Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1210896"}], "who": "kit@mozilla.com", "when": "2015-10-02T18:00:27Z"}, {"changes": [{"field_name": "attachments.description", "removed": "MozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r?MattN,mt", "attachment_id": 8644682, "added": "MozReview Request: Bug 1191453 - Drop subscriptions for a site when the user revokes push permissions. r=mt r?MattN"}], "who": "kit@mozilla.com", "when": "2015-10-02T18:02:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(MattN+bmo@mozilla.com)", "attachment_id": 8644682, "added": "review+"}], "who": "MattN+bmo@mozilla.com", "when": "2015-10-05T16:25:31Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}], "who": "kit@mozilla.com", "when": "2015-10-05T22:53:34Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla44"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-10-07 10:37:24"}, {"removed": "---", "field_name": "cf_status_firefox44", "added": "fixed"}], "who": "kwierso@gmail.com", "when": "2015-10-07T17:37:24Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1212593"}], "who": "kwierso@gmail.com", "when": "2015-10-07T20:20:46Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}