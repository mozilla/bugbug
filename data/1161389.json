{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "aethanyc@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8601278}, {"creator": "aethanyc@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8601413}, {"creator": "aethanyc@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-05-19T23:07:06Z", "type_id": 4, "creation_date": "2015-05-19T08:59:28Z", "id": 1170206, "setter": "roc@ocallahan.org"}], "content_type": "text/plain", "id": 8607408}, {"creator": "aethanyc@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-05-27T02:39:22Z", "type_id": 4, "creation_date": "2015-05-26T07:49:57Z", "id": 1174564, "setter": "roc@ocallahan.org"}], "content_type": "text/plain", "id": 8610401}], "classification": "Components", "creator": "aethanyc@gmail.com", "cc": ["mats@mozilla.com", "mephisto41@gmail.com", "roc@ocallahan.org"], "depends_on": [1110039], "creation_time": "2015-05-05T03:50:03Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Skip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret", "id": 1161389, "assigned_to_detail": {"email": "aethanyc@gmail.com", "id": 503090, "name": "aethanyc@gmail.com", "real_name": "Ting-Yu Lin [:TYLin] (UTC+8) (Away, needinfo me if you need anything)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "aethanyc@gmail.com", "comment_count": 16, "comments": [{"text": "Originally, this was intended to be done in bug 1110039 Part 6.\n\nQuote roc suggestion from bug 1110039 comment 40:\n\"I think we could fix this by modifying nsCanvasFrame instead, to walk the frame children of the custom content container in nsCanvasFrame and call BuildDisplayList on them directly, skipping the caret elements when !IsBuildingCaret.\"\n\nHowever, I need more investigation regarding the location of the custom content container frame in the frame tree.", "author": "aethanyc@gmail.com", "id": 10230618, "time": "2015-05-05T03:50:03Z"}, {"text": "Created attachment 8601278\nSkip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret\n\nMove the r- patch from bug 1110039 Part 6 for a record.", "author": "aethanyc@gmail.com", "id": 10230653, "time": "2015-05-05T04:06:04Z"}, {"text": "In bug 1110039, we added the AccessibleCaret element as an anonymous content to nsCanvasFrame's mCustomContentContainer. We need to walk all the children of the custom content container to find AcceesibleCaret frame in order to skip it when nsDisplayListBuilder::IsBuildingCaret() is true. To do that, we need to locate the custom content container frame in frame tree.\n\nHowever, I found the location of custom content container frame in frame tree is not what I expected.\n\nReproduce steps:\n1. Enable \"layout.accessiblecaret.enabled\" (For inserting anonymous contents to the custom content container)\n2. firefox -layoutdebug about:blank\n3. Dump the frame tree.\n\nActual results:\nThe custom content container frame is a child of nsBlockFrame(html), which is a sibling to the frames of web contents.\n\nExpected results:\nThe custom content container frame is a child of nsCanvasFrame. I got this results by removing HideCustomContentContainer() in [1] added by bug 1116714.\n\nSee full frame tree dump for the actual and expected results here. https://pastebin.mozilla.org/8832445\n\nMats, it seems that HideCustomContentContainer() will prevent the custom content container frame from being generated when the frame tree is constructed [2]. Once the container has some children, it gets reframed like regular web content. Do you any ideas to make the expected results without removing HideCustomContentContainer() in [1]? I feel it's a bug to find custom content container frame in nsBlockFrame(html)'s children.\n\n[1] https://hg.mozilla.org/mozilla-central/file/102d0e9aa9e1/layout/generic/nsCanvasFrame.cpp#l165\n[2] https://hg.mozilla.org/mozilla-central/file/102d0e9aa9e1/layout/base/nsCSSFrameConstructor.cpp#l5519", "author": "aethanyc@gmail.com", "id": 10231372, "time": "2015-05-05T09:52:14Z"}, {"text": "Created attachment 8601413\nSkip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret (v2)\n\nThis patch works only if the custom content container frame is a child of\nnsCanvasFrame.", "author": "aethanyc@gmail.com", "id": 10231393, "time": "2015-05-05T09:56:18Z"}, {"text": "(In reply to Ting-Yu Lin [:TYLin] (UTC+8) from comment #2)\n> Reproduce steps:\n\nI can't reproduce with these steps.  I guess it's because bug 1110039\nhasn't landed yet.  Can you provide a rollup patch for those patches\nagainst trunk?\n\n> Mats, it seems that HideCustomContentContainer() will prevent the custom\n> content container frame from being generated when the frame tree is\n> constructed [2].\n\nYes, that's intentional.  We don't want to have extra frames when they\nare not needed, for performance and debugging reasons.\n\n> I feel it's a bug to find\n> custom content container frame in nsBlockFrame(html)'s children.\n\nAre you sure you're using position:fixed ?", "author": "mats@mozilla.com", "id": 10243740, "time": "2015-05-07T18:42:07Z"}, {"text": "Hi Mats,\n\nBug 1110039 was landed, and AccessibleCaret is available on m-c. Would you try the steps again in comment 2? After flipping \"layout.accessiblecaret.enabled\" to true in step 1, You'll need to restart browser or reload the current page before dumping the frame tree.\n\n> Are you sure you're using position:fixed ?\nYes. The custom content container is position:fixed [1].\n\nOne quick hack I could think of is to skip HideCustomContentContainer() in [2] if AccessibleCaret pref is enabled since we know that the AccessibleCaret elements will be inserted into that container anyway. \n\n[1] http://hg.mozilla.org/mozilla-central/file/bedce1b405a3/layout/style/ua.css#l524\n[2] http://hg.mozilla.org/mozilla-central/file/bedce1b405a3/layout/generic/nsCanvasFrame.cpp#l164", "author": "aethanyc@gmail.com", "id": 10259341, "time": "2015-05-12T16:27:33Z"}, {"text": "Created attachment 8607408\nSkip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret. (v3)", "author": "aethanyc@gmail.com", "id": 10283710, "time": "2015-05-19T08:59:28Z"}, {"text": "(In reply to Ting-Yu Lin [:TYLin] (UTC+8) (PTO, back on 5/26) from comment #2)\n> However, I found the location of custom content container frame in frame\n> tree is not what I expected.\n> \n> Reproduce steps:\n> 1. Enable \"layout.accessiblecaret.enabled\" (For inserting anonymous contents\n> to the custom content container)\n> 2. firefox -layoutdebug about:blank\n> 3. Dump the frame tree.\n> \n> Actual results:\n> The custom content container frame is a child of nsBlockFrame(html), which\n> is a sibling to the frames of web contents.\n\nThat's correct. Actually there's two frames for the custom container here: a placeholder, which is a child of nsBlockFrame(html), and the fixed-pos frame which is a child of the viewport. Any children of the custom container will be inserted under the fixed-pos frame.", "author": "roc@ocallahan.org", "id": 10287255, "time": "2015-05-19T22:44:07Z"}, {"text": "Comment on attachment 8607408\nSkip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret. (v3)\n\nReview of attachment 8607408:\n-----------------------------------------------------------------\n\n::: layout/generic/nsCanvasFrame.cpp\n@@ +164,5 @@\n>  \n>    // Only create a frame for mCustomContentContainer if it has some children.\n> +  // When AccessibleCaret is enabled, it will insert children into\n> +  // mCustomContentContainer. No need to hide the container.\n> +  if (len == 0 && !PresShell::AccessibleCaretEnabled()) {\n\nI don't understand why this change is needed.\n\n@@ +520,5 @@\n> +        // Do nothing. Skip TouchCaret/SelectionCarets frame.\n> +        continue;\n> +      }\n> +\n> +      if (kid->GetContent() == mCustomContentContainer) {\n\nGiven the custom content container placeholder frame is a grandchild of the nsCanvasFrame, I don't see how this works.\n\nThis is a bit harder than I thought.\n\nI think this will work:\n-- In nsDisplayListBuilder::MarkFramesForDisplayList, if aDirtyFrame is the viewport (easy check: just check if it has a null parent) and !IsBuildingCaret(), then check each element of aFrames to see if it's the frame for a caret element and skip it if so. That should ensure those elements aren't painted, since when we reach the placeholder, we won't paint anything if MarkOutOfFlowFrameForDisplay wasn't already called on its out-of-flow.", "author": "roc@ocallahan.org", "id": 10287353, "time": "2015-05-19T23:06:51Z"}, {"text": "Comment on attachment 8607408\nSkip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret. (v3)\n\nReview of attachment 8607408:\n-----------------------------------------------------------------\n\noops sorry", "author": "roc@ocallahan.org", "id": 10287355, "time": "2015-05-19T23:07:06Z"}, {"text": "Comment on attachment 8607408\nSkip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret. (v3)\n\nReview of attachment 8607408:\n-----------------------------------------------------------------\n\n::: layout/generic/nsCanvasFrame.cpp\n@@ +164,5 @@\n>  \n>    // Only create a frame for mCustomContentContainer if it has some children.\n> +  // When AccessibleCaret is enabled, it will insert children into\n> +  // mCustomContentContainer. No need to hide the container.\n> +  if (len == 0 && !PresShell::AccessibleCaretEnabled()) {\n\nThis is to make the custom content container frame being a child of nsCanvasFrame like touch/selection-carets frames, which should be a wrong assumption base on your comment 7.", "author": "aethanyc@gmail.com", "id": 10308506, "time": "2015-05-26T07:35:36Z"}, {"text": "Created attachment 8610401\nSkip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret. (v4)\n\nImplement the solution given in comment 8. Since a accessible-caret frame is a\ngrandchild of the viewport frame, I check only !IsBuildingCaret() in\nnsDisplayListBuilder::MarkFramesForDisplayList.", "author": "aethanyc@gmail.com", "id": 10308539, "time": "2015-05-26T07:49:57Z"}, {"text": "Comment on attachment 8610401\nSkip AccessibleCaret frame if nsDisplayListBuilder doesn't build caret. (v4)\n\nReview of attachment 8610401:\n-----------------------------------------------------------------\n\nAh, great stuff!", "author": "roc@ocallahan.org", "id": 10313493, "time": "2015-05-27T02:39:22Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=dcd3bdb47982", "author": "aethanyc@gmail.com", "id": 10314224, "time": "2015-05-27T08:33:15Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/ad884eef3481", "author": "pulsebot@bots.tld", "id": 10314247, "time": "2015-05-27T08:39:28Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/ad884eef3481", "author": "kwierso@gmail.com", "id": 10318248, "time": "2015-05-28T00:08:51Z"}], "cf_last_resolved": "2015-05-28T00:08:51Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2015-05-28T00:08:51Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1161392], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "Layout", "votes": 0, "groups": [], "cf_status_firefox60": "---", "cf_status_firefox40": "affected", "target_milestone": "mozilla41", "is_cc_accessible": true, "cf_status_firefox46": "---", "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "aethanyc@gmail.com", "id": 503090, "name": "aethanyc@gmail.com", "real_name": "Ting-Yu Lin [:TYLin] (UTC+8) (Away, needinfo me if you need anything)"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "mats@mozilla.com", "id": 5168, "name": "mats@mozilla.com", "real_name": "Mats Palmgren (:mats)"}, {"email": "mephisto41@gmail.com", "id": 473875, "name": "mephisto41@gmail.com", "real_name": "Morris Tseng [:mtseng] [:Morris] (Inactive)"}, {"email": "roc@ocallahan.org", "id": 5038, "name": "roc@ocallahan.org", "real_name": "Robert O'Callahan (:roc) (email my personal email if necessary)"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "blocks", "added": "1161392"}], "who": "aethanyc@gmail.com", "when": "2015-05-05T03:59:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mats@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mats@mozilla.com)"}], "who": "aethanyc@gmail.com", "when": "2015-05-05T09:52:14Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8601278, "added": "1"}], "who": "aethanyc@gmail.com", "when": "2015-05-05T09:56:18Z"}, {"changes": [{"removed": "needinfo?(mats@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "mats@mozilla.com", "when": "2015-05-07T18:42:07Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mats@mozilla.com)"}], "who": "aethanyc@gmail.com", "when": "2015-05-12T16:27:33Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8601413, "added": "1"}, {"removed": "", "field_name": "cc", "added": "roc@ocallahan.org"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8607408, "added": "review?(roc@ocallahan.org)"}], "who": "aethanyc@gmail.com", "when": "2015-05-19T08:59:28Z"}, {"changes": [{"removed": "needinfo?(mats@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "roc@ocallahan.org", "when": "2015-05-19T22:44:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(roc@ocallahan.org)", "attachment_id": 8607408, "added": "review+"}], "who": "roc@ocallahan.org", "when": "2015-05-19T23:06:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8607408, "added": "review-"}], "who": "roc@ocallahan.org", "when": "2015-05-19T23:07:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mtseng@mozilla.com"}], "who": "mephisto41@gmail.com", "when": "2015-05-26T06:15:54Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8607408, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8610401, "added": "review?(roc@ocallahan.org)"}], "who": "aethanyc@gmail.com", "when": "2015-05-26T07:49:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(roc@ocallahan.org)", "attachment_id": 8610401, "added": "review+"}], "who": "roc@ocallahan.org", "when": "2015-05-27T02:39:22Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla41"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-05-27 17:08:51"}, {"removed": "---", "field_name": "cf_status_firefox41", "added": "fixed"}], "who": "kwierso@gmail.com", "when": "2015-05-28T00:08:51Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}