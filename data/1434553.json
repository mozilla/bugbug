{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "cy6erGn0m@gmail.com", "mentors_detail": [], "depends_on": [1451731, 1453015, 1464090, 1464649], "cf_status_firefox_esr60": "affected", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": ["regression"], "cc_detail": [{"email": "afarre@mozilla.com", "id": 566192, "name": "afarre@mozilla.com", "real_name": "Andreas Farre [:farre]"}, {"email": "amarchesini@mozilla.com", "id": 446257, "name": "amarchesini@mozilla.com", "real_name": "Andrea Marchesini [:baku]"}, {"email": "bkelly@mozilla.com", "id": 465500, "name": "bkelly@mozilla.com", "real_name": "Ben Kelly [:bkelly]"}, {"email": "bugmail@asutherland.org", "id": 151407, "name": "bugmail@asutherland.org", "real_name": "Andrew Sutherland [:asuth]"}, {"email": "bugs@pettay.fi", "id": 39966, "name": "bugs@pettay.fi", "real_name": "Olli Pettay [:smaug]"}, {"email": "felash@gmail.com", "id": 364883, "name": "felash@gmail.com", "real_name": "Julien Wajsberg [:julienw]"}, {"email": "honzab.moz@firemni.cz", "id": 269762, "name": "honzab.moz@firemni.cz", "real_name": "Honza Bambas (:mayhemer)"}, {"email": "mcaceres@mozilla.com", "id": 470081, "name": "mcaceres@mozilla.com", "real_name": "Marcos Caceres [:marcosc]"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "mhorrocks91@googlemail.com", "id": 616991, "name": "mhorrocks91@googlemail.com", "real_name": ""}, {"email": "micnic90@gmail.com", "id": 447722, "name": "micnic90@gmail.com", "real_name": "Nicu Micleusanu"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "PatrickWesterhoff@gmail.com", "id": 349729, "name": "PatrickWesterhoff@gmail.com", "real_name": "Patrick Westerhoff"}, {"email": "ryanvm@gmail.com", "id": 75935, "name": "ryanvm@gmail.com", "real_name": "Ryan VanderMeulen [:RyanVM]"}, {"email": "tbbugs@myarcher.net", "id": 432378, "name": "tbbugs@myarcher.net", "real_name": "Barrie"}], "cf_last_resolved": "2018-05-23T22:13:16Z", "attachments": [{"creator": "cy6erGn0m@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "application/gzip", "id": 8947017}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-03-22T21:39:28Z", "type_id": 4, "creation_date": "2018-03-21T18:14:44Z", "id": 1732807, "setter": "bzbarsky@mit.edu"}], "content_type": "text/plain", "id": 8961058}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8962300}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8962301}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8962302}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8962303}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-03-26T13:58:18Z", "type_id": 4, "creation_date": "2018-03-26T13:58:18Z", "id": 1734743, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8962304}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-03-26T13:58:27Z", "type_id": 4, "creation_date": "2018-03-26T13:58:27Z", "id": 1734744, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8962305}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8962306}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-03-26T13:57:11Z", "type_id": 4, "creation_date": "2018-03-26T12:17:52Z", "id": 1734685, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8962307}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8962691}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-05T12:47:49Z", "type_id": 4, "creation_date": "2018-03-27T15:55:01Z", "id": 1735448, "setter": "honzab.moz@firemni.cz"}, {"status": "+", "name": "review", "modification_date": "2018-03-29T19:46:10Z", "type_id": 4, "creation_date": "2018-03-27T15:55:01Z", "id": 1735449, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8962749}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8963231}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-29T20:47:21Z", "type_id": 4, "creation_date": "2018-03-28T17:04:44Z", "id": 1736240, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8963233}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-29T20:06:09Z", "type_id": 4, "creation_date": "2018-03-28T17:05:18Z", "id": 1736241, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8963234}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-05T13:35:24Z", "type_id": 4, "creation_date": "2018-03-28T17:08:37Z", "id": 1736245, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8963237}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-05T13:45:22Z", "type_id": 4, "creation_date": "2018-03-28T17:09:07Z", "id": 1736246, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8963238}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-29T21:16:33Z", "type_id": 4, "creation_date": "2018-03-28T17:10:07Z", "id": 1736248, "setter": "nfroyd@mozilla.com"}, {"status": "-", "name": "review", "modification_date": "2018-04-05T14:24:41Z", "type_id": 4, "creation_date": "2018-04-05T14:24:41Z", "id": 1739792, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8963240}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-04-05T15:23:17Z", "type_id": 4, "creation_date": "2018-03-28T17:11:22Z", "id": 1736250, "setter": "honzab.moz@firemni.cz"}, {"status": "+", "name": "review", "modification_date": "2018-04-04T20:41:34Z", "type_id": 4, "creation_date": "2018-03-28T17:11:22Z", "id": 1736251, "setter": "bugs@pettay.fi"}], "content_type": "text/plain", "id": 8963242}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-29T21:05:21Z", "type_id": 4, "creation_date": "2018-03-28T17:13:16Z", "id": 1736253, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8963244}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "feedback", "modification_date": "2018-04-05T15:55:09Z", "type_id": 607, "creation_date": "2018-04-05T15:55:09Z", "id": 1739847, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8963246}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-09T17:31:43Z", "type_id": 4, "creation_date": "2018-04-09T10:32:29Z", "id": 1741035, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8966150}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-09T18:12:48Z", "type_id": 4, "creation_date": "2018-04-09T12:32:26Z", "id": 1741080, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8966188}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8966883}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8966884}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8966885}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8966893}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8966894}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8966895}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8966896}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-11T15:08:54Z", "type_id": 4, "creation_date": "2018-04-11T09:16:16Z", "id": 1742247, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8966897}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-04-11T16:27:33Z", "type_id": 4, "creation_date": "2018-04-11T09:22:04Z", "id": 1742249, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8966899}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-11T16:36:41Z", "type_id": 4, "creation_date": "2018-04-11T09:26:11Z", "id": 1742257, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8966905}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-11T17:06:10Z", "type_id": 4, "creation_date": "2018-04-11T14:50:54Z", "id": 1742470, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8967013}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-04-20T11:33:27Z", "type_id": 4, "creation_date": "2018-04-11T19:19:51Z", "id": 1742688, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8967128}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-12T16:14:15Z", "type_id": 4, "creation_date": "2018-04-11T20:08:15Z", "id": 1742729, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8967148}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-12T16:42:53Z", "type_id": 4, "creation_date": "2018-04-12T09:17:11Z", "id": 1742960, "setter": "nfroyd@mozilla.com"}], "content_type": "text/plain", "id": 8967291}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-04-13T17:53:51Z", "type_id": 4, "creation_date": "2018-04-12T11:27:44Z", "id": 1742999, "setter": "bugs@pettay.fi"}], "content_type": "text/plain", "id": 8967312}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-04-13T13:42:16Z", "type_id": 4, "creation_date": "2018-04-12T17:00:49Z", "id": 1743188, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8967434}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-08T15:37:47Z", "type_id": 4, "creation_date": "2018-05-07T14:00:42Z", "id": 1753442, "setter": "bugs@pettay.fi"}], "content_type": "text/plain", "id": 8973671}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-05-08T16:17:44Z", "type_id": 4, "creation_date": "2018-05-07T14:01:13Z", "id": 1753443, "setter": "bugs@pettay.fi"}], "content_type": "text/plain", "id": 8973672}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8973673}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8973674}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8973675}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8973676}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8973677}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-05-09T13:37:01Z", "type_id": 4, "creation_date": "2018-05-07T14:03:50Z", "id": 1753445, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8973678}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-14T12:45:03Z", "type_id": 4, "creation_date": "2018-05-14T07:48:25Z", "id": 1756272, "setter": "bugs@pettay.fi"}], "content_type": "text/plain", "id": 8975410}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8975419}, {"creator": "amarchesini@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-21T14:54:31Z", "type_id": 4, "creation_date": "2018-05-17T14:17:59Z", "id": 1758174, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8976544}], "votes": 1, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "yes", "comment_count": 121, "comments": [{"text": "Created attachment 8947017\nfirefox-file-upload.txt.pcapng.gz\n\nUser Agent: Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0\nBuild ID: 20180128191456\n\nSteps to reproduce:\n\nGiven a simple html file upload form\n\n```\n<html>\n<head>\n    <title>$Title$</title>\n</head>\n<body>\n    <form method=\"post\" action=\"/do\" enctype=\"multipart/form-data\">\n        <p><input type=\"file\" name=\"file1\"></p>\n        <p><input type=\"submit\"></p>\n    </form>\n</body>\n</html>\n```\n\nA a small text file `upload` (41 bytes length):\n```\nLet me try to upload a simple text file\n```\n\nI also have a server that does handle file uploads and responds with text \"OK\" (tried both Jetty and tomcat and also my hand-written handler)\n\n1. Open an html file, select what file to upload \n2. press submit\n3. I see \"OK\"\n4. Stop server (to ensure all connections are closed and no http pipelining that could affect)\n5. Start server again\n6. Press F5 and confirm repeat send form \n\n\n\nActual results:\n\na server is unable to parse the repeated request (neither Jetty nor Tomcat nor hand-written)\n\nWhat I see is that `Content-Length` of the request is wrong. As far as I know Content-Length for multipart file upload should count all request body parts including preamble, boundaries with suffices and all CRLF, part bodies are headers. However it seems to be too small so server fails to handle it as multipart streams ends up unexpectedly. So at first time (from actual HTML form) Content-Length is fine but when repeating sending form it is not correct.\n\nSee attachment for network capture (done via Wireshark)", "author": "cy6erGn0m@gmail.com", "id": 13007799, "time": "2018-01-31T10:16:13Z"}, {"text": "I did some local testing with the above, and comparing Firefox to Safari, the Content-Length: POSTed are indeed reported differently.\n\nWe claim to be sending a Content-Length of \"154\", while Safari claims Content-Length: \"223\". I was unable to check in Chrome. \n\nFarre, would this be better checked by the network folks?", "author": "mcaceres@mozilla.com", "id": 13141652, "time": "2018-03-20T04:27:39Z"}, {"text": "I did some more digging and found that it goes wrong in HttpBaseChannel::ExplicitSetUploadStream if a non-positive aContentLength is given, indicating that we should get the Content-Length from the saved input stream, which goes ahead and calls nsIInputStream::Available. This is also where mozregression finds the issue with the patches introduced in Bug 1398733.\n\nBaku, do you know what's going on? It seems like nsIMIMEInputStream doesn't know its own length.\n\nThe regression range is:\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/pushloghtml?fromchange=b2feeea8d65dba956ba15b1c6cb80053ad1c6337&tochange=726caa0c36bac0763e33ffd6b65b306ebb3a676b", "author": "afarre@mozilla.com", "id": 13145657, "time": "2018-03-21T15:11:29Z"}, {"text": "Created attachment 8961058\ncontentLength.patch\n\nThe issue here is related to nsIAsyncInputStream and how content length is managed by necko/docshell.\n\nWhen a DOM Blob/File object is sent to the server in a multipart form submission, we take its inputStream, and, together with other form data, we create a nsIMIMEInputStream. This stream and its size are passed to necko.\n\nThis doesn't happen when docShell uses a nsSHEntry to reload a previous request. nsSHEntry knows the post data stream but not its size. Because content-length is not passed, Necko uses nsIInputStream::Available() to retrieve the size of the post data stream. But the stream is a nsIAsyncInputStream, and ::Available() returns just what is available, not the full size.\n\nThe result is that we send a wrong content length.\nThis patch makes nsISHEntry able to store the post data size.", "author": "amarchesini@mozilla.com", "id": 13146312, "time": "2018-03-21T18:14:44Z"}, {"text": "Comment on attachment 8961058\ncontentLength.patch\n\nReview of attachment 8961058:\n-----------------------------------------------------------------\n\n::: docshell/base/nsDocShell.cpp\n@@ +10065,5 @@\n>        OnNewURI(aURI, nullptr, newURITriggeringPrincipal, newURIPrincipalToInherit,\n>                 mLoadType, true, true, true);\n>  \n>        nsCOMPtr<nsIInputStream> postData;\n> +      int64_t postDataLength;\n\n= -1", "author": "amarchesini@mozilla.com", "id": 13146439, "time": "2018-03-21T18:53:56Z"}, {"text": "Comment on attachment 8961058\ncontentLength.patch\n\nThe file size on disk can change by the time the new POST happens, and then the Content-Length will be wrong, no?\n\nWe really do need to get the right length at the point when we are grabbing the file data, so when setting the stream on the new upload channel.", "author": "bzbarsky@mit.edu", "id": 13149925, "time": "2018-03-22T21:39:28Z"}, {"text": "So is this a regression from bug 1398733?", "author": "bzbarsky@mit.edu", "id": 13149929, "time": "2018-03-22T21:40:31Z"}, {"text": "What we could try is to add a new thing on streams that asks for the data size (even if not all the data is available yet) and make sure all the streams we use for POST implement this new API...", "author": "bzbarsky@mit.edu", "id": 13149933, "time": "2018-03-22T21:41:31Z"}, {"text": "Alternately we could have something on nsIMIMEInputStream that walks the child streams and does the right thing, plus APIs on the non-string streams we might put in there.", "author": "bzbarsky@mit.edu", "id": 13149938, "time": "2018-03-22T21:42:50Z"}, {"text": "(In reply to Boris Zbarsky [:bz] (no decent commit message means r-) from comment #6)\n> So is this a regression from bug 1398733?\n\nNo. For underlying OS file, this is a regression from bug 1353629.\nBut note that this issue already exists for memory blobs with a size > 1mb. In this scenario we created a IPCStream inputStream, async. Without storing the size in nsSHEntry, we were triggering exactly the same problem.", "author": "amarchesini@mozilla.com", "id": 13150603, "time": "2018-03-23T06:23:34Z"}, {"text": "(In reply to Boris Zbarsky [:bz] (no decent commit message means r-) from comment #7)\n> What we could try is to add a new thing on streams that asks for the data\n> size (even if not all the data is available yet) and make sure all the\n> streams we use for POST implement this new API...\n\nThis is what I was thinking. But it must be async. And that means that LoadURI must be async as well when there is a nsSHEntry involved.\n\nI would like to add this to nsIInputStream:\n\ninterface nsIInputStream {\n  ...\n\n  // This returns NS_BASE_STREAM_WOULD_BLOCK if the stream is async. Similar to what we do for read/readSegments.\n  long long fullSize();\n\n  // Here the callback system to know the fullSize if the previous method returns NS_BASE_STREAM_WOULD_BLOCK.\n  void asyncWaitForFullSize(in nsIInputStreamAsyncFullSizeCallback aCallback);\n};\n\ninterface nsIInputStreamAsyncFullSizeCallback : nsISupports {\n  void onFullSizeReady(in nsIInputStream aStream);\n};\n\nIt _must_ support NS_BASE_STREAM_WOULD_BLOCK because for IPCBlobInputStream, the operation must run, via IPC, on the parent process. Plus, it must return an unsigned value, because a nsIPipeInputStream doesn't know the fullsize and it must return -1.\n\nDoing this, we must implement this method in nsIMIMEInputStream as well, where we call fullSize/asyncWaitForFullSize for each substream. Similar logic for nsIMultiplexInputStream.\n\nNote that this is going to be a big task, because we have to implement this feature for each inputStream.\nI need a feedback before continue.", "author": "amarchesini@mozilla.com", "id": 13150610, "time": "2018-03-23T06:35:43Z"}, {"text": "to be more precise, I want to implement this:\n\ninterface nsIInputStream {\n   ...\n \n   // This returns NS_BASE_STREAM_WOULD_BLOCK if the stream is async. Similar to what we do for read/readSegments.\n  long long fullSize();\n}\n\ninterface nsIAsyncInputStream {\n   // Here the callback system to know the fullSize if the previous method returns NS_BASE_STREAM_WOULD_BLOCK.\n   void asyncWaitForFullSize(in nsIInputStreamAsyncFullSizeCallback aCallback);\n};\n \ninterface nsIInputStreamAsyncFullSizeCallback : nsISupports {\n  void onFullSizeReady(in nsIInputStream aStream);\n};", "author": "amarchesini@mozilla.com", "id": 13151166, "time": "2018-03-23T12:01:19Z"}, {"text": "Per IRC discussion, if we put the new methods on a new interface, and fall back to available() if that interface is not implemented on a stream, then we don't have to touch every stream.", "author": "bzbarsky@mit.edu", "id": 13151780, "time": "2018-03-23T15:57:38Z"}, {"text": "bz, wondering if we want to land this patch as temporary fix. I'm not planning to work on the new interface soon.\nMaybe the 'real' fix can be a follow up of this temporary fix?", "author": "amarchesini@mozilla.com", "id": 13153197, "time": "2018-03-24T07:22:45Z"}, {"text": "I don't know that this fix necessarily makes things better.  It fixes some cases, but makes others worse (e.g. sending a too-long Content-Length can cause problems for the server).\n\nWe should really fix this the right way, esp. since this is a regression...", "author": "bzbarsky@mit.edu", "id": 13154591, "time": "2018-03-26T02:57:31Z"}, {"text": "*** Bug 1436125 has been marked as a duplicate of this bug. ***", "author": "amarchesini@mozilla.com", "id": 13155319, "time": "2018-03-26T09:46:32Z"}, {"text": "Created attachment 8962300\npart 1 - nsIFullSizeInputStream and nsIAsyncFullSizeInputStream\n\nThis first patch introduces 2 new interfaces.\n\nnsIFullSizeInputStream exposes a fullSize() method.\nnsIASyncFullSizeInputStream exposes asyncFullSizeWait() method.", "author": "amarchesini@mozilla.com", "id": 13155481, "time": "2018-03-26T12:08:29Z"}, {"text": "Created attachment 8962301\npart 2 - IPCBlobInputStream exposes nsIFullSizeInputStream\n\nSmaug, I would like you to review this patch because you know how IPCBlobInputStream workers.", "author": "amarchesini@mozilla.com", "id": 13155486, "time": "2018-03-26T12:12:00Z"}, {"text": "Created attachment 8962302\npart 3 - FullSizeInputStreamHelper\n\nThis is an helper class that will be used to retrieve the size from any kind of stream.", "author": "amarchesini@mozilla.com", "id": 13155492, "time": "2018-03-26T12:13:56Z"}, {"text": "Created attachment 8962303\npart 4 - SlicedInputStream exposes nsIFullSizeInputStream\n\nSlicedInputStream is used in Blobs and FormData. It must supports nsIFullSizeInputStream", "author": "amarchesini@mozilla.com", "id": 13155493, "time": "2018-03-26T12:15:02Z"}, {"text": "Created attachment 8962304\npart 5 - nsBufferedInputStream\n\nAlso nsBufferedInputStream must support nsIFullSizeInputStream", "author": "amarchesini@mozilla.com", "id": 13155495, "time": "2018-03-26T12:15:44Z"}, {"text": "Created attachment 8962305\npart 6 - nsMIMEInputStream", "author": "amarchesini@mozilla.com", "id": 13155497, "time": "2018-03-26T12:16:23Z"}, {"text": "Created attachment 8962306\npart 7 - nsIMultiplexInputStream", "author": "amarchesini@mozilla.com", "id": 13155498, "time": "2018-03-26T12:16:56Z"}, {"text": "Created attachment 8962307\npart 8 - docShell and necko\n\nHere the glue part.", "author": "amarchesini@mozilla.com", "id": 13155500, "time": "2018-03-26T12:17:52Z"}, {"text": "Comment on attachment 8962307\npart 8 - docShell and necko\n\namarchesini: please provide careful and detailed description of all the parts you have submitted with explanation how they work and why.  thanks. \n\nI can also see that some patches introducing changes to necko are not ran through necko peer review.  please do so next time.", "author": "honzab.moz@firemni.cz", "id": 13155720, "time": "2018-03-26T13:57:11Z"}, {"text": "c24", "author": "honzab.moz@firemni.cz", "id": 13155728, "time": "2018-03-26T13:59:04Z"}, {"text": "I though that the comments in this bug were enough. Here an explanation of the issue and of the patches:\n\nNecko uses nsIInputStream::Available() if the length of the upload stream is not passed to SetUploadStream or ExplicitSetUploadStream.\n\nUsing nsIInputStream::Available() is wrong if the stream is nsIAsyncInputStream, because ::Available() doesn't return the length of the stream, but just what is available to read. And 0 is good value (that means that ::AsyncWait() has to be used).\n\nWe pass the length in any SetUploadStream/ExplicitSetUploadStream call everywhere in DOM.\n\nBut there is one important place where we don't pass the length of the stream: when the loading of a page is done using nsISHEntry. This happens when a page is reloaded. nsISHEntry keeps a reference of the nsIInputStream, but not its length.\n\nMy first approach was to keep the length together with the stream in nsISHEntry. But if the page is posting a file, this can change and we should send the latest version of that file.\n\nThe way I want to fix this issue is to introduce two new interfaces: nsIFullSizeInputStream and nsIAsyncFullSizeInputStream (part 1). These 2 interfaces introduce FullSize() and AsyncFullSizeWait() methods, sync and async approach.\n\nIPCBlobInputStream must implement such interfaces (part 2). Just because IPCBlobInputStream is totally async, AsyncFullSizeWait() must be called. This can happen on any thread, any process, but the underlying OS File is handled on the parent process. Asynchronously the parent sends the length back to IPCBlobInputStream.\n\nBlobs can be sliced and merged, so, I needed to implement nsIFullSizeInputStream and nsIAsyncFullSizeInputStream also here: SlicedInputStream - part 4, nsBufferedInputStream - part 5, MIME inputStream - part 6, Multiplex InputStream - part 7.\n\nI also introduced an helper class able to extract the length of a stream using nsIFullSizeInputStream or nsIAsyncFullSizeInputStream or ::Available(), as fallback. part 3.\n\nThis helper class (FullSizeInputStreamHelper) is finally used by necko when SetUploadStream/ExplicitSetUploadStream is called. Just because the operation is async, AsyncOpen() must wait the result of the operation.\n\nI already have an interesting follow up: SetUploadStream/ExplicitSetUploadStream should not receive the content-length at all. Using FullSizeInputStreamHelper is enough. But I want to see these first set of patches in inbound before submitting this extra cleanup.", "author": "amarchesini@mozilla.com", "id": 13155860, "time": "2018-03-26T14:41:46Z"}, {"text": "Comment on attachment 8962300\npart 1 - nsIFullSizeInputStream and nsIAsyncFullSizeInputStream\n\nReview of attachment 8962300:\n-----------------------------------------------------------------\n\nI wrote some comments below.  I think the documentation in the IDL file should talk about why you would have this and use it vs. Available(), too; WDYT?\n\n::: xpcom/io/nsIFullSizeInputStream.idl\n@@ +6,5 @@\n> +\n> +interface nsIEventTarget;\n> +interface nsIFullSizeCallback;\n> +\n> +[scriptable, uuid(452d059f-9a9c-4434-8839-e10d1405647c)]\n\nDo all of these interfaces need to be scriptable?\n\n@@ +7,5 @@\n> +interface nsIEventTarget;\n> +interface nsIFullSizeCallback;\n> +\n> +[scriptable, uuid(452d059f-9a9c-4434-8839-e10d1405647c)]\n> +interface nsIFullSizeInputStream : nsISupports\n\nWDYT about calling this nsIStreamLength?\n\n@@ +9,5 @@\n> +\n> +[scriptable, uuid(452d059f-9a9c-4434-8839-e10d1405647c)]\n> +interface nsIFullSizeInputStream : nsISupports\n> +{\n> +  // Returns the full size of the stream if known. Otherwise it returns -1.\n\nTo be clear, this is the size of the input stream *now* or the total size of the input stream that can be read from it in the future?  For instance, consider a buffered input stream over a file: are we returning the size of the buffered data, or are we returning the size of the file?\n\n@@ +24,5 @@\n> +[scriptable, uuid(b63f9ecf-4668-44a3-93bd-72dbc65a6125)]\n> +interface nsIAsyncFullSizeInputStream : nsISupports\n> +{\n> +  void asyncFullSizeWait(in nsIFullSizeCallback aCallback,\n> +                         in nsIEventTarget aEventTarget);\n\nThis method needs documentation.  I am unsure what aEventTarget exists for; I assume it's an event target that will run aCallback at some future point, but I'm not really sure.\n\nI have a slight preference for calling this asyncWait; compare nsIAsyncFileMetadata/nsIFileMetadataCallback.\n\n@@ +38,5 @@\n> +    /**\n> +     * Called to inform what the full size of the stream is.\n> +     *\n> +     * @param aStream\n> +     *        The stream whose asyncFullSizeWait method was called.\n\nNo documentation for aFullSize?\n\n@@ +41,5 @@\n> +     * @param aStream\n> +     *        The stream whose asyncFullSizeWait method was called.\n> +     */\n> +    void onFullSizeReady(in nsIAsyncFullSizeInputStream aStream,\n> +                         in long long aFullSize);\n\nIs aFullSize in this method equivalent to the return value of nsIFullSizeInputStream, i.e. it can be -1?", "author": "nfroyd@mozilla.com", "id": 13156495, "time": "2018-03-26T17:53:59Z"}, {"text": "Created attachment 8962691\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13158478, "time": "2018-03-27T12:16:32Z"}, {"text": "(In reply to Andrea Marchesini [:baku] from comment #26)\n\nThanks for your very good summary, now I understand what's going on.", "author": "honzab.moz@firemni.cz", "id": 13158651, "time": "2018-03-27T13:54:09Z"}, {"text": "(In reply to Honza Bambas (:mayhemer) from comment #29)\n> (In reply to Andrea Marchesini [:baku] from comment #26)\n> \n> Thanks for your very good summary, now I understand what's going on.\n\nInteresting fact of what I'm doing here is that probably we can get rid of:\n\nhttps://searchfox.org/mozilla-central/source/netwerk/protocol/http/HttpChannelParent.cpp#607-659\nand fix bug 1294446.", "author": "amarchesini@mozilla.com", "id": 13158663, "time": "2018-03-27T13:58:25Z"}, {"text": "Comment on attachment 8962691\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength\n\nReview of attachment 8962691:\n-----------------------------------------------------------------\n\n::: xpcom/io/nsIInputStreamLength.idl\n@@ +18,5 @@\n> +  // non-blocking. If this happens, you should use\n> +  // nsIAsyncInputStreamLength::asyncWait().\n> +\n> +  // If the stream has already been used, length() returns\n> +  // NS_ERROR_NOT_AVAILABLE.\n\nthis is somewhat unclear, did you mean \"has already been read from?\"\n\n@@ +35,5 @@\n> +  // know its length.\n> +  //\n> +  // If the stream implements nsIAsyncInputStreamLength, then the caller can\n> +  // use this interface to request an asynchronous notification when the stream\n> +  // length becomes known (via the AsyncWait method).\n\ncan you specify what has to happen when the length is already known?  I assume we just post the event (not call the callback!) immediately to the target thread?\n\n@@ +63,5 @@\n> +     * @param aLength\n> +     *        The stream length. It can be -1 if the stream doesn't know its\n> +     *        length. For instance, this can happen for a pipe inputStream.\n> +     */\n> +    void onLengthReady(in nsIAsyncInputStreamLength aStream,\n\nI think onInputStreamLengthReady is a bit better name", "author": "honzab.moz@firemni.cz", "id": 13158666, "time": "2018-03-27T14:00:03Z"}, {"text": "Comment on attachment 8962691\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength\n\nCanceled all the review because of the renaming of the interfaces.", "author": "amarchesini@mozilla.com", "id": 13158669, "time": "2018-03-27T14:00:40Z"}, {"text": "Created attachment 8962749\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13159031, "time": "2018-03-27T15:55:01Z"}, {"text": "Created attachment 8963231\npart 2 - IPCBlobInputStream exposes nsIInputStreamLength\n\nI'm not going to ask for a review here because there is a leak. But it's important to have this patch here to have a complete view.", "author": "amarchesini@mozilla.com", "id": 13163990, "time": "2018-03-28T17:03:41Z"}, {"text": "Created attachment 8963233\npart 3 - InputStreamLengthHelper", "author": "amarchesini@mozilla.com", "id": 13163994, "time": "2018-03-28T17:04:44Z"}, {"text": "Created attachment 8963234\npart 4 - SlicedInputStream exposes nsIInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13163995, "time": "2018-03-28T17:05:18Z"}, {"text": "Created attachment 8963237\npart 5 - nsBufferedInputStream", "author": "amarchesini@mozilla.com", "id": 13164007, "time": "2018-03-28T17:08:37Z"}, {"text": "Created attachment 8963238\npart 6 - nsMIMEInputStream", "author": "amarchesini@mozilla.com", "id": 13164011, "time": "2018-03-28T17:09:07Z"}, {"text": "Created attachment 8963240\npart 7 - nsIMultiplexInputStream", "author": "amarchesini@mozilla.com", "id": 13164017, "time": "2018-03-28T17:10:07Z"}, {"text": "Created attachment 8963242\npart 8 - docShell and necko", "author": "amarchesini@mozilla.com", "id": 13164021, "time": "2018-03-28T17:11:22Z"}, {"text": "Created attachment 8963244\npart 9 - InputStreamLengthWrapper\n\nThis is the 'interesting' part. I want to have nsIInputStreamLength in necko everywhere instead having places where the length of the upload stream is passed as argument.\n\nBut there are places where the inputStream is a pipe. For this scenario I want to use this new class InputStreamLengthWrapper that makes any stream a nsIInputStreamLength.", "author": "amarchesini@mozilla.com", "id": 13164026, "time": "2018-03-28T17:13:16Z"}, {"text": "Created attachment 8963246\npart A - no contentLength param in explicit/setUploadStream", "author": "amarchesini@mozilla.com", "id": 13164033, "time": "2018-03-28T17:14:09Z"}, {"text": "Comment on attachment 8962749\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength\n\nReview of attachment 8962749:\n-----------------------------------------------------------------\n\nDo we want to provide a reference to the InputStreamLengthHelper.h header in the IDL file, suggesting that you use that class instead?  (Maybe that reference should be added in part 3.)\n\n::: xpcom/io/nsIInputStreamLength.idl\n@@ +18,5 @@\n> +  // non-blocking. If this happens, you should use\n> +  // nsIAsyncInputStreamLength::asyncWait().\n> +\n> +  // If the stream has already been read (read()/readSegments()/close()/seek()\n> +  // methods has been called), length() returns NS_ERROR_NOT_AVAILABLE.\n\nTo be clear here: *any* reading of the stream ensures that length() is going to throw?  Not just \"reading\" in the sense of consuming all the data, but any read of the data, no matter how small?\n\n@@ +21,5 @@\n> +  // If the stream has already been read (read()/readSegments()/close()/seek()\n> +  // methods has been called), length() returns NS_ERROR_NOT_AVAILABLE.\n> +\n> +  // This is not an attribute because a stream can change its length. For\n> +  // instance, if the stream is a file inputStream and the OS underlying file\n\nNit: I think \"underlying OS file\" is more idiomatic here.\n\n@@ +22,5 @@\n> +  // methods has been called), length() returns NS_ERROR_NOT_AVAILABLE.\n> +\n> +  // This is not an attribute because a stream can change its length. For\n> +  // instance, if the stream is a file inputStream and the OS underlying file\n> +  // changes, its length will change as well.\n\nNit: \"the stream's length\", so as to be precise about whose length we are discussing.", "author": "nfroyd@mozilla.com", "id": 13167636, "time": "2018-03-29T19:46:10Z"}, {"text": "Comment on attachment 8963234\npart 4 - SlicedInputStream exposes nsIInputStreamLength\n\nReview of attachment 8963234:\n-----------------------------------------------------------------\n\nr=me, though I'd really like the testcase noted below.\n\n::: xpcom/io/SlicedInputStream.cpp\n@@ +121,5 @@\n> +uint64_t\n> +SlicedInputStream::AdjustRange(uint64_t aRange)\n> +{\n> +  // Let's remove extra length from the end.\n> +  if (aRange + mCurPos > mStart + mLength) {\n\nWe are absolutely sure that none of these operations overflow, either here or below?  I guess we lifted these from Available(), so we *should* be OK...\n\nGiven the problem noted below, should we MOZ_ASSERT(aRange != UINT64_MAX) or similar?\n\n@@ +604,5 @@\n> +  if (!mAsyncWaitLengthCallback) {\n> +    return NS_OK;\n> +  }\n> +\n> +  aLength = (int64_t)AdjustRange((uint64_t)aLength);\n\nWe should check for -1 here before adjusting the length, yes?  Can we get a test for that?", "author": "nfroyd@mozilla.com", "id": 13167683, "time": "2018-03-29T20:06:09Z"}, {"text": "Comment on attachment 8963233\npart 3 - InputStreamLengthHelper\n\nReview of attachment 8963233:\n-----------------------------------------------------------------\n\nI would like to see the documentation requested below.\n\n::: xpcom/io/InputStreamLengthHelper.h\n@@ +18,5 @@\n> +  NS_DECL_ISUPPORTS_INHERITED\n> +\n> +  static void\n> +  GetLength(nsIInputStream* aStream,\n> +            const std::function<void(int64_t aLength)>& aCallback);\n\nDocumentation for this class or function would be useful.\n\n@@ +31,5 @@\n> +  Run() override;\n> +\n> +  NS_IMETHOD\n> +  OnInputStreamLengthReady(nsIAsyncInputStreamLength* aStream,\n> +                           int64_t aLength) override;\n\nIsn't this just NS_DECL_NSIINPUTSTREAMLENGTHCALLBACK?\n\n::: xpcom/tests/gtest/TestInputStreamLengthHelper.cpp\n@@ +13,5 @@\n> +#include \"Helpers.h\"\n> +\n> +using namespace mozilla;\n> +\n> +TEST(TestInputStreamLengthHelper, NonLengthStream) {\n\nTests! <3", "author": "nfroyd@mozilla.com", "id": 13167788, "time": "2018-03-29T20:47:21Z"}, {"text": "Comment on attachment 8963244\npart 9 - InputStreamLengthWrapper\n\nReview of attachment 8963244:\n-----------------------------------------------------------------\n\nI think this works, but I haven't taken a look at how this class is actually used.\n\n::: xpcom/io/InputStreamLengthWrapper.cpp\n@@ +37,5 @@\n> +  : mWeakCloneableInputStream(nullptr)\n> +  , mWeakIPCSerializableInputStream(nullptr)\n> +  , mWeakSeekableInputStream(nullptr)\n> +  , mWeakAsyncInputStream(nullptr)\n> +  , mLength(aLength)\n\nDo we want to assert that this is not -1?\n\n@@ +307,5 @@\n> +NS_IMETHODIMP\n> +InputStreamLengthWrapper::Length(int64_t* aLength)\n> +{\n> +  NS_ENSURE_STATE(mInputStream);\n> +  *aLength = mLength;\n\nIs this correct if the underlying stream supports nsIInputStreamLength?  AFAICT, mLength is only ever set if the stream is deserialized from over IPC...oh, or the constructor that provides a length is used.   I assume the constructor is going to be used liberally in the next patch(es)?\n\n::: xpcom/io/InputStreamLengthWrapper.h\n@@ +16,5 @@\n> +#include \"nsIInputStreamLength.h\"\n> +\n> +namespace mozilla {\n> +\n> +// A wrapper keeps an inputStream together with its length.\n\nSo this is basically just a forwarding class?  You probably want to document what the behavior is around this class's implementation of nsIInputStreamLength.\n\n@@ +36,5 @@\n> +  NS_DECL_NSIINPUTSTREAMCALLBACK\n> +  NS_DECL_NSIINPUTSTREAMLENGTH\n> +\n> +  InputStreamLengthWrapper(already_AddRefed<nsIInputStream> aInputStream,\n> +                           int64_t aLength);\n\nDocumentation should probably make clear that this length is what will be used for nsIInputStreamLength, and the stream will not be consulted.", "author": "nfroyd@mozilla.com", "id": 13167831, "time": "2018-03-29T21:05:21Z"}, {"text": "Comment on attachment 8963240\npart 7 - nsIMultiplexInputStream\n\nReview of attachment 8963240:\n-----------------------------------------------------------------\n\nI think this all makes sense.\n\n::: xpcom/io/nsMultiplexInputStream.cpp\n@@ +1207,5 @@\n> +      return NS_ERROR_OUT_OF_MEMORY;\n> +    }\n> +  }\n> +\n> +  *aLength = length.value();\n\nMOZ_ASSERT(length.isValid()), please.\n\n@@ +1254,5 @@\n> +\n> +    // If we don't need to wait, let's inform the callback immediately.\n> +    if (mPendingStreams.IsEmpty() || mNegativeSize) {\n> +      RefPtr<nsMultiplexInputStream> parentStream = aParentStream;\n> +      int64_t length = mNegativeSize ? -1 : mLength.value();\n\nAre we guaranteed here that mLength is necessarily valid?\n\n@@ +1293,5 @@\n> +    mPendingStreams.RemoveElement(aStream);\n> +\n> +    if (aLength == -1) {\n> +      mNegativeSize = true;\n> +    } else { \n\nNit: trailing whitespace.\n\n@@ +1310,5 @@\n> +    if (!mStream) {\n> +      return NS_OK;\n> +    }\n> +\n> +    // Let's notified the parent stream.\n\nNit: \"Let's notify\"?\n\n::: xpcom/tests/gtest/Helpers.h\n@@ +93,5 @@\n>    nsCOMPtr<nsIInputStreamCallback> mCallback;\n>    nsCOMPtr<nsIEventTarget> mCallbackEventTarget;\n>  };\n>  \n> +class LengthInputStream final : public nsIInputStream\n\nSome explanation of what this class is for--even for test code--would be good.", "author": "nfroyd@mozilla.com", "id": 13167853, "time": "2018-03-29T21:16:33Z"}, {"text": "Comment on attachment 8963242\npart 8 - docShell and necko\n\nok, so the docshell/form part is backing out bug 1398733.\nr+ for that. Didn't look at necko stuff\n\nWe obviously need some tests here to prevent future regressions.", "author": "bugs@pettay.fi", "id": 13181136, "time": "2018-04-04T20:41:34Z"}, {"text": "Comment on attachment 8962749\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength\n\nReview of attachment 8962749:\n-----------------------------------------------------------------\n\nnit: the comments should be doxygen, but up to you to leave or update\n\n::: xpcom/io/nsIInputStreamLength.idl\n@@ +15,5 @@\n> +  // bytes ready to be read from the stream.\n> +\n> +  // It could throw NS_BASE_STREAM_WOULD_BLOCK if the inputStream is\n> +  // non-blocking. If this happens, you should use\n> +  // nsIAsyncInputStreamLength::asyncWait().\n\nhmm.. somehow I don't follow when this returns {OK,-1} and when {NS_BASE_STREAM_WOULD_BLOCK}.  should be explained in a bit more detail or the implementation should be made more consistent (choose only one of the possible results) if there is actually no difference for the consumer regarding handling.\n\n@@ +37,5 @@\n> +  // If the stream implements nsIAsyncInputStreamLength, then the caller can\n> +  // use this interface to request an asynchronous notification when the stream\n> +  // length becomes known (via the AsyncWait method).\n> +  // If the length is already known, the aCallback will be still called\n> +  // asynchronously.\n\ndoes the 'throw after read' applies here as well as for the sync version? (=throw NS_ERROR_NOT_AVAILABLE after Read/ReadSegments/etc was called)", "author": "honzab.moz@firemni.cz", "id": 13182937, "time": "2018-04-05T12:47:49Z"}, {"text": "Comment on attachment 8963237\npart 5 - nsBufferedInputStream\n\nReview of attachment 8963237:\n-----------------------------------------------------------------\n\n::: netwerk/base/nsBufferedStreams.cpp\n@@ +784,5 @@\n> +    return NS_ERROR_FAILURE;\n> +  }\n> +\n> +  if (mAsyncInputStreamLengthCallback && aCallback) {\n> +      return NS_ERROR_FAILURE;\n\nindent\n\n@@ +808,5 @@\n> +    return NS_OK;\n> +  }\n> +\n> +  nsCOMPtr<nsIInputStreamLengthCallback> callback;\n> +  callback.swap(mAsyncInputStreamLengthCallback);\n\nok, you are correctly swapping to a local var, that's a must.  \n\nbut the whole access to mAsyncInputStreamLengthCallback must be synchronized.  apparently AsyncWait() and  OnInputStreamLengthReady() can be called on different threads.\n\nwe can fix this here or in bug 1451731 I just filed for the the mAsyncWaitCallback member", "author": "honzab.moz@firemni.cz", "id": 13183051, "time": "2018-04-05T13:35:24Z"}, {"text": "Comment on attachment 8963238\npart 6 - nsMIMEInputStream\n\nReview of attachment 8963238:\n-----------------------------------------------------------------\n\n::: netwerk/base/nsMIMEInputStream.cpp\n@@ +408,5 @@\n> +    }\n> +\n> +    nsCOMPtr<nsIInputStreamLengthCallback> callback = mAsyncInputStreamLengthCallback;\n> +    mAsyncInputStreamLengthCallback = nullptr;\n> +    return callback->OnInputStreamLengthReady(this, aLength);\n\nsame issue, will update 1451731", "author": "honzab.moz@firemni.cz", "id": 13183100, "time": "2018-04-05T13:45:22Z"}, {"text": "Comment on attachment 8963240\npart 7 - nsIMultiplexInputStream\n\nReview of attachment 8963240:\n-----------------------------------------------------------------\n\n::: xpcom/io/nsMultiplexInputStream.cpp\n@@ +1179,5 @@\n> +      continue;\n> +    }\n> +\n> +    if (rv == NS_ERROR_NOT_AVAILABLE) {\n> +        return rv;\n\nindent\n\n@@ +1289,5 @@\n> +                           int64_t aLength) override\n> +  {\n> +    MOZ_ASSERT(mPendingStreams.Contains(aStream));\n> +\n> +    mPendingStreams.RemoveElement(aStream);\n\nthis is racy.  you iterate on one thread in Proceed but this can be called on a different thread while you still iterate this array.  that will likely crash.\n\nyou should probably take a reference to the lock of the given nsMultiplexInputStream and use it here to sync, that would also sync access to this class's mStream member\n\nr- for this.\n\n@@ +1312,5 @@\n> +    }\n> +\n> +    // Let's notified the parent stream.\n> +    RefPtr<nsMultiplexInputStream> stream;\n> +    stream.swap(mStream);\n\nI think, access to this member is not fully atomic\n\n@@ +1326,5 @@\n> +\n> +  CheckedInt64 mLength;\n> +  bool mNegativeSize;\n> +\n> +  // Protected by mutex.\n\nwhat mutex?  i don't see that\n\n@@ +1368,5 @@\n> +      do_QueryInterface(mStreams[i].mStream);\n> +    if (!stream) {\n> +      // Let's use available as fallback.\n> +      uint64_t streamAvail = 0;\n> +      nsresult rv = AvailableMaybeSeek(mStreams[i], &streamAvail);\n\nI'm just wondering if this fallback to available is a good idea, in general.  if this new API has to reliably return what is the real length of the stream, then maybe we should rather fail here.\n\nbut this is up to you, just raising a concern.", "author": "honzab.moz@firemni.cz", "id": 13183221, "time": "2018-04-05T14:24:41Z"}, {"text": "Comment on attachment 8963242\npart 8 - docShell and necko\n\nReview of attachment 8963242:\n-----------------------------------------------------------------\n\nlooks good, there is just one piece of code that is not clear to me.  to leave the discussion open I r-.  if explained and clear, I'll change to r+.\n\n::: netwerk/protocol/http/HttpBaseChannel.cpp\n@@ +1074,5 @@\n> +  RefPtr<HttpBaseChannel> self = this;\n> +  InputStreamLengthHelper::GetLength(aStream,\n> +    [self, aStreamHasHeaders](int64_t aLength) {\n> +      self->mPendingInputStreamLengthOperation = false;\n> +      self->ExplicitSetUploadStreamLength(aLength >= 0 ? aLength : 0,\n\nso, when we get -1 (unknown or failure) we pass 0 as a result to the channel?  can you explain why?\n\nit also seems that mReqContentLength can no longer keep -1 (should we make it unsigned?)\n\n@@ +1101,5 @@\n> +  nsAutoCString value;\n> +  nsresult rv = GetRequestHeader(header, value);\n> +  if (NS_SUCCEEDED(rv) && !value.IsEmpty()) {\n> +    return NS_OK;\n> +  }\n\nthis block is totally unclear to me.  if this is a re-post and a file being uploaded has been modified since, won't this just keep the wrong size while we still upload a different size?  that would break framing.\n\nthis really needs a very good explanation why we can't change the header.\n\nr- for that.\n\n@@ +1103,5 @@\n> +  if (NS_SUCCEEDED(rv) && !value.IsEmpty()) {\n> +    return NS_OK;\n> +  }\n> +\n> +  // SetRequestHeader propagates headers to chrome if HttpChannelChild\n\nI think only when called before we send asyncOpen up, which is probably the case ; anyway, would be good to MOZ_ASSERT(!mWasOpened) here if you need to enforce that\n\n@@ +1121,5 @@\n>    return NS_OK;\n>  }\n>  \n> +bool\n> +HttpBaseChannel::MaybeWaitForLengthOperation(nsIStreamListener *aListener,\n\nMaybeWaitForUploadStreamLength() ?\n\n@@ +1122,5 @@\n>  }\n>  \n> +bool\n> +HttpBaseChannel::MaybeWaitForLengthOperation(nsIStreamListener *aListener,\n> +                                               nsISupports *aContext)\n\nindent\n\n@@ +1123,5 @@\n>  \n> +bool\n> +HttpBaseChannel::MaybeWaitForLengthOperation(nsIStreamListener *aListener,\n> +                                               nsISupports *aContext)\n> +{\n\nplease assert thread (I believe main thread is the thread this is expected to be called on?)\n\n@@ +1135,5 @@\n> +}\n> +\n> +void\n> +HttpBaseChannel::MaybeResumeAsyncOpen()\n> +{\n\nplease assert thread (I believe main thread is the thread this is expected to be called on?)\n\n::: netwerk/protocol/http/HttpBaseChannel.h\n@@ +489,5 @@\n>    CheckRedirectLimit(uint32_t aRedirectFlags) const;\n>  \n> +  bool\n> +  MaybeWaitForLengthOperation(nsIStreamListener *aListener,\n> +                                nsISupports *aContext);\n\nindent\n\n@@ +746,5 @@\n> +\n> +  nsCOMPtr<nsIStreamListener> mPendingAsyncOpenListener;\n> +  nsCOMPtr<nsISupports> mPendingAsyncOpenContext;\n> +\n> +  bool mPendingInputStreamLengthOperation;\n\nall these members need comments\n\n::: netwerk/protocol/http/HttpChannelParent.cpp\n@@ +569,2 @@\n>  \n> +    // Let's resolve the size of the stream.\n\nplease add a note that InputStreamLengthHelper::GetLength goes always async", "author": "honzab.moz@firemni.cz", "id": 13183444, "time": "2018-04-05T15:23:17Z"}, {"text": "Comment on attachment 8963246\npart A - no contentLength param in explicit/setUploadStream\n\nReview of attachment 8963246:\n-----------------------------------------------------------------\n\nthere are dom changes I can't review\n\nbut more generally, unless you have a very strong need to remove that argument, I'm against this patch.  when the size of the stream is known and could be simply set, with this patch you force to do a main thread loop (post and wait for result) on any upload stream.  this is something I'm strongly against from the performance point of view.\n\n::: netwerk/protocol/http/HttpBaseChannel.cpp\n@@ -1067,5 @@\n>    mUploadStream = aStream;\n>  \n> -  if (aContentLength >= 0) {\n> -    return ExplicitSetUploadStreamLength(aContentLength, aStreamHasHeaders);\n> -  }\n\nhmmm... so when the size is know and could be set immediately we rather do a main thread loop to get it from the stream?\n\nthat really doesn't make me happy :(", "author": "honzab.moz@firemni.cz", "id": 13183545, "time": "2018-04-05T15:55:09Z"}, {"text": "Created attachment 8966150\npart 5 - nsBufferedInputStream\n\nSame patch built on top of 1451731.", "author": "amarchesini@mozilla.com", "id": 13191493, "time": "2018-04-09T10:32:29Z"}, {"text": "> I'm just wondering if this fallback to available is a good idea, in general.\n> if this new API has to reliably return what is the real length of the\n> stream, then maybe we should rather fail here.\n\nThis is kind of needed because not all the streams implement nsIAsyncInputStreamLength. For instance string and file streams do not implement that interface.", "author": "amarchesini@mozilla.com", "id": 13191573, "time": "2018-04-09T11:29:59Z"}, {"text": "(In reply to Andrea Marchesini [:baku] from comment #56)\n> > I'm just wondering if this fallback to available is a good idea, in general.\n> > if this new API has to reliably return what is the real length of the\n> > stream, then maybe we should rather fail here.\n> \n> This is kind of needed because not all the streams implement\n> nsIAsyncInputStreamLength. For instance string and file streams do not\n> implement that interface.\n\nMakes sense.  Should we file followups for making them implement those interfaces or do you think the available() fallback is fine here?  It probably is because your new API provides the total-length information only while we have not read from the stream yet.  So for static-length streams (string/file) the result is identical for available() and your new API.", "author": "honzab.moz@firemni.cz", "id": 13191588, "time": "2018-04-09T11:39:20Z"}, {"text": "Created attachment 8966188\npart 7 - nsIMultiplexInputStream", "author": "amarchesini@mozilla.com", "id": 13191699, "time": "2018-04-09T12:32:26Z"}, {"text": "> so, when we get -1 (unknown or failure) we pass 0 as a result to the\n> channel?  can you explain why?\n\nWe must set Content-Length somehow. Before, if ::Available() failed, we returned NS_ERROR_FAILURE.\nHere, I forced the stream to be 0. But maybe I can abort the channel to have a similar behavior.\n\n> it also seems that mReqContentLength can no longer keep -1 (should we make\n> it unsigned?)\n\nAlready done.\n\n> @@ +1101,5 @@\n> > +  nsAutoCString value;\n> > +  nsresult rv = GetRequestHeader(header, value);\n> > +  if (NS_SUCCEEDED(rv) && !value.IsEmpty()) {\n> > +    return NS_OK;\n> > +  }\n\nI don't remember exactly if it was a test or it was a chunk of code somewhere else (I need to comment out this block and run all to try again to tell you), but there was something like:\n\nchannel->SetUploadStream(a_Stream);\nchannel->SetRequestHeader(\"Content-Length\", X);\n\nNow, with my code, the callback is executed after SetRequestHeader, and it overwrites the X value. In order to avoid this, I added a check. I'll tell you more when I have the first try results.", "author": "amarchesini@mozilla.com", "id": 13191730, "time": "2018-04-09T12:48:21Z"}, {"text": "Comment on attachment 8966150\npart 5 - nsBufferedInputStream\n\nReview of attachment 8966150:\n-----------------------------------------------------------------\n\nthanks\n\n::: netwerk/base/nsBufferedStreams.cpp\n@@ +798,5 @@\n> +  {\n> +    MutexAutoLock lock(mMutex);\n> +\n> +    if (mAsyncInputStreamLengthCallback && aCallback) {\n> +        return NS_ERROR_FAILURE;\n\nindention", "author": "honzab.moz@firemni.cz", "id": 13192620, "time": "2018-04-09T17:31:43Z"}, {"text": "Comment on attachment 8966188\npart 7 - nsIMultiplexInputStream\n\nReview of attachment 8966188:\n-----------------------------------------------------------------\n\nLGTM, thanks\n\n::: xpcom/io/nsMultiplexInputStream.cpp\n@@ +1322,5 @@\n> +\n> +    // Already notified.\n> +    if (mStreamNotified) {\n> +      return NS_OK;\n> +    }\n\ncan this be moved higher?\n\n@@ +1351,5 @@\n> +nsMultiplexInputStream::AsyncWait(nsIInputStreamLengthCallback* aCallback,\n> +                                  nsIEventTarget* aEventTarget)\n> +{\n> +  if (NS_WARN_IF(!aEventTarget)) {\n> +    return NS_ERROR_FAILURE;\n\nnit: I think NS_ERROR_NULL_POINTER would be better here?\n\n::: xpcom/tests/gtest/Helpers.h\n@@ +111,5 @@\n> +  LengthInputStream(const nsACString& aBuffer,\n> +                      bool aIsInputStreamLength,\n> +                      bool aIsAsyncInputStreamLength,\n> +                      nsresult aLengthRv = NS_OK,\n> +                      bool aNegativeValue = false)\n\nindention", "author": "honzab.moz@firemni.cz", "id": 13192759, "time": "2018-04-09T18:12:48Z"}, {"text": "(In reply to Andrea Marchesini [:baku] from comment #59)\n> > so, when we get -1 (unknown or failure) we pass 0 as a result to the\n> > channel?  can you explain why?\n> \n> We must set Content-Length somehow. Before, if ::Available() failed, we\n> returned NS_ERROR_FAILURE.\n> Here, I forced the stream to be 0. But maybe I can abort the channel to have\n> a similar behavior.\n\nI think the previous behavior was better.  I'd rather not send C-L: 0 and then potentially send some data (unpredictably, from a stream, potentially multiplexed, in a some weird state) after the request.  That could break framing on h1.1 conns.\n\n> > @@ +1101,5 @@\n> > > +  nsAutoCString value;\n> > > +  nsresult rv = GetRequestHeader(header, value);\n> > > +  if (NS_SUCCEEDED(rv) && !value.IsEmpty()) {\n> > > +    return NS_OK;\n> > > +  }\n> \n> I don't remember exactly if it was a test or it was a chunk of code\n> somewhere else (I need to comment out this block and run all to try again to\n> tell you), but there was something like:\n> \n> channel->SetUploadStream(a_Stream);\n> channel->SetRequestHeader(\"Content-Length\", X);\n> \n> Now, with my code, the callback is executed after SetRequestHeader, and it\n> overwrites the X value. In order to avoid this, I added a check. I'll tell\n> you more when I have the first try results.\n\nAha.  OK, this is somewhat important, so let's what the reason is.\n\nAnyway, this again shows that writing comments is a good thing to do ;)", "author": "honzab.moz@firemni.cz", "id": 13192786, "time": "2018-04-09T18:22:16Z"}, {"text": "Created attachment 8966883\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13197077, "time": "2018-04-11T08:57:44Z"}, {"text": "Created attachment 8966884\npart 3 - InputStreamLengthHelper", "author": "amarchesini@mozilla.com", "id": 13197080, "time": "2018-04-11T08:58:28Z"}, {"text": "Created attachment 8966885\npart 4 - SlicedInputStream exposes nsIInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13197082, "time": "2018-04-11T08:59:02Z"}, {"text": "Created attachment 8966893\npart 5 - nsBufferedInputStream", "author": "amarchesini@mozilla.com", "id": 13197117, "time": "2018-04-11T09:07:06Z"}, {"text": "Created attachment 8966894\npart 6 - nsMIMEInputStream", "author": "amarchesini@mozilla.com", "id": 13197120, "time": "2018-04-11T09:07:35Z"}, {"text": "Created attachment 8966895\npart 7 - nsIMultiplexInputStream", "author": "amarchesini@mozilla.com", "id": 13197124, "time": "2018-04-11T09:09:48Z"}, {"text": "Created attachment 8966896\npart 9 - InputStreamLengthWrapper", "author": "amarchesini@mozilla.com", "id": 13197130, "time": "2018-04-11T09:13:28Z"}, {"text": "Created attachment 8966897\npart A - PartiallySeekableInputStream\n\nThis bit is needed to make ServiceWorker tests to pass.\nNote that I already made the change of supporting AsyncWait(callback1) + AsyncWait(callback2). There is also a gtest for it.\n\nAs discussed, I'm going to change all the other InputStreams in a separate bug.", "author": "amarchesini@mozilla.com", "id": 13197136, "time": "2018-04-11T09:16:16Z"}, {"text": "Created attachment 8966899\npart B - docShell and necko\n\nYes, I really would like to get rid of this extra parameter. Now that we have nsIInputStreamLength and nsIAsyncInputStreamLength, there are no needs to pass the stream length.\n\nBut I agree with you about the performance impact of the previous patch. For this reason, here, I introduce InputStreamLengthHelper::GetSyncLength() and renamed the previous method to GetAsyncLength().\n\nThe dom/docShell parts have been already reviewed by smaug.", "author": "amarchesini@mozilla.com", "id": 13197148, "time": "2018-04-11T09:22:04Z"}, {"text": "Created attachment 8966905\npart C - Get rid of nsIStreamTransportService::InputAvailable\n\nThis method is not used anymore. We can remove it.\nBut I want the same feature in InputStreamLengthHelper because I don't want to call ::Available() on the main-thread with blocking inputStream.\n\nNow InputStreamLengthHelper returns false in GetSyncLength() if, calling ::Available() on main-thread, would run I/O operations. For GetAsyncLength(), AvailableEvent runnable is used as it was in nsStreamTransportService.", "author": "amarchesini@mozilla.com", "id": 13197164, "time": "2018-04-11T09:26:11Z"}, {"text": "*** Bug 1294446 has been marked as a duplicate of this bug. ***", "author": "amarchesini@mozilla.com", "id": 13197743, "time": "2018-04-11T13:25:43Z"}, {"text": "Created attachment 8967013\npart D - gtest for nsMIMEInputStream\n\nHere a gtest for nsMIMEInputStream. Note that this is needed for 1453340. If you want to review (and land) bug 1453340 before this, I can move the gtest there.\nOr I can file a separate bug just for these gtests.", "author": "amarchesini@mozilla.com", "id": 13198089, "time": "2018-04-11T14:50:54Z"}, {"text": "Comment on attachment 8966897\npart A - PartiallySeekableInputStream\n\nReview of attachment 8966897:\n-----------------------------------------------------------------\n\n::: netwerk/base/PartiallySeekableInputStream.cpp\n@@ +413,5 @@\n> +\n> +    callback.swap(mAsyncInputStreamLengthCallback);\n> +  }\n> +\n> +  MOZ_ASSERT(callback);\n\nI think this is not necessary?", "author": "honzab.moz@firemni.cz", "id": 13198179, "time": "2018-04-11T15:08:54Z"}, {"text": "Comment on attachment 8966899\npart B - docShell and necko\n\nReview of attachment 8966899:\n-----------------------------------------------------------------\n\nI reviewed only necko parts and the general helpers.  dom parts may need another peer review?  (not sure why those are part of this patch and not separated)\n\n::: dom/xhr/XMLHttpRequestMainThread.cpp\n@@ +2550,1 @@\n>                                                    false);\n\nanother instance (see later comments)\n\n::: netwerk/protocol/file/nsFileChannel.cpp\n@@ +492,5 @@\n>  \n>    if ((mUploadStream = stream)) {\n> +    // Make sure we know how much data we are uploading.\n> +    uint64_t avail;\n> +    nsresult rv = mUploadStream->Available(&avail);\n\nI don't remember how this upload stream works in file channel, but doesn't this do an unnecessary I/O?  yet another instance...\n\n::: netwerk/protocol/http/HttpBaseChannel.cpp\n@@ +3624,5 @@\n> +          RefPtr<InputStreamLengthWrapper> wrapper =\n> +            new InputStreamLengthWrapper(uploadStream.forget(),\n> +                                         nsCRT::atoll(clen.get()));\n> +          uploadStream = wrapper;\n> +        }\n\n(didn't catch you on IRC)\n\nit's not uncommon to have a long chain of redirects even for POST (sites are setting auth cookies that way.)  your patch will cause a wrapper over a wrapper over a wrapper etc just to carry this way an information that can be passed easily as an argument.\n\nthis unnecessary wrapping is the reason I don't like this patch in this form.\n\nI think a good compromise would be to rather have two signatures of the (explicit-)set-upload-stream method: one as you propose here not taking the argument and doing the Length()/AsyncLength() call on the stream, and another one that still takes the argument (actually what we have now) when the length is known/unchanged to not force wrapping the stream this way.\n\nother possibility could be to change the API specification for Length()/AsyncLength() to return always the same value, independent of the state of the stream - but that could become really hard to implement for all streams we have, so I may understand why you fail Length()/AsyncLength() after reading the stream and not renewing the length value even after seek(0).\n\nalso note that what we do in http transaction is that we just merge the request head and the upload stream (body) in a multiplexed stream and then send whatever amount the streams give us, actually sending what Available() gives at the moment.  if C-L and length of the stream are out of sync, we screw - that's a long standing possible race, no need to deal with it here.\n\n::: netwerk/protocol/http/HttpChannelParent.cpp\n@@ +567,5 @@\n> +    int64_t length;\n> +    if (InputStreamLengthHelper::GetSyncLength(stream, &length)) {\n> +      httpChannel->InternalSetUploadStreamLength(length >= 0 ? length : 0);\n> +    } else {\n> +      // Wait for the nputStreamLengthHelper::GetAsyncLength callback.\n\ntypo?", "author": "honzab.moz@firemni.cz", "id": 13198466, "time": "2018-04-11T16:27:33Z"}, {"text": "Comment on attachment 8966905\npart C - Get rid of nsIStreamTransportService::InputAvailable\n\nReview of attachment 8966905:\n-----------------------------------------------------------------\n\n::: xpcom/io/InputStreamLengthHelper.cpp\n@@ +24,5 @@\n> +    , mStream(stream)\n> +    , mCallback(aCallback)\n> +    , mSize(-1)\n> +  {\n> +    mCallbackTarget = GetCurrentThreadSerialEventTarget();\n\nyou may want to assert NS_IsMainThread() here, otherwise when mCallbackTarget ends up being a non-main thread, you will indefinitely loop your Run()\n\n@@ +32,5 @@\n> +  Run() override\n> +  {\n> +    // ping\n> +    if (!NS_IsMainThread()) {\n> +      MOZ_ASSERT(!NS_IsMainThread());\n\nnot necessary?", "author": "honzab.moz@firemni.cz", "id": 13198506, "time": "2018-04-11T16:36:41Z"}, {"text": "Created attachment 8967128\npart 8 - docShell and necko\n\nHere part 8. I marked it obsolete by mistake.", "author": "amarchesini@mozilla.com", "id": 13199002, "time": "2018-04-11T19:19:51Z"}, {"text": "Created attachment 8967148\npart E - InputStreamLengthWrapper::ReadSegments\n\nThis patch is needed because otherwise FetchUtils is not able to call ReadSegment(). I don't want to wrap it with a nsBufferedInputStream just in FetchUtils, because maybe there are other places where we need this method.", "author": "amarchesini@mozilla.com", "id": 13199175, "time": "2018-04-11T20:08:15Z"}, {"text": "Created attachment 8967291\npart F - InputStreamWrapper must expose nsIMultiplexInputStream, nsIStreamBufferAccess, and nsIFileInputStream interfaces to make webExtension upload happy.\n\nI'm not particularly happy of nsIFileInputStream inheriting nsIInputStream. Would be much nicer if nsIFileInputStream inherits directly from nsISupports as many other stream interfaces do.\n\nSo far, there are no issues because there is only 1 implementation of nsIFileInputStream. Maybe, we can file a bug to make to nsIFileInputStream inherit nsISupports as follow up.", "author": "amarchesini@mozilla.com", "id": 13200289, "time": "2018-04-12T09:17:11Z"}, {"text": "Created attachment 8967312\npart 2 - IPCBlobInputStream exposes nsIInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13200502, "time": "2018-04-12T11:27:44Z"}, {"text": "Comment on attachment 8967148\npart E - InputStreamLengthWrapper::ReadSegments\n\nReview of attachment 8967148:\n-----------------------------------------------------------------\n\nI think this change in isolation makes sense.\n\n::: xpcom/io/InputStreamLengthWrapper.cpp\n@@ +118,5 @@\n>  }\n>  \n> +namespace {\n> +\n> +class MOZ_STACK_CLASS ReadSegmentsState final\n\nThere are probably a billion places where we can use a class like this.\n\n@@ +134,5 @@\n> +  void* mClosure;\n> +};\n> +\n> +nsresult\n> +ReadSegmentsCallback(nsIInputStream* aIn, void* aClosure,\n\nMaybe make this a static method of ReadSegmentsState, as Callback(...)?  Just so if we did want to move this to a common header or something, people wouldn't have to keep writing the callback.\n\n@@ +156,5 @@\n> +  ReadSegmentsState state(this, aWriter, aClosure);\n> +  nsresult rv = mInputStream->ReadSegments(ReadSegmentsCallback, &state, aCount,\n> +                                           aResult);\n> +  if (NS_SUCCEEDED(rv) && *aResult != 0) {\n> +    mConsumed = true;\n\nI think it'd be good to add some sort of documentation on `mConsumed`.  I was initially confused here that all we wanted was some data read, and we consider the stream \"consumed\", but apparently this is consistent with `Read()`.\n\nActually, judging by attachment 8966896, `mConsumed` is basically write-only...so do we need it at all?", "author": "nfroyd@mozilla.com", "id": 13201300, "time": "2018-04-12T16:14:15Z"}, {"text": "Comment on attachment 8967291\npart F - InputStreamWrapper must expose nsIMultiplexInputStream, nsIStreamBufferAccess, and nsIFileInputStream interfaces to make webExtension upload happy.\n\nReview of attachment 8967291:\n-----------------------------------------------------------------\n\nI can't tell whether having InputStreamLengthWrapper implement all these sub-interfaces is a good thing.  I suppose the alternative, where you had:\n\ntemplate<typename StreamInterface>\nclass Wrapper\n{\n  // Do the base functionality of InputStreamLengthWrapper.\n\n  // Expose methods for StreamInterface, probably through some traits class.\n};\n\nwould probably fail, because there'd be something that expects multiple interfaces to be implemented by the wrapper.  You could extend Wrapper to be templated on multiple interfaces (and therefore magically implement them).  But you can't predict all the possible combinations that you're going to need, right?  And so you might as well implement everything?\n\nr+, I guess, but I'm very skeptical of those MOZ_CRASHes, and I'd like to understand those before this bug is landed.\n\n::: xpcom/io/InputStreamLengthWrapper.cpp\n@@ +117,5 @@\n>    }\n> +\n> +  nsCOMPtr<nsIMultiplexInputStream> multiplexInputStream =\n> +    do_QueryInterface(mInputStream);\n> +  if (multiplexInputStream &&\n\nThere's so much goo here (and I think we use this other pattern of holding weak pointers in other classes, too), perhaps we should come up with some common function/object for this?  Followup bug would be OK, I think; this bug is getting a little unwieldy.\n\n@@ +232,5 @@\n>    }\n>  \n>    nsCOMPtr<nsIInputStream> stream =\n> +    static_cast<nsIAsyncInputStream*>(\n> +      new InputStreamLengthWrapper(clonedStream.forget(), mLength));\n\nMaybe this (and following .forget()) would be better as:\n\nRefPtr<InputStreamLengthWrapper> stream = new ...;\n*aResult = stream.forget().downcast<nsIAsyncInputStream>().take();\n\n?  Not sure if that's really any better, but at least we wouldn't have to QI in there?\n\n@@ +416,5 @@\n> +NS_IMETHODIMP\n> +InputStreamLengthWrapper::GetCount(uint32_t* aCount)\n> +{\n> +  NS_ENSURE_STATE(mWeakMultiplexInputStream);\n> +  return mWeakMultiplexInputStream->GetCount(aCount);\n\nIt's really too bad that the NS_FORWARD_* macros can't be used for this sort of thing.\n\n@@ +423,5 @@\n> +NS_IMETHODIMP\n> +InputStreamLengthWrapper::AppendStream(nsIInputStream* aStream)\n> +{\n> +  NS_ENSURE_STATE(mWeakMultiplexInputStream);\n> +  MOZ_CRASH(\"nsIMultiplexInputStream::AppendStream is not supported because it would change the length.\");\n\nI feel like these MOZ_CRASHes are going to bite us at the worst times.  Is returning failure for these not an option, or were you just trying to root out problems with your patch set, or something else?\n\n@@ +449,5 @@\n> +\n> +void\n> +InputStreamLengthWrapper::PutBuffer(char* aBuffer, uint32_t aLength)\n> +{\n> +  MOZ_CRASH(\"nsIStreamBufferAccess::PutBuffer is not supported because it would change the length.\");\n\nIt's unfortunate that this method is treated as infallible. =/", "author": "nfroyd@mozilla.com", "id": 13201375, "time": "2018-04-12T16:42:53Z"}, {"text": "Created attachment 8967434\npart G - Make streams able to return their lengths after Seek(0)\n\nI hope to have covered all the possible scenarios with gtests.\nIt's also green on try, if we have enough tests for POST redirects.", "author": "amarchesini@mozilla.com", "id": 13201425, "time": "2018-04-12T17:00:49Z"}, {"text": "Comment on attachment 8967434\npart G - Make streams able to return their lengths after Seek(0)\n\nReview of attachment 8967434:\n-----------------------------------------------------------------\n\n::: netwerk/base/PartiallySeekableInputStream.cpp\n@@ +392,5 @@\n> +    MutexAutoLock lock(mMutex);\n> +    if (mCachedLengthSet) {\n> +      *aLength = mCachedLength;\n> +      return NS_OK;\n> +    }\n\nwhy locked here...\n\n@@ +404,5 @@\n> +\n> +  // Let's cache the length.\n> +  {\n> +    mCachedLength = *aLength;\n> +    mCachedLengthSet = true;\n\n...and not here?\n\nif you make mCachedLengthSet atomic release/acquire (and follow the semantic), then I think you can go w/o a lock at all - but this is NOT a requirement, just a thought.\n\n@@ +461,5 @@\n> +  }\n> +\n> +  if (cachedLengthSet && callback) {\n> +    RefPtr<AsyncWaitLengthRunnable> r =\n> +      new AsyncWaitLengthRunnable(this, cachedLength);\n\nisn't it better to notify the callback directly?  I would not care about the AsyncWait(null) call in between, if that was the reason you've done it this way.\n\n@@ +462,5 @@\n> +\n> +  if (cachedLengthSet && callback) {\n> +    RefPtr<AsyncWaitLengthRunnable> r =\n> +      new AsyncWaitLengthRunnable(this, cachedLength);\n> +    return aEventTarget->Dispatch(r.forget(), NS_DISPATCH_NORMAL);\n\naEventTarget can be legally null.\n\n::: netwerk/test/gtest/TestBufferedInputStream.cpp\n@@ +183,5 @@\n> +  nsCOMPtr<nsISeekableStream> seekableStream = do_QueryInterface(bis);\n> +  MOZ_ASSERT(seekableStream);\n> +  ASSERT_EQ(NS_OK, seekableStream->Seek(nsISeekableStream::NS_SEEK_SET, 0));\n> +\n> +  rv = qi->Length(&size);\n\ncan we change the underlying stream size to check it has been reflected here?\n\n::: xpcom/io/SlicedInputStream.cpp\n@@ +503,5 @@\n> +      // If we rewind the stream, we want to rewind the underlying stream too.\n> +      offset = aOffset;\n> +      if (aOffset != 0) {\n> +        offset += mStart;\n> +      }\n\nif mStart > 0 and aOffset == 0, won't we then fail on https://searchfox.org/mozilla-central/rev/9f3da81290054c5b8955bb67ff98cae66676f745/xpcom/io/SlicedInputStream.cpp#484 ?\n\n::: xpcom/io/nsMultiplexInputStream.cpp\n@@ +552,5 @@\n>            if (NS_WARN_IF(NS_FAILED(rv))) {\n>              return rv;\n>            }\n> +\n> +          if (i == mCurrentStream) {\n\ndid you want `i == oldCurrentStream` ?\n\n@@ +559,2 @@\n>            continue;\n>          } else {\n\nnit: when you are here, I think you can remove this else (it's similar to 'else after return')\n\n::: xpcom/tests/gtest/Helpers.h\n@@ +96,5 @@\n>    nsCOMPtr<nsIEventTarget> mCallbackEventTarget;\n>  };\n>  \n>  // This class implements a simple nsIInputStreamLength stream.\n>  class LengthInputStream : public nsIInputStream\n\nnit: can be made final again?\n\n::: xpcom/tests/gtest/TestMultiplexInputStream.cpp\n@@ +592,5 @@\n> +  ASSERT_EQ(NS_OK, seekableStream->Seek(nsISeekableStream::NS_SEEK_SET, 0));\n> +\n> +  rv = qi->Length(&size);\n> +  ASSERT_EQ(NS_OK, rv);\n> +  ASSERT_EQ(buf.Length(), size);\n\na bit more extensive test for possible corner cases is IMO needed, the code in multiplex stream is quite complicated.\n\nalso would be good to: read(), change size of an inner stream, seek(0), check we get the new size", "author": "honzab.moz@firemni.cz", "id": 13203764, "time": "2018-04-13T13:42:16Z"}, {"text": "(In reply to Honza Bambas (:mayhemer) from comment #85)\n> I would not care about the\n> AsyncWait(null) call in between, if that was the reason you've done it this\n> way.\n\nerr... misplaced for AsyncWait for stream readiness, not length...  ignore that line please.", "author": "honzab.moz@firemni.cz", "id": 13203782, "time": "2018-04-13T13:51:35Z"}, {"text": "Comment on attachment 8967312\npart 2 - IPCBlobInputStream exposes nsIInputStreamLength\n\nIn the part 1\n+   * This is not an attribute because a stream can change its length. For\n+   * instance, if the stream is a file inputStream and the underlying OS file\n+   * changes, its length will change as well.\n+   */\n+  long long length();\nI don't quite understand the reasoning for not using attribute. Attribute values may change.\n\n\n\n>+NS_IMETHODIMP\n>+IPCBlobInputStream::AsyncWait(nsIInputStreamLengthCallback* aCallback,\n>+                              nsIEventTarget* aEventTarget)\nTo make the code easier to follow, I'd use some other method name than AsyncWait which is already used by\nnsIAsyncInputStream.\nWhat about something like queryStreamLength?\n\nWhenever mConsumed is set to true, we want to set \nmLengthCallback and mLengthCallbackEventTarget to null. Otherwise there is a high risk for leaks, I think.\n\nI don't quite understand the setup around the two different asyncWaits. I think this code wants length to be\nqueried before data, but nothing really enforces that. We just start to throw if data is read before length reading.\n\n\n>+IPCBlobInputStream::LengthReady(int64_t aLength)\n>+{\n>+  // We have been closed in the meantime.\n>+  if (mState == eClosed || mConsumed) {\n\n\n>+\n>+  if (mLength < mActor->Size()) {\n>+    aLength = XPCOM_MIN(aLength, (int64_t)mLength);\n>+  }\nThis needs a comment.\n\n>+// When the stream has been received from the parent, we inform the\n>+// IPCBlobInputStream.\n>+class LengthReadyRunnable final : public CancelableRunnable\n>+{\n>+public:\n>+  LengthReadyRunnable(IPCBlobInputStream* aDestinationStream, int64_t aSize)\n>+    : CancelableRunnable(\"dom::LengthReadyRunnable\")\n>+    , mDestinationStream(aDestinationStream)\n>+    , mSize(aSize)\n>+  {\n>+    MOZ_ASSERT(mDestinationStream);\n>+    // mCreatedStream can be null.\nWhat mCreatedStream?\n\n>   void\n>+  LengthNeeded(IPCBlobInputStream* aStream,\n>+                 nsIEventTarget* aEventTarget);\nfix indentation\n>+/* TODO\n>+  RefPtr<LengthInputStreamHelper> helper =\n>+    new LengthInputStreamHelper(stream);\n>+\n>+  helper->Run([self](length) {\n>+    if (self->mContentManager || mPBackgroundManager) {\n>+      Unused << self->SendLengthReady(length);\n>+    }\n>+  });\n>+*/\nWhat is this\n\n>+\n> nsIContentParent::DeallocPIPCBlobInputStreamParent(PIPCBlobInputStreamParent* aActor)\n> {\n>-  delete aActor;\n>+  RefPtr<IPCBlobInputStreamParent> actor =\n>+      dont_AddRef(static_cast<IPCBlobInputStreamParent*>(aActor));\nfix indentation\n\n\n>+++ b/dom/url/tests/mochitest.ini\n>@@ -18,8 +18,9 @@ support-files =\n> [test_worker_url.html]\n> [test_worker_urlApi.html]\n> [test_worker_url_exceptions.html]\n> [test_worker_urlSearchParams.html]\n> [test_unknown_url_origin.html]\n> [test_bloburl_location.html]\n> [test_worker_protocol.html]\n> support-files = protocol_worker.js\n>+[test_TEST.html]\nWhat is this? Some debugging?\n(but this bug needs tests)\n\nBackgroundParentImpl::DeallocPIPCBlobInputStreamParent(PIPCBlobInputStreamParent* aActor)\n> {\n>   AssertIsInMainProcess();\n>   AssertIsOnBackgroundThread();\n>   MOZ_ASSERT(aActor);\n> \n>-  delete aActor;\n>+  RefPtr<mozilla::dom::IPCBlobInputStreamParent> actor =\n>+      dont_AddRef(static_cast<mozilla::dom::IPCBlobInputStreamParent*>(aActor));\nfix indentation", "author": "bugs@pettay.fi", "id": 13204591, "time": "2018-04-13T17:53:51Z"}, {"text": "> +  long long length();\n\nThis follows the same logic of available().\n\n> >+NS_IMETHODIMP\n> >+IPCBlobInputStream::AsyncWait(nsIInputStreamLengthCallback* aCallback,\n> >+                              nsIEventTarget* aEventTarget)\n> To make the code easier to follow, I'd use some other method name than\n> AsyncWait which is already used by\n> nsIAsyncInputStream.\n> What about something like queryStreamLength?\n\nI don't really like the idea of changing this again. AsyncWait() is a common name of other similar operations:\n\nnsIAsyncOutputStream,  nsIAsyncInputStream, nsIAsyncFileMetadata.\n\n> I don't quite understand the setup around the two different asyncWaits. I\n> think this code wants length to be\n> queried before data, but nothing really enforces that. We just start to\n> throw if data is read before length reading.\n\nRight. The length is something that is available only before reading the stream.\nThis is documented in the interface.\n\n\n> >+/* TODO\n> >+  RefPtr<LengthInputStreamHelper> helper =\n> >+    new LengthInputStreamHelper(stream);\n> >+\n> >+  helper->Run([self](length) {\n> >+    if (self->mContentManager || mPBackgroundManager) {\n> >+      Unused << self->SendLengthReady(length);\n> >+    }\n> >+  });\n> >+*/\n> What is this\n\nSee patch 3.\n\n> >+[test_TEST.html]\n> What is this? Some debugging?\n> (but this bug needs tests)\n\nRight. It has a lot of gtests for any stream implementation. Plus there are the existing necko tests.\n\nI'll apply your comments as soon as possible.", "author": "amarchesini@mozilla.com", "id": 13204808, "time": "2018-04-13T18:55:44Z"}, {"text": "I'd say nsIAsyncFileMetadata shouldn't have method called asyncWait.\nAnd in nsIAsyncOutputStream and  nsIAsyncInputStream it makes a lot more sense.", "author": "bugs@pettay.fi", "id": 13205379, "time": "2018-04-13T23:16:11Z"}, {"text": "In general method name should hint what it is going to do. asyncWait is super generic, and making same class to implement several methods named asyncWait with different argument types just decreases code readability.", "author": "bugs@pettay.fi", "id": 13205381, "time": "2018-04-13T23:18:01Z"}, {"text": "(In reply to Olli Pettay [:smaug] (vacation Apr 15-20) from comment #90)\n> In general method name should hint what it is going to do. asyncWait is\n> super generic, and making same class to implement several methods named\n> asyncWait with different argument types just decreases code readability.\n\nFirst I somewhat did like it as it's a method of a specific interface, but then I caught myself once staring at \"the other\" asyncWait mistakenly before realizing the one I wanted was few lines away, so yes, it probably should have a different name.", "author": "honzab.moz@firemni.cz", "id": 13209307, "time": "2018-04-16T12:00:19Z"}, {"text": "Initially I submitted a patch with a method called: nsIAsyncFullSizeInputStream::asyncFullSizeWait(). The interface now is called nsIASyncInputStreamLength, so I guess the new method name could be:  asyncLengthWait() or asyncWaitForLength().", "author": "amarchesini@mozilla.com", "id": 13209760, "time": "2018-04-16T14:56:43Z"}, {"text": "Comment on attachment 8967128\npart 8 - docShell and necko\n\nReview of attachment 8967128:\n-----------------------------------------------------------------\n\nSorry for late answer.\n\nI'm getting a bit lost in this chain of patches, so I'm sorry if I happen requesting a change to something you are removing or changing later.  maybe would be good to merge the patches or at least clearly describe (set) bug dependencies?\n\n::: netwerk/protocol/http/HttpBaseChannel.cpp\n@@ +1045,5 @@\n>  \n> +  nsresult rv = SetRequestMethod(aMethod);\n> +  NS_ENSURE_SUCCESS(rv, rv);\n> +\n> +  // SetRequestHeader propagates headers to chrome if HttpChannelChild\n\nunfinished comment\n\n@@ +1069,5 @@\n> +  if (aContentLength >= 0) {\n> +    return ExplicitSetUploadStreamLength(aContentLength, aStreamHasHeaders);\n> +  }\n> +\n> +  // Let's resolve the size of the stream.\n\nassuming that one of the followup patches will turn this to `try sync, fallback async` path, right?\n\n@@ +1152,5 @@\n> +\n> +  nsCOMPtr<nsISupports> context;\n> +  context.swap(mPendingAsyncOpenContext);\n> +\n> +  AsyncOpen(listener, context);\n\nr- for this bit.\n\nIf AsyncOpen fails, you MUST call AsyncAbort with the error so that the listener gets notified.  Of course only in case this is called after the first call to AsyncOpen has already returned to the caller with NS_OK.\n\n::: netwerk/protocol/http/HttpBaseChannel.h\n@@ +746,5 @@\n> +\n> +  // These 2 members are needed to continue the AsyncOpen() when\n> +  // InputStreamLengthHelper::GetLength callback is executed.\n> +  nsCOMPtr<nsIStreamListener> mPendingAsyncOpenListener;\n> +  nsCOMPtr<nsISupports> mPendingAsyncOpenContext;\n\ncould you just use the existing mListener and mListenerContext members and here have a flag (to save some memory, since this is a heavily used class?)\n\n::: netwerk/protocol/http/HttpChannelParent.cpp\n@@ +569,3 @@\n>  \n> +    // Let's resolve the size of the stream. The following operation is always\n> +    // async.\n\nassuming that this will be made `try sync, fallback to async` in one of the followup patches, yes?", "author": "honzab.moz@firemni.cz", "id": 13221086, "time": "2018-04-20T11:33:27Z"}, {"text": "*** Bug 1459155 has been marked as a duplicate of this bug. ***", "author": "mhorrocks91@googlemail.com", "id": 13254278, "time": "2018-05-04T10:33:20Z"}, {"text": "Created attachment 8973671\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength\n\nRe-uploading all the patches.", "author": "amarchesini@mozilla.com", "id": 13259564, "time": "2018-05-07T14:00:42Z"}, {"text": "Created attachment 8973672\npart 2 - IPCBlobInputStream exposes nsIInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13259566, "time": "2018-05-07T14:01:13Z"}, {"text": "Created attachment 8973673\npart 3 - InputStreamLengthHelper\n\nThis patch has been already reviewed.", "author": "amarchesini@mozilla.com", "id": 13259568, "time": "2018-05-07T14:01:44Z"}, {"text": "Created attachment 8973674\npart 4 - SlicedInputStream exposes nsIInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13259569, "time": "2018-05-07T14:02:07Z"}, {"text": "Created attachment 8973675\npart 5 - nsBufferedInputStream", "author": "amarchesini@mozilla.com", "id": 13259571, "time": "2018-05-07T14:02:24Z"}, {"text": "Created attachment 8973676\npart 6 - nsMIMEInputStream", "author": "amarchesini@mozilla.com", "id": 13259572, "time": "2018-05-07T14:02:39Z"}, {"text": "Created attachment 8973677\npart 7 - nsIMultiplexInputStream", "author": "amarchesini@mozilla.com", "id": 13259574, "time": "2018-05-07T14:03:04Z"}, {"text": "Created attachment 8973678\npart 8 - docShell and necko\n\nThis patch is the last one here. All the rest can land in a separate bug.", "author": "amarchesini@mozilla.com", "id": 13259576, "time": "2018-05-07T14:03:50Z"}, {"text": "Comment on attachment 8973671\npart 1 - nsIInputStreamLength and nsIAsyncInputStreamLength\n\n>+/**\n>+ * Note: Instead of using these interfaces directly, consider to use\n>+ * InputStreamLengthHelper class.\n>+ */\n>+\n>+[uuid(452d059f-9a9c-4434-8839-e10d1405647c)]\n>+interface nsIInputStreamLength : nsISupports\n>+{\n>+  /**\n>+   * Returns the total length of the stream if known. Otherwise it returns -1.\n>+   * This is different than calling available() which returns the number of\n>+   * bytes ready to be read from the stream.\n>+   * -1 is a valid value for a stream that doesn't know its length. For\n>+   * instance, a pipe stream could return such value.\n>+   *\n>+   * It could throw NS_BASE_STREAM_WOULD_BLOCK if the inputStream is\n>+   * non-blocking. If this happens, you should use\n>+   * nsIAsyncInputStreamLength::asyncLengthWait().\n>+   *\n>+   * If the stream has already been read (read()/readSegments()/close()/seek()\n>+   * methods has been called), length() returns NS_ERROR_NOT_AVAILABLE.\n>+   *\n>+   * This is not an attribute because a stream can change its length. For\n>+   * instance, if the stream is a file inputStream and the underlying OS file\n>+   * changes, its length will change as well.\nNot a normal reasoning for not being an attribute. attribute values may change all the time.\nSay, element.parentNode is a readonly attribute, yet its value may change.\nSo, just drop the comment. Keeping it as a method sounds still ok.\n>+   * If the stream is non-blocking, nsIInputStreamLength::length() can return\n>+   * NS_BASE_STREAM_WOULD_BLOCK. The caller must then wait for the stream to\n>+   * know its length.\n>+   *\n>+   * If the stream implements nsIAsyncInputStreamLength, then the caller can\n>+   * use this interface to request an asynchronous notification when the\n>+   * stream's length becomes known (via the AsyncLengthWait method).\nit is asyncLengthWait in the idl\n\n>+   * If the length is already known, the aCallback will be still called\ndrop 'the' before aCallback", "author": "bugs@pettay.fi", "id": 13262761, "time": "2018-05-08T15:37:47Z"}, {"text": "Comment on attachment 8973672\npart 2 - IPCBlobInputStream exposes nsIInputStreamLength\n\n>#\n>+IPCBlobInputStream::AsyncLengthWait(nsIInputStreamLengthCallback* aCallback,\n>+                                    nsIEventTarget* aEventTarget)\n>+{\n>+  MOZ_ASSERT(!!aCallback == !!aEventTarget);\nHere you assert\n\n>+\n>+  MutexAutoLock lock(mMutex);\n>+\n>+  if (mState == eClosed) {\n>+    return NS_BASE_STREAM_CLOSED;\n>+  }\n>+\n>+  if (mConsumed) {\n>+    return NS_ERROR_NOT_AVAILABLE;\n>+  }\n>+\n>+  // If we have the callback, we must have the event target.\n>+  if (NS_WARN_IF(!!aCallback != !!aEventTarget)) {\n>+    return NS_ERROR_FAILURE;\n>+  }\nhere you warn.\nOne or the other, not both.\nI guess this if() is good enough.\n\n>+IPCBlobInputStream::LengthReady(int64_t aLength)\n>+{\n>+  nsCOMPtr<nsIInputStreamLengthCallback> lengthCallback;\n>+  nsCOMPtr<nsIEventTarget> lengthCallbackEventTarget;\n>+\n>+  {\n>+    MutexAutoLock lock(mMutex);\n>+\n>+    // We have been closed in the meantime.\n>+    if (mState == eClosed || mConsumed) {\n>+      return;\n>+    }\nmConsumed check here isn't quite what the .idl documentation says, since the callback creator doesn't get\nany error that the stream was read before the length callback was called. At least improve the documentation in .idl\n\n\n>+// When the stream has been received from the parent, we inform the\n>+// IPCBlobInputStream.\n>+class LengthReadyRunnable final : public CancelableRunnable\n>+{\n>+public:\n>+  LengthReadyRunnable(IPCBlobInputStream* aDestinationStream, int64_t aSize)\n>+    : CancelableRunnable(\"dom::LengthReadyRunnable\")\n>+    , mDestinationStream(aDestinationStream)\n>+    , mSize(aSize)\n>+  {\n>+    MOZ_ASSERT(mDestinationStream);\n>+    // mCreatedStream can be null.\nThere is no mCreateStream in this class. I mentioned this already in previous review.\n\n\n>+    if (mLength < mActor->Size()) {\n>+      aLength = XPCOM_MIN(aLength, (int64_t)mLength);\n>+    }\nThis still needs a comment.\n\n>+  LengthNeeded(IPCBlobInputStream* aStream,\n>+                 nsIEventTarget* aEventTarget);\nThis still needs indentation fix.\n\n\n>   // This struct and the array are used for creating streams when needed.\n>   struct PendingOperation\n>   {\n>     RefPtr<IPCBlobInputStream> mStream;\n>     nsCOMPtr<nsIEventTarget> mEventTarget;\n>+    enum {\nNit, { should be on its own line\n\n\n>+/* TODO\n>+  RefPtr<LengthInputStreamHelper> helper =\n>+    new LengthInputStreamHelper(stream);\n>+\n>+  helper->Run([self](length) {\n>+    if (self->mContentManager || mPBackgroundManager) {\n>+      Unused << self->SendLengthReady(length);\n>+    }\n>+  });\n>+*/\nok, looks like this patch isn't read.\n\n\n\n>   nsresult rv;\n>-  IPCBlobInputStreamParent* parentActor =\n>+  RefPtr<IPCBlobInputStreamParent> parentActor =\n>     IPCBlobInputStreamParent::Create(aInputStream, aSize, aChildID, &rv,\n>                                      aManager);\n>   if (!parentActor) {\n>     return rv;\n>   }\n> \n>   if (!aManager->SendPIPCBlobInputStreamConstructor(parentActor,\n>                                                     parentActor->ID(),\n>                                                     parentActor->Size())) {\n>     return NS_ERROR_FAILURE;\n>   }\n> \n>+  // We need manually to increase the reference for this actor because the\n>+  // IPC allocator method is not triggered. The Release() is called by IPDL\n>+  // when the actor is deleted.\n>+  parentActor.get()->AddRef();\nWhy not just call parentActor.forget() ?\n\n\n\n> nsIContentParent::DeallocPIPCBlobInputStreamParent(PIPCBlobInputStreamParent* aActor)\n> {\n>-  delete aActor;\n>+  RefPtr<IPCBlobInputStreamParent> actor =\n>+      dont_AddRef(static_cast<IPCBlobInputStreamParent*>(aActor));\n2 spaces for indentation\n\n\n> BackgroundParentImpl::DeallocPIPCBlobInputStreamParent(PIPCBlobInputStreamParent* aActor)\n> {\n>   AssertIsInMainProcess();\n>   AssertIsOnBackgroundThread();\n>   MOZ_ASSERT(aActor);\n> \n>-  delete aActor;\n>+  RefPtr<mozilla::dom::IPCBlobInputStreamParent> actor =\n>+      dont_AddRef(static_cast<mozilla::dom::IPCBlobInputStreamParent*>(aActor));\n2 spaces for indentation\n(I would just NS_RELEASE)\n\n\n\nGiven that review comments were fixed, I assume wrong patch was uploaded.", "author": "bugs@pettay.fi", "id": 13262899, "time": "2018-05-08T16:17:44Z"}, {"text": "Comment on attachment 8973678\npart 8 - docShell and necko\n\nReview of attachment 8973678:\n-----------------------------------------------------------------\n\n::: netwerk/protocol/http/HttpBaseChannel.cpp\n@@ +1043,5 @@\n>  \n> +  nsresult rv = SetRequestMethod(aMethod);\n> +  NS_ENSURE_SUCCESS(rv, rv);\n> +\n> +  // SetRequestHeader propagates headers to chrome if HttpChannelChild\n\nplease either remove or fix up this broken sentence.\n\n@@ +1161,5 @@\n> +\n> +  nsCOMPtr<nsISupports> context;\n> +  context.swap(mPendingAsyncOpenContext);\n> +\n> +  AsyncOpen(listener, context);\n\nthis was unaddressed, see comment 93.\n\n::: netwerk/protocol/http/HttpBaseChannel.h\n@@ +751,5 @@\n> +  nsCOMPtr<nsISupports> mPendingAsyncOpenContext;\n> +\n> +  // This is set true if the channel is waiting for the\n> +  // InputStreamLengthHelper::GetAsyncLength callback.\n> +  bool mPendingInputStreamLengthOperation;\n\nagain, no response to my comments: could we use the existing members?  if not, please say why not.", "author": "honzab.moz@firemni.cz", "id": 13265297, "time": "2018-05-09T13:37:01Z"}, {"text": "> >+/* TODO\n> >+*/\n> ok, looks like this patch isn't read.\n\nThis part is changed in the following patches where I introduce InputStreamLengthHelper class.\n\n> > \n> >+  // We need manually to increase the reference for this actor because the\n> >+  // IPC allocator method is not triggered. The Release() is called by IPDL\n> >+  // when the actor is deleted.\n> >+  parentActor.get()->AddRef();\n> Why not just call parentActor.forget() ?\n\nTo follow the same pattern of IPCBlobInputStreamThread.\n\nAll the other comments applied.", "author": "amarchesini@mozilla.com", "id": 13274957, "time": "2018-05-14T07:45:25Z"}, {"text": "Created attachment 8975410\npart 2 - IPCBlobInputStream exposes nsIInputStreamLength", "author": "amarchesini@mozilla.com", "id": 13274962, "time": "2018-05-14T07:48:25Z"}, {"text": "Created attachment 8975419\npart 8 - docShell and necko", "author": "amarchesini@mozilla.com", "id": 13275128, "time": "2018-05-14T09:13:42Z"}, {"text": "Comment on attachment 8975419\npart 8 - docShell and necko\n\nReview of attachment 8975419:\n-----------------------------------------------------------------\n\n::: netwerk/protocol/http/HttpBaseChannel.cpp\n@@ +1151,5 @@\n> +  MOZ_ASSERT(NS_IsMainThread());\n> +  MOZ_ASSERT(!mPendingInputStreamLengthOperation);\n> +\n> +  if (!mListener) {\n> +    return;\n\nI don't understand this bit - mListener is non-null during the whole processing time of a channel (between successfull AsyncOpen and call and call to listener's OnStopRequest) as well as when we are waiting for the length operation.  \n\nHence I'm not sure you can use this as a good condition to prevent repeated (unwanted) call to AsyncOpen when things are not pending.  Also let you know that we access mListener on multiple threads (OnDataAvailable can be called on worker threads).\n\nIt's good you reuse the existing members, but we probably need a new (best a bit) field to prevent MaybeResumeAsyncOpen trigger AsyncOpen more than once or somehow strongly ensure the logic doesn't misbehave (that this will not be called after we have already started the channel operation)\n\n\nit seems to me that the condition for !mPendingInputStreamLengthOperation is not enough\n\n::: netwerk/protocol/http/HttpBaseChannel.h\n@@ +428,5 @@\n>    virtual void ReleaseListeners();\n>  \n> +  // Call AsyncAbort().\n> +  virtual void\n> +  DoAsyncAbort(nsresult aStatus) = 0;\n\nwhat's exactly the reason for this method?  some build issues when using the plain AsyncAbort?  Please add a comment why you have to add this method.", "author": "honzab.moz@firemni.cz", "id": 13275437, "time": "2018-05-14T11:58:33Z"}, {"text": "please see comment 109", "author": "honzab.moz@firemni.cz", "id": 13275438, "time": "2018-05-14T11:58:55Z"}, {"text": "Comment on attachment 8975410\npart 2 - IPCBlobInputStream exposes nsIInputStreamLength\n\n>+    if (mLength < mActor->Size()) {\n>+      // If the remote stream must be sliced, we must return here the correct\n>+      // value.\n>+      aLength = XPCOM_MIN(aLength, (int64_t)mLength);\n>+    }\n\n\nPlease document what mLength is in .h.\nAnd \"we must return here the correct value.\" isn't clear.\nThe comment should explain what aLength should point to - why min of aLength and mLength is the right value?", "author": "bugs@pettay.fi", "id": 13275513, "time": "2018-05-14T12:45:03Z"}, {"text": "> I don't understand this bit - mListener is non-null during the whole\n> processing time of a channel (between successfull AsyncOpen and call and\n> call to listener's OnStopRequest) as well as when we are waiting for the\n> length operation.\n\nThis method is called when GetAsyncLength() execs the callback, and, maybe AsyncOpen2() has not been called yet. In this case, mListener is null.\n\nI see the problem of calling AsyncOpen() more than once. I think would be better to use mPendingAsyncOpenListener/Context as I was doing in the previous patches.\n\n> what's exactly the reason for this method?  some build issues when using the\n> plain AsyncAbort?  Please add a comment why you have to add this method.\n\nAsyncAbort() is not part of the channel. It's part of HttpAsyncAborter class. nsHttpChannel and other classes inherit HttpAsyncAborter, but here we are in HttpBaseChannel, which doesn't have access to AsyncAbort().", "author": "amarchesini@mozilla.com", "id": 13280969, "time": "2018-05-16T10:06:53Z"}, {"text": "(In reply to Andrea Marchesini [:baku] from comment #112)\n> > I don't understand this bit - mListener is non-null during the whole\n> > processing time of a channel (between successfull AsyncOpen and call and\n> > call to listener's OnStopRequest) as well as when we are waiting for the\n> > length operation.\n> \n> This method is called when GetAsyncLength() execs the callback, and, maybe\n> AsyncOpen2() has not been called yet. In this case, mListener is null.\n> \n> I see the problem of calling AsyncOpen() more than once. I think would be\n> better to use mPendingAsyncOpenListener/Context as I was doing in the\n> previous patches.\n\nWhat I'm trying to avoid is adding new heavy members to the http channel class unless really necessary.  here I have a feeling it's not necessary and we can do with the existing mListener/Context members.  to protect duplicate effects when you method is called unexpectedly more than once we just need to add a flag - a bit field at best - that will prevent it.  I would also add assert(false) when we hit it more than once, since that should probably not happen.\n\ndo you think it's doable?\n\n> \n> > what's exactly the reason for this method?  some build issues when using the\n> > plain AsyncAbort?  Please add a comment why you have to add this method.\n> \n> AsyncAbort() is not part of the channel. It's part of HttpAsyncAborter\n> class. nsHttpChannel and other classes inherit HttpAsyncAborter, but here we\n> are in HttpBaseChannel, which doesn't have access to AsyncAbort().\n\naah.... yes, then it's probably the best way to work that around as you do.", "author": "honzab.moz@firemni.cz", "id": 13281951, "time": "2018-05-16T16:41:59Z"}, {"text": "*** Bug 1455447 has been marked as a duplicate of this bug. ***", "author": "amarchesini@mozilla.com", "id": 13283535, "time": "2018-05-17T05:07:13Z"}, {"text": "Created attachment 8976544\npart 8 - docShell and necko", "author": "amarchesini@mozilla.com", "id": 13284451, "time": "2018-05-17T14:17:59Z"}, {"text": "Comment on attachment 8976544\npart 8 - docShell and necko\n\nReview of attachment 8976544:\n-----------------------------------------------------------------\n\nthanks!", "author": "honzab.moz@firemni.cz", "id": 13294216, "time": "2018-05-21T14:54:31Z"}, {"text": "Pushed by amarchesini@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/2576bb7a8689\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 1 - IDL, r=mayhemer, r=froydnj, r=smaug\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/0086783f1f56\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 2 - IPCBlobInputStream exposes nsIInputStreamLength, r=smaug\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/f6b81e43d9ec\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 3 - InputStreamLengthHelper, r=froydnj\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/00c1f8c0e321\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 4 - SlicedInputStream exposes nsIInputStreamLength, r=froydnj\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/14019553d3de\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 5 - nsBufferedInputStream exposes nsIInputStreamLength, r=froydnj, r=mayhemer\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/1e5e4a41b246\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 6 - nsMIMEInputStream exposes nsIInputStreamLength, r=mayhmer\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/89acab76790a\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 7 - nsIMultiplexInputStream exposes nsIInputStreamLength, r=froydnj, r=mayhemer\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/791e32d77f0f\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 8 - PartiallySeekableInputStream exposes nsIInputStreamLength, r=mayhemer\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/66f6b8d84e5d\nImplement nsIInputStreamLength and nsIAsyncInputStreamLength - part 9 - necko and docShell, r=mayhemer, r=smaug", "author": "pulsebot@bots.tld", "id": 13298558, "time": "2018-05-23T05:14:18Z"}, {"text": "Pushed by amarchesini@mozilla.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/0475a0ce8e3f\nIPCBlobInputStreamParent reference must be increamented before calling any IPC method, r=me", "author": "pulsebot@bots.tld", "id": 13299045, "time": "2018-05-23T10:38:21Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/2576bb7a8689\nhttps://hg.mozilla.org/mozilla-central/rev/0086783f1f56\nhttps://hg.mozilla.org/mozilla-central/rev/f6b81e43d9ec\nhttps://hg.mozilla.org/mozilla-central/rev/00c1f8c0e321\nhttps://hg.mozilla.org/mozilla-central/rev/14019553d3de\nhttps://hg.mozilla.org/mozilla-central/rev/1e5e4a41b246\nhttps://hg.mozilla.org/mozilla-central/rev/89acab76790a\nhttps://hg.mozilla.org/mozilla-central/rev/791e32d77f0f\nhttps://hg.mozilla.org/mozilla-central/rev/66f6b8d84e5d\nhttps://hg.mozilla.org/mozilla-central/rev/0475a0ce8e3f", "author": "apavel@mozilla.com", "id": 13300914, "time": "2018-05-23T22:13:16Z"}, {"text": "This like a scary thing to uplift. Calling this wontfix for 61.", "author": "ryanvm@gmail.com", "id": 13379296, "time": "2018-06-01T01:34:09Z"}], "id": 1434553, "priority": "P2", "cc": ["afarre@mozilla.com", "amarchesini@mozilla.com", "bkelly@mozilla.com", "bugmail@asutherland.org", "bugs@pettay.fi", "felash@gmail.com", "honzab.moz@firemni.cz", "mcaceres@mozilla.com", "mcastelluccio@mozilla.com", "mhorrocks91@googlemail.com", "micnic90@gmail.com", "nfroyd@mozilla.com", "PatrickWesterhoff@gmail.com", "ryanvm@gmail.com", "tbbugs@myarcher.net"], "cf_crash_signature": "", "version": "59 Branch", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1463650, 1353629], "qa_contact": "", "creation_time": "2018-01-31T10:16:13Z", "cf_status_firefox_esr52": "unaffected", "component": "HTML: Form Submission", "assigned_to_detail": {"email": "amarchesini@mozilla.com", "id": 446257, "name": "amarchesini@mozilla.com", "real_name": "Andrea Marchesini [:baku]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "wontfix", "cf_status_firefox60": "wontfix", "target_milestone": "mozilla62", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "cy6erGn0m@gmail.com", "id": 461939, "name": "cy6erGn0m@gmail.com", "real_name": ""}, "whiteboard": "", "mentors": [], "summary": "Content-Length is wrong for multipart/form-data POST repeated request", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [{"status": "+", "name": "in-testsuite", "modification_date": "2018-05-26T01:15:45Z", "type_id": 37, "creation_date": "2018-05-26T01:15:45Z", "id": 1762053, "setter": "ryanvm@gmail.com"}, {"status": "+", "name": "qe-verify", "modification_date": "2018-05-25T01:21:40Z", "type_id": 864, "creation_date": "2018-05-25T01:21:40Z", "id": 1761454, "setter": "ryanvm@gmail.com"}], "last_change_time": "2018-06-01T01:34:09Z", "assigned_to": "amarchesini@mozilla.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "gingerbread_man@live.com"}, {"removed": "Untriaged", "field_name": "component", "added": "HTML: Form Submission"}, {"removed": "Firefox", "field_name": "product", "added": "Core"}], "who": "gingerbread_man@live.com", "when": "2018-01-31T10:34:18Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P2"}, {"removed": "", "field_name": "cc", "added": "mcaceres@mozilla.com"}], "who": "mcaceres@mozilla.com", "when": "2018-03-20T03:57:36Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "afarre@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(afarre@mozilla.com)"}], "who": "mcaceres@mozilla.com", "when": "2018-03-20T04:27:39Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "amarchesini@mozilla.com"}, {"removed": "---", "field_name": "cf_has_regression_range", "added": "yes"}, {"removed": "needinfo?(afarre@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(amarchesini@mozilla.com)"}], "who": "afarre@mozilla.com", "when": "2018-03-21T15:11:29Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "amarchesini@mozilla.com"}, {"removed": "needinfo?(amarchesini@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-21T16:56:02Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bzbarsky@mit.edu"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8961058, "added": "review?(bzbarsky@mit.edu)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-21T18:14:44Z"}, {"changes": [{"removed": "UNCONFIRMED", "field_name": "status", "added": "NEW"}, {"removed": "0", "field_name": "is_confirmed", "added": "1"}], "who": "amarchesini@mozilla.com", "when": "2018-03-21T18:30:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bzbarsky@mit.edu)", "attachment_id": 8961058, "added": "review-"}], "who": "bzbarsky@mit.edu", "when": "2018-03-22T21:39:28Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1398733"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amarchesini@mozilla.com)"}], "who": "bzbarsky@mit.edu", "when": "2018-03-22T21:40:31Z"}, {"changes": [{"removed": "needinfo?(amarchesini@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-23T06:23:34Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bzbarsky@mit.edu)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-23T06:35:43Z"}, {"changes": [{"removed": "needinfo?(bzbarsky@mit.edu)", "field_name": "flagtypes.name", "added": ""}], "who": "bzbarsky@mit.edu", "when": "2018-03-23T15:57:38Z"}, {"changes": [{"removed": "1398733", "field_name": "blocks", "added": "1353629"}], "who": "bzbarsky@mit.edu", "when": "2018-03-23T15:57:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "honzab.moz@firemni.cz"}], "who": "honzab.moz@firemni.cz", "when": "2018-03-23T16:04:53Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugmail@asutherland.org"}], "who": "bugmail@asutherland.org", "when": "2018-03-23T21:53:38Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bzbarsky@mit.edu)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-24T07:22:45Z"}, {"changes": [{"removed": "needinfo?(bzbarsky@mit.edu)", "field_name": "flagtypes.name", "added": ""}], "who": "bzbarsky@mit.edu", "when": "2018-03-26T02:57:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "PatrickWesterhoff@gmail.com"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T09:46:32Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8961058, "added": "1"}, {"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962300, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T12:08:29Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugs@pettay.fi"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962301, "added": "review?(bugs@pettay.fi)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T12:12:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962302, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T12:13:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962303, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T12:15:02Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962304, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T12:15:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962305, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T12:16:23Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962306, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T12:16:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962307, "added": "review?(bugs@pettay.fi), review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T12:17:52Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8962307, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-03-26T13:57:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962304, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-03-26T13:58:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962305, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-03-26T13:58:27Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amarchesini@mozilla.com)"}], "who": "honzab.moz@firemni.cz", "when": "2018-03-26T13:59:04Z"}, {"changes": [{"removed": "needinfo?(amarchesini@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-26T14:41:46Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962300, "added": ""}], "who": "nfroyd@mozilla.com", "when": "2018-03-26T17:53:59Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tbbugs@myarcher.net"}], "who": "tbbugs@myarcher.net", "when": "2018-03-26T20:00:31Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962300, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962691, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T12:16:32Z"}, {"changes": [{"removed": "needinfo?(honzab.moz@firemni.cz)", "field_name": "flagtypes.name", "added": ""}], "who": "honzab.moz@firemni.cz", "when": "2018-03-27T13:54:09Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962301, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8962301, "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T13:59:05Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962302, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962302, "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T13:59:13Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962303, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962303, "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T13:59:23Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962304, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962304, "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T13:59:33Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962305, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962305, "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T13:59:40Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962306, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962306, "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T13:59:51Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962307, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8962307, "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T13:59:59Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962691, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962691, "added": ""}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T14:00:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962691, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T14:00:40Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "1", "attachment_id": 8962691, "added": "0"}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T15:45:43Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962691, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962691, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962749, "added": "review?(honzab.moz@firemni.cz), review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-27T15:55:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963233, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-28T17:04:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963234, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-28T17:05:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963237, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-28T17:08:37Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963238, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-28T17:09:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963240, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-28T17:10:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963242, "added": "review?(honzab.moz@firemni.cz), review?(bugs@pettay.fi)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-28T17:11:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963244, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-28T17:13:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963246, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-03-28T17:14:09Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8962749, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2018-03-29T19:46:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8963234, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2018-03-29T20:06:09Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8963233, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2018-03-29T20:47:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8963244, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2018-03-29T21:05:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8963240, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2018-03-29T21:16:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8963242, "added": "review+"}], "who": "bugs@pettay.fi", "when": "2018-04-04T20:41:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8962749, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-05T12:47:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8963237, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-05T13:35:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8963238, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-05T13:45:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963240, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-05T14:24:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8963242, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-05T15:23:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8963246, "added": "feedback-"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-05T15:55:09Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1451731"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-05T15:56:13Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963237, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966150, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-09T10:32:29Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963240, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966188, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-09T12:32:26Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-09T12:48:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8966150, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-09T17:31:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8966188, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-09T18:12:48Z"}, {"changes": [{"removed": "needinfo?(honzab.moz@firemni.cz)", "field_name": "flagtypes.name", "added": ""}], "who": "honzab.moz@firemni.cz", "when": "2018-04-09T18:22:16Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1453015"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T08:44:24Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8962749, "added": "1"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T08:57:44Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963233, "added": "1"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T08:58:28Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963234, "added": "1"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T08:59:02Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966150, "added": "1"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T09:07:06Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963238, "added": "1"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T09:07:35Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963244, "added": "1"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T09:13:28Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963246, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966897, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T09:16:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966899, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T09:22:04Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966905, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T09:26:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bkelly@mozilla.com"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T13:25:43Z"}, {"changes": [{"removed": "gingerbread_man@live.com", "field_name": "cc", "added": ""}], "who": "gingerbread_man@live.com", "when": "2018-04-11T13:30:46Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963242, "added": "1"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T14:07:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967013, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T14:50:54Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8966897, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-11T15:08:54Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8966899, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-11T16:27:33Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8966905, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-11T16:36:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8967013, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-11T17:06:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967128, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T19:19:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967148, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-11T20:08:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967291, "added": "review?(nfroyd@mozilla.com)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-12T09:17:11Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963231, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967312, "added": "review?(bugs@pettay.fi)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-12T11:27:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8967148, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2018-04-12T16:14:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com)", "attachment_id": 8967291, "added": "review+"}], "who": "nfroyd@mozilla.com", "when": "2018-04-12T16:42:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967434, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-04-12T17:00:49Z"}, {"changes": [{"removed": "bzbarsky@mit.edu", "field_name": "cc", "added": ""}], "who": "bzbarsky@mit.edu", "when": "2018-04-12T18:15:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8967434, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-13T13:42:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8967312, "added": "review-"}], "who": "bugs@pettay.fi", "when": "2018-04-13T17:53:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8967128, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-04-20T11:33:27Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "regression"}, {"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2018-04-27T11:07:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mhorrocks91@googlemail.com"}], "who": "mhorrocks91@googlemail.com", "when": "2018-05-04T10:33:20Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8947017, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966188, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966883, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966884, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966885, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966893, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966894, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966895, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966896, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966897, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966899, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8966905, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8967013, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8967128, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8967148, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8967291, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8967312, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8967434, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8973671, "added": "review?(bugs@pettay.fi)"}], "who": "amarchesini@mozilla.com", "when": "2018-05-07T14:00:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8973672, "added": "review?(bugs@pettay.fi)"}], "who": "amarchesini@mozilla.com", "when": "2018-05-07T14:01:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8973678, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-05-07T14:03:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8973671, "added": "review+"}], "who": "bugs@pettay.fi", "when": "2018-05-08T15:37:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8973672, "added": "review-"}], "who": "bugs@pettay.fi", "when": "2018-05-08T16:17:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8973678, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2018-05-09T13:37:01Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8973672, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8975410, "added": "review?(bugs@pettay.fi)"}], "who": "amarchesini@mozilla.com", "when": "2018-05-14T07:48:25Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8973678, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8975419, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-05-14T09:13:42Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amarchesini@mozilla.com)"}], "who": "honzab.moz@firemni.cz", "when": "2018-05-14T11:58:55Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8975410, "added": "review+"}], "who": "bugs@pettay.fi", "when": "2018-05-14T12:45:03Z"}, {"changes": [{"removed": "needinfo?(amarchesini@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-05-16T10:06:53Z"}, {"changes": [{"removed": "needinfo?(honzab.moz@firemni.cz)", "field_name": "flagtypes.name", "added": "needinfo?(amarchesini@mozilla.com)"}], "who": "honzab.moz@firemni.cz", "when": "2018-05-16T16:41:59Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "micnic90@gmail.com"}], "who": "amarchesini@mozilla.com", "when": "2018-05-17T05:07:13Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8975419, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8975419, "added": ""}, {"removed": "needinfo?(amarchesini@mozilla.com)", "field_name": "flagtypes.name", "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8976544, "added": "review?(honzab.moz@firemni.cz)"}], "who": "amarchesini@mozilla.com", "when": "2018-05-17T14:17:59Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8976544, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2018-05-21T14:54:31Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1463650"}], "who": "amarchesini@mozilla.com", "when": "2018-05-23T05:29:58Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla62"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-23 22:13:16"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "apavel@mozilla.com", "when": "2018-05-23T22:13:16Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1464090"}], "who": "cosmin.muntean@softvision.ro", "when": "2018-05-24T15:18:03Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ryanvm@gmail.com"}, {"removed": "---", "field_name": "cf_status_firefox_esr52", "added": "unaffected"}, {"removed": "---", "field_name": "cf_status_firefox_esr60", "added": "affected"}, {"removed": "---", "field_name": "cf_status_firefox60", "added": "wontfix"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "affected"}], "who": "ryanvm@gmail.com", "when": "2018-05-24T17:01:07Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "qe-verify+"}], "who": "ryanvm@gmail.com", "when": "2018-05-25T01:21:40Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "in-testsuite+"}], "who": "ryanvm@gmail.com", "when": "2018-05-26T01:15:45Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1464649"}], "who": "Virtual@teknik.io", "when": "2018-05-27T18:30:49Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "felash@gmail.com"}], "who": "felash@gmail.com", "when": "2018-05-28T07:00:25Z"}, {"changes": [{"removed": "affected", "field_name": "cf_status_firefox61", "added": "wontfix"}], "who": "ryanvm@gmail.com", "when": "2018-06-01T01:34:09Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}