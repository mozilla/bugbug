{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8711205}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/png", "id": 8713809}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-03T10:51:07Z", "type_id": 4, "creation_date": "2016-01-29T23:10:14Z", "id": 1333341, "setter": "jdemooij@mozilla.com"}], "content_type": "text/plain", "id": 8713868}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-04T07:29:17Z", "type_id": 4, "creation_date": "2016-02-03T22:42:13Z", "id": 1336170, "setter": "jdemooij@mozilla.com"}], "content_type": "text/plain", "id": 8715516}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8715532}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-04T00:18:26Z", "type_id": 4, "creation_date": "2016-02-03T23:35:58Z", "id": 1336207, "setter": "terrence.d.cole@gmail.com"}], "content_type": "text/plain", "id": 8715549}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-04T19:18:11Z", "type_id": 4, "creation_date": "2016-02-04T19:18:11Z", "id": 1336865, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8715946}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-04T19:18:20Z", "type_id": 4, "creation_date": "2016-02-04T19:18:20Z", "id": 1336867, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8715948}, {"creator": "nfitzgerald@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-02-04T19:59:57Z", "type_id": 4, "creation_date": "2016-02-04T19:59:57Z", "id": 1336920, "setter": "nfitzgerald@mozilla.com"}], "content_type": "text/plain", "id": 8715978}], "classification": "Components", "creator": "terrence.d.cole@gmail.com", "cc": ["bgrinstead@mozilla.com", "bhackett1024@gmail.com", "guijoselito@gmail.com", "harshid@gmail.com", "jcoppeard@mozilla.com", "jdemooij@mozilla.com", "jryans@gmail.com", "lhansen@mozilla.com", "nfitzgerald@mozilla.com", "sphink@gmail.com", "terrence.d.cole@gmail.com", "worcester12345@yahoo.com"], "depends_on": [1246593], "creation_time": "2015-12-18T22:34:10Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Remove the nursery performance cliff caused by putting large arrays in the WholeObjectBuffer", "id": 1233857, "assigned_to_detail": {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "nfitzgerald@mozilla.com", "comment_count": 28, "comments": [{"text": "Problem\n=======\nIn IonMonkey, post-write barriers for Arrays have a very clever (and surprisingly simple) implementation. Instead of storing a reference to each and every slot that was written, we just store the source object and then at GC time trace every element in the Array to discover the actual set of cross-generation edges.\n\nThis sounds, on paper, like it would be sub-optimal compared to recording the actual set of written slots; however, for most programs, some subtle aspects of our implementation make the prior implementation faster in practice. First, most Objects, including Arrays, are fairly small and are normally written to in one block of writes. Thus, the number of non-cross generational edges we visit for most objects is actually quite low in practice. Secondly, we have a one-element cache in front of the HashTable backing the StoreBuffer. Thus, subsequent writes to the same object are a nop, whereas recording the actual slots would probably result in a hash on each write.\n\nUnfortunately, there is one serious downside to this approach: the massive performance cliff that occurs if one writes a cross generation edge into a large array that is mostly filled with same-generation edges. In this case, we spend an inordinate amount of time visiting edges that are not actually part of the remembered set.\n\nsince we've inlined the entire tenuring path, it is only 10's of ms per million edges, but that can still be extremely bad.\n\nSolution\n========\n\nThe typical solution to this problem is known as \"card marking\". Because we do not control our element memory, however, this approach will not work for us. We've discussed writing an elements allocator to make this possible, but there is actually another way that is much simpler: specialize the jit to use a more exact barrier when writing to a large array.\n\nSince C++ code is already so slow, we do not bother use the whole-object buffer there and already use an exact method there. In C++, elements are represented via the HeapSlot class [1]: a wrapper around Value. As can be seen at [2], we store an exact reference to the slot when storing to an object. Given that the address of the elements vector may be relocated via realloc, we store this as the source object + offset + whether it is slots or elements being stored. The GC then re-looks-up the correct address at the time the GC happens [3].\n\nThe purpose of this bug is to teach IonMonkey how to insert into this store buffer instead of the other one when writing to a large array. Subtly, but importantly, we also need to ensure that we recompile any code that uses the small Array store buffer to use the large array store buffer when the target array gets large. There is already a sophisticated constraint engine in place to make exactly this sort of thing possible: Jan or Brian will be able to show us how this works once we get something working.\n\nThe relevant method to look at in IonMonkey is jsop_setelem [4]. The store buffers nodes are added in the implementations of setelem for concrete types that may have cross-generation edges (e.g. not TypedArrays, etc), here [5]. The source object is already in a register and the vector type is obviously \"elements\", so the only thing we need to do in the new case is compute the offset.\n\n1- https://dxr.mozilla.org/mozilla-central/source/js/src/gc/Barrier.h?from=HeapSlot#639\n2- https://dxr.mozilla.org/mozilla-central/source/js/src/gc/Barrier.h?from=HeapSlot#693\n3- https://dxr.mozilla.org/mozilla-central/source/js/src/gc/Marking.cpp#1993\n4- https://dxr.mozilla.org/mozilla-central/source/js/src/jit/IonBuilder.cpp#9620\n5- https://dxr.mozilla.org/mozilla-central/source/js/src/jit/IonBuilder.cpp#9963,9995", "author": "terrence.d.cole@gmail.com", "id": 11018508, "time": "2015-12-18T22:34:10Z"}, {"text": "The plan as I understand it:\n\n1. Grab a bit from somewhere (ideally `OBJECT_FLAG_*`, but that seems to be full) that means \"this is a large array\". How many bits does the generation need to be? It is 2 right now, could it get away with 1 (that seems to good to be true)? Is there somewhere else we could grab a bit from?\n\n2. Set or unset this new bit when realloc'ing array elements, since we already bailout in that case.\n\n3. Add a new type constraint that uses the new bit.\n\n4. Create `OutOfLineCallPostWriteHeapSlotBarrier` and `CodeGenerator::visitOutOfLineCallPostWriteHeapSlotBarrier` to call the new barrier.\n\n5. Add plumbing to pass the offset of the slot being written to to LPostWriteBarrier.\n\n6. In `CodeGenerator::visitPostWriteBarrierV`, check whether the new bit is set. (What about PostWriteBarrierO?)\n\n6.a. If it is not set, proceed as we do now.\n\n6.b. If it is set, jump to `OutOfLinePostWriteHeapSlotBarrier` instead.\n\n-------------\n\n:jandem: does this sound right? Any idea where I could grab a bit from for step (1)?", "author": "nfitzgerald@mozilla.com", "id": 11097657, "time": "2016-01-22T01:23:49Z"}, {"text": "Using TI is an option, but it's fairly complicated and we may invalidate/recompile more code. I'd try this simpler approach first:\n\n(1) Add a new MIR instruction (MElementPostWriteBarrier or something) that we use when we might be accessing an element. We know this statically in IonBuilder and I think most of the (perf-critical) barriers are for slots (setprop, setgname etc.) and we don't want to regress/change those.\n\nWe will use this element barrier in IonBuilder::jsop_setelem_dense, in IonBuilder::setElemTryCache if index->type() == MIRType_Int32, and probably some similar cases.\n\n(2) MElementPostWriteBarrier has an extra operand, the index.\n\n(3) We add a new function to VMFunctions.h/cpp, similar to the PostWriteBarrier function there, but with an |int32_t index| argument. That function can do something like this:\n\nif (obj->is<NativeObject>() && obj->as<NativeObject>().getDenseInitializedLength() > X)\n    ...add element barrier (obj, index)...\nelse\n    rt->gc.storeBuffer.putWholeCell(obj);\n\n(4) The Baseline ICs for SETELEM should do something similar.\n\nI think this shouldn't be measurably slower on any benchmarks.\n\n---\n\nAlso, ObjectElements has a number of bits available. We could add a flag that means \"object is already in the whole-cell buffer\", or we could add a counter: if we barriered many elements, give up and just put it in the whole cell buffer instead.", "author": "jdemooij@mozilla.com", "id": 11098748, "time": "2016-01-22T12:55:32Z"}, {"text": "Created attachment 8711205\nWIP WIP WIP", "author": "nfitzgerald@mozilla.com", "id": 11100873, "time": "2016-01-22T23:07:30Z"}, {"text": "Created attachment 8713809\nOctane without this patch vs w/ this patch\n\nThis is 10 runs of octane without this patch, and then 10 runs with this patch.\n\nThis patch looks promising, cleaning it up now.", "author": "nfitzgerald@mozilla.com", "id": 11121468, "time": "2016-01-29T21:46:28Z"}, {"text": "Created attachment 8713868\nTeach the JIT how to put individual elements' edges in the store buffer\n\nThis commit teaches IonMonkey how to put individual array elements' edges in the\nstore buffer, rather than using the whole cell buffer. This alleviates\nperfomance cliffs where there are very large arrays in the tenured heap and then\nthe mutator adds a relatively small number of edges from this array into the\nnursery. With the whole cell buffer, which was used previously, a nursery\ncollection would need to trace the whole large array. With this patch, only\nthe modified edges need by traced.", "author": "nfitzgerald@mozilla.com", "id": 11121795, "time": "2016-01-29T23:10:14Z"}, {"text": "Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=b855090e5d8b", "author": "nfitzgerald@mozilla.com", "id": 11121802, "time": "2016-01-29T23:11:42Z"}, {"text": "perf key word?", "author": "worcester12345@yahoo.com", "id": 11125326, "time": "2016-02-01T14:42:48Z"}, {"text": "Comment on attachment 8713868\nTeach the JIT how to put individual elements' edges in the store buffer\n\nReview of attachment 8713868:\n-----------------------------------------------------------------\n\nLooks good, thanks for doing this! r=me with comments below addressed.\n\nBaseline ICs should probably do something similar, but it's great to have this fixed for Ion.\n\n::: js/src/jit/CodeGenerator.cpp\n@@ +3134,2 @@\n>  void\n> +CodeGenerator::visitPostWriteBarrierCommonO(LPostBarrierType* lir, OutOfLineCallType* ool)\n\nI think we don't need the OutOfLineCallType template parameter and can use |OutOfLineCode* ool| directly.\n\n@@ +3166,5 @@\n>          masm.branchPtrInNurseryRange(Assembler::Equal, ToRegister(lir->object()), temp,\n>                                       ool->rejoin());\n>      }\n>  \n> +    ValueOperand value = ToValue(lir, LPostWriteElementBarrierV::Input);\n\ns/LpostWriteElementBarrierV/LPostBarrierType/\n\n@@ +3242,5 @@\n> +    Register runtimereg = regs.takeAny();\n> +    masm.mov(ImmPtr(GetJitContext()->runtime), runtimereg);\n> +\n> +    Register indexreg = ToRegister(index);\n> +    regs.takeUnchecked(indexreg);\n\nIt's possible runtimereg and indexreg will be the same register, so we will pass a bogus index value to the VM function. |objreg = regs.takeAny()| has a similar problem: it could take our indexreg before we remove it from the set here. To fix these problems, we should restructure the code like this:\n\n  Register objreg = obj->isConstant() ? InvalidReg : ToRegister(obj);\n  Register indexreg = ToRegister(index);\n\n  AllocatableGeneralRegisterSet regs(GeneralRegisterSet::Volatile());\n  if (objreg != InvalidReg)\n      regs.takeUnchecked(objreg);\n  regs.takeUnchecked(indexreg);\n\nAfter that, we can call regs.takeAny() and be sure it won't conflict with objreg/indexreg.\n\n::: js/src/jit/MIR.h\n@@ +12762,5 @@\n>  \n> +// Given a value being written to another object's elements at the specified\n> +// index, update the generational store buffer if the value is in the nursery\n> +// and object is in the tenured heap.\n> +class MPostWriteElementBarrier : public MTernaryInstruction, public ObjectPolicy<0>::Data\n\nWe should use a type policy for the index as well. Even though it's always MIRType_Int32 in IonBuilder, this can change later (we can box it and end up with MIRType_Value).\n\nSo instead of ObjectPolicy<0>::Data, we can use\n\nMixPolicy<ObjectPolicy<0>, IntPolicy<2>>::Data\n\nIf that doesn't compile/link, we likely have to add an entry to TEMPLATE_TYPE_POLICY_LIST in TypePolicy.cpp, if it's the first time we use this MixPolicy.\n\n::: js/src/jit/VMFunctions.cpp\n@@ +613,5 @@\n>      MOZ_ASSERT(!IsInsideNursery(obj));\n>      rt->gc.storeBuffer.putWholeCell(obj);\n>  }\n>  \n> +static const size_t MAX_WHOLE_CELL_BUFFER_SIZE = 8196;\n\n8196 is quite large. A pref to always use the element store buffer might be useful, to make it easier for the fuzzers to hit this case. We could add a JitOption and add a test that uses setJitCompilerOption, or something similar.\n\n@@ +620,5 @@\n> +PostWriteElementBarrier(JSRuntime* rt, JSObject* obj, size_t index)\n> +{\n> +    MOZ_ASSERT(!IsInsideNursery(obj));\n> +    if (obj->is<NativeObject>() &&\n> +        obj->as<NativeObject>().getDenseInitializedLength() > MAX_WHOLE_CELL_BUFFER_SIZE) {\n\nNit: { goes on next line if the condition spans multiple lines.\n\n::: js/src/jit/shared/LIR-shared.h\n@@ +6605,5 @@\n> +        setOperand(1, index);\n> +        setTemp(0, temp);\n> +    }\n> +\n> +    static const size_t Input = 1;\n\nThis should be 2. It's the index of the Value operand and it comes after the object and index (the setOperand calls in the constructor).", "author": "jdemooij@mozilla.com", "id": 11132613, "time": "2016-02-03T10:51:07Z"}, {"text": "Created attachment 8715516\nTeach the JIT how to put individual elements' edges in the store buffer; r=jandem\n\nThis commit teaches IonMonkey how to put individual array elements' edges in the\nstore buffer, rather than using the whole cell buffer. This alleviates\nperfomance cliffs where there are very large arrays in the tenured heap and then\nthe mutator adds a relatively small number of edges from this array into the\nnursery. With the whole cell buffer, which was used previously, a nursery\ncollection would need to trace the whole large array. With this patch, only\nthe modified edges need by traced.", "author": "nfitzgerald@mozilla.com", "id": 11135134, "time": "2016-02-03T22:39:07Z"}, {"text": "Comment on attachment 8715516\nTeach the JIT how to put individual elements' edges in the store buffer; r=jandem\n\nJan, could you look at the register usage in CodeGenerator.cpp once again? Want to double check that I got things correct this time around.\n\nWill make a second patch for a zeal mode to always use the slots edge store buffer.", "author": "nfitzgerald@mozilla.com", "id": 11135147, "time": "2016-02-03T22:42:13Z"}, {"text": "Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=6054c7d8d8ae", "author": "nfitzgerald@mozilla.com", "id": 11135149, "time": "2016-02-03T22:42:30Z"}, {"text": "Created attachment 8715532\nFollow up: Add a new GC zeal mode for the elements edges barrier\n\nThis commit adds gc zeal mode 15 to force the use of the individual elements\nedges barrier regardless of the size of the elements. It also adds a jit-test\nwhich uses the zeal option. Hopefully, this will let the fuzzers go to town with\nthe new barrier type.", "author": "nfitzgerald@mozilla.com", "id": 11135220, "time": "2016-02-03T23:06:05Z"}, {"text": "Try push for the new gc zeal mode: https://treeherder.mozilla.org/#/jobs?repo=try&revision=f0e049537288", "author": "nfitzgerald@mozilla.com", "id": 11135222, "time": "2016-02-03T23:07:08Z"}, {"text": "Created attachment 8715549\nFollow up: Add a new GC zeal mode for the elements edges barrier\n\nFix stupid var typo and missing namespace. Turns out it is useful to build with\nJS_GC_ZEAL when testing JS_GC_ZEAL specific changes...", "author": "nfitzgerald@mozilla.com", "id": 11135324, "time": "2016-02-03T23:35:58Z"}, {"text": "New try push for the gc zeal mode: https://treeherder.mozilla.org/#/jobs?repo=try&revision=c14d947746fc", "author": "nfitzgerald@mozilla.com", "id": 11135330, "time": "2016-02-03T23:37:50Z"}, {"text": "Comment on attachment 8715549\nFollow up: Add a new GC zeal mode for the elements edges barrier\n\nReview of attachment 8715549:\n-----------------------------------------------------------------\n\nNice. Maybe re-use mode 12, otherwise this looks great.\n\n::: js/src/jsgc.h\n@@ +1263,5 @@\n>  const int ZealIncrementalMultipleSlices = 10;\n>  const int ZealIncrementalMarkingValidator = 11;\n>  const int ZealCheckHashTablesOnMinorGC = 13;\n>  const int ZealCompactValue = 14;\n> +const int ZealElementsBarrier = 15;\n\nNote that these are not well packed. We don't move compact then when we remove a mode, so this could easily re-use 12.", "author": "terrence.d.cole@gmail.com", "id": 11135722, "time": "2016-02-04T00:18:26Z"}, {"text": "Comment on attachment 8715516\nTeach the JIT how to put individual elements' edges in the store buffer; r=jandem\n\nReview of attachment 8715516:\n-----------------------------------------------------------------\n\nregalloc in CodeGenerator.cpp looks good to me. Thanks!", "author": "jdemooij@mozilla.com", "id": 11136446, "time": "2016-02-04T07:29:17Z"}, {"text": "Created attachment 8715946\nTeach the JIT how to put individual elements' edges in the store buffer\n\nThis commit teaches IonMonkey how to put individual array elements' edges in the\nstore buffer, rather than using the whole cell buffer. This alleviates\nperfomance cliffs where there are very large arrays in the tenured heap and then\nthe mutator adds a relatively small number of edges from this array into the\nnursery. With the whole cell buffer, which was used previously, a nursery\ncollection would need to trace the whole large array. With this patch, only\nthe modified edges need by traced.", "author": "nfitzgerald@mozilla.com", "id": 11138536, "time": "2016-02-04T19:18:11Z"}, {"text": "Created attachment 8715948\nFollow up: Add a new GC zeal mode for the elements edges barrier\n\nThis commit adds gc zeal mode 15 to force the use of the individual elements\nedges barrier regardless of the size of the elements. It also adds a jit-test\nwhich uses the zeal option. Hopefully, this will let the fuzzers go to town with\nthe new barrier type.", "author": "nfitzgerald@mozilla.com", "id": 11138538, "time": "2016-02-04T19:18:20Z"}, {"text": "New try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=2850b332d909", "author": "nfitzgerald@mozilla.com", "id": 11138543, "time": "2016-02-04T19:19:15Z"}, {"text": "Created attachment 8715978\nFollow up: Add a new GC zeal mode for the elements edges barrier\n\nFix dumb syntax error introduced by switching 15 -> 12.", "author": "nfitzgerald@mozilla.com", "id": 11138691, "time": "2016-02-04T19:59:57Z"}, {"text": "Try push: https://treeherder.mozilla.org/#/jobs?repo=try&revision=9fad5d6bdd3d", "author": "nfitzgerald@mozilla.com", "id": 11138725, "time": "2016-02-04T20:12:03Z"}, {"text": "Linux jit tests are finally happy! \\o/", "author": "nfitzgerald@mozilla.com", "id": 11139533, "time": "2016-02-04T23:15:10Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/cbb480545732\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/2ada62724f2a", "author": "pulsebot@bots.tld", "id": 11140621, "time": "2016-02-05T10:29:26Z"}, {"text": "Apparently, this made no difference on AWFY.", "author": "guijoselito@gmail.com", "id": 11142409, "time": "2016-02-05T20:13:08Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/cbb480545732\nhttps://hg.mozilla.org/mozilla-central/rev/2ada62724f2a", "author": "philringnalda@gmail.com", "id": 11143359, "time": "2016-02-06T02:50:55Z"}, {"text": "(In reply to Guilherme Lima from comment #25)\n> Apparently, this made no difference on AWFY.\n\nYeah, not surprising. Discussed this with folks on irc and came to the conclusion that my numbers are off because my first set of octane runs were while I was browsing the internet in the background, and the second set was while I was off to lunch. Nonetheless, it still alleviates the nursery performance cliff, so that's a win :)", "author": "nfitzgerald@mozilla.com", "id": 11147209, "time": "2016-02-08T17:33:02Z"}], "cf_last_resolved": "2016-02-06T02:50:55Z", "priority": "--", "mentors_detail": [{"email": "terrence.d.cole@gmail.com", "id": 231770, "name": "terrence.d.cole@gmail.com", "real_name": "Terrence Cole [:terrence]"}], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2016-02-19T01:39:54Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1057530, 1229092, 1158098], "qa_contact": "", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1242691", "https://bugzilla.mozilla.org/show_bug.cgi?id=1244279"], "cf_fx_iteration": "---", "component": "JavaScript: GC", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla47", "cf_status_firefox47": "fixed", "cf_status_firefox46": "affected", "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "terrence.d.cole@gmail.com", "id": 231770, "name": "terrence.d.cole@gmail.com", "real_name": "Terrence Cole [:terrence]"}, "whiteboard": "", "mentors": ["terrence.d.cole@gmail.com"], "cc_detail": [{"email": "bgrinstead@mozilla.com", "id": 476442, "name": "bgrinstead@mozilla.com", "real_name": "Brian Grinstead [:bgrins]"}, {"email": "bhackett1024@gmail.com", "id": 346231, "name": "bhackett1024@gmail.com", "real_name": "Brian Hackett (:bhackett)"}, {"email": "guijoselito@gmail.com", "id": 361723, "name": "guijoselito@gmail.com", "real_name": "Guilherme Lima"}, {"email": "harshid@gmail.com", "id": 152647, "name": "harshid@gmail.com", "real_name": "Harsh86"}, {"email": "jcoppeard@mozilla.com", "id": 443194, "name": "jcoppeard@mozilla.com", "real_name": "Jon Coppeard (:jonco) (PTO until 13th March)"}, {"email": "jdemooij@mozilla.com", "id": 375297, "name": "jdemooij@mozilla.com", "real_name": "Jan de Mooij [:jandem] (PTO Mar 8)"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "lhansen@mozilla.com", "id": 499633, "name": "lhansen@mozilla.com", "real_name": "Lars T Hansen [:lth]"}, {"email": "nfitzgerald@mozilla.com", "id": 417695, "name": "nfitzgerald@mozilla.com", "real_name": "Nick Fitzgerald [:fitzgen] [\u23f0PST; UTC-8]"}, {"email": "sphink@gmail.com", "id": 359004, "name": "sphink@gmail.com", "real_name": "Steve Fink [:sfink] [:s:]"}, {"email": "terrence.d.cole@gmail.com", "id": 231770, "name": "terrence.d.cole@gmail.com", "real_name": "Terrence Cole [:terrence]"}, {"email": "worcester12345@yahoo.com", "id": 141226, "name": "worcester12345@yahoo.com", "real_name": "Worcester12345"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "cf_qa_whiteboard": "", "history": [{"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "", "field_name": "cc", "added": "nfitzgerald@mozilla.com"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "nfitzgerald@mozilla.com"}], "who": "nfitzgerald@mozilla.com", "when": "2015-12-18T22:35:29Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bgrinstead@mozilla.com"}], "who": "bgrinstead@mozilla.com", "when": "2015-12-18T22:36:13Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1158098"}], "who": "nfitzgerald@mozilla.com", "when": "2015-12-18T22:40:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2015-12-18T23:03:59Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "lhansen@mozilla.com"}], "who": "lhansen@mozilla.com", "when": "2015-12-21T10:10:14Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1229092"}], "who": "jordan@jsantell.com", "when": "2016-01-15T21:32:42Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jdemooij@mozilla.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2016-01-22T01:23:49Z"}, {"changes": [{"removed": "needinfo?(jdemooij@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jdemooij@mozilla.com", "when": "2016-01-22T12:55:32Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1242691"}], "who": "nfitzgerald@mozilla.com", "when": "2016-01-25T20:40:41Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1244279"}], "who": "nfitzgerald@mozilla.com", "when": "2016-01-29T21:16:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8713868, "added": "review?(jdemooij@mozilla.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2016-01-29T23:10:14Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8711205, "added": "1"}], "who": "nfitzgerald@mozilla.com", "when": "2016-01-29T23:10:15Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "harshid@gmail.com"}], "who": "harshid@gmail.com", "when": "2016-02-01T00:01:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "worcester12345@yahoo.com"}], "who": "worcester12345@yahoo.com", "when": "2016-02-01T14:42:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jdemooij@mozilla.com)", "attachment_id": 8713868, "added": "review+"}], "who": "jdemooij@mozilla.com", "when": "2016-02-03T10:51:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8715516, "added": "review?(jdemooij@mozilla.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-03T22:42:13Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8713868, "added": "1"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-03T22:42:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8715532, "added": "review?(terrence@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "terrence@mozilla.com"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-03T23:06:05Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8715549, "added": "review?(terrence@mozilla.com)"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-03T23:35:58Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8715532, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(terrence@mozilla.com)", "attachment_id": 8715532, "added": ""}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-03T23:36:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(terrence@mozilla.com)", "attachment_id": 8715549, "added": "review+"}], "who": "terrence.d.cole@gmail.com", "when": "2016-02-04T00:18:26Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jdemooij@mozilla.com)", "attachment_id": 8715516, "added": "review+"}], "who": "jdemooij@mozilla.com", "when": "2016-02-04T07:29:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8715946, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-04T19:18:11Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8715516, "added": "1"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-04T19:18:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8715948, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-04T19:18:20Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8715549, "added": "1"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-04T19:18:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8715978, "added": "review+"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-04T19:59:57Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8715948, "added": "1"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-04T19:59:59Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "checkin-needed"}], "who": "nfitzgerald@mozilla.com", "when": "2016-02-04T23:15:10Z"}, {"changes": [{"removed": "checkin-needed", "field_name": "keywords", "added": ""}], "who": "pulsebot@bots.tld", "when": "2016-02-05T10:29:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "guijoselito@gmail.com"}], "who": "guijoselito@gmail.com", "when": "2016-02-05T20:13:08Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla47"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-02-05 18:50:55"}, {"removed": "---", "field_name": "cf_status_firefox47", "added": "fixed"}], "who": "philringnalda@gmail.com", "when": "2016-02-06T02:50:55Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1246593"}], "who": "dveditz@mozilla.com", "when": "2016-02-19T01:39:54Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}