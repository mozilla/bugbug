{"cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "classification": "Components", "creator": "poirot.alex@gmail.com", "mentors_detail": [], "depends_on": [1462561, 1465778, 1453385, 1454373, 1454792, 1454899, 1459205, 1460228, 1460229], "creation_time": "2018-03-27T12:52:35Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "keywords": [], "summary": "Refactor the NetworkEventActor to use protocol.js", "cf_last_resolved": "2018-05-30T22:20:13Z", "attachments": [{"creator": "poirot.alex@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-28T22:42:41Z", "type_id": 748, "creation_date": "2018-03-28T15:21:57Z", "id": 1736163, "setter": "jryans@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8962757}, {"creator": "poirot.alex@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-28T23:31:34Z", "type_id": 748, "creation_date": "2018-03-28T15:16:50Z", "id": 1736156, "setter": "jryans@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8962758}, {"creator": "poirot.alex@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-28T23:32:49Z", "type_id": 748, "creation_date": "2018-03-28T15:16:50Z", "id": 1736155, "setter": "jryans@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8963160}, {"creator": "poirot.alex@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-04T18:56:01Z", "type_id": 748, "creation_date": "2018-03-29T10:12:43Z", "id": 1736650, "setter": "jryans@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8963527}, {"creator": "poirot.alex@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-17T17:46:06Z", "type_id": 748, "creation_date": "2018-05-16T13:32:42Z", "id": 1757497, "setter": "jryans@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8976119}], "assigned_to_detail": {"email": "poirot.alex@gmail.com", "id": 283262, "name": "poirot.alex@gmail.com", "real_name": "Alexandre Poirot [:ochameau]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "comments": [{"text": "WebConsoleActor spawns NetworkEventActor instances for the netmonitor.\nI would like to start converting this one to protocol.js as it may help simplify the code involving `setupInParent`.\n\nhttps://searchfox.org/mozilla-central/rev/003262ae12ce937950ffb8d3b0fa520d1cc38bff/devtools/server/actors/webconsole.js#1968", "author": "poirot.alex@gmail.com", "id": 13158522, "time": "2018-03-27T12:52:35Z"}, {"text": "Created attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview commit: https://reviewboard.mozilla.org/r/231602/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/231602/", "author": "poirot.alex@gmail.com", "id": 13159062, "time": "2018-03-27T16:03:37Z"}, {"text": "Created attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview commit: https://reviewboard.mozilla.org/r/231604/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/231604/", "author": "poirot.alex@gmail.com", "id": 13159063, "time": "2018-03-27T16:03:37Z"}, {"text": "Created attachment 8963160\nBug 1449162 - Throw an explicit error message when a method specified in a spec is missing in the actor.\n\nReview commit: https://reviewboard.mozilla.org/r/232004/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/232004/", "author": "poirot.alex@gmail.com", "id": 13163603, "time": "2018-03-28T15:16:50Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/1-2/", "author": "poirot.alex@gmail.com", "id": 13163604, "time": "2018-03-28T15:16:50Z"}, {"text": "Green try:\n  https://treeherder.mozilla.org/#/jobs?repo=try&revision=294dd45c6ae17deb933ec66444f90fc47663d50d\n\nAt the end, it is mostly the first changeset, where I move NetworkEventActor into its own module, that is going to help bug 1444132.\nBut it is great to see an old actor become a protocol.js one!", "author": "poirot.alex@gmail.com", "id": 13163624, "time": "2018-03-28T15:21:00Z"}, {"text": "Comment on attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nhttps://reviewboard.mozilla.org/r/231602/#review237746\n\nThanks for working on this! :) I am assuming this commit only moves the actor and no other changes are made here.", "author": "jryans@gmail.com", "id": 13165221, "time": "2018-03-28T22:42:41Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nhttps://reviewboard.mozilla.org/r/231604/#review237756\n\nThanks for working on this! :) Overall, it looks good to me, but there a few issues to look over before landing.\n\nI do wonder how much work it is to convert to p.js fronts as well for these older actors...\n\n::: devtools/server/actors/network-event.js:45\n(Diff revision 2)\n>  \n> -  this._timings = {};\n> +    this._timings = {};\n> -  this._stackTrace = {};\n> +    this._stackTrace = {};\n>  \n> -  // Keep track of LongStringActors owned by this NetworkEventActor.\n> +    // Keep track of LongStringActors owned by this NetworkEventActor.\n> -  this._longStringActors = new Set();\n> +    this._longStringActors = new Set();\n\n`LongStringActor` is also a protocol.js actor, so it would be great to use the natural parent / child actor lifecycle that p.js provides, instead of this custom tracking.\n\nCan you add a separate commit to use that?  Let me know if it feels out of scope.\n\n::: devtools/server/actors/network-event.js:75\n(Diff revision 2)\n>  \n>    /**\n>     * Releases this actor from the pool.\n>     */\n> -  release: function() {\n> +  destroy(conn) {\n> +    protocol.Actor.prototype.initialize.call(this, conn);\n\nI would think this should be `destroy` instead...?\n\nCan this be moved to the end of the function as well? I try to call parent class constructors at the beginning of the self constructor and parent class destroy at the end of the self destroy so there's regular ordering of common code vs. more specific.\n\n::: devtools/server/actors/network-event.js:96\n(Diff revision 2)\n>      if (this.channel) {\n>        this.parent._netEvents.delete(this.channel);\n>      }\n> -    this.parent.releaseActor(this);\n> +\n> +    // Nullify parent before calling releaseActor as it will recall this method\n> +    let parent = this.parent;\n\nWould these 3 lines be more naturally part of `release` instead?\n\n::: devtools/server/actors/network-event.js:172\n(Diff revision 2)\n>     */\n> -  onGetRequestPostData: function() {\n> +  getRequestPostData() {\n>      return {\n> -      from: this.actorID,\n>        postData: this._request.postData,\n>        postDataDiscarded: this._discardRequestBody,\n\nShould this get the same boolean treatment as `contentDiscarded`?\n\n::: devtools/shared/specs/network-event.js:16\n(Diff revision 2)\n> +  generateActorSpec,\n> +  types\n> +} = require(\"devtools/shared/protocol\");\n> +\n> +types.addDictType(\"netevent:headers\", {\n> +  headers: \"json\", // This is a dictionnary of string|longstring\n\nNit: dictionary\n\n::: devtools/shared/specs/network-event.js:22\n(Diff revision 2)\n> +  headersSize: \"number\",\n> +  rawHeaders: \"nullable:json\", // use json as it is a string or longstring\n> +});\n> +\n> +types.addDictType(\"netevent:cookies\", {\n> +  cookies: \"json\", // This is a dictionnary of string|longstring\n\nNit: dictionary\n\n::: devtools/shared/specs/network-event.js:77\n(Diff revision 2)\n> +  validity: \"json\",\n> +  fingerprint: \"json\",\n> +});\n> +\n> +const networkEventSpec = generateActorSpec({\n> +  typeName: \"netEvent\",\n\nShould this new actor type be added to the spec index at `specs/index.js`?\n\nLooking at that module, it's not very obvious what \"types\" are meant to be listed there, but it seems like only _actor_ types.  I filed bug 1449773 to clarify.\n\n::: devtools/shared/specs/network-event.js:85\n(Diff revision 2)\n> +    \"network-event-update\": {\n> +      type: \"networkEventUpdate\",\n> +      updateType: Arg(0, \"string\"),\n> +\n> +      // request/response headers\n> +      headers: Option(1, \"number\"),\n\nHmm, so all of these are set to argument index 1, which seems unexpected...  Since some fields are sent together, how does it work?\n\nOh, I guess maybe it wouldn't with a p.js front, but for now we're still using old clients.  Should we also log bugs to convert old clients to p.js fronts?  It seems like we should aim for p.js everywhere if possible...", "author": "jryans@gmail.com", "id": 13165303, "time": "2018-03-28T23:31:34Z"}, {"text": "Comment on attachment 8963160\nBug 1449162 - Throw an explicit error message when a method specified in a spec is missing in the actor.\n\nhttps://reviewboard.mozilla.org/r/232004/#review237760\n\nThanks, seems like a helpful improvement!\n\n::: devtools/shared/protocol.js:1107\n(Diff revision 1)\n>            console.error(\"Error reading request: \" + packet.type);\n>            throw ex;\n>          }\n>  \n> +        if (!this[spec.name]) {\n> +          throw new Error(`Spec for '${actorProto.typeName}' specify a '${spec.name}' ` +\n\nNit: specifies", "author": "jryans@gmail.com", "id": 13165307, "time": "2018-03-28T23:32:49Z"}, {"text": "(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #6)\n> Comment on attachment 8962757\n> Bug 1449162 - Move NetworkEventActor to its own module.\n> \n> https://reviewboard.mozilla.org/r/231602/#review237746\n> \n> Thanks for working on this! :) I am assuming this commit only moves the\n> actor and no other changes are made here.\n\nYes. And it is a valid revision, where netmon still work.", "author": "poirot.alex@gmail.com", "id": 13165925, "time": "2018-03-29T08:29:42Z"}, {"text": "Created attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nNow that NetworkEventActor uses protocol.js, it can manage child actors it uses.\nSo instead of hosting the longstring it creates into WebConsoleActor pool,\nit can register them it internal pool managed by protocol.js.\n\nReview commit: https://reviewboard.mozilla.org/r/232468/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/232468/", "author": "poirot.alex@gmail.com", "id": 13166155, "time": "2018-03-29T10:12:43Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/2-3/", "author": "poirot.alex@gmail.com", "id": 13166156, "time": "2018-03-29T10:12:43Z"}, {"text": "Comment on attachment 8963160\nBug 1449162 - Throw an explicit error message when a method specified in a spec is missing in the actor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232004/diff/1-2/", "author": "poirot.alex@gmail.com", "id": 13166157, "time": "2018-03-29T10:12:43Z"}, {"text": "(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #7)\n> Comment on attachment 8962758\n> Bug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n> \n> https://reviewboard.mozilla.org/r/231604/#review237756\n> \n> Thanks for working on this! :) Overall, it looks good to me, but there a few\n> issues to look over before landing.\n> \n> I do wonder how much work it is to convert to p.js fronts as well for these\n> older actors...\n\nNo idea personaly, It looks like so far, from bug 1289193 we only converted the actors and never the client to fronts?\nAre all the \"decouple fronts from actors in ...\" about that?\n\n> \n> ::: devtools/server/actors/network-event.js:45\n> (Diff revision 2)\n> >  \n> > -  this._timings = {};\n> > +    this._timings = {};\n> > -  this._stackTrace = {};\n> > +    this._stackTrace = {};\n> >  \n> > -  // Keep track of LongStringActors owned by this NetworkEventActor.\n> > +    // Keep track of LongStringActors owned by this NetworkEventActor.\n> > -  this._longStringActors = new Set();\n> > +    this._longStringActors = new Set();\n> \n> `LongStringActor` is also a protocol.js actor, so it would be great to use\n> the natural parent / child actor lifecycle that p.js provides, instead of\n> this custom tracking.\n> \n> Can you add a separate commit to use that?  Let me know if it feels out of\n> scope.\n> \n> ::: devtools/server/actors/network-event.js:75\n> (Diff revision 2)\n> >  \n> >    /**\n> >     * Releases this actor from the pool.\n> >     */\n> > -  release: function() {\n> > +  destroy(conn) {\n> > +    protocol.Actor.prototype.initialize.call(this, conn);\n> \n> I would think this should be `destroy` instead...?\n\nOops, wrong copy paste!\nIt helped undercover that this.parent = webConsoleActor was wrong as it overloads `parent` method on `Pool`.\nSo I renamed it to this.webConsoleActor.\n\n> ::: devtools/server/actors/network-event.js:96\n> (Diff revision 2)\n> >      if (this.channel) {\n> >        this.parent._netEvents.delete(this.channel);\n> >      }\n> > -    this.parent.releaseActor(this);\n> > +\n> > +    // Nullify parent before calling releaseActor as it will recall this method\n> > +    let parent = this.parent;\n> \n> Would these 3 lines be more naturally part of `release` instead?\n\nNot sure. If the connection is closed, this will help cleanup WebConsole._actorPool.\n(release won't be called if we close the connection abruptly)\nAlso, destroy is called after release and we will miss access to `parent` in destroy.\n\nAll these releaseActor/destroy methods feel ackward as it is very redundant with protocol.js internal pool and destroy mechanism. We will be able to simplify this significantly once WebConsoleActor switches to protocol.js.\n\n> ::: devtools/server/actors/network-event.js:172\n> (Diff revision 2)\n> >     */\n> > -  onGetRequestPostData: function() {\n> > +  getRequestPostData() {\n> >      return {\n> > -      from: this.actorID,\n> >        postData: this._request.postData,\n> >        postDataDiscarded: this._discardRequestBody,\n> \n> Should this get the same boolean treatment as `contentDiscarded`?\n\nGood catch, instead of coercing type in each method, I ensure always setting a boolean everywhere.\nBy setting a default false value in constructor and coercing everywhere we receive a value from NetworkMonitor.\nI also applied to same to _discardResponseBody.\n\n> ::: devtools/shared/specs/network-event.js:77\n> (Diff revision 2)\n> > +  validity: \"json\",\n> > +  fingerprint: \"json\",\n> > +});\n> > +\n> > +const networkEventSpec = generateActorSpec({\n> > +  typeName: \"netEvent\",\n> \n> Should this new actor type be added to the spec index at `specs/index.js`?\n> \n> Looking at that module, it's not very obvious what \"types\" are meant to be\n> listed there, but it seems like only _actor_ types.  I filed bug 1449773 to\n> clarify.\n\nIt doesn't have to. It will have to be in this list whenever another protocol.js\nactor start using it.\nI added it to the list as it will be used by WebConsoleActor once it moves to protocol.js.\n\n> \n> ::: devtools/shared/specs/network-event.js:85\n> (Diff revision 2)\n> > +    \"network-event-update\": {\n> > +      type: \"networkEventUpdate\",\n> > +      updateType: Arg(0, \"string\"),\n> > +\n> > +      // request/response headers\n> > +      headers: Option(1, \"number\"),\n> \n> Hmm, so all of these are set to argument index 1, which seems unexpected... \n> Since some fields are sent together, how does it work?\n\nThis spec event relates to all the calls to emit in the actor:\n  this.emit(\"network-event-update\", updateType, { ... args ...});\nEach update type is going to come with different set of \"args\" (i.e. Option(1, ...) arguments).\n`arg: Option(1, \"x\")` means that 1st argument is an object, with an optional `arg` attribute of type `x`.\nSo that it works, but it doesn't ensure that we correctly pass all the expected attributes for each `updateType`.\nIt may be hard to be more correct without changing RDP messages. I think it would require emitting one event per `updateType` instead of sending them all via a unique `network-event-update` event.\n\n> Oh, I guess maybe it wouldn't with a p.js front, but for now we're still\n> using old clients.\n\nEven if we convert client to fronts, it will still work as-is. You will receive events like this:\n  front.on(\"network-event-update\", (updateType, args) {\n    if (updateType == \"requestHeaders\") {\n      let { headers, headersSize } = args;\n      ...\n    }\n  });\n\n> Should we also log bugs to convert old clients to p.js fronts?  It seems like we should aim for p.js everywhere if possible...\n\nIdeally yes, don't we already have some for at least one actor?", "author": "poirot.alex@gmail.com", "id": 13166158, "time": "2018-03-29T10:12:55Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #13)\n> (In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #7)\n> > Comment on attachment 8962758\n> > Bug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n> > \n> > https://reviewboard.mozilla.org/r/231604/#review237756\n> > \n> > Thanks for working on this! :) Overall, it looks good to me, but there a few\n> > issues to look over before landing.\n> > \n> > I do wonder how much work it is to convert to p.js fronts as well for these\n> > older actors...\n> \n> No idea personaly, It looks like so far, from bug 1289193 we only converted\n> the actors and never the client to fronts?\n> Are all the \"decouple fronts from actors in ...\" about that?\n\nIt appears we didn't have any clear bugs for client -> front conversion.  I filed bug 1450150 for it.\n\n> > ::: devtools/shared/specs/network-event.js:85\n> > (Diff revision 2)\n> > > +    \"network-event-update\": {\n> > > +      type: \"networkEventUpdate\",\n> > > +      updateType: Arg(0, \"string\"),\n> > > +\n> > > +      // request/response headers\n> > > +      headers: Option(1, \"number\"),\n> > \n> > Hmm, so all of these are set to argument index 1, which seems unexpected... \n> > Since some fields are sent together, how does it work?\n> \n> This spec event relates to all the calls to emit in the actor:\n>   this.emit(\"network-event-update\", updateType, { ... args ...});\n> Each update type is going to come with different set of \"args\" (i.e.\n> Option(1, ...) arguments).\n> `arg: Option(1, \"x\")` means that 1st argument is an object, with an optional\n> `arg` attribute of type `x`.\n> So that it works, but it doesn't ensure that we correctly pass all the\n> expected attributes for each `updateType`.\n> It may be hard to be more correct without changing RDP messages. I think it\n> would require emitting one event per `updateType` instead of sending them\n> all via a unique `network-event-update` event.\n\nSorry about this, I think I was confused about how `Option` worked. x_x This part seems fine as-is.", "author": "jryans@gmail.com", "id": 13168217, "time": "2018-03-30T00:11:36Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nhttps://reviewboard.mozilla.org/r/231604/#review238140\n\n::: devtools/server/actors/network-event.js:86\n(Diff revisions 2 - 3)\n> -        this.parent.releaseActor(actor);\n> +        this.webConsoleActor.releaseActor(actor);\n>        }\n>      }\n>      this._longStringActors = new Set();\n>  \n> -    if (!this.parent) {\n> +    if (!this.webConsoleActor) {\n\nIt's a bit surprising to use `webConsoleActor` immediately _before_ this null check.  What's going to make it become null here, when you used it several lines ago?  If this is correct, please add a comment explaining why.", "author": "jryans@gmail.com", "id": 13168224, "time": "2018-03-30T00:17:44Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nhttps://reviewboard.mozilla.org/r/232468/#review238142\n\nThis is probably the right idea, but I think I am not following a key step here...\n\n::: devtools/server/actors/network-event.js:443\n(Diff revision 1)\n> +   */\n> +  _createStringGrip: function(string) {\n> +    if (string && stringIsLong(string)) {\n> +      let actor = new LongStringActor(string);\n> +      this.manage(actor);\n> +      return actor.grip();\n\nHmm, wait does this actually have a `grip` method?\n\nI feel like I must be missing something...", "author": "jryans@gmail.com", "id": 13168240, "time": "2018-03-30T00:29:06Z"}, {"text": "(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #15)\n> ::: devtools/server/actors/network-event.js:86\n> (Diff revisions 2 - 3)\n> > -        this.parent.releaseActor(actor);\n> > +        this.webConsoleActor.releaseActor(actor);\n> >        }\n> >      }\n> >      this._longStringActors = new Set();\n> >  \n> > -    if (!this.parent) {\n> > +    if (!this.webConsoleActor) {\n> \n> It's a bit surprising to use `webConsoleActor` immediately _before_ this\n> null check.  What's going to make it become null here, when you used it\n> several lines ago?  If this is correct, please add a comment explaining why.\n\nI don't know. The original code was like this.\nIn the final code, after all the patches are applied, the `if (!this.webConsoleActor)` check is done first.\nAnd we set `webConsoleActor` to null just before calling webConsoleActor.releaseActor, which is the call that is going to re-call `destroy` method.\n\n(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #16)\n> Comment on attachment 8963527\n> ::: devtools/server/actors/network-event.js:443\n> (Diff revision 1)\n> > +   */\n> > +  _createStringGrip: function(string) {\n> > +    if (string && stringIsLong(string)) {\n> > +      let actor = new LongStringActor(string);\n> > +      this.manage(actor);\n> > +      return actor.grip();\n> \n> Hmm, wait does this actually have a `grip` method?\n> \n> I feel like I must be missing something...\n\nAhah. I realized during bug 's review that we are having two LongStringActor implementation.\nHere, I'm still using the old fashion one, implemented here:\n  https://searchfox.org/mozilla-central/source/devtools/server/actors/object.js#2278\nThis one implements grip.\n\nI should probably try to use the new one, using protocol.js:\n  https://searchfox.org/mozilla-central/source/devtools/server/actors/string.js#12", "author": "poirot.alex@gmail.com", "id": 13177580, "time": "2018-04-03T19:38:11Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #17)\n> Ahah. I realized during bug 's review that we are having two LongStringActor\n\n=> bug 1449188's review", "author": "poirot.alex@gmail.com", "id": 13177630, "time": "2018-04-03T19:51:14Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #17)\n> (In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #16)\n> > Comment on attachment 8963527\n> > ::: devtools/server/actors/network-event.js:443\n> > (Diff revision 1)\n> > > +   */\n> > > +  _createStringGrip: function(string) {\n> > > +    if (string && stringIsLong(string)) {\n> > > +      let actor = new LongStringActor(string);\n> > > +      this.manage(actor);\n> > > +      return actor.grip();\n> > \n> > Hmm, wait does this actually have a `grip` method?\n> > \n> > I feel like I must be missing something...\n> \n> Ahah. I realized during bug 's review that we are having two LongStringActor\n> implementation.\n> Here, I'm still using the old fashion one, implemented here:\n>  \n> https://searchfox.org/mozilla-central/source/devtools/server/actors/object.\n> js#2278\n> This one implements grip.\n> \n> I should probably try to use the new one, using protocol.js:\n>  \n> https://searchfox.org/mozilla-central/source/devtools/server/actors/string.\n> js#12\n\nHaha, that's quite confusing! :X Looks like webconsole is the last to use the old-style string actor for this, so hopefully we can eventually remove it when console actor has been converted.", "author": "jryans@gmail.com", "id": 13177633, "time": "2018-04-03T19:53:20Z"}, {"text": "Comment on attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231602/diff/1-2/", "author": "poirot.alex@gmail.com", "id": 13177634, "time": "2018-04-03T19:53:30Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/3-4/", "author": "poirot.alex@gmail.com", "id": 13177635, "time": "2018-04-03T19:53:30Z"}, {"text": "Comment on attachment 8963160\nBug 1449162 - Throw an explicit error message when a method specified in a spec is missing in the actor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232004/diff/2-3/", "author": "poirot.alex@gmail.com", "id": 13177636, "time": "2018-04-03T19:53:30Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232468/diff/1-2/", "author": "poirot.alex@gmail.com", "id": 13177637, "time": "2018-04-03T19:53:30Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nhttps://reviewboard.mozilla.org/r/232468/#review238956\n\n::: devtools/server/actors/network-event.js:443\n(Diff revision 2)\n> +   */\n> +  _createStringGrip: function(string) {\n> +    let actor = new LongStringActor(this.conn, string);\n> +    if (!actor.short) {\n> +      this.manage(actor);\n>      }\n\nI'm wondering if this call to manage is important.\nNone of the existing usages of protocol.js version of LongStringActor explicitly manage them.\n\nSee for example:\nhttps://searchfox.org/mozilla-central/source/devtools/server/actors/device.js#56\nhttps://searchfox.org/mozilla-central/source/devtools/server/actors/inspector/node.js#538\n\nIt might be redundant with this internal call to manage:\nhttps://searchfox.org/mozilla-central/source/devtools/shared/protocol.js#311-316\nBut I don't think it is the case as we don't return LongStringActor directly, but instead it is on a dictionary attribute. Like here, for `rawHeaders`:\nhttps://searchfox.org/mozilla-central/rev/f5fb323246bf22a3a3b4185882a1c5d8a2c02996/devtools/server/actors/webconsole.js#2094", "author": "poirot.alex@gmail.com", "id": 13177655, "time": "2018-04-03T19:59:54Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nhttps://reviewboard.mozilla.org/r/232468/#review238956\n\n> I'm wondering if this call to manage is important.\n> None of the existing usages of protocol.js version of LongStringActor explicitly manage them.\n> \n> See for example:\n> https://searchfox.org/mozilla-central/source/devtools/server/actors/device.js#56\n> https://searchfox.org/mozilla-central/source/devtools/server/actors/inspector/node.js#538\n> \n> It might be redundant with this internal call to manage:\n> https://searchfox.org/mozilla-central/source/devtools/shared/protocol.js#311-316\n> But I don't think it is the case as we don't return LongStringActor directly, but instead it is on a dictionary attribute. Like here, for `rawHeaders`:\n> https://searchfox.org/mozilla-central/rev/f5fb323246bf22a3a3b4185882a1c5d8a2c02996/devtools/server/actors/webconsole.js#2094\n\nFor the way you have the patch right now, yes you should call `manage` because (like you said) you aren't returning the actor object, so the p.js internal call never has a chance to run.\n\nHowever, I think we're doing some extra steps here that aren't needed.  The `longstring` type has custom marshalling[1] that already handles the case of short vs. long strings.  It seems like we should make two changes:\n\n1. Change the spec for long string using methods to actually state `longstring` as the type (or `nullable:longstring` if needed)\n2. Always return the long string actor object and let the marshalling figure out what to do\n\nThis seems to how other users of long string with protocol.js are operating, so it would be good to match if we can.  Sorry for missing this before...  I forgot about the custom marshaller for long string when reviewing the spec here. :S\n\n[1]: https://searchfox.org/mozilla-central/rev/a0665934fa05158a5a943d4c8b277465910c029c/devtools/shared/specs/string.js#65", "author": "jryans@gmail.com", "id": 13177967, "time": "2018-04-03T21:49:18Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nhttps://reviewboard.mozilla.org/r/232468/#review238998\n\nUsing the `longstring` type for real (so that the marshaller is used) seems like the right path here.  I'd like to see that patch (or if it can't be used here, I'd like to know that as well) so marking r- for now.", "author": "jryans@gmail.com", "id": 13177970, "time": "2018-04-03T21:50:51Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/4-5/", "author": "poirot.alex@gmail.com", "id": 13178821, "time": "2018-04-04T09:09:38Z"}, {"text": "Comment on attachment 8963160\nBug 1449162 - Throw an explicit error message when a method specified in a spec is missing in the actor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232004/diff/3-4/", "author": "poirot.alex@gmail.com", "id": 13178822, "time": "2018-04-04T09:09:38Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232468/diff/2-3/", "author": "poirot.alex@gmail.com", "id": 13178823, "time": "2018-04-04T09:09:38Z"}, {"text": "(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #26)\n> Comment on attachment 8963527\n> Bug 1449162 - Attach longstrings to NetworkEventActor directly instead of\n> WebConsoleActor.\n> \n> https://reviewboard.mozilla.org/r/232468/#review238998\n> \n> Using the `longstring` type for real (so that the marshaller is used) seems\n> like the right path here.  I'd like to see that patch (or if it can't be\n> used here, I'd like to know that as well) so marking r- for now.\n\nOh well, I thought headers and cookies attributes were dictionaries.\nSo I came up with a tweak to protocol.js to support \"unified dict type\".\nA type with a dictionary where you don't know what will be the property names,\nbut you have a fixed type for the property values.\n\nBut afterall, I ended up understanding that these two headers and cookies fields are arrays...\nSo it is much easier to support with correct type.\n\nAt the end I tweaked the spec definition in the second patch and modified the last to return actors instead of grips/forms.\n(FYI: I didn't knew about custom marshalling before your previous comment)", "author": "poirot.alex@gmail.com", "id": 13178829, "time": "2018-04-04T09:13:28Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232468/diff/3-4/", "author": "poirot.alex@gmail.com", "id": 13180167, "time": "2018-04-04T16:23:21Z"}, {"text": "I just pushed an extra change to fix try failures, you may want to take an extra look at stylesheets.js tweaks:\n  https://reviewboard.mozilla.org/r/232468/diff/3-4/\n\nI also learned today that style editor is reusing netmonitor clients/fronts...", "author": "poirot.alex@gmail.com", "id": 13180172, "time": "2018-04-04T16:25:41Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #30)\n> (FYI: I didn't knew about custom marshalling before your previous comment)\n\nYeah, I don't think it's used often...?  It is briefly discussed in the p.js docs:\n\nhttps://dxr.mozilla.org/mozilla-central/rev/00bdc9451be6557ccce1492b9b966d4435615380/devtools/docs/backend/protocol.js.md#200\n\nAt least 4 usages in specs, so still pretty rare:\n\nhttps://searchfox.org/mozilla-central/search?q=addType&case=true&regexp=false&path=specs", "author": "jryans@gmail.com", "id": 13180193, "time": "2018-04-04T16:29:51Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #32)\n> I just pushed an extra change to fix try failures, you may want to take an\n> extra look at stylesheets.js tweaks:\n>   https://reviewboard.mozilla.org/r/232468/diff/3-4/\n> \n> I also learned today that style editor is reusing netmonitor\n> clients/fronts...\n\nAh yeah, I guess that's my doing... :S It was a bit of an experiment to see if it's worthwhile.  It does seem worthwhile to shared loaded resources in some way.  I wouldn't suggest using this same approach I used here for Style Editor in other tools as it's quite a hack (though we could...).  Instead, I am hopeful we can build a central \"resources\" storage and then any tool can check there for loaded files (instead of reaching into the netmonitor like this).\n\nAnyway, just some thoughts about the future.", "author": "jryans@gmail.com", "id": 13180217, "time": "2018-04-04T16:38:30Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nhttps://reviewboard.mozilla.org/r/232468/#review239340\n\nI think there are a few more tweaks needed here.  It's quite close though.  Thanks for sticking with it; I know this stuff is a bit obscure...\n\n::: devtools/server/actors/network-event.js:443\n(Diff revisions 2 - 4)\n>     *         A string is returned if |string| is not a long string.\n> -   *         A LongStringActor grip is returned if |string| is a long string.\n> +   *         A LongStringActor is returned if |string| is a long string.\n>     */\n> -  _createStringGrip: function(string) {\n> +  _createLongString: function(string) {\n>      let actor = new LongStringActor(this.conn, string);\n>      if (!actor.short) {\n\nCan this if block be removed now?  I was hoping the `longstring` marshalling would cause p.js to handle this internally now...\n\n::: devtools/server/actors/stylesheets.js:478\n(Diff revision 4)\n>      }\n>      let content = request._response.content;\n>      if (request._discardResponseBody || request._truncated || !content) {\n>        return null;\n>      }\n> -    if (content.text.type != \"longString\") {\n> +    if (typeof content.text.type == \"string\") {\n\nHmm...  I am not sure I follow this part...\n\nPrior to your work in this bug, `content.text` would be the string directly when short or the long string actor (from object.js) form when long.[1]\n\nAfter your patches here, `content.text` is a always a `LongStringActor` object (from string.js) which may or may not be \"short\" internally.\n\nAssuming that's all correct, it seems like we can remove the short vs. long distinction in this function, since we always have an actor object with the full string in `content.text.str`.\n\n[1]: https://searchfox.org/mozilla-central/rev/f5fb323246bf22a3a3b4185882a1c5d8a2c02996/devtools/server/actors/webconsole.js#516", "author": "jryans@gmail.com", "id": 13180295, "time": "2018-04-04T16:57:19Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nhttps://reviewboard.mozilla.org/r/231604/#review239362\n\n::: devtools/shared/specs/network-event.js:15\n(Diff revision 5)\n> +  RetVal,\n> +  generateActorSpec,\n> +  types\n> +} = require(\"devtools/shared/protocol\");\n> +\n> +types.addDictType(\"netevent#headers\", {\n\nI am somewhat perplexed by the usage of `a#b` in the type names, since `#` is also used for the \"detail\" form feature[1].\n\nIs this usage of `#` about the detail feature, or are you trying to give a name to a type that is a field of something else?\n\nIf it's not about form details, I think a different character would be better to reduce confusion.  Maybe `a.b` instead?\n\n[1]: https://dxr.mozilla.org/mozilla-central/rev/00bdc9451be6557ccce1492b9b966d4435615380/devtools/docs/backend/protocol.js.md#436", "author": "jryans@gmail.com", "id": 13180315, "time": "2018-04-04T17:01:36Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/5-6/", "author": "poirot.alex@gmail.com", "id": 13180411, "time": "2018-04-04T17:30:05Z"}, {"text": "Comment on attachment 8963160\nBug 1449162 - Throw an explicit error message when a method specified in a spec is missing in the actor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232004/diff/4-5/", "author": "poirot.alex@gmail.com", "id": 13180412, "time": "2018-04-04T17:30:05Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232468/diff/4-5/", "author": "poirot.alex@gmail.com", "id": 13180413, "time": "2018-04-04T17:30:05Z"}, {"text": "(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #35)\n> Comment on attachment 8963527\n> Bug 1449162 - Attach longstrings to NetworkEventActor directly instead of\n> WebConsoleActor.\n> \n> https://reviewboard.mozilla.org/r/232468/#review239340\n> \n> I think there are a few more tweaks needed here.  It's quite close though. \n> Thanks for sticking with it; I know this stuff is a bit obscure...\n\nI was expecting some dark corner. It was great to learn so many things!\n\n> ::: devtools/server/actors/network-event.js:443\n> (Diff revisions 2 - 4)\n> >     *         A string is returned if |string| is not a long string.\n> > -   *         A LongStringActor grip is returned if |string| is a long string.\n> > +   *         A LongStringActor is returned if |string| is a long string.\n> >     */\n> > -  _createStringGrip: function(string) {\n> > +  _createLongString: function(string) {\n> >      let actor = new LongStringActor(this.conn, string);\n> >      if (!actor.short) {\n> \n> Can this if block be removed now?  I was hoping the `longstring` marshalling\n> would cause p.js to handle this internally now...\n\nI was overthinking I think.\nLongStringActor instances related to short strings are going to stay around until the connection is close of NetworkEventActor is released, whereas the instances for really long strings can be released as soon as client release them. But I'm not sure netmonitor client does such thing.\n\nI also removed _createLongString helper and instanciate LongStringActor directly everywhere.\n\n> ::: devtools/server/actors/stylesheets.js:478\n> (Diff revision 4)\n> >      }\n> >      let content = request._response.content;\n> >      if (request._discardResponseBody || request._truncated || !content) {\n> >        return null;\n> >      }\n> > -    if (content.text.type != \"longString\") {\n> > +    if (typeof content.text.type == \"string\") {\n> \n> Hmm...  I am not sure I follow this part...\n> \n> Prior to your work in this bug, `content.text` would be the string directly\n> when short or the long string actor (from object.js) form when long.[1]\n> \n> After your patches here, `content.text` is a always a `LongStringActor`\n> object (from string.js) which may or may not be \"short\" internally.\n> \n> Assuming that's all correct, it seems like we can remove the short vs. long\n> distinction in this function, since we always have an actor object with the\n> full string in `content.text.str`.\n\nYes, that's correct. I fixed that.", "author": "poirot.alex@gmail.com", "id": 13180414, "time": "2018-04-04T17:30:25Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #40)\n> (In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #35)\n> > ::: devtools/server/actors/network-event.js:443\n> > (Diff revisions 2 - 4)\n> > >     *         A string is returned if |string| is not a long string.\n> > > -   *         A LongStringActor grip is returned if |string| is a long string.\n> > > +   *         A LongStringActor is returned if |string| is a long string.\n> > >     */\n> > > -  _createStringGrip: function(string) {\n> > > +  _createLongString: function(string) {\n> > >      let actor = new LongStringActor(this.conn, string);\n> > >      if (!actor.short) {\n> > \n> > Can this if block be removed now?  I was hoping the `longstring` marshalling\n> > would cause p.js to handle this internally now...\n> \n> I was overthinking I think.\n> LongStringActor instances related to short strings are going to stay around\n> until the connection is close of NetworkEventActor is released, whereas the\n> instances for really long strings can be released as soon as client release\n> them. But I'm not sure netmonitor client does such thing.\n> \n> I also removed _createLongString helper and instanciate LongStringActor\n> directly everywhere.\n\nI don't think I am seeing these changes in the latest diff, is something missing?\n\nhttps://reviewboard.mozilla.org/r/232468/diff/4-5/", "author": "jryans@gmail.com", "id": 13180576, "time": "2018-04-04T17:58:53Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232468/diff/5-6/", "author": "poirot.alex@gmail.com", "id": 13180613, "time": "2018-04-04T18:10:53Z"}, {"text": "Here you go, I forgot to attach the change to remove _createLongString.\n\n\n(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #36)\n> I am somewhat perplexed by the usage of `a#b` in the type names, since `#`\n> is also used for the \"detail\" form feature[1].\n\nI didn't knew this feature, I saw this comment and thought \"#\" would be a better separator than \":\".\n  https://searchfox.org/mozilla-central/source/devtools/shared/protocol.js#43-47\n\n> Is this usage of `#` about the detail feature, or are you trying to give a\n> name to a type that is a field of something else?\n> \n> If it's not about form details, I think a different character would be\n> better to reduce confusion.  Maybe `a.b` instead?\n\nI switched to use \".\". My intent was to avoid using \":\" which is use for other purposes.", "author": "poirot.alex@gmail.com", "id": 13180653, "time": "2018-04-04T18:18:13Z"}, {"text": "Comment on attachment 8963527\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nhttps://reviewboard.mozilla.org/r/232468/#review239406\n\nThanks for working on this! :) Looks good to me; glad we worked out those details!", "author": "jryans@gmail.com", "id": 13180777, "time": "2018-04-04T18:56:01Z"}, {"text": "Hum. Unfortunately, it looks like it regress performance of HAR export:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=ca7d721110ab4341fe4fcb19a5eae9fecab9a61a&newProject=try&newRevision=deeefa937fe8d39ea6312bb4b1f88cdd9db5d2aa&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n16% regression on complicated.netmonitor.exportHar\nThe rest may be related to this one test being significantly slower.", "author": "poirot.alex@gmail.com", "id": 13182504, "time": "2018-04-05T09:31:56Z"}, {"text": "It doesn't seem to be only related to latest patch about longstrings.\nHere is try push without the latest changeset:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=ca7d721110ab4341fe4fcb19a5eae9fecab9a61a&newProject=try&newRevision=852c39c10d4ce9919025377efb87ca8bbbe2a6d7&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n8.3% regression on complicated.netmonitor.exportHar\n\nAnd another comparison without and with the last changeset:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=852c39c10d4ce9919025377efb87&newProject=try&newRevision=deeefa937fe8&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n\nSo last changeset has an impact, but the others also have an impact...", "author": "poirot.alex@gmail.com", "id": 13183111, "time": "2018-04-05T13:49:25Z"}, {"text": "I tried various ways to improve protocol.js performance where I saw possibly slow code pattern.\n\n# Preventing the duplication of arrays doesn't seem to impact any test:\nhttps://hg.mozilla.org/try/rev/8a936276f48eca90b0b06846e7e05d3c0916c9ee\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=5e04a12875369e81741856a124dc856f60147497&newProject=try&newRevision=180761146a4972d0440e47db9c982ca2282fae77&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n\n# Prevent duplicating arrays in identityWrite, doesn't seem to impact any test either:\nhttps://hg.mozilla.org/try/rev/dbddbf6644119d3ecfcb95c64d6c589d7dfb5efc\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=5e04a12875369e81741856a124dc856f60147497&newProject=try&newRevision=952f236237210f1abddd68cc7127bf94200a0844&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n\n# Prevent duplicating \"template\" objects in Request and Response's write methods, this time impacts tests:\nhttps://hg.mozilla.org/try/rev/bab6fec74303\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=5e04a12875369e81741856a124dc856f60147497&newProject=try&newRevision=87983cf1a5948db664c73368ebd13a2a5143b2ba&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n  It allows to revert back 2.6% of the 8.3% regression of netmonitor refactoring patch.\n  But it also regress various other tests, so I'll look again at this patch to see if it has anything wrong.", "author": "poirot.alex@gmail.com", "id": 13192523, "time": "2018-04-09T17:00:58Z"}, {"text": "*** Bug 1452932 has been marked as a duplicate of this bug. ***", "author": "ystartsev@mozilla.com", "id": 13195062, "time": "2018-04-10T14:56:46Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #47)\n> # Prevent duplicating \"template\" objects in Request and Response's write\n> methods, this time impacts tests\n\nAbout this, I split the two modifications and it looks like Response.write tweak improves the perf in many cases (and regress a couple which doesn't look too bad)\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=8e604bbe8e62&newProject=try&newRevision=4570da82eae1035ee3fb16b12ae9411b78b20da3&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n\nWhile Request.write only regress things:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=8e604bbe8e62&newProject=try&newRevision=d43a11a048b57e3b93431e1a0c09ad9a3ce92804&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n\nIt is very surprising to see that I no longer get any improvement on har export test.\nI will try to better understand these write method, they are still unclear to me.", "author": "poirot.alex@gmail.com", "id": 13197143, "time": "2018-04-11T09:19:09Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #45)\n> Hum. Unfortunately, it looks like it regress performance of HAR export:\n> https://treeherder.mozilla.org/perf.html#/\n> comparesubtest?originalProject=try&originalRevision=ca7d721110ab4341fe4fcb19a\n> 5eae9fecab9a61a&newProject=try&newRevision=deeefa937fe8d39ea6312bb4b1f88cdd9d\n> b5d2aa&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignatur\n> e=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n> 16% regression on complicated.netmonitor.exportHar\n> The rest may be related to this one test being significantly slower.\n\nUnfortunately, bug 1453385 doesn't help that much.\nHere is a try with on top of it and comparing actor refactoring to protocol.js:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=5160e6fc6c7035318e5307e3b4040401b7be7ab9&newProject=try&newRevision=218877fefb2e8aa2e09c50f71bb3a5641d165c43&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\nWe slim down the regression from 16% to 14% only.\n\nHere is two profile of DAMP during exporthar test:\n* one without the patches (bug 1453385 and this one):\n  https://perfht.ml/2IUBACL\n* another one with netmonitor actor refactoring only:\n  https://perfht.ml/2IRhaKX\n\nWe can see in the second one 420ms spent in protocol.js and the test go from 5.4s to 7.0s.", "author": "poirot.alex@gmail.com", "id": 13204785, "time": "2018-04-13T18:46:18Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #50)\n> Here is two profile of DAMP during exporthar test:\n> * one without the patches (bug 1453385 and this one):\n>   https://perfht.ml/2IUBACL\n> * another one with netmonitor actor refactoring only:\n>   https://perfht.ml/2IRhaKX\n\nDo you have a profile _with_ both this bug and bug 1453385 applied?  There's a Talos link for that above I guess...  Can you jump to a profile from Talos yet?", "author": "jryans@gmail.com", "id": 13204857, "time": "2018-04-13T19:13:08Z"}, {"text": "(In reply to J. Ryan Stinnett [:jryans] (use ni?) from comment #51)\n> (In reply to Alexandre Poirot [:ochameau] from comment #50)\n> > Here is two profile of DAMP during exporthar test:\n> > * one without the patches (bug 1453385 and this one):\n> >   https://perfht.ml/2IUBACL\n> > * another one with netmonitor actor refactoring only:\n> >   https://perfht.ml/2IRhaKX\n> \n> Do you have a profile _with_ both this bug and bug 1453385 applied?  There's\n> a Talos link for that above I guess...  Can you jump to a profile from Talos\n> yet?\n\nNot yet, and you will need special talos runs for having profile as it slow down everything.\n\nI redid profiles as it easily change based on weather, temperature and humidity (but also base m-c changeset):\n\n* m-c (9299ms):\nhttps://perfht.ml/2qvtCJH\n  transport.js (390ms)\n\n* with protocol fix (8952ms):\nhttps://perfht.ml/2qurVfw\n  transport.js (370ms)\n\n* with protocol fix and networkeventactor (9642ms):\nhttps://perfht.ml/2HklCox\n  transport.js (750ms)\n  protocol.js (820ms)\n  protocol.js, write (150ms)\n\n* with additional fixes I haven't attached to bugzilla (10112ms):\nhttps://perfht.ml/2qvrVfj\n  transport.js (560ms)\n  protocol.js (590ms)\n  protocol.js, write (160ms)\n\nFirst thing is that the improvement isn't obvious with just one run *and* the profiler turned on.\nI see a couple of stacks related to Promise.jsm from protocol.js, I'm wondering if it could be faster if we use native promises here.", "author": "poirot.alex@gmail.com", "id": 13205163, "time": "2018-04-13T21:23:23Z"}, {"text": "* switch to native Promises (9630ms) [plus additional fixes and all other patches]\nhttps://perfht.ml/2HlFTdb\n  protocol.js (320ms)\n  protocol.js, write (60ms)\nIt may have lowered the cost of protocol.js as Promise.jsm could included the cost of some promise resolution handler that weren't related to protocol.js.", "author": "poirot.alex@gmail.com", "id": 13205194, "time": "2018-04-13T21:46:39Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #53)\n> * switch to native Promises (9630ms) [plus additional fixes and all other\n\nActually, it looks like Promise.jsm, in the case of protocol.js, introduces an overhead.\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=b800a3fdec0db81820c3a77836f475de4176ea26&newProject=try&newRevision=f9a1ec00d6df5e2c7074f1df01d980eb2b727bd3&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\nDAMP reports 8.4% improvement on har export test and between 2% and 5% on a couple of reload tests.\n\nBut may be I broke something, let's see if try is green:\n  https://treeherder.mozilla.org/#/jobs?repo=try&revision=940887aa1362afa661f4b9a1d258f82e4934557e", "author": "poirot.alex@gmail.com", "id": 13205667, "time": "2018-04-14T08:49:10Z"}, {"text": "(In reply to Alexandre Poirot [:ochameau] from comment #54)\n> (In reply to Alexandre Poirot [:ochameau] from comment #53)\n> > * switch to native Promises (9630ms) [plus additional fixes and all other\n\nGood news, try was almost green, so it looks like Promise.jsm was the second biggest source of slowness.\nexport har test now only regress by 4% with bug 1454373:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=183d6db2b680&newProject=try&newRevision=751b03561072&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1", "author": "poirot.alex@gmail.com", "id": 13209555, "time": "2018-04-16T13:58:40Z"}, {"text": "Comment on attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231602/diff/2-3/", "author": "poirot.alex@gmail.com", "id": 13235005, "time": "2018-04-26T11:56:35Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/6-7/", "author": "poirot.alex@gmail.com", "id": 13235006, "time": "2018-04-26T11:56:35Z"}, {"text": "Comment on attachment 8963160\nBug 1449162 - Throw an explicit error message when a method specified in a spec is missing in the actor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/232004/diff/5-6/", "author": "poirot.alex@gmail.com", "id": 13235007, "time": "2018-04-26T11:56:35Z"}, {"text": "Now, on top of bug 1459205, complicated.netmonitor.exportHar no longer regress, but many reload tests do:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=398988ee3ba005a91b246ae436c09cec2e720c15&newProject=try&newRevision=300daacf8c2cfd55622eac084cd7d3711f96a175&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n\nUnfortunately, I think this patch is still too impactful to proceed :/", "author": "poirot.alex@gmail.com", "id": 13254751, "time": "2018-05-04T14:36:34Z"}, {"text": "I'm starting to get conflicts when rebasing, so I'll try to land whatever is safe landing.", "author": "poirot.alex@gmail.com", "id": 13264869, "time": "2018-05-09T09:49:46Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/7-8/", "author": "poirot.alex@gmail.com", "id": 13264891, "time": "2018-05-09T10:05:33Z"}, {"text": "Comment on attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231602/diff/3-4/", "author": "poirot.alex@gmail.com", "id": 13264892, "time": "2018-05-09T10:05:33Z"}, {"text": "Just to confirm, the regression is related to these two patches and not to the one pulled off in dependent bugs:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=1983e2e0f693ec67d3fd921f75dfcbd21237fa40&newProject=try&newRevision=d87e1226dd779fe37a1f7653b0e660bceccb98fc&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1", "author": "poirot.alex@gmail.com", "id": 13265404, "time": "2018-05-09T14:15:34Z"}, {"text": "Also, to confirm it isn't related to the long string actor refactoring, a DAMP run with only the first patch highlights similar regression:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=1983e2e0f693ec67d3fd921f75dfcbd21237fa40&newProject=try&newRevision=ec344f61da8ab846b52cddc5af84c63edf55786a&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n\nOtherwise, I thought that the regression came from the very explicit types, where we have to call all these \"write\" methods.\nSo I switched to `RetVal('json')` everywhere, so that it would pass through most the data, but surprisingly, it regressed the perf of exportHar:\nhttps://hg.mozilla.org/try/rev/1b5bcc9c541609810eb3e3c1bc80a579e15a5b51\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=ec344f61da8a&newProject=try&newRevision=791137c31fb9a4b7d352edfbc6ef271bc746a77e&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n\"json\" is a primitive type in protocol.js and its read/write methods are identityWrite which just pass the object as-is.\nIt is surprising to not see any improvement as I see a lot of calls to all the write methods in the content process related to the explicit types...", "author": "poirot.alex@gmail.com", "id": 13265938, "time": "2018-05-09T16:43:58Z"}, {"text": "Ah!\n\nSo, if I stop using protocol.js's event mechanism and revert back to send packets manually, it looks like it reverts back the regression:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=ec344f61da8ab846b52cddc5af84c63edf55786a&newProject=try&newRevision=c184865a95490e7a97875629ac78114cca5c576f&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n\nComparing against master with this change still highlights some regression but only on close subtests, but that is something to confirm:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=6ca283f776f569d6f5e4a1805d8154e87f55f3af&newProject=try&newRevision=c184865a95490e7a97875629ac78114cca5c576f&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1", "author": "poirot.alex@gmail.com", "id": 13266201, "time": "2018-05-09T18:16:07Z"}, {"text": "With the latest patch, splitting \"network-event-update\" into individual events at protocol.js level removes a significant part of the regression. We still emit only one event at RDP level \"networkEventUpdate\", but having multiple ones at protocol.js allows to not process all \"Option\" types for each message. We were spending a significant time into Request.write because of that.\n\nUnfortunately, regressions are still reported. We go from 7% down to 2% on complicated.requestsFinished and from 10% down to 2% on complicated.reload. complicated.exportHar looks worse for some reason, it goes from 2.5% up to 4%:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=c2a73ed25818ff1d064d117bdcc905d6fff1cf1e&newProject=try&newRevision=a1634d0ecca5a6ce0b53fe9b3a5adacee1c593c0&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n\nOverall the regression looks much more reasonable, but this is still a good case to study protocol.js performance.", "author": "poirot.alex@gmail.com", "id": 13275123, "time": "2018-05-14T09:13:02Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/8-9/", "author": "poirot.alex@gmail.com", "id": 13275178, "time": "2018-05-14T09:29:51Z"}, {"text": "Comment on attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231602/diff/4-5/", "author": "poirot.alex@gmail.com", "id": 13275179, "time": "2018-05-14T09:29:51Z"}, {"text": "*** Bug 1452922 has been marked as a duplicate of this bug. ***", "author": "ystartsev@mozilla.com", "id": 13278879, "time": "2018-05-15T15:06:14Z"}, {"text": "Created attachment 8976119\nBug 1449162 - Type everything to json and manually manage and marshall.\n\nReview commit: https://reviewboard.mozilla.org/r/244302/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/244302/", "author": "poirot.alex@gmail.com", "id": 13281328, "time": "2018-05-16T13:32:42Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/9-10/", "author": "poirot.alex@gmail.com", "id": 13281329, "time": "2018-05-16T13:32:42Z"}, {"text": "Comment on attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231602/diff/5-6/", "author": "poirot.alex@gmail.com", "id": 13281330, "time": "2018-05-16T13:32:42Z"}, {"text": "I hope to have found the last significant regression.\nSee comment 66 and https://reviewboard.mozilla.org/r/231604/diff/8-9/ for the previous perf fix, where having lots of Option() was a perf bottleneck.\nNow this patch address the overhead of Response.write when using explicit types (anything else but `json`/primitive types).\nSo I'm switching to `json` in many places, just to avoid procotol.js `write` methods.\nThere is two issues with that:\n* we ignore protocol.js typing/definition system...\n* we have to manually manage and marshall actors returned by actor's methods.\n\nI just spawn new DAMP runs, but I hope, with that last patch, to present no, or reasonable regression(s).", "author": "poirot.alex@gmail.com", "id": 13281334, "time": "2018-05-16T13:33:30Z"}, {"text": "Waiting for new DAMP runs before review after chatting about this with :ochameau.", "author": "jryans@gmail.com", "id": 13281752, "time": "2018-05-16T15:32:08Z"}, {"text": "DAMP results were very confusing because one run had a lot of noise.\nI'll look into that as when it happens no more regression are reported!\n\nHere is a first run with just the first patch:\n  Refactor the NetworkEventActor to use protocol.js.\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=fa0521aad96c18e2185d27648ecc2073d4b25ad4&newProject=try&newRevision=fdd30d916fb7125a4fbf0f86806375d4affd8380&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n  complicated.netmonitor.requestsFinished +1.53% (med)\n  complicated.netmonitor.exportHar -1.77% (med)\n\nAnother with the two first patches:\n  Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=fa0521aad96c&newProject=try&newRevision=8a4b606f43fcc2b11e441683756187889e4c5a5c&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n  complicated.netmonitor.requestsFinished +1.59% (high)\n  complicated.netmonitor.exportHar +3.96% (high)\n\nAnd a last one with all of them:\n  Type everything to json and manually manage and marshall.\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=fa0521aad96c&newProject=try&newRevision=958153033f9d779833418df8fc028a4d04313742&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n  complicated.netmonitor.requestsFinished +2.67% (high)\n  complicated.netmonitor.exportHar +1.43% (high)\n\nAlso, an interdiff between 1st and 2nd patch:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=fdd30d916fb7125a4fbf0f86806375d4affd8380&newProject=try&newRevision=8a4b606f43fcc2b11e441683756187889e4c5a5c&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyConfident=1&framework=1\n  complicated.netmonitor.exportHar +5.83% (high)\n\nAnd between 2nd and 3rd:\nhttps://treeherder.mozilla.org/perf.html#/comparesubtest?originalProject=try&originalRevision=8a4b606f43fcc2b11e441683756187889e4c5a5c&newProject=try&newRevision=958153033f9d779833418df8fc028a4d04313742&originalSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&newSignature=f79b6a4f1f8f53326d3056f6c8008c0ff4de0a94&showOnlyImportant=1&framework=1\n  complicated.netmonitor.exportHar -2.44% (high)\n\nSo. The last patch mostly accomodate the regression made to exportHAR by the switch to protocol.js's LongStrings.\nThere is still a regression at the end, but this time it is very small on exportHar. I wish I could also reduce the one on requestsFinished, but it would require more invasive modification to protocol.js. Like getting rid of mappings or optimizing the automatic marshalling of actors. I would like to keep looking at protocol.js to eventually revert the 3rd patch.", "author": "poirot.alex@gmail.com", "id": 13284530, "time": "2018-05-17T14:45:31Z"}, {"text": "Comment on attachment 8976119\nBug 1449162 - Type everything to json and manually manage and marshall.\n\nhttps://reviewboard.mozilla.org/r/244302/#review250782\n\nSeems like an important perf boost even though it removes one area that p.js is useful for.\n\n::: devtools/server/actors/network-event.js:278\n(Diff revision 1)\n>      this._request.headers = headers;\n>      this._prepareHeaders(headers);\n>  \n>      if (rawHeaders) {\n>        rawHeaders = new LongStringActor(this.conn, rawHeaders);\n> +      this.manage(rawHeaders);\n\nCould you add a comment at each of these call sites to mention that this manual marshalling is done for performance for the moment, but we hope to improve p.js so that it's not needed?  Maybe you can file a bug (if there's not one already) about the future improvement and mention in these comments.", "author": "jryans@gmail.com", "id": 13285195, "time": "2018-05-17T17:46:06Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/10-11/", "author": "poirot.alex@gmail.com", "id": 13286537, "time": "2018-05-18T08:34:29Z"}, {"text": "Comment on attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231602/diff/6-7/", "author": "poirot.alex@gmail.com", "id": 13286538, "time": "2018-05-18T08:34:29Z"}, {"text": "Comment on attachment 8976119\nBug 1449162 - Type everything to json and manually manage and marshall.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/244302/diff/1-2/", "author": "poirot.alex@gmail.com", "id": 13286539, "time": "2018-05-18T08:34:29Z"}, {"text": "Comment on attachment 8976119\nBug 1449162 - Type everything to json and manually manage and marshall.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/244302/diff/2-3/", "author": "poirot.alex@gmail.com", "id": 13286907, "time": "2018-05-18T10:47:41Z"}, {"text": "Comment on attachment 8962758\nBug 1449162 - Refactor the NetworkEventActor to use protocol.js.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231604/diff/11-12/", "author": "poirot.alex@gmail.com", "id": 13369411, "time": "2018-05-28T16:49:19Z"}, {"text": "Comment on attachment 8962757\nBug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/231602/diff/7-8/", "author": "poirot.alex@gmail.com", "id": 13369412, "time": "2018-05-28T16:49:19Z"}, {"text": "Comment on attachment 8976119\nBug 1449162 - Type everything to json and manually manage and marshall.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/244302/diff/3-4/", "author": "poirot.alex@gmail.com", "id": 13369413, "time": "2018-05-28T16:49:19Z"}, {"text": "Pushed by apoirot@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/1784812cfb14\nRefactor the NetworkEventActor to use protocol.js. r=jryans\nhttps://hg.mozilla.org/integration/autoland/rev/56430907e655\nAttach longstrings to NetworkEventActor directly instead of WebConsoleActor. r=jryans\nhttps://hg.mozilla.org/integration/autoland/rev/6c0ff9599fc9\nType everything to json and manually manage and marshall. r=jryans", "author": "pulsebot@bots.tld", "id": 13374164, "time": "2018-05-30T12:28:33Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/1784812cfb14\nhttps://hg.mozilla.org/mozilla-central/rev/56430907e655\nhttps://hg.mozilla.org/mozilla-central/rev/6c0ff9599fc9", "author": "aiakab@mozilla.com", "id": 13375962, "time": "2018-05-30T22:20:13Z"}, {"text": "Perf wins!\n\n== Change summary for alert #13437 (as of Thu, 24 May 2018 22:17:55 GMT) ==\n\nImprovements:\n\n  6%  damp windows10-64 pgo e10s stylo     85.04 -> 80.26\n  4%  damp windows10-64 opt e10s stylo     89.85 -> 86.38\n  3%  damp windows7-32 pgo e10s stylo      86.90 -> 83.91\n\nFor up to date results, see: https://treeherder.mozilla.org/perf.html#/alerts?id=13437", "author": "igoldan@mozilla.com", "id": 13377168, "time": "2018-05-31T11:56:35Z"}, {"text": "(In reply to Ionu\u021b Goldan [:igoldan], Performance Sheriffing from comment #86)\n> Perf wins!\n> \n> == Change summary for alert #13437 (as of Thu, 24 May 2018 22:17:55 GMT) ==\n> \n> Improvements:\n> \n>   6%  damp windows10-64 pgo e10s stylo     85.04 -> 80.26\n>   4%  damp windows10-64 opt e10s stylo     89.85 -> 86.38\n>   3%  damp windows7-32 pgo e10s stylo      86.90 -> 83.91\n> \n> For up to date results, see:\n> https://treeherder.mozilla.org/perf.html#/alerts?id=13437\n\nSorry, I have misplaced this notification.", "author": "igoldan@mozilla.com", "id": 13377343, "time": "2018-05-31T13:19:56Z"}], "id": 1449162, "priority": "P1", "platform": "Unspecified", "comment_count": 88, "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox62": "---", "status": "RESOLVED", "product": "DevTools", "cf_fx_iteration": "---", "blocks": [1265736, 1444132, 1450977, 1452920], "qa_contact": "", "see_also": [], "cf_status_firefox_esr52": "---", "component": "Netmonitor", "votes": 0, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "Firefox 62", "cc": ["igoldan@mozilla.com", "jryans@gmail.com", "odvarko@gmail.com", "ystartsev@mozilla.com"], "groups": [], "url": "", "creator_detail": {"email": "poirot.alex@gmail.com", "id": 283262, "name": "poirot.alex@gmail.com", "real_name": "Alexandre Poirot [:ochameau]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "igoldan@mozilla.com", "id": 590618, "name": "igoldan@mozilla.com", "real_name": "Ionu\u021b Goldan [:igoldan], Performance Sheriffing"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "odvarko@gmail.com", "id": 303767, "name": "odvarko@gmail.com", "real_name": "Jan Honza Odvarko [:Honza]"}, {"email": "ystartsev@mozilla.com", "id": 600802, "name": "ystartsev@mozilla.com", "real_name": "Yulia Startsev [:yulia]"}], "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-13T17:31:45Z", "cf_status_firefox_esr60": "---", "assigned_to": "poirot.alex@gmail.com", "is_open": false, "cf_qa_whiteboard": "", "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "history": [{"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "poirot.alex@gmail.com"}], "who": "poirot.alex@gmail.com", "when": "2018-03-27T12:52:43Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P1"}, {"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "", "field_name": "cc", "added": "odvarko@gmail.com"}], "who": "odvarko@gmail.com", "when": "2018-03-27T13:24:46Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963160, "added": "review?(jryans@gmail.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962758, "added": "review?(jryans@gmail.com)"}, {"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "poirot.alex@gmail.com", "when": "2018-03-28T15:16:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8962757, "added": "review?(jryans@gmail.com)"}], "who": "poirot.alex@gmail.com", "when": "2018-03-28T15:21:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8962757, "added": "review+"}], "who": "jryans@gmail.com", "when": "2018-03-28T22:42:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8962758, "added": "review+"}], "who": "jryans@gmail.com", "when": "2018-03-28T23:31:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8963160, "added": "review+"}], "who": "jryans@gmail.com", "when": "2018-03-28T23:32:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8963527, "added": "review?(jryans@gmail.com)"}], "who": "poirot.alex@gmail.com", "when": "2018-03-29T10:12:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8963527, "added": "review-"}], "who": "jryans@gmail.com", "when": "2018-03-30T00:29:06Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review-", "attachment_id": 8963527, "added": "review?(jryans@gmail.com)"}], "who": "poirot.alex@gmail.com", "when": "2018-04-03T19:53:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8963527, "added": "review-"}], "who": "jryans@gmail.com", "when": "2018-04-03T21:50:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review-", "attachment_id": 8963527, "added": "review?(jryans@gmail.com)"}], "who": "poirot.alex@gmail.com", "when": "2018-04-04T09:09:38Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8963527, "added": "review-"}], "who": "jryans@gmail.com", "when": "2018-04-04T16:57:19Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review-", "attachment_id": 8963527, "added": "review?(jryans@gmail.com)"}], "who": "poirot.alex@gmail.com", "when": "2018-04-04T17:30:05Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(poirot.alex@gmail.com)"}], "who": "jryans@gmail.com", "when": "2018-04-04T17:58:53Z"}, {"changes": [{"removed": "needinfo?(poirot.alex@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "poirot.alex@gmail.com", "when": "2018-04-04T18:18:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8963527, "added": "review+"}], "who": "jryans@gmail.com", "when": "2018-04-04T18:56:01Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1450977"}], "who": "jryans@gmail.com", "when": "2018-04-06T23:11:27Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "1991manish.kumar@gmail.com"}], "who": "1991manish.kumar@gmail.com", "when": "2018-04-06T23:18:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ystartsev@mozilla.com"}], "who": "ystartsev@mozilla.com", "when": "2018-04-10T14:56:46Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1452920"}], "who": "jryans@gmail.com", "when": "2018-04-10T15:49:04Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1453385"}], "who": "poirot.alex@gmail.com", "when": "2018-04-11T16:06:32Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(poirot.alex@gmail.com)"}], "who": "jryans@gmail.com", "when": "2018-04-13T19:13:08Z"}, {"changes": [{"removed": "needinfo?(poirot.alex@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "poirot.alex@gmail.com", "when": "2018-04-13T21:23:23Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1454373"}], "who": "poirot.alex@gmail.com", "when": "2018-04-16T13:53:04Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1454792"}], "who": "poirot.alex@gmail.com", "when": "2018-04-17T22:03:51Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1454899"}], "who": "poirot.alex@gmail.com", "when": "2018-04-18T09:41:41Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963527, "added": "1"}], "who": "poirot.alex@gmail.com", "when": "2018-04-26T11:56:38Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1459205"}], "who": "poirot.alex@gmail.com", "when": "2018-05-04T14:29:02Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1460228"}], "who": "poirot.alex@gmail.com", "when": "2018-05-09T09:45:28Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1460229"}], "who": "poirot.alex@gmail.com", "when": "2018-05-09T09:47:24Z"}, {"changes": [{"field_name": "attachments.description", "removed": "Bug 1449162 - Move NetworkEventActor to its own module.", "attachment_id": 8962757, "added": "Bug 1449162 - Attach longstrings to NetworkEventActor directly instead of WebConsoleActor."}], "who": "poirot.alex@gmail.com", "when": "2018-05-09T10:05:33Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8963160, "added": "1"}], "who": "poirot.alex@gmail.com", "when": "2018-05-09T10:05:36Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8976119, "added": "review?(jryans@gmail.com)"}], "who": "poirot.alex@gmail.com", "when": "2018-05-16T13:32:42Z"}, {"changes": [{"removed": "1991manish.kumar@gmail.com", "field_name": "cc", "added": ""}], "who": "1991manish.kumar@gmail.com", "when": "2018-05-17T14:50:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jryans@gmail.com)", "attachment_id": 8976119, "added": "review+"}], "who": "jryans@gmail.com", "when": "2018-05-17T17:46:06Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "Firefox 62"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-30 22:20:13"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "aiakab@mozilla.com", "when": "2018-05-30T22:20:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "igoldan@mozilla.com"}], "who": "igoldan@mozilla.com", "when": "2018-05-31T11:56:35Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1465778"}], "who": "igoldan@mozilla.com", "when": "2018-05-31T13:22:14Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1462561"}], "who": "poirot.alex@gmail.com", "when": "2018-05-31T13:50:24Z"}, {"changes": [{"removed": "Firefox", "field_name": "product", "added": "DevTools"}], "who": "automation@bmo.tld", "when": "2018-06-13T17:31:45Z"}]}