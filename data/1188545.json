{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2015-07-30T04:52:55Z", "type_id": 607, "creation_date": "2015-07-28T19:12:28Z", "id": 1219857, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/plain", "id": 8640026}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8642499}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8642500}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-08-04T21:22:13Z", "type_id": 4, "creation_date": "2015-08-03T17:12:52Z", "id": 1223729, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/plain", "id": 8642503}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [{"status": "-", "name": "review", "modification_date": "2015-08-11T13:21:32Z", "type_id": 4, "creation_date": "2015-08-10T23:21:29Z", "id": 1229004, "setter": "khuey@kylehuey.com"}, {"status": "+", "name": "review", "modification_date": "2015-08-12T18:18:34Z", "type_id": 4, "creation_date": "2015-08-12T18:18:34Z", "id": 1230632, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8646040}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2015-08-13T00:51:07Z", "type_id": 4, "creation_date": "2015-08-13T00:51:07Z", "id": 1230961, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8646041}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8646042}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2015-08-11T17:59:42Z", "type_id": 607, "creation_date": "2015-08-11T17:59:42Z", "id": 1229688, "setter": "bkelly@mozilla.com"}], "content_type": "text/plain", "id": 8646414}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2015-08-14T18:46:01Z", "type_id": 4, "creation_date": "2015-08-14T04:25:08Z", "id": 1231923, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8647889}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8647890}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8647891}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-08-25T16:23:44Z", "type_id": 4, "creation_date": "2015-08-21T22:24:56Z", "id": 1237151, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/plain", "id": 8651270}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8651271}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-08-25T18:06:16Z", "type_id": 4, "creation_date": "2015-08-21T22:26:08Z", "id": 1237153, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/plain", "id": 8651272}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-08-25T20:09:34Z", "type_id": 4, "creation_date": "2015-08-21T22:26:38Z", "id": 1237154, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/plain", "id": 8651273}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-08-25T21:51:24Z", "type_id": 4, "creation_date": "2015-08-21T22:27:13Z", "id": 1237155, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/plain", "id": 8651274}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-08-25T18:26:42Z", "type_id": 4, "creation_date": "2015-08-21T22:27:38Z", "id": 1237156, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/plain", "id": 8651275}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-09-18T22:51:10Z", "type_id": 4, "creation_date": "2015-09-04T00:34:28Z", "id": 1246102, "setter": "mrbkap@mozilla.com"}], "content_type": "text/plain", "id": 8656907}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656908}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656909}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656910}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656911}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656912}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656913}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656915}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656916}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656917}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656918}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8656919}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-09-04T00:50:51Z", "type_id": 4, "creation_date": "2015-09-04T00:38:14Z", "id": 1246107, "setter": "nsm.nikhil@gmail.com"}], "content_type": "text/plain", "id": 8656921}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8668167}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8668246}, {"creator": "catalin.badea392@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8668276}], "classification": "Components", "creator": "catalin.badea392@gmail.com", "cc": ["angelesoteo@gmail.com", "bkelly@mozilla.com", "catalin.badea392@gmail.com", "ehsan@mozilla.com", "fb+mozdev@quantumedia.de", "gbrown@mozilla.com", "josh@joshmatthews.net", "khuey@kylehuey.com", "kwierso@gmail.com", "lhenry@mozilla.com", "mrbkap@mozilla.com", "noemi.freiredecarlos@telefonica.com", "nsm.nikhil@gmail.com"], "depends_on": [1222970, 1193133, 1197421], "creation_time": "2015-07-28T19:06:08Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Refactor service worker management code and implement limited lifetime for service workers", "id": 1188545, "assigned_to_detail": {"email": "catalin.badea392@gmail.com", "id": 488358, "name": "catalin.badea392@gmail.com", "real_name": "C\u0103t\u0103lin Badea (:catalinb)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_status_firefox45": "---", "cf_has_regression_range": "---", "assigned_to": "catalin.badea392@gmail.com", "comment_count": 80, "comments": [{"text": "The basic idea is to disentangle the service worker dom object from the underlying worker thread and thus have a more precise control over its lifetime.\nFor this purpose, code for interacting with the sw through events will be refactored into a separate class (ServiceWorkerPrivate) that will handle spinning up the thread when needed as well as shutting it down when it is idle for too long.", "author": "catalin.badea392@gmail.com", "id": 10547245, "time": "2015-07-28T19:06:08Z"}, {"text": "Created attachment 8640026\nWIP: Refactor service worker events into a separate class.\n\nThis is still an early version and it doesn't contain any changes regarding\nshutting down the workers. But if you think I'm going with the wrong approach\nplease let me know.\n\nRight now, the patch breaks fetch and I'm not sure why.", "author": "catalin.badea392@gmail.com", "id": 10547275, "time": "2015-07-28T19:12:28Z"}, {"text": "Comment on attachment 8640026\nWIP: Refactor service worker events into a separate class.\n\nReview of attachment 8640026:\n-----------------------------------------------------------------\n\n::: dom/workers/ServiceWorkerPrivate.h\n@@ +26,5 @@\n> +  //virtual void\n> +  //SetActivateImmediately(bool aActivateImmediately) = 0;\n> +};\n> +\n> +// WorkerPrivate wrapper managing the lifetime of a service worker.\n\nPlease add a longer explanation than this :)\nI'm only going to r+ this patch with a copious number of comments explaining the architecture, any invariants required (preferably enforceable by assertions), any synchronization being done carefully outlined and so on.", "author": "nsm.nikhil@gmail.com", "id": 10554722, "time": "2015-07-30T04:52:55Z"}, {"text": "Created attachment 8642499\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.", "author": "catalin.badea392@gmail.com", "id": 10568994, "time": "2015-08-03T17:08:55Z"}, {"text": "Created attachment 8642500\nCosmetic changes regarding workerPrivate properties shared between shared workers and service workers.", "author": "catalin.badea392@gmail.com", "id": 10568996, "time": "2015-08-03T17:09:07Z"}, {"text": "Created attachment 8642503\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.", "author": "catalin.badea392@gmail.com", "id": 10569009, "time": "2015-08-03T17:12:52Z"}, {"text": "As a note, the lifetime rules I'm currently implementing are listed here: https://etherpad.mozilla.org/sw-lifetime", "author": "catalin.badea392@gmail.com", "id": 10576626, "time": "2015-08-04T21:02:06Z"}, {"text": "Comment on attachment 8642503\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.\n\nReview of attachment 8642503:\n-----------------------------------------------------------------\n\nPlease r? this on khuey since it is a workers change and r? from bkelly for the loadgroup bits.\n\nPlease update the commit message to summarize the changes this patch introduces and why they are introduced.\n\nDo use reviewboard for further patches.\n\n::: dom/workers/RuntimeService.cpp\n@@ +1675,3 @@\n>      mWindowMap.Enumerate(RemoveSharedWorkerFromWindowMap, aWorkerPrivate);\n>    }\n> +  else if (!aWorkerPrivate->IsServiceWorker()) {\n\nNit: IsDedicatedWorker().\n\n@@ +1678,2 @@\n>      // May be null.\n>      nsPIDOMWindow* window = aWorkerPrivate->GetWindow();\n\nIt seems like this logic is the same as RemoveSharedWorkerFromWindowMap. Can we collapse the two?\n\n::: dom/workers/ServiceWorker.cpp\n@@ +97,4 @@\n>  \n> +  nsCOMPtr<nsIDocument> doc = window->GetExtantDoc();\n> +  MOZ_ASSERT(doc);\n> +  nsAutoPtr<ServiceWorkerClientInfo> clientInfo(new ServiceWorkerClientInfo(doc, doc->GetWindow()));\n\nUse UniquePtr<> and explicitly Move() it around.\n\n::: dom/workers/ServiceWorkerManager.cpp\n@@ +472,4 @@\n>  {\n>    nsMainThreadPtrHandle<ContinueLifecycleTask> mTask;\n>    bool mSuccess;\n> +  // XXXcatalinb: Is this actually used anywhere?\n\nThis was going to be used in a former version of the spec. It can be removed now.\n\n@@ +483,2 @@\n>    {\n> +    MOZ_ASSERT(NS_IsMainThread());\n\nNit: AssertIsOnMainThread();\n\n@@ +595,5 @@\n>  public:\n>    explicit ContinueUpdateRunnable(const nsMainThreadPtrHandle<nsISupports> aJob)\n>      : mJob(aJob)\n>    {\n> +    MOZ_ASSERT(NS_IsMainThread());\n\nNit: AssertIsOnMainThread()\n\n::: dom/workers/ServiceWorkerManager.h\n@@ +428,5 @@\n>                             WhichServiceWorker aWhichWorker,\n>                             nsISupports** aServiceWorker);\n>  \n> +  ServiceWorkerInfo*\n> +  GetActiveWorkerForScope(const OriginAttributes& aOriginAttributes,\n\nGetActiveWorkerInfo...\n\n@@ +432,5 @@\n> +  GetActiveWorkerForScope(const OriginAttributes& aOriginAttributes,\n> +                          const nsACString& aScope);\n> +\n> +  ServiceWorkerInfo*\n> +  GetActiveWorkerForDocument(nsIDocument* aDocument);\n\nSame here\n\n::: dom/workers/ServiceWorkerPrivate.cpp\n@@ +101,5 @@\n> +\n> +  ErrorResult result;\n> +  result = aWorkerScope->DispatchDOMEvent(nullptr, aEvent, nullptr, nullptr);\n> +  if (result.Failed() || internalEvent->mFlags.mExceptionHasBeenRisen) {\n> +    result.SuppressException();\n\nThis should at least be logged if it is not allowed to terminate execution.\n\n@@ +818,5 @@\n> +  MOZ_ASSERT_IF(aWhy == FetchEvent, aLoadGroup);\n> +\n> +  if (mWorkerPrivate) {\n> +    if (aLoadGroup) {\n> +      mWorkerPrivate->UpdateOverridenLoadGroup(aLoadGroup);\n\nPlease have bkelly review this.\n\n@@ +823,5 @@\n> +    }\n> +    return NS_OK;\n> +  }\n> +\n> +  // TODO(catalinb): Add telemetry for service worker wake-ups.\n\nNit: Bug number.\n\n@@ +872,5 @@\n> +\n> +  // NOTE: this defaults the SW load context to:\n> +  //  - private browsing = false\n> +  //  - content = true\n> +  //  - use remote tabs = false\n\nThis comment should be moved to OverrideLoadInfoLoadGroup's declaration and should be verified to check that the function does exactly what this comment says.\n\n::: dom/workers/ServiceWorkerPrivate.h\n@@ +31,5 @@\n> +// To spin up the worker thread we own a |WorkerPrivate| object which can be\n> +// cancelled if no events are received for a certain amount of time. Note\n> +// that, at the moment, we never close the worker due to inactivity.\n> +//\n> +class ServiceWorkerPrivate final : public nsISupports\n\nCould you add a comment listing the steps needed to add support for a new event type?\n\n@@ +44,5 @@\n> +                   const Optional<Sequence<JS::Value>>& aTransferable,\n> +                   nsAutoPtr<ServiceWorkerClientInfo>& aClientInfo);\n> +\n> +  nsresult\n> +  CheckScriptEvaluation(nsRunnable* aCallback);\n\nDocument that callback is dispatched to the main thread if and only if the worker script evaluated successfully. In fact, this should be renamed to something indicating - ContinueOnSuccessfulScriptEvaluation?\nAlso note that the failure case is handled by the JS exception handler, which for ServiceWorkers eventually goes to SWM::HandleError.\n\n@@ +78,5 @@\n> +\n> +  // This will cancel the current running worker thread and drop the\n> +  // workerPrivate reference.\n> +  // Called by ServiceWorkerInfo when [[Clear Registration]] is invoked\n> +  // or whenver the spec mandates that we terminate the worker.\n\nNit: Whenever\n\n@@ +80,5 @@\n> +  // workerPrivate reference.\n> +  // Called by ServiceWorkerInfo when [[Clear Registration]] is invoked\n> +  // or whenver the spec mandates that we terminate the worker.\n> +  void\n> +  Close();\n\nThe spec uses Terminate() throughout and requires termination and not cancelation. Change the name and the implementation to use Terminate().", "author": "nsm.nikhil@gmail.com", "id": 10576748, "time": "2015-08-04T21:22:13Z"}, {"text": "Created attachment 8646040\nMozReview Request: Bug 1188545 - Disentangle service workers from shared workers and refactor event dispatching code into a separate class.  r?nsm,bkelly,khuey\n\nBug 1188545 - Disentangle service workers from shared workers and refactor event dispatching code into a separate class.  r?nsm,bkelly,khuey", "author": "catalin.badea392@gmail.com", "id": 10601055, "time": "2015-08-10T23:21:29Z"}, {"text": "Created attachment 8646041\nMozReview Request: Bug 1188545: Cosmetic changes regarding workerPrivate properties shared between shared workers and service workers. r?nsm\n\nBug 1188545: Cosmetic changes regarding workerPrivate properties shared between shared workers and service workers. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10601056, "time": "2015-08-10T23:21:31Z"}, {"text": "Created attachment 8646042\nMozReview Request: Bug 1188545: Terminate service workers that have been idle for some time. r?nsm\n\nBug 1188545: Terminate service workers that have been idle for some time. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10601058, "time": "2015-08-10T23:21:34Z"}, {"text": "(In reply to C\u0103t\u0103lin Badea (:catalinb) from comment #8)\n> Created attachment 8646040\n> MozReview Request: Bug 1188545 - Disentangle service workers from shared\n> workers and refactor event dispatching code into a separate class. \n> r?nsm,bkelly,khuey\n> \n> Bug 1188545 - Disentangle service workers from shared workers and refactor\n> event dispatching code into a separate class.  r?nsm,bkelly,khuey\n\nBen, please take a look at how the worker load group is handled in |SpawnWorkerIfNeeded|.\nKyle, please review the changes from RuntimeService and WorkerPrivate - to make sure I'm not breaking stuff.\nNikhil, could you please take another look at ServiceWorkerPrivate, the part about AllowedWindowInteraction?\n\nThanks", "author": "catalin.badea392@gmail.com", "id": 10601067, "time": "2015-08-10T23:24:57Z"}, {"text": "(In reply to Nikhil Marathe [:nsm] (pto Aug7-Aug10) from comment #7)\n> @@ +1678,2 @@\n> >      // May be null.\n> >      nsPIDOMWindow* window = aWorkerPrivate->GetWindow();\n> \n> It seems like this logic is the same as RemoveSharedWorkerFromWindowMap. Can\n> we collapse the two?\n\nAddressed all comments except this part (sorry, I got nothing).", "author": "catalin.badea392@gmail.com", "id": 10601075, "time": "2015-08-10T23:27:35Z"}, {"text": "Comment on attachment 8646040\nMozReview Request: Bug 1188545 - Disentangle service workers from shared workers and refactor event dispatching code into a separate class.  r?nsm,bkelly,khuey\n\nI don't review patches in reviewboard.  Please attach this to bugzilla.", "author": "khuey@kylehuey.com", "id": 10603233, "time": "2015-08-11T13:21:32Z"}, {"text": "Created attachment 8646414\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.  r?nsm,bkelly,khuey", "author": "catalin.badea392@gmail.com", "id": 10604270, "time": "2015-08-11T15:47:10Z"}, {"text": "(In reply to Kyle Huey [:khuey] (khuey@mozilla.com) from comment #13)\n> Comment on attachment 8646040\n> MozReview Request: Bug 1188545 - Disentangle service workers from shared\n> workers and refactor event dispatching code into a separate class. \n> r?nsm,bkelly,khuey\n> \n> I don't review patches in reviewboard.  Please attach this to bugzilla.\n\nIt's fairly simple, just use the ship it button.", "author": "catalin.badea392@gmail.com", "id": 10604282, "time": "2015-08-11T15:49:05Z"}, {"text": "Comment on attachment 8646414\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.  r?nsm,bkelly,khuey\n\nReview of attachment 8646414:\n-----------------------------------------------------------------\n\nThe load group handling looks correct to me.\n\nI made some other comments about things we should think about, though.  Its unclear to me what the threading model for ServiceWorkerPrivate is.  Also, its unclear to me why it needs to be an nsISupports.\n\n::: dom/workers/ServiceWorkerManager.h\n@@ +168,5 @@\n>  public:\n>    NS_INLINE_DECL_REFCOUNTING(ServiceWorkerInfo)\n>  \n> +  ServiceWorkerPrivate*\n> +  WorkerPrivate() const\n\nCan this be called ServiceWorkerPrivate() to avoid confusion with the WorkerPrivate type?\n\n::: dom/workers/ServiceWorkerPrivate.cpp\n@@ +22,5 @@\n> +\n> +NS_IMPL_ISUPPORTS0(ServiceWorkerPrivate)\n> +\n> +ServiceWorkerPrivate::ServiceWorkerPrivate(ServiceWorkerInfo* aInfo)\n> +  : mInfo(aInfo)\n\nWhat thread owns the ServiceWorkerPrivate?  Please assert it here.  Its not a THREADSAFE_ISUPPORTS, so that seems pretty important.\n\nThread asserts in other methods would be helpful as well.\n\n@@ +983,5 @@\n> +  MOZ_ASSERT_IF(aWhy == FetchEvent, aLoadGroup);\n> +\n> +  if (mWorkerPrivate) {\n> +    if (aLoadGroup) {\n> +      mWorkerPrivate->UpdateOverridenLoadGroup(aLoadGroup);\n\nnit: Its safe to pass nullptr aLoadGroup to UpdateOverridenLoadGroup().  So you can lose the if (aLoadGroup) here.\n\n@@ +1039,5 @@\n> +\n> +  AutoJSAPI jsapi;\n> +  jsapi.Init();\n> +  ErrorResult error;\n> +  nsString scriptSpec = NS_ConvertUTF8toUTF16(mInfo->ScriptSpec());\n\nI think you can just do:\n\n  NS_ConvertUTF8toUTF16 scriptSpec(mInfo->ScriptSpec());\n\n::: dom/workers/ServiceWorkerPrivate.h\n@@ +20,5 @@\n> +class LifeCycleEventCallback : public nsRunnable\n> +{\n> +public:\n> +  virtual void\n> +  SetResult(bool aResult) = 0;\n\nWhat thread can this be called on?\n\n@@ +86,5 @@\n> +  // workerPrivate reference.\n> +  // Called by ServiceWorkerInfo when [[Clear Registration]] is invoked\n> +  // or whenever the spec mandates that we terminate the worker.\n> +  void\n> +  TerminateWorker();\n\nDocument if this is a no-op if the worker is already stopped?\n\n@@ +111,5 @@\n> +    MOZ_ASSERT(!mWorkerPrivate);\n> +  }\n> +\n> +  // The info object owns us - this should never be null.\n> +  ServiceWorkerInfo* mInfo;\n\nWhat guarantees that something doesn't AddRef() the ServiceWorkerPrivate extending its life past ServiceWorkerInfo?  Like a runnable or something?  It seems we should have a way of explicitly clearing this pointer when the ServiceWorkerInfo destructs.  We can then either gracefully handle this condition or assert that it doesn't occur.\n\nOr can this be made a unique pointer in ServiceWorkerInfo instead of an nsISupports?\n\nYou could also avoid the circular reference between the objects by passing in the scope, scriptSpec, etc.  The ServiceWorkerInfo could then call a ServiceWorkerPrivate::SetCacheName() when the cache name changes.", "author": "bkelly@mozilla.com", "id": 10604874, "time": "2015-08-11T17:59:42Z"}, {"text": "Comment on attachment 8646040\nMozReview Request: Bug 1188545 - Disentangle service workers from shared workers and refactor event dispatching code into a separate class.  r?nsm,bkelly,khuey\n\nhttps://reviewboard.mozilla.org/r/15599/#review14173\n\n::: dom/workers/RuntimeService.cpp:285\n(Diff revision 1)\n> +  MOZ_ASSERT(!aScriptSpec.IsEmpty());\n\nEmpty script spec doesn't seem to affect correctness of this code.", "author": "nsm.nikhil@gmail.com", "id": 10610241, "time": "2015-08-12T18:13:24Z"}, {"text": "Comment on attachment 8646041\nMozReview Request: Bug 1188545: Cosmetic changes regarding workerPrivate properties shared between shared workers and service workers. r?nsm\n\nhttps://reviewboard.mozilla.org/r/15601/#review14181\n\n::: dom/workers/WorkerPrivate.h:166\n(Diff revision 1)\n> -  nsCString mSharedWorkerName;\n> +  nsCString mWorkerName;\n\nAdd a comment that this is the worker name for shared workers and the worker scope for service workers.", "author": "nsm.nikhil@gmail.com", "id": 10610273, "time": "2015-08-12T18:18:14Z"}, {"text": "Comment on attachment 8646040\nMozReview Request: Bug 1188545 - Disentangle service workers from shared workers and refactor event dispatching code into a separate class.  r?nsm,bkelly,khuey\n\nhttps://reviewboard.mozilla.org/r/15599/#review14183\n\nShip It!", "author": "nsm.nikhil@gmail.com", "id": 10610278, "time": "2015-08-12T18:18:34Z"}, {"text": "Comment on attachment 8646042\nMozReview Request: Bug 1188545: Terminate service workers that have been idle for some time. r?nsm\n\nhttps://reviewboard.mozilla.org/r/15603/#review14201\n\nGeneral nits:\nUse AssertIsOnMainThread() everywhere instead of MOZ_ASSERT(NS_IsMainThread())\nMake the token the second arg of all the runnables since it is passed to the super class.\n\n::: dom/workers/ServiceWorkerManager.cpp:2747\n(Diff revision 1)\n>        aRegistration->Clear();\n\nClear() should terminate its workers.\n\n::: dom/workers/ServiceWorkerPrivate.h:43\n(Diff revision 1)\n> +// promises holding tokens, we wait another |SERVICE_WORKER_IDLE_TIMEOUT|\n\nNit: s/promises/handlers, also it waits another WAITUNTIL timeout\n\n::: dom/workers/ServiceWorkerPrivate.h:44\n(Diff revision 1)\n> +// seconds before forcefully terminating the worker.\n\nNit: forcibly.\n\n::: dom/workers/ServiceWorkerPrivate.h:161\n(Diff revision 1)\n> +  // Used to diferentiate between push service workers and normal service\n\nNit: differentiate.\nYou may have to change this based on my other comment.\n\n::: dom/workers/ServiceWorkerPrivate.cpp:16\n(Diff revision 1)\n> +#define SERVICE_WORKER_IDLE_TIMEOUT 30\n\nNit: Keep the values in ms here.\n\n::: dom/workers/ServiceWorkerPrivate.cpp:40\n(Diff revision 1)\n> +    ++mPrivate->mTokenCount;\n\nmPrivate->AddToken();?\n\n::: dom/workers/ServiceWorkerPrivate.cpp:47\n(Diff revision 1)\n> +    --mPrivate->mTokenCount;\n\nmPrivate->ReleaseToken();\n\nand then\n\n    ReleaseToken() {\n      assert mTokenCount > 0\n      --mTokenCount\n      if (!mTokenCount)\n        TerminateWorker();\n    }\n\n::: dom/workers/ServiceWorkerPrivate.cpp:67\n(Diff revision 1)\n> +ServiceWorkerPrivate::~ServiceWorkerPrivate()\n> +{\n> +  MOZ_ASSERT(!mWorkerPrivate);\n> +  MOZ_ASSERT(!mTokenCount);\n> +}\n\nThe timer holds a rawptr to the SWP. It could fire after the SWP has been destroyed, so cancel the timer here.\n\n::: dom/workers/ServiceWorkerPrivate.cpp:201\n(Diff revision 1)\n> +                                       PromiseNativeHandler* aPromiseHandler)\n\nThis argument takes away from the function having a specific purpose. Have it return the Promise as before and users can append any handlers they wish too.\n\n::: dom/workers/ServiceWorkerPrivate.cpp:255\n(Diff revision 1)\n> -      : WorkerRunnable(aWorkerPrivate, WorkerThreadModifyBusyCount)\n> +                               KeepAliveToken* aCancelWorker)\n\nNit: aCancelWorker -> aToken?\n\n::: dom/workers/ServiceWorkerPrivate.cpp:1082\n(Diff revision 1)\n>    if (mWorkerPrivate) {\n>      if (aLoadGroup) {\n>        mWorkerPrivate->UpdateOverridenLoadGroup(aLoadGroup);\n>      }\n> +    ResetIdleTimeout();\n> +\n>      return NS_OK;\n>    }\n\nShouldn't the wakeup reason be updated here too?\n\n::: dom/workers/ServiceWorkerPrivate.cpp:1179\n(Diff revision 1)\n> +ServiceWorkerPrivate::MaybeTerminateWorker()\n> +{\n\nmain thread assertion\n\n::: dom/workers/ServiceWorkerPrivate.cpp:1201\n(Diff revision 1)\n> +  if (mLastWakeUpReason == PushEvent ||\n> +        mLastWakeUpReason == PushSubscriptionChangeEvent) {\n> +    return;\n\nIt is possible that\n\n1) non-fetch event sent to worker, that promise keeps a token.\n2) fetch event sent to worker, last wake up reason updated\n3) document goes away, no longer controlling any.\n\nin this case the worker will be forcibly terminated before 5min have passed.\n\nI think you want to capture \"kill immediately iff only fetch events had been sent to this worker\"\n\n::: dom/workers/ServiceWorkerPrivate.cpp:1227\n(Diff revision 1)\n> +    MOZ_ALWAYS_TRUE(NS_SUCCEEDED(\n> +      serviceWorkerPrivate->mIdleWorkerTimer->InitWithFuncCallback(\n> +                                  ServiceWorkerPrivate::TerminateWorkerCallback,\n> +                                  aPrivate,\n> +                                  SERVICE_WORKER_WAITUNTIL_TIMEOUT * 1000,\n> +                                  nsITimer::TYPE_ONE_SHOT)));\n\nNit: assign to nsresult to clean up indentation.\n\n::: dom/workers/ServiceWorkerPrivate.cpp:1258\n(Diff revision 1)\n> +    mIdleWorkerTimer->InitWithFuncCallback(ServiceWorkerPrivate::NoteIdleWorkerCallback,\n\nNit: assign to nsresult and then move the MOZ_ALWAYS_TRUE to its own line.", "author": "nsm.nikhil@gmail.com", "id": 10611900, "time": "2015-08-13T00:50:25Z"}, {"text": "Comment on attachment 8646041\nMozReview Request: Bug 1188545: Cosmetic changes regarding workerPrivate properties shared between shared workers and service workers. r?nsm\n\nhttps://reviewboard.mozilla.org/r/15601/#review14219\n\nShip It!", "author": "nsm.nikhil@gmail.com", "id": 10611902, "time": "2015-08-13T00:51:07Z"}, {"text": "This patch is going to need tests for the lifetime.", "author": "nsm.nikhil@gmail.com", "id": 10611905, "time": "2015-08-13T00:52:46Z"}, {"text": "Created attachment 8647889\nMozReview Request: Bug 1188545 - ServiceWorkerRegistrationInfo::Clear() should terminated workers. r?nsm\n\nBug 1188545: Terminate service workers that have been idle for some time. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10617675, "time": "2015-08-14T04:25:08Z"}, {"text": "Created attachment 8647890\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.\n\nKyle, please have a look at the RuntimeService and WorkerPrivate changes.", "author": "catalin.badea392@gmail.com", "id": 10617682, "time": "2015-08-14T04:31:10Z"}, {"text": "Created attachment 8647891\nCosmetic changes regarding workerPrivate properties shared between shared workers and service workers.", "author": "catalin.badea392@gmail.com", "id": 10617683, "time": "2015-08-14T04:31:32Z"}, {"text": "(In reply to Ben Kelly [:bkelly] from comment #16)\n> Comment on attachment 8646414\n> Disentangle service workers from shared workers and refactor event\n> dispatching code into a separate class.  r?nsm,bkelly,khuey\n> \n> Review of attachment 8646414:\n> -----------------------------------------------------------------\n> \n> The load group handling looks correct to me.\n> \n> I made some other comments about things we should think about, though.  Its\n> unclear to me what the threading model for ServiceWorkerPrivate is.  Also,\n> its unclear to me why it needs to be an nsISupports.\nI fixed this and the other issues you raised. You're right, it doesn't need to\nbe nsISupports, but I need it to be refcounted in the other patches.\n\n> What guarantees that something doesn't AddRef() the ServiceWorkerPrivate\n> extending its life past ServiceWorkerInfo?  Like a runnable or something? \n> It seems we should have a way of explicitly clearing this pointer when the\n> ServiceWorkerInfo destructs.  We can then either gracefully handle this\n> condition or assert that it doesn't occur.\nThe pointer is explictly cleared in the third patch, which introduces references to the ServiceWorkerPrivate\nfrom worker thread.", "author": "catalin.badea392@gmail.com", "id": 10617688, "time": "2015-08-14T04:38:03Z"}, {"text": "Comment on attachment 8647889\nMozReview Request: Bug 1188545 - ServiceWorkerRegistrationInfo::Clear() should terminated workers. r?nsm\n\nhttps://reviewboard.mozilla.org/r/16081/#review14445\n\n::: dom/workers/ServiceWorkerManager.cpp:2748\n(Diff revision 1)\n>        aRegistration->Clear();\n\nClear() should terminate workers. Please upload that as another patch.\n\n::: dom/workers/ServiceWorkerPrivate.h:33\n(Diff revision 1)\n> -// To spin up the worker thread we own a |WorkerPrivate| object which can be\n> -// cancelled if no events are received for a certain amount of time. Note\n> -// that, at the moment, we never close the worker due to inactivity.\n> +// Lifetime management: To spin up the worker thread we own a |WorkerPrivate|\n> +// object which can be cancelled if no events are received for a certain\n> +// amount of time. The worker is kept alive by holding a |KeepAliveToken|\n> +// reference.\n> +// Extendable events hold tokens for the duration of their handler execution\n> +// and until their waitUntil promise is resolved, while ServiceWorkerPrivate\n> +// will hold a token for |SERVICE_WORKER_IDLE_TIMEOUT| seconds after each\n> +// new event.\n> +//\n\nCould you add a note here that we do all the timer handling on the main thread since script can indefinitely block the worker thread.\n\n::: dom/workers/ServiceWorkerPrivate.h:50\n(Diff revision 1)\n>  // Adding an API function for a new event requires calling |SpawnWorkerIfNeeded|\n\ncalling |SpawnWorkerIfNeeded| _with an appropriate reason_\n\n::: dom/workers/ServiceWorkerPrivate.h:167\n(Diff revision 1)\n> +  bool mIsPushWorker : 1;\n\nI don't think this needs to be a bitfield.\n\n::: dom/workers/ServiceWorkerPrivate.cpp:86\n(Diff revision 1)\n> +  // FIXME(catalinb): keep the worker alive when dispatching a message event.\n\nNit: Bug number\n\n::: dom/workers/ServiceWorkerPrivate.cpp:204\n(Diff revision 1)\n> +                                       Promise** aWaitUntiPromise)\n\nTypo. Why not just already_AddRefed<Promise> return it?\n\n::: dom/workers/ServiceWorkerPrivate.cpp:595\n(Diff revision 1)\n>        aWorkerPrivate->GlobalScope()->ConsumeWindowInteraction();\n\nI worry that there is a small possibility that GlobalScope() may return null if the native handler is cleaned up after the scope due to CC/GC ordering. Could you check it before calling ConsumeWindowInteraction().\n\n::: dom/workers/ServiceWorkerPrivate.cpp:1176\n(Diff revision 1)\n> +  mIsPushWorker = false;\n\nIt may make more sense to reset this in SpawnWorkerIfNeeded when you create a new WorkerPrivate (and update the comment at the declaration accordingly), but I'll leave it up to you.", "author": "nsm.nikhil@gmail.com", "id": 10620430, "time": "2015-08-14T18:46:01Z"}, {"text": "Comment on attachment 8647889\nMozReview Request: Bug 1188545 - ServiceWorkerRegistrationInfo::Clear() should terminated workers. r?nsm\n\nBug 1188545 - ServiceWorkerRegistrationInfo::Clear() should terminated workers. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10642914, "time": "2015-08-21T02:45:21Z"}, {"text": "Created attachment 8651270\nServiceWorkerRegistrationInfo::Clear() should terminated workers. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10646338, "time": "2015-08-21T22:24:56Z"}, {"text": "Created attachment 8651271\nTerminate service workers that have been idle for some time.", "author": "catalin.badea392@gmail.com", "id": 10646340, "time": "2015-08-21T22:25:24Z"}, {"text": "Created attachment 8651272\nrespondWith promise should extend the service worker's lifetime. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10646342, "time": "2015-08-21T22:26:08Z"}, {"text": "Created attachment 8651273\nPrevent service workers from being terminated while checking if the script evaluation was successful. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10646344, "time": "2015-08-21T22:26:38Z"}, {"text": "Created attachment 8651274\nAdd tests for service workers' lifetime management. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10646345, "time": "2015-08-21T22:27:13Z"}, {"text": "Created attachment 8651275\nReset network interceptions when the service worker is being terminated with unresolved respondWith promises. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10646348, "time": "2015-08-21T22:27:38Z"}, {"text": "Comment on attachment 8651270\nServiceWorkerRegistrationInfo::Clear() should terminated workers. r?nsm\n\nReview of attachment 8651270:\n-----------------------------------------------------------------\n\n::: dom/workers/ServiceWorkerManager.cpp\n@@ +317,2 @@\n>      mInstallingWorker->UpdateState(ServiceWorkerState::Redundant);\n> +    mInstallingWorker->ServiceWorkerPrivate()->NoteDeadServiceWorkerInfo();\n\nFWIW in the spec, termination is ordered before the call to UpdateState(), here and below.", "author": "nsm.nikhil@gmail.com", "id": 10656174, "time": "2015-08-25T16:23:44Z"}, {"text": "Comment on attachment 8651275\nReset network interceptions when the service worker is being terminated with unresolved respondWith promises. r?nsm\n\nReview of attachment 8651275:\n-----------------------------------------------------------------\n\nYou could just make the AutoCancel a member of the RespondWithHandler (change it to not own nsRefPtr<RespondWithHandler>) and reduce the delta here.\n\n::: dom/workers/test/serviceworkers/test_unresolved_fetch_interception.html\n@@ +24,5 @@\n> +    return navigator.serviceWorker.register(\"unresolved_fetch_worker.js\", {scope: \"./\"})\n> +    .then((swr) => ({registration: swr}));\n> +  }\n> +\n> +  function waitForActiveServiceWorker(ctx) {\n\nThis does not seem to be used.\n\n@@ +66,5 @@\n> +    // close worker\n> +    SpecialPowers.pushPrefEnv({\"set\": [\n> +      [\"dom.serviceWorkers.idle_extended_timeout\", 0]\n> +    ]}, function() {\n> +      navigator.serviceWorker.controller.postMessage(\"shutdown\");\n\nNot sure why you are sending this, is it to force reading out the new value of the pref?\n\n@@ +85,5 @@\n> +\n> +  SpecialPowers.pushPrefEnv({\"set\": [\n> +    [\"dom.serviceWorkers.idle_timeout\", 0],\n> +    [\"dom.serviceWorkers.idle_extended_timeout\", 299999],\n> +    [\"dom.push.enabled\", true],\n\nDon't need this.\n\n@@ +88,5 @@\n> +    [\"dom.serviceWorkers.idle_extended_timeout\", 299999],\n> +    [\"dom.push.enabled\", true],\n> +    [\"dom.serviceWorkers.exemptFromPerDomainMax\", true],\n> +    [\"dom.serviceWorkers.enabled\", true],\n> +    [\"dom.serviceWorkers.testing.enabled\", true]\n\nI think you may want to enable \"dom.serviceWorkers.interception.enabled\"", "author": "nsm.nikhil@gmail.com", "id": 10656864, "time": "2015-08-25T18:26:42Z"}, {"text": "Comment on attachment 8651274\nAdd tests for service workers' lifetime management. r?nsm\n\nReview of attachment 8651274:\n-----------------------------------------------------------------\n\nPlease make sure all dump()s in the patch have a newline at the end.\n\nAdd another patch that introduces several more tests with the timers set to non-extreme values.\n\n::: dom/push/test/lifetime_worker.js\n@@ +1,1 @@\n> +var magic_value = \"from_scope\";\n\ncall this |state|?\n\n@@ +2,5 @@\n> +var resolvePromiseCallback;\n> +\n> +onfetch = function(event) {\n> +  if (event.request.url.indexOf(\"lifetime_frame.html\") >= 0) {\n> +    event.respondWith(new Response(\"\"));\n\nhave the response body be something indicative so it can be used for debugging. |new Response(\"lifetime_frame\")| perhaps.\n\n@@ +18,5 @@\n> +    magic_value = \"update\";\n> +  } else if (event.request.url.indexOf(\"wait\") >= 0) {\n> +    event.respondWith(new Promise(function(res, rej) {\n> +      if (resolvePromiseCallback) {\n> +        error(\"ERROR: service worker was already waiting on a promise.\");\n\ndump(...)\n\n@@ +21,5 @@\n> +      if (resolvePromiseCallback) {\n> +        error(\"ERROR: service worker was already waiting on a promise.\");\n> +      }\n> +      resolvePromiseCallback = function() {\n> +        res(new Response(\"\"));\n\nSimilarly descriptive here.\n\n@@ +41,5 @@\n> +  // FIXME(catalinb): we cannot treat these events as extendable\n> +  // yet. Bug 1143717\n> +  event.source.postMessage({type: \"message\", state: magic_value});\n> +  magic_value = event.data;\n> +  if (event.data === \"release\") {\n\nFactor out the block from the \"release\" case in onfetch and use that here so you check non-null resolvePromiseCallback.\n\n::: dom/push/test/test_serviceworker_lifetime.html\n@@ +237,5 @@\n> +        .then(createIframe)\n> +        .then(setShutdownObserver(false))\n> +        .then(checkStateAndUpdate(pushEvent, \"from_scope\", \"wait\"))\n> +        .then(cancelShutdownObserver)\n> +        .then(setShutdownObserver(true))\n\nHave setShutdownObserver cancel a previous observer if any so test writers don't have to remember to call cancelShutdownObserver.\n\n@@ +300,5 @@\n> +        .then(closeIframe)\n> +    }\n> +  }\n> +\n> +  // ++catalinb on #content.\n\n?\n\n@@ +319,5 @@\n> +  SpecialPowers.pushPrefEnv({\"set\": [\n> +    [\"dom.push.enabled\", true],\n> +    [\"dom.serviceWorkers.exemptFromPerDomainMax\", true],\n> +    [\"dom.serviceWorkers.enabled\", true],\n> +    [\"dom.serviceWorkers.testing.enabled\", true]\n\ndom.network.interception.enabled.\n\n::: modules/libpref/init/all.js\n@@ +146,5 @@\n>  \n>  // Allow service workers to intercept opaque (cross origin) responses\n>  pref(\"dom.serviceWorkers.interception.opaque.enabled\", false);\n>  \n> +// The amount of time service workers keep running after each event.\n\nPlease add units in both.", "author": "nsm.nikhil@gmail.com", "id": 10657864, "time": "2015-08-25T21:51:24Z"}, {"text": "Created attachment 8656907\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.", "author": "catalin.badea392@gmail.com", "id": 10694999, "time": "2015-09-04T00:34:28Z"}, {"text": "Created attachment 8656908\nServiceWorkerRegistrationInfo::Clear() should terminated workers.", "author": "catalin.badea392@gmail.com", "id": 10695000, "time": "2015-09-04T00:34:56Z"}, {"text": "Created attachment 8656909\nCosmetic changes regarding workerPrivate properties shared between shared workers and service workers.", "author": "catalin.badea392@gmail.com", "id": 10695001, "time": "2015-09-04T00:35:16Z"}, {"text": "Created attachment 8656910\nTerminate service workers that have been idle for some time.", "author": "catalin.badea392@gmail.com", "id": 10695002, "time": "2015-09-04T00:35:29Z"}, {"text": "Created attachment 8656911\nrespondWith promise should extend the service worker's lifetime.", "author": "catalin.badea392@gmail.com", "id": 10695007, "time": "2015-09-04T00:36:03Z"}, {"text": "Created attachment 8656912\nPrevent service workers from being terminated while checking if the script evaluation was successful.", "author": "catalin.badea392@gmail.com", "id": 10695009, "time": "2015-09-04T00:36:20Z"}, {"text": "Created attachment 8656913\nAdd tests for service workers' lifetime management.", "author": "catalin.badea392@gmail.com", "id": 10695010, "time": "2015-09-04T00:36:34Z"}, {"text": "Created attachment 8656915\nReset network interceptions when the service worker is being terminated with unresolved respondWith promises.", "author": "catalin.badea392@gmail.com", "id": 10695012, "time": "2015-09-04T00:36:44Z"}, {"text": "Created attachment 8656916\nUpdate expected results for some wpt tests. a=testonly", "author": "catalin.badea392@gmail.com", "id": 10695014, "time": "2015-09-04T00:37:10Z"}, {"text": "Created attachment 8656917\nMake skip-waiting-using-registration.html wpt test pass. a=testonly", "author": "catalin.badea392@gmail.com", "id": 10695015, "time": "2015-09-04T00:37:21Z"}, {"text": "Created attachment 8656918\nFix wpt test ServiceWorkerGlobalScope/unregister.https.html. a=testonly", "author": "catalin.badea392@gmail.com", "id": 10695016, "time": "2015-09-04T00:37:31Z"}, {"text": "Created attachment 8656919\nDisable unstable test: test_aboutserviceworkers.html.  a=testonly", "author": "catalin.badea392@gmail.com", "id": 10695017, "time": "2015-09-04T00:37:41Z"}, {"text": "Created attachment 8656921\nWorkaround for incorrect subject principal when checking storage access. r?nsm", "author": "catalin.badea392@gmail.com", "id": 10695019, "time": "2015-09-04T00:38:14Z"}, {"text": "Comment on attachment 8656907\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.\n\nWith this patch, creating a SW doesn't require creating a shared worker, the service worker manager owns the WorkerPrivate instead. In a later patch, the service worker can be terminated if it idles for some time.\n\nJonas, could you please have a look at this? I'm mainly interested in confirming that the WorkerPrivate/RuntimeService changes are correct and that ServiceWorkerPrivate::SpawnServiceWorkerIfNeeded properly initializes the WorkerPrivate.\n\nThanks!", "author": "catalin.badea392@gmail.com", "id": 10711471, "time": "2015-09-09T17:42:33Z"}, {"text": "Catalin, this can't land with the current system principal storage workaround since that is just checking for tests being enabled. You'll want to check against the registration principal perhaps?", "author": "nsm.nikhil@gmail.com", "id": 10712064, "time": "2015-09-09T20:06:35Z"}, {"text": "Comment on attachment 8656907\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.\n\nReview of attachment 8656907:\n-----------------------------------------------------------------\n\nI don't feel that I know this code well enough to review. Try khuey maybe?", "author": "jonas@sicking.cc", "id": 10712345, "time": "2015-09-09T20:52:43Z"}, {"text": "(In reply to Jonas Sicking (:sicking) from comment #53)\n> Comment on attachment 8656907\n> Disentangle service workers from shared workers and refactor event\n> dispatching code into a separate class.\n> \n> Review of attachment 8656907:\n> -----------------------------------------------------------------\n> \n> I don't feel that I know this code well enough to review. Try khuey maybe?\n\nI think khuey is in taipei and won't review it for at least another week.", "author": "catalin.badea392@gmail.com", "id": 10712606, "time": "2015-09-09T21:57:42Z"}, {"text": "Comment on attachment 8656907\nDisentangle service workers from shared workers and refactor event dispatching code into a separate class.\n\nReview of attachment 8656907:\n-----------------------------------------------------------------\n\n::: dom/interfaces/base/nsIServiceWorkerManager.idl\n@@ +98,2 @@\n>     */\n> +  [noscript] nsISupports GetDocumentController(in nsIDOMWindow aWindow);\n\nYou need to change the IID for this interface.\n\n::: dom/workers/ServiceWorkerPrivate.h\n@@ +21,5 @@\n> +{\n> +public:\n> +  virtual void\n> +  // Called on the worker thread.\n> +  SetResult(bool aResult) = 0;\n\nUber-nit: it's weird to separate the return value from the function name with a comment. I'd put it on top of the return value.", "author": "mrbkap@mozilla.com", "id": 10750205, "time": "2015-09-18T22:51:10Z"}, {"text": "\\o/ Please land if all tests are green :)", "author": "nsm.nikhil@gmail.com", "id": 10755850, "time": "2015-09-21T15:58:39Z"}, {"text": "*** Bug 930349 has been marked as a duplicate of this bug. ***", "author": "nsm.nikhil@gmail.com", "id": 10757213, "time": "2015-09-21T20:19:52Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/e94f12b0bcf3\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/d5d05def5b17\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/4be675dc1b37\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/032f4c24fc34\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/1fa2f55727f3\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/2a28cb794b23\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/4473e036b52e\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/76eb7ffeca2a\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/4b6bdf859845\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/11ff29cc25d8\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/1989893b59de\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/e04738ee72a3", "author": "pulsebot@bots.tld", "id": 10794328, "time": "2015-09-30T14:15:30Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=3b8f93d77583", "author": "catalin.badea392@gmail.com", "id": 10794335, "time": "2015-09-30T14:16:20Z"}, {"text": "Backed out for android m12 failures: https://hg.mozilla.org/integration/mozilla-inbound/rev/f39b2e477fbe\nhttps://treeherder.mozilla.org/logviewer.html#?job_id=14986157&repo=mozilla-inbound", "author": "kwierso@gmail.com", "id": 10795659, "time": "2015-09-30T18:13:08Z"}, {"text": "Created attachment 8668167\nUpdate expected results for some service worker tests. a=testonly", "author": "catalin.badea392@gmail.com", "id": 10797045, "time": "2015-09-30T23:08:32Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/1ad5a53a875c\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/9247b2db5721\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/19efef8453a7\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/668bc98e20be\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/55766c348961\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/97f964c093f4\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/f33b94206b39\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/9017fd99327c\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/9b36dd249297\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/be8ed23a47e3\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/26644018d831\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/bec44d498254", "author": "pulsebot@bots.tld", "id": 10797051, "time": "2015-09-30T23:11:39Z"}, {"text": "(In reply to Wes Kocher (:KWierso) from comment #60)\n> Backed out for android m12 failures:\n> https://hg.mozilla.org/integration/mozilla-inbound/rev/f39b2e477fbe\n> https://treeherder.mozilla.org/logviewer.html#?job_id=14986157&repo=mozilla-\n> inbound\n\nI've increased the timeout limit for test_fetch_cors.html. The two failing tests take really long to run, so I guess bumped them over the limit on android debug. Running the tests locally didn't reveal any difference between with and without these patches. Please open a bug if test_fetch_cors_sw_reroute.html is still timing out. Thanks!", "author": "catalin.badea392@gmail.com", "id": 10797080, "time": "2015-09-30T23:22:34Z"}, {"text": "Created attachment 8668246\nDisable test_fetch_cors.html & test_fetch_cors_reroute.html on android debug. a=testonly", "author": "catalin.badea392@gmail.com", "id": 10797551, "time": "2015-10-01T03:54:09Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/43f8f5ad2383", "author": "pulsebot@bots.tld", "id": 10797561, "time": "2015-10-01T03:58:38Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/19e843a694ed", "author": "pulsebot@bots.tld", "id": 10797598, "time": "2015-10-01T04:18:32Z"}, {"text": "Looks like test_serviceworker_lifetime.html has a race condition during the final steps of the test.\nGoing to try and fix this.\n\nhttps://treeherder.mozilla.org/logviewer.html#?job_id=15010818&repo=mozilla-inbound", "author": "catalin.badea392@gmail.com", "id": 10797705, "time": "2015-10-01T05:36:49Z"}, {"text": "Created attachment 8668276\nFixup for test_serviceworker_lifetime.html a=testonly", "author": "catalin.badea392@gmail.com", "id": 10797708, "time": "2015-10-01T05:38:12Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/f531a0565a17", "author": "pulsebot@bots.tld", "id": 10797714, "time": "2015-10-01T05:43:39Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/1ad5a53a875c\nhttps://hg.mozilla.org/mozilla-central/rev/9247b2db5721\nhttps://hg.mozilla.org/mozilla-central/rev/19efef8453a7\nhttps://hg.mozilla.org/mozilla-central/rev/668bc98e20be\nhttps://hg.mozilla.org/mozilla-central/rev/55766c348961\nhttps://hg.mozilla.org/mozilla-central/rev/97f964c093f4\nhttps://hg.mozilla.org/mozilla-central/rev/f33b94206b39\nhttps://hg.mozilla.org/mozilla-central/rev/9017fd99327c\nhttps://hg.mozilla.org/mozilla-central/rev/9b36dd249297\nhttps://hg.mozilla.org/mozilla-central/rev/be8ed23a47e3\nhttps://hg.mozilla.org/mozilla-central/rev/26644018d831\nhttps://hg.mozilla.org/mozilla-central/rev/bec44d498254\nhttps://hg.mozilla.org/mozilla-central/rev/43f8f5ad2383\nhttps://hg.mozilla.org/mozilla-central/rev/19e843a694ed\nhttps://hg.mozilla.org/mozilla-central/rev/f531a0565a17", "author": "cbook@mozilla.com", "id": 10798521, "time": "2015-10-01T12:53:21Z"}, {"text": "Catalin: reminder to nominate this for Aurora when you get a chance.  Thanks!", "author": "ehsan@mozilla.com", "id": 10800872, "time": "2015-10-01T22:50:36Z"}, {"text": "(In reply to Ehsan Akhgari (don't ask for review please) from comment #71)\n> Catalin: reminder to nominate this for Aurora when you get a chance.  Thanks!\n\nPing?", "author": "ehsan@mozilla.com", "id": 10813346, "time": "2015-10-06T17:43:08Z"}, {"text": "ni Liz to follow up on this bug that I was pinged about uplifting.", "author": "lmandel@mozilla.com", "id": 10817581, "time": "2015-10-07T19:04:54Z"}, {"text": "Oh, I think we decided at this morning's meeting to wait to request uplift on this bug.  Sorry for the confusion.", "author": "bkelly@mozilla.com", "id": 10817603, "time": "2015-10-07T19:08:16Z"}, {"text": "*** Bug 1189670 has been marked as a duplicate of this bug. ***", "author": "ehsan@mozilla.com", "id": 10852453, "time": "2015-10-19T19:51:35Z"}, {"text": "These changes drastically reduced the run time of service worker mochitests on Android Debug. Those tests are still running slowly on aurora causing regular timeouts on aurora in Android 4.3 Debug mochitest-13 - bug 1208920. From this perspective, uplift would be super!", "author": "gbrown@mozilla.com", "id": 10873823, "time": "2015-10-26T18:22:23Z"}, {"text": "(In reply to Geoff Brown [:gbrown] from comment #76)\n> These changes drastically reduced the run time of service worker mochitests\n> on Android Debug. Those tests are still running slowly on aurora causing\n> regular timeouts on aurora in Android 4.3 Debug mochitest-13 - bug 1208920.\n> From this perspective, uplift would be super!\n\nHmm, Catalin, would have expected this?", "author": "ehsan@mozilla.com", "id": 10877224, "time": "2015-10-27T14:05:19Z"}, {"text": "(In reply to Ehsan Akhgari (don't ask for review please) from comment #77)\n> (In reply to Geoff Brown [:gbrown] from comment #76)\n> > These changes drastically reduced the run time of service worker mochitests\n> > on Android Debug. Those tests are still running slowly on aurora causing\n> > regular timeouts on aurora in Android 4.3 Debug mochitest-13 - bug 1208920.\n> > From this perspective, uplift would be super!\n> \n> Hmm, Catalin, would have expected this?\n\n\nNot really, my guess is this happened because I disabled some tests on android that were intermittently failing.", "author": "catalin.badea392@gmail.com", "id": 10877297, "time": "2015-10-27T14:17:37Z"}, {"text": "I think there must be more to it.\n\nQuickly comparing some long-running tests on aurora with inbound:\n\nhttp://archive.mozilla.org/pub/mobile/tinderbox-builds/mozilla-inbound-android-api-11-debug/1445939905/mozilla-inbound_ubuntu64_vm_armv7_large-debug_test-mochitest-13-bm125-tests1-linux64-build16.txt.gz\n\nhttp://archive.mozilla.org/pub/mobile/tinderbox-builds/mozilla-aurora-android-api-11-debug/1445857461/mozilla-aurora_ubuntu64_vm_armv7_large-debug_test-mochitest-13-bm124-tests1-linux64-build7.txt.gz\n\ninbound 402 INFO TEST-OK | dom/workers/test/test_fibonacci.html | took 11074ms\naurora  391 INFO TEST-OK | dom/workers/test/test_fibonacci.html | took 118481ms\n\ninbound 422 INFO TEST-OK | dom/workers/test/test_multi_sharedWorker_lifetimes.html | took 49877ms\naurora  411 INFO TEST-OK | dom/workers/test/test_multi_sharedWorker_lifetimes.html | took 286601ms\n\ninbound 438 INFO TEST-OK | dom/workers/test/test_performance_observer.html | took 30223ms\naurora  427 INFO TEST-OK | dom/workers/test/test_performance_observer.html | took 215618ms", "author": "gbrown@mozilla.com", "id": 10877426, "time": "2015-10-27T14:48:45Z"}], "cf_last_resolved": "2015-10-01T12:53:21Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2015-11-19T00:01:08Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1203274, 1131322, 1179540, 1191339, 1204596], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "DOM", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla44", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "catalin.badea392@gmail.com", "id": 488358, "name": "catalin.badea392@gmail.com", "real_name": "C\u0103t\u0103lin Badea (:catalinb)"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "angelesoteo@gmail.com", "id": 434278, "name": "angelesoteo@gmail.com", "real_name": "Maria Angeles Oteo (:oteo)"}, {"email": "bkelly@mozilla.com", "id": 465500, "name": "bkelly@mozilla.com", "real_name": "Ben Kelly [PTO, back late March][:bkelly]"}, {"email": "catalin.badea392@gmail.com", "id": 488358, "name": "catalin.badea392@gmail.com", "real_name": "C\u0103t\u0103lin Badea (:catalinb)"}, {"email": "ehsan@mozilla.com", "id": 251051, "name": "ehsan@mozilla.com", "real_name": ":Ehsan Akhgari"}, {"email": "fb+mozdev@quantumedia.de", "id": 413779, "name": "fb+mozdev@quantumedia.de", "real_name": "Florian Bender"}, {"email": "gbrown@mozilla.com", "id": 411471, "name": "gbrown@mozilla.com", "real_name": "Geoff Brown [:gbrown]"}, {"email": "josh@joshmatthews.net", "id": 241497, "name": "josh@joshmatthews.net", "real_name": "Josh Matthews [:jdm]"}, {"email": "khuey@kylehuey.com", "id": 336670, "name": "khuey@kylehuey.com", "real_name": "Kyle Huey [:khuey] (Exited; not receiving bugmail, email if necessary)"}, {"email": "kwierso@gmail.com", "id": 308534, "name": "kwierso@gmail.com", "real_name": "Wes Kocher (:KWierso)"}, {"email": "lhenry@mozilla.com", "id": 451704, "name": "lhenry@mozilla.com", "real_name": "Liz Henry (:lizzard) (needinfo? me)"}, {"email": "mrbkap@mozilla.com", "id": 69426, "name": "mrbkap@mozilla.com", "real_name": "Blake Kaplan (:mrbkap)"}, {"email": "noemi.freiredecarlos@telefonica.com", "id": 469924, "name": "noemi.freiredecarlos@telefonica.com", "real_name": "Noem\u00ed Freire (:noemi)"}, {"email": "nsm.nikhil@gmail.com", "id": 415061, "name": "nsm.nikhil@gmail.com", "real_name": "Nikhil Marathe [:nsm] (No longer reading bugmail, please needinfo?)"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "nsm.nikhil@gmail.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8640026, "added": "feedback?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-07-28T19:12:28Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1131322"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "catalin.badea392@gmail.com"}], "who": "catalin.badea392@gmail.com", "when": "2015-07-28T19:13:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "noemi.freiredecarlos@telefonica.com"}], "who": "noemi.freiredecarlos@telefonica.com", "when": "2015-07-28T19:39:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "oteo@tid.es"}], "who": "angelesoteo@gmail.com", "when": "2015-07-28T21:20:36Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(nsm.nikhil@gmail.com)", "attachment_id": 8640026, "added": "feedback+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-07-30T04:52:55Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8640026, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-03T17:08:55Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8642499, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8642503, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-03T17:12:52Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8642503, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-04T21:22:13Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1179401"}], "who": "ehsan@mozilla.com", "when": "2015-08-04T21:46:27Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "josh@joshmatthews.net"}], "who": "josh@joshmatthews.net", "when": "2015-08-04T23:25:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8646040, "added": "review?(bkelly@mozilla.com), review?(khuey@kylehuey.com), review?(nsm.nikhil@gmail.com)"}, {"removed": "", "field_name": "cc", "added": "bkelly@mozilla.com, khuey@kylehuey.com"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-10T23:21:29Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8646041, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-10T23:21:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8646042, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-10T23:21:34Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1193133"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-11T03:44:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(khuey@kylehuey.com)", "attachment_id": 8646040, "added": "review-"}], "who": "khuey@kylehuey.com", "when": "2015-08-11T13:21:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8646414, "added": "review?(khuey@kylehuey.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-11T15:47:10Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8642503, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-11T15:51:00Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8642500, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-11T15:53:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8646414, "added": "review?(bkelly@mozilla.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-11T15:59:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bkelly@mozilla.com)", "attachment_id": 8646414, "added": "feedback+"}], "who": "bkelly@mozilla.com", "when": "2015-08-11T17:59:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bkelly@mozilla.com)", "attachment_id": 8646040, "added": ""}], "who": "bkelly@mozilla.com", "when": "2015-08-11T18:00:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fb+mozdev@quantumedia.de"}], "who": "fb+mozdev@quantumedia.de", "when": "2015-08-12T14:57:03Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8646040, "added": ""}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-12T18:13:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8646041, "added": ""}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-12T18:18:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8646040, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-12T18:18:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8646042, "added": ""}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-13T00:50:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8646041, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-13T00:51:07Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8646040, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-14T04:20:20Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8646041, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-14T04:20:22Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8646042, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-14T04:20:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8647889, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-14T04:25:08Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8646414, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(khuey@kylehuey.com)", "attachment_id": 8646414, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8647890, "added": "review?(khuey@kylehuey.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-14T04:31:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8647889, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-14T18:46:01Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1179540"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-18T00:22:25Z"}, {"changes": [{"field_name": "attachments.description", "removed": "MozReview Request: Bug 1188545: Terminate service workers that have been idle for some time. r?nsm", "attachment_id": 8647889, "added": "MozReview Request: Bug 1188545 - ServiceWorkerRegistrationInfo::Clear() should terminated workers. r?nsm"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-21T02:45:21Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8647889, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-21T02:50:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8651270, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-21T22:24:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8651272, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-21T22:26:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8651273, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-21T22:26:38Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8651274, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-21T22:27:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8651275, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-21T22:27:38Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1197421"}], "who": "catalin.badea392@gmail.com", "when": "2015-08-21T22:58:55Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8651270, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-25T16:23:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8651272, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-25T18:06:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8651275, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-25T18:26:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8651273, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-25T20:09:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8651274, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-08-25T21:51:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ehsan@mozilla.com"}], "who": "ehsan@mozilla.com", "when": "2015-08-26T15:06:19Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8647890, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(khuey@kylehuey.com)", "attachment_id": 8647890, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8656907, "added": "review?(khuey@kylehuey.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:34:28Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8651270, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:34:56Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8647891, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:35:16Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8651271, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:35:29Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8651272, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:36:03Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8651273, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:36:20Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8651274, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:36:34Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8651275, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:36:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8656921, "added": "review?(nsm.nikhil@gmail.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-04T00:38:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nsm.nikhil@gmail.com)", "attachment_id": 8656921, "added": "review+"}], "who": "nsm.nikhil@gmail.com", "when": "2015-09-04T00:50:51Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jonas@sicking.cc"}, {"field_name": "flagtypes.name", "removed": "review?(khuey@kylehuey.com)", "attachment_id": 8656907, "added": "review?(jonas@sicking.cc)"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-09T17:42:33Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1203274"}], "who": "nsm.nikhil@gmail.com", "when": "2015-09-09T20:11:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jonas@sicking.cc)", "attachment_id": 8656907, "added": "review?(khuey@kylehuey.com)"}], "who": "jonas@sicking.cc", "when": "2015-09-09T20:52:43Z"}, {"changes": [{"removed": "jonas@sicking.cc", "field_name": "cc", "added": ""}], "who": "jonas@sicking.cc", "when": "2015-09-09T20:52:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mrbkap@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "review?(khuey@kylehuey.com)", "attachment_id": 8656907, "added": "review?(mrbkap@mozilla.com)"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-09T21:56:16Z"}, {"changes": [{"removed": "1179401", "field_name": "blocks", "added": ""}], "who": "ehsan@mozilla.com", "when": "2015-09-16T15:12:02Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}], "who": "noemi.freiredecarlos@telefonica.com", "when": "2015-09-17T10:08:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mrbkap@mozilla.com)", "attachment_id": 8656907, "added": "review+"}], "who": "mrbkap@mozilla.com", "when": "2015-09-18T22:51:10Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1191339"}], "who": "ferjmoreno@gmail.com", "when": "2015-09-23T15:22:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "catalin.badea392@gmail.com, wkocher@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(catalin.badea392@gmail.com)"}], "who": "kwierso@gmail.com", "when": "2015-09-30T18:13:08Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8656916, "added": "1"}], "who": "catalin.badea392@gmail.com", "when": "2015-09-30T23:08:32Z"}, {"changes": [{"removed": "needinfo?(catalin.badea392@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "catalin.badea392@gmail.com", "when": "2015-09-30T23:22:34Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla44"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-10-01 05:53:21"}, {"removed": "---", "field_name": "cf_status_firefox44", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2015-10-01T12:53:21Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(catalin.badea392@gmail.com)"}], "who": "ehsan@mozilla.com", "when": "2015-10-01T22:50:36Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1204596"}], "who": "ehsan@mozilla.com", "when": "2015-10-06T17:42:27Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "lhenry@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(lhenry@mozilla.com)"}], "who": "lmandel@mozilla.com", "when": "2015-10-07T19:04:54Z"}, {"changes": [{"removed": "needinfo?(catalin.badea392@gmail.com), needinfo?(lhenry@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "bkelly@mozilla.com", "when": "2015-10-07T19:08:16Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gbrown@mozilla.com"}], "who": "gbrown@mozilla.com", "when": "2015-10-26T18:22:23Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(catalin.badea392@gmail.com)"}], "who": "ehsan@mozilla.com", "when": "2015-10-27T14:05:19Z"}, {"changes": [{"removed": "needinfo?(catalin.badea392@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "catalin.badea392@gmail.com", "when": "2015-10-27T14:17:37Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1222970"}], "who": "felipc@gmail.com", "when": "2015-11-19T00:01:08Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}