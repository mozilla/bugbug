{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "dd.mozilla@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2015-10-15T22:12:43Z", "type_id": 607, "creation_date": "2015-10-15T18:09:49Z", "id": 1273065, "setter": "ckerschb@christophkerschbaumer.com"}, {"status": "+", "name": "feedback", "modification_date": "2015-10-16T06:59:58Z", "type_id": 607, "creation_date": "2015-10-15T22:12:43Z", "id": 1273344, "setter": "jonas@sicking.cc"}], "content_type": "text/plain", "id": 8674381}, {"creator": "dd.mozilla@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8674864}, {"creator": "dd.mozilla@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-10-17T14:32:22Z", "type_id": 4, "creation_date": "2015-10-16T15:42:58Z", "id": 1273881, "setter": "honzab.moz@firemni.cz"}], "content_type": "text/plain", "id": 8674929}, {"creator": "dd.mozilla@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-10-22T16:48:25Z", "type_id": 4, "creation_date": "2015-10-19T17:16:33Z", "id": 1275089, "setter": "jonas@sicking.cc"}, {"status": "+", "name": "review", "modification_date": "2015-10-22T16:38:26Z", "type_id": 4, "creation_date": "2015-10-22T16:17:18Z", "id": 1277797, "setter": "honzab.moz@firemni.cz"}, {"status": "+", "name": "approval-mozilla-aurora", "modification_date": "2015-10-22T17:11:47Z", "type_id": 720, "creation_date": "2015-10-22T17:08:31Z", "id": 1277845, "setter": "sledru@mozilla.com"}, {"status": "+", "name": "approval-mozilla-beta", "modification_date": "2015-10-22T17:11:47Z", "type_id": 721, "creation_date": "2015-10-22T17:08:31Z", "id": 1277846, "setter": "sledru@mozilla.com"}], "content_type": "text/plain", "id": 8675533}], "classification": "Components", "creator": "dd.mozilla@gmail.com", "mentors_detail": [], "depends_on": [], "cf_has_str": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Channelwrapper: Fix up maybeWrapChannel to wrap if not gecko internal channel", "cf_last_resolved": "2015-10-22T23:39:19Z", "votes": 0, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 29, "comments": [{"text": "with addon COMPUTERBILD-Abzockschutz-1.0.59.xpi installed\n\ntry to access elektromarkt-online.com (this web site is on the list of \"abzock\" sites)\n\nThe channel is not Http, I also checked it is not ftp, nsIFileChannel nor nsIJARChannel\n\nI do not know what it is.", "author": "dd.mozilla@gmail.com", "id": 10838668, "time": "2015-10-14T18:20:01Z"}, {"text": "Adding to the description above: if you try to access that site firefox is going to crash.\n\nDo we have the source code of the addon? I tried on https://mxr.mozilla.org/addons but I have not found it.\n\n\nIt would be good to take a look into the source code of all addons that implement protocol handler. It would be good to know which channel we need to wrap, obvious only http is not enough.", "author": "dd.mozilla@gmail.com", "id": 10838693, "time": "2015-10-14T18:27:59Z"}, {"text": "Created attachment 8674381\nbug_1214786.patch\n\nSo instead of having only httpChannel wrapper, I made an abstract one.\n\nThis fix the scenario described in this bug. \n\nWhat do you think?", "author": "dd.mozilla@gmail.com", "id": 10842544, "time": "2015-10-15T18:09:49Z"}, {"text": "This is going to fail on:\nhttp://mxr.mozilla.org/mozilla-central/source/caps/BasePrincipal.cpp#389\n\nbut this is a different issue, (i think)", "author": "dd.mozilla@gmail.com", "id": 10842553, "time": "2015-10-15T18:11:36Z"}, {"text": "Comment on attachment 8674381\nbug_1214786.patch\n\nReview of attachment 8674381:\n-----------------------------------------------------------------\n\nI like that idea of having a generic wrapper and only wrap if it's not a gecko channel. Are we sure we can rely on nsIForcePendingChannel though? Just asking. If we can than that's great.\n\nJonas, I suppose you agree, right?", "author": "ckerschb@christophkerschbaumer.com", "id": 10843536, "time": "2015-10-15T22:12:43Z"}, {"text": "Comment on attachment 8674381\nbug_1214786.patch\n\nReview of attachment 8674381:\n-----------------------------------------------------------------\n\n::: netwerk/base/nsSecCheckWrapChannel.cpp\n@@ -30,4 @@\n>    NS_INTERFACE_MAP_ENTRY(nsIRequest)\n>    NS_INTERFACE_MAP_ENTRY(nsIChannel)\n> -  NS_INTERFACE_MAP_ENTRY(nsIUploadChannel)\n> -  NS_INTERFACE_MAP_ENTRY(nsIUploadChannel2)\n\nI suspect it's still a good idea to leave these interfaces on the secwrapper. In case an addon implements a channel that supports response headers. They are effectively no-ops anyway in case the addon doesn't support these interfaces.\n\nI'm also not sure I understand why nsIInterfaceRequestor interface was added? I don't mind doing it though, just trying to understand.\n\n@@ -102,5 @@\n> -      do_QueryInterface(aChannel);\n> -    // we can only wrap http channel.\n> -    if (httpChannel) {\n> -      // we have to wrap that channel\n> -      channel = new nsSecCheckWrapChannel(aChannel, aLoadInfo);\n\nThe old code here is definitely bogus. New code looks correct.", "author": "jonas@sicking.cc", "id": 10844530, "time": "2015-10-16T06:59:58Z"}, {"text": "(In reply to Jonas Sicking (:sicking) from comment #5)\n> Comment on attachment 8674381\n> bug_1214786.patch\n> \n> Review of attachment 8674381:\n> -----------------------------------------------------------------\n> \n> ::: netwerk/base/nsSecCheckWrapChannel.cpp\n> @@ -30,4 @@\n> >    NS_INTERFACE_MAP_ENTRY(nsIRequest)\n> >    NS_INTERFACE_MAP_ENTRY(nsIChannel)\n> > -  NS_INTERFACE_MAP_ENTRY(nsIUploadChannel)\n> > -  NS_INTERFACE_MAP_ENTRY(nsIUploadChannel2)\n> \n> I suspect it's still a good idea to leave these interfaces on the\n> secwrapper. In case an addon implements a channel that supports response\n> headers. They are effectively no-ops anyway in case the addon doesn't\n> support these interfaces.\n> \n> I'm also not sure I understand why nsIInterfaceRequestor interface was\n> added? I don't mind doing it though, just trying to understand.\n> \n\n\nI was trying to supply here only the necessary interfaces that a channel will have an forward all other getInteface query to the original channel. Therefore I added nsIInterfaceRequestor and change getInteface function.\n\nIdeally we should create a wrapper for a channel that implements exactly interfaces that the channel implements and forward calls to the original channel.\nIf there is a better way to do this I will change it.", "author": "dd.mozilla@gmail.com", "id": 10844555, "time": "2015-10-16T07:15:20Z"}, {"text": "The idea of forwarding interfaces is to behave as similar as possible to Firefox 41 where the wrapper doesn't exist at all. This seems like the best way to maintain compatibility with existing addons.\n\nIf we forwarded enumerated all interfaces that addon-implemented channels implement, then we in theory should have near-perfect compatibility.\n\nUsing an nsIInterfaceRequestor doesn't seem to help with keeping existing addons and gecko-code working. I.e. the XHR code will QI the channel to nsIUploadChannel, it will not call channel->GetInterface to try to get at an nsIUploadChannel.", "author": "jonas@sicking.cc", "id": 10844642, "time": "2015-10-16T08:01:16Z"}, {"text": "Created attachment 8674864\nbug_1214786.patch\n\nI mixed up getInterface and QueryInterface", "author": "dd.mozilla@gmail.com", "id": 10845407, "time": "2015-10-16T13:24:48Z"}, {"text": "Created attachment 8674929\nbug_1214786.patch", "author": "dd.mozilla@gmail.com", "id": 10845917, "time": "2015-10-16T15:42:58Z"}, {"text": "Comment on attachment 8674929\nbug_1214786.patch\n\nReview of attachment 8674929:\n-----------------------------------------------------------------\n\n::: netwerk/base/nsSecCheckWrapChannel.cpp\n@@ +44,5 @@\n> +    NS_ADDREF_THIS();\n> +    return NS_OK;\n> +  }\n> +  return mChannel->QueryInterface(aIID, aResult);\n> +}\n\nI've spot a potential for crashing here already before.  When the inner channel actually doesn't QI to e.g. nsIUploadChannel (mUploadChannel left null) we easily crash, since: 1) the wrapper QI's to that interface 2) we use plain NS_FORWARD_* to mUploadChannel w/o any non-null checks.\n\nI think that just doing all QI entries as conditional is pretty OK.\n\nThere are no good explanation nor backtrace of the crash that actually happens according comment 0 + 1 STR.  So it's hard to judge what is the correct approach here.\n\nYour QueryInterface method, in this patch, violates the basic rule: QI to any interface always leads back to the same _object_.  For nsIChannel, nsIRequest and nsISecCheckWrapChannel you return the wrapper, and jumping across these 3 interfaces always leads to the secwrapper object, but for any other interface you return the inner channel where from you cannot ever go back to the secwrapper.  That is not permitted.  We may easily break some code with this when someone does nsIChannel(wrapper) --QI--> nsISomeIntreface(mChannel) --QI--> nsIChannel(X).  Correctly X should the the wrapper, but the caller will end up with mChannel in hands.  Who knows what and where may break when e.g. comparing any saved channel pointers with later result of a QueryInterface(nsIChannel) call.\n\nIf you really want to QI on the channel, I would rather do it as the last resort only for interfaces that e.g. the extension introduces which we cannot know.\n\n\n\nOTOH, isn't there some XPCOM/XPConnect magic we could use to wrap and forward to ANY interface that the mChannel->QueryInterace may return?  Something tells me it should be possible.  Have a hashtable of IID->stub object, where the stub's QueryInterface would always delegate to the \"central\" nsSecCheckWrapChannelBase::QueryInterface.  Referencing would have to forward to the secwrapper as well, obviously.  \n\nWe don't have to return the same object for every interface, but we must return the same object for two different calls to QueryInterface with the same IID.  That's the only rule.\n\nI think bz could point you at the right code.\n\n@@ +92,5 @@\n>  // static\n>  already_AddRefed<nsIChannel>\n>  nsSecCheckWrapChannel::MaybeWrap(nsIChannel* aChannel, nsILoadInfo* aLoadInfo)\n>  {\n> +  MOZ_ASSERT(aChannel, \"can not create a channel wrapper without a channel\");\n\nOK, but how do we ensure this in the wild?  There should be a legal failure path when there is no inner channel passed in.  Or is the goal here different?\n\nActually, this should be handled near results of NewProxiedChannel/NewChannel.  When the implementation is faulty and return NS_OK while not returning a channel, we should fail with some regular NS_ERROR_X.", "author": "honzab.moz@firemni.cz", "id": 10848218, "time": "2015-10-17T14:32:22Z"}, {"text": "Dragana, I think NS_GetXPTCallStub could be your big friend here.  Look at https://mxr.mozilla.org/mozilla-central/source/xpcom/reflect/xptcall/xptcall.h#143 and below.\n\nYou may want to derive from nsAutoXPTCStub, implement its CallMethod to forward to NS_InvokeByIndex on mChannel.  \n\n@that is mChannel, @methodIndex is aMethodIndex, @paramCount = aInfo->num_args, @params is an array you have to create manually: for each arg do nsXPTCVariant.Init(aParams[i], aInfo->params[i].type, aInfo->params[i].flags).  \n\nYou also have to figure out how to incorporate aInfo->result (where in the list of args you pass to NS_InvokeByIndex it belongs, also means to adjust paramCount accordingly).  You may inspect CallMethodHelper::InitializeDispatchParams() for that to answer.", "author": "honzab.moz@firemni.cz", "id": 10848257, "time": "2015-10-17T15:37:30Z"}, {"text": "Anyway, if this turns out to be to complicated for (only a temporary?) secwrapper implementation, go with breaking the QI rules for unknown interfaces.", "author": "honzab.moz@firemni.cz", "id": 10848266, "time": "2015-10-17T15:47:19Z"}, {"text": "> Your QueryInterface method, in this patch, violates the basic rule: QI to\n> any interface always leads back to the same _object_.\n\nYes! This was exactly my concern with this approach.\n\nI don't know exactly what problems this would cause in practice, but it does seem like a scary rule to break given that we don't break it *anywhere* else to my knowledge.\n\n> If you really want to QI on the channel, I would rather do it as the last\n> resort only for interfaces that e.g. the extension introduces which we\n> cannot know.\n\nYeah, at the very least we should do this. I.e. whitelist a pile of channel-related interfaces the same way that the existing code does.\n\n> OTOH, isn't there some XPCOM/XPConnect magic we could use to wrap and\n> forward to ANY interface that the mChannel->QueryInterace may return? \n\nXPConnect does this, and we at least used to have a cross-thread XPCOM proxy that was able to do this. However I think it adds a lot of complexity. Not really something we can uplift to beta. And probably not something that's wroth doing for what should be a temporary solution anyway.\n\n\nMy gut feeling would be to just whitelist a pile of channel-related interfaces and leave it at that. It seems safer to not break XPCOM QI rules. And at worst it'll break a few addons, but at least shouldn't be crash prone, which is something I'm worried about with breaking XPCOM QI rules.", "author": "jonas@sicking.cc", "id": 10848460, "time": "2015-10-17T20:28:24Z"}, {"text": "Created attachment 8675533\nbug_1214786_v2.patch", "author": "dd.mozilla@gmail.com", "id": 10850189, "time": "2015-10-19T08:27:20Z"}, {"text": "(In reply to Jonas Sicking (:sicking) from comment #13)\n> My gut feeling would be to just whitelist a pile of channel-related\n> interfaces and leave it at that. It seems safer to not break XPCOM QI rules.\n> And at worst it'll break a few addons, but at least shouldn't be crash\n> prone, which is something I'm worried about with breaking XPCOM QI rules.\n\n+1\n\nI'm not worried about crashes that much, more about failing checks like |mOldChannel == aChannel| which might not pass where should.", "author": "honzab.moz@firemni.cz", "id": 10855157, "time": "2015-10-20T14:01:52Z"}, {"text": "Comment on attachment 8675533\nbug_1214786_v2.patch\n\nReview of attachment 8675533:\n-----------------------------------------------------------------\n\n::: netwerk/base/nsSecCheckWrapChannel.cpp\n@@ +29,5 @@\n>    NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIHttpChannel)\n>    NS_INTERFACE_MAP_ENTRY(nsIRequest)\n>    NS_INTERFACE_MAP_ENTRY(nsIChannel)\n> +  NS_INTERFACE_MAP_ENTRY_CONDITIONAL(nsIUploadChannel, mUploadChannel)\n> +  NS_INTERFACE_MAP_ENTRY_CONDITIONAL(nsIUploadChannel2, mUploadChannel2)\n\nmaybe add most interfaces nsHttpChannel implements? (a reasonable list, probably don't include callback-style interfaces)  it's just about listing them here and having members for them, so no big work.", "author": "honzab.moz@firemni.cz", "id": 10855198, "time": "2015-10-20T14:13:07Z"}, {"text": "(In reply to Honza Bambas (:mayhemer) from comment #16)\n> Comment on attachment 8675533\n> bug_1214786_v2.patch\n> \n> Review of attachment 8675533:\n> -----------------------------------------------------------------\n> \n> ::: netwerk/base/nsSecCheckWrapChannel.cpp\n> @@ +29,5 @@\n> >    NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIHttpChannel)\n> >    NS_INTERFACE_MAP_ENTRY(nsIRequest)\n> >    NS_INTERFACE_MAP_ENTRY(nsIChannel)\n> > +  NS_INTERFACE_MAP_ENTRY_CONDITIONAL(nsIUploadChannel, mUploadChannel)\n> > +  NS_INTERFACE_MAP_ENTRY_CONDITIONAL(nsIUploadChannel2, mUploadChannel2)\n> \n> maybe add most interfaces nsHttpChannel implements? (a reasonable list,\n> probably don't include callback-style interfaces)  it's just about listing\n> them here and having members for them, so no big work.\n\nActually the only addon that I have checks does not return an http channel at all, so for that one we do not need Http part at all (it implements only nsIUploadChannel2 :)) (I checked couple of others but they just return a gecko channel)\n\nthere is a bug 1216518 that should check which interfaces we actually need. So I will wait until that is investigated before adding and removing interfaces.", "author": "dd.mozilla@gmail.com", "id": 10855228, "time": "2015-10-20T14:18:24Z"}, {"text": "Seems that we want that in 42.", "author": "sledru@mozilla.com", "id": 10864006, "time": "2015-10-22T16:03:31Z"}, {"text": "Comment on attachment 8675533\nbug_1214786_v2.patch\n\nReview of attachment 8675533:\n-----------------------------------------------------------------\n\nlet's do it.\n\njonas is slow in reviews, I think my r+ should be enough if you want to land it yet today.", "author": "honzab.moz@firemni.cz", "id": 10864137, "time": "2015-10-22T16:38:26Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/d5aa550a2e1f", "author": "pulsebot@bots.tld", "id": 10864242, "time": "2015-10-22T17:00:04Z"}, {"text": "Comment on attachment 8675533\nbug_1214786_v2.patch\n\nApproval Request Comment\n[Feature/regressing bug #]: Bug 1120487\n\n[User impact if declined]:\nUsers installing addons which implement their own nsIProtocolHandler and using their own protocols (not http protocol) will crash.\n\n[Describe test coverage new/current, TreeHerder]:\ntested several addons including:\nhttp://addons.computerbild.de/antiabzocke/plugin/COMPUTERBILD-Abzockschutz-1.0.59.xpi\n\n[Risks and why]:\nLow, because the patch only applies to users that install addons which implement their own protocol handlers (on AMO we where able to find ~150 such addons).\n\n[String/UUID change made/needed]:\nNo", "author": "ckerschb@christophkerschbaumer.com", "id": 10864281, "time": "2015-10-22T17:08:31Z"}, {"text": "Comment on attachment 8675533\nbug_1214786_v2.patch\n\nFix a crash, taking it.\nShould be in 42 beta 9 (hopefully)", "author": "sledru@mozilla.com", "id": 10864295, "time": "2015-10-22T17:11:47Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/d5aa550a2e1f", "author": "kwierso@gmail.com", "id": 10865638, "time": "2015-10-22T23:39:19Z"}, {"text": "https://hg.mozilla.org/releases/mozilla-aurora/rev/6c1457027394\nhttps://hg.mozilla.org/releases/mozilla-beta/rev/5927d34ab471", "author": "kwierso@gmail.com", "id": 10865680, "time": "2015-10-22T23:42:00Z"}, {"text": "Missed beta 9, will be in rc... :(", "author": "sledru@mozilla.com", "id": 10866397, "time": "2015-10-23T06:46:12Z"}, {"text": "Dragana, Christopher, could you check that the issue is fixed in the next aurora?", "author": "sledru@mozilla.com", "id": 10866399, "time": "2015-10-23T06:46:48Z"}, {"text": "(In reply to Sylvestre Ledru [:sylvestre] from comment #26)\n> Dragana, Christopher, could you check that the issue is fixed in the next\n> aurora?\n\nSylvestre, I am in contact with QA and we will perform mayor testing of the channelwrapper on mozilla-central and aurora this week to make sure our code is in good shape. If something comes up, I'll let you know right away. Thanks!", "author": "ckerschb@christophkerschbaumer.com", "id": 10873200, "time": "2015-10-26T16:14:51Z"}, {"text": "*** Bug 1195520 has been marked as a duplicate of this bug. ***", "author": "gijskruitbosch+bugs@gmail.com", "id": 10880787, "time": "2015-10-28T10:52:25Z"}], "id": 1214786, "priority": "--", "cc": ["bugzilla-mozilla-20000923@james-ross.co.uk", "ckerschb@christophkerschbaumer.com", "dd.mozilla@gmail.com", "honzab.moz@firemni.cz", "jonas@sicking.cc", "kairo@kairo.at", "kamiljoz@gmail.com", "kwierso@gmail.com", "sledru@mozilla.com", "UberSlackr@gmail.com"], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_firefox59": "---", "cf_tracking_firefox42": "+", "last_change_time": "2015-11-03T14:55:34Z", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1216214, 1218143, 1218750], "qa_contact": "", "creation_time": "2015-10-14T18:20:01Z", "cf_status_firefox_esr52": "---", "component": "DOM: Security", "assigned_to_detail": {"email": "dd.mozilla@gmail.com", "id": 508195, "name": "dd.mozilla@gmail.com", "real_name": "Dragana Damjanovic [:dragana]"}, "groups": [], "cf_status_firefox60": "---", "cf_status_firefox43": "fixed", "cf_status_firefox42": "fixed", "target_milestone": "mozilla44", "cf_status_firefox44": "fixed", "is_cc_accessible": true, "cf_rank": null, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "dd.mozilla@gmail.com", "id": 508195, "name": "dd.mozilla@gmail.com", "real_name": "Dragana Damjanovic [:dragana]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bugzilla-mozilla-20000923@james-ross.co.uk", "id": 18057, "name": "bugzilla-mozilla-20000923@james-ross.co.uk", "real_name": "James Ross"}, {"email": "ckerschb@christophkerschbaumer.com", "id": 363267, "name": "ckerschb@christophkerschbaumer.com", "real_name": "Christoph Kerschbaumer [:ckerschb]"}, {"email": "dd.mozilla@gmail.com", "id": 508195, "name": "dd.mozilla@gmail.com", "real_name": "Dragana Damjanovic [:dragana]"}, {"email": "honzab.moz@firemni.cz", "id": 269762, "name": "honzab.moz@firemni.cz", "real_name": "Honza Bambas (:mayhemer)"}, {"email": "jonas@sicking.cc", "id": 9186, "name": "jonas@sicking.cc", "real_name": "Jonas Sicking (:sicking) No longer reading bugmail consistently"}, {"email": "kairo@kairo.at", "id": 5189, "name": "kairo@kairo.at", "real_name": "Robert Kaiser"}, {"email": "kamiljoz@gmail.com", "id": 455785, "name": "kamiljoz@gmail.com", "real_name": "Kamil Jozwiak [:kjozwiak]"}, {"email": "kwierso@gmail.com", "id": 308534, "name": "kwierso@gmail.com", "real_name": "Wes Kocher (:KWierso)"}, {"email": "sledru@mozilla.com", "id": 495955, "name": "sledru@mozilla.com", "real_name": "Sylvestre Ledru [:sylvestre]"}, {"email": "UberSlackr@gmail.com", "id": 547075, "name": "UberSlackr@gmail.com", "real_name": ""}], "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "assigned_to": "dd.mozilla@gmail.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "blocks", "added": "1206199"}], "who": "dd.mozilla@gmail.com", "when": "2015-10-14T18:21:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kjozwiak@mozilla.com, mozilla@christophkerschbaumer.com"}], "who": "dd.mozilla@gmail.com", "when": "2015-10-14T18:22:20Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "dd.mozilla@gmail.com"}], "who": "dd.mozilla@gmail.com", "when": "2015-10-15T17:40:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "honzab.moz@firemni.cz"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8674381, "added": "feedback?(mozilla@christophkerschbaumer.com), feedback?(honzab.moz@firemni.cz)"}], "who": "dd.mozilla@gmail.com", "when": "2015-10-15T18:09:49Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jonas@sicking.cc"}, {"field_name": "flagtypes.name", "removed": "feedback?(mozilla@christophkerschbaumer.com)", "attachment_id": 8674381, "added": "feedback+, feedback?(jonas@sicking.cc)"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2015-10-15T22:12:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(jonas@sicking.cc)", "attachment_id": 8674381, "added": "feedback+"}], "who": "jonas@sicking.cc", "when": "2015-10-16T06:59:58Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8674381, "added": "1"}, {"field_name": "flagtypes.name", "removed": "feedback?(honzab.moz@firemni.cz)", "attachment_id": 8674381, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8674864, "added": "review?(jonas@sicking.cc), review?(honzab.moz@firemni.cz)"}], "who": "dd.mozilla@gmail.com", "when": "2015-10-16T13:24:48Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8674864, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(jonas@sicking.cc), review?(honzab.moz@firemni.cz)", "attachment_id": 8674864, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8674929, "added": "review?(jonas@sicking.cc), review?(honzab.moz@firemni.cz)"}], "who": "dd.mozilla@gmail.com", "when": "2015-10-16T15:42:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8674929, "added": "review-"}], "who": "honzab.moz@firemni.cz", "when": "2015-10-17T14:32:22Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8674929, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(jonas@sicking.cc)", "attachment_id": 8674929, "added": ""}], "who": "dd.mozilla@gmail.com", "when": "2015-10-19T08:27:20Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8675533, "added": "review?(jonas@sicking.cc)"}], "who": "dd.mozilla@gmail.com", "when": "2015-10-19T17:16:33Z"}, {"changes": [{"removed": "1206199", "field_name": "blocks", "added": ""}], "who": "ckerschb@christophkerschbaumer.com", "when": "2015-10-19T17:32:41Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1216214"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2015-10-19T17:32:53Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "sledru@mozilla.com"}, {"removed": "---", "field_name": "cf_tracking_firefox42", "added": "+"}, {"removed": "---", "field_name": "cf_status_firefox42", "added": "affected"}], "who": "sledru@mozilla.com", "when": "2015-10-22T16:03:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8675533, "added": "review?(honzab.moz@firemni.cz)"}], "who": "honzab.moz@firemni.cz", "when": "2015-10-22T16:17:18Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(honzab.moz@firemni.cz)", "attachment_id": 8675533, "added": "review+"}], "who": "honzab.moz@firemni.cz", "when": "2015-10-22T16:38:26Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jonas@sicking.cc)", "attachment_id": 8675533, "added": "review+"}], "who": "jonas@sicking.cc", "when": "2015-10-22T16:48:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kairo@kairo.at"}], "who": "kairo@kairo.at", "when": "2015-10-22T17:03:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8675533, "added": "approval-mozilla-aurora?, approval-mozilla-beta?"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2015-10-22T17:08:31Z"}, {"changes": [{"removed": "SecCheckWrapper - problem not all channels are httpChannel", "field_name": "summary", "added": "Channelwrapper: Fix up maybeWrapChannel to wrap if not gecko internal channel"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2015-10-22T17:09:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "approval-mozilla-aurora?, approval-mozilla-beta?", "attachment_id": 8675533, "added": "approval-mozilla-aurora+, approval-mozilla-beta+"}], "who": "sledru@mozilla.com", "when": "2015-10-22T17:11:47Z"}, {"changes": [{"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla44"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-10-22 16:39:19"}, {"removed": "---", "field_name": "cf_status_firefox44", "added": "fixed"}, {"removed": "NEW", "field_name": "status", "added": "RESOLVED"}], "who": "kwierso@gmail.com", "when": "2015-10-22T23:39:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "wkocher@mozilla.com"}, {"removed": "affected", "field_name": "cf_status_firefox42", "added": "fixed"}, {"removed": "---", "field_name": "cf_status_firefox43", "added": "fixed"}], "who": "kwierso@gmail.com", "when": "2015-10-22T23:42:00Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mozilla@christophkerschbaumer.com)"}], "who": "sledru@mozilla.com", "when": "2015-10-23T06:46:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dd.mozilla@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(dd.mozilla@gmail.com)"}], "who": "sledru@mozilla.com", "when": "2015-10-23T06:46:48Z"}, {"changes": [{"removed": "needinfo?(mozilla@christophkerschbaumer.com), needinfo?(dd.mozilla@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "ckerschb@christophkerschbaumer.com", "when": "2015-10-26T16:14:51Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla-mozilla-20000923@james-ross.co.uk"}], "who": "bugzilla-mozilla-20000923@james-ross.co.uk", "when": "2015-10-27T21:03:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "UberSlackr@gmail.com"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2015-10-28T10:52:25Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1218143"}], "who": "gingerbread_man@live.com", "when": "2015-11-03T07:54:19Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1218750"}], "who": "ryanvm@gmail.com", "when": "2015-11-03T14:55:34Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}