{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-19T16:02:54Z", "type_id": 4, "creation_date": "2016-05-19T08:39:15Z", "id": 1396724, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8754262}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-19T16:03:20Z", "type_id": 4, "creation_date": "2016-05-19T09:01:40Z", "id": 1396744, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8754266}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-19T16:05:31Z", "type_id": 4, "creation_date": "2016-05-19T09:21:11Z", "id": 1396765, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8754285}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-19T21:16:58Z", "type_id": 4, "creation_date": "2016-05-19T09:31:25Z", "id": 1396774, "setter": "shu@rfrn.org"}], "content_type": "text/plain", "id": 8754288}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-19T21:27:08Z", "type_id": 4, "creation_date": "2016-05-19T10:02:21Z", "id": 1396797, "setter": "shu@rfrn.org"}], "content_type": "text/plain", "id": 8754312}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-20T13:05:55Z", "type_id": 4, "creation_date": "2016-05-20T09:16:17Z", "id": 1397518, "setter": "jorendorff@mozilla.com"}], "content_type": "text/plain", "id": 8754731}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-20T16:28:35Z", "type_id": 4, "creation_date": "2016-05-20T10:05:30Z", "id": 1397534, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8754751}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-20T16:29:03Z", "type_id": 4, "creation_date": "2016-05-20T11:09:54Z", "id": 1397564, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8754777}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-23T13:53:13Z", "type_id": 4, "creation_date": "2016-05-20T20:47:18Z", "id": 1397943, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8755003}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-23T13:53:45Z", "type_id": 4, "creation_date": "2016-05-23T07:06:08Z", "id": 1398392, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8755294}, {"creator": "jdemooij@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-05-24T21:27:00Z", "type_id": 4, "creation_date": "2016-05-24T20:46:46Z", "id": 1399348, "setter": "luke@mozilla.com"}], "content_type": "text/plain", "id": 8755860}], "classification": "Components", "creator": "jdemooij@mozilla.com", "cc": ["bill.mccloskey@gmail.com", "bobbyholley@gmail.com", "bzbarsky@mit.edu", "jorendorff@mozilla.com", "khuey@kylehuey.com", "luke@mozilla.com", "shu@rfrn.org", "terrence.d.cole@gmail.com"], "depends_on": [1274915], "creation_time": "2016-05-19T08:18:19Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Audit frame iterators for saved frame chain removal", "id": 1274193, "assigned_to_detail": {"email": "jdemooij@mozilla.com", "id": 375297, "name": "jdemooij@mozilla.com", "real_name": "Jan de Mooij [:jandem] (PTO Mar 8)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "jdemooij@mozilla.com", "comment_count": 42, "comments": [{"text": "We want to remove the JSContext stack, but first we have to remove saved frame chains.\n\nTo remove saved frame chains, we have to audit all frame iterators in SpiderMonkey that use the STOP_AT_SAVED behavior (the default!) to see what they really want.\n\nAs a first step, I'm going to make SavedOption a non-default argument and just explicitly pass STOP_AT_SAVED everywhere. After that it will be much easier to grep and convert them one at a time.", "author": "jdemooij@mozilla.com", "id": 11421421, "time": "2016-05-19T08:18:19Z"}, {"text": "Created attachment 8754262\nPart 1 - Pass SavedOption explicitly\n\nJust pass STOP_AT_SAVED explicitly everywhere.", "author": "jdemooij@mozilla.com", "id": 11421474, "time": "2016-05-19T08:39:15Z"}, {"text": "Created attachment 8754266\nPart 2 - Testing functions\n\nShell/testing functions don't really care and can just use GO_THROUGH_SAVED.", "author": "jdemooij@mozilla.com", "id": 11421511, "time": "2016-05-19T09:01:40Z"}, {"text": "Created attachment 8754285\nPart 3 - Some easy ones\n\nThis converts some places where we're only interested in the top frame, and we *know* there was no saved frame change between leaving script and using the iterator, so we can use GO_THROUGH_SAVED.", "author": "jdemooij@mozilla.com", "id": 11421579, "time": "2016-05-19T09:21:11Z"}, {"text": "Created attachment 8754288\nPart 4 - Trivial debugger ones\n\nDebugger::handleBaselineOsr and Debugger::handleIonBailout are called without saved frame changes after the frame we're interested in.", "author": "jdemooij@mozilla.com", "id": 11421606, "time": "2016-05-19T09:31:25Z"}, {"text": "Created attachment 8754312\nPart 5 - More Debugger changes\n\nDebugger::fireDebuggerStatement etc are interested in the top frame and it shouldn't be possible to save frames between that and the debugger hook.\n\nShu, the main wrinkle is InvokeInterruptCallback. Almost always, that will be called from the interpreter/JIT and the top frame should be sane. However, one can imagine some random piece of C++ code doing the following:\n\n  AutoCompartment ac(cx, compartment);\n  ..\n  CheckForInterrupt(cx);\n\nI changed it to check cx->compartment() == iter.compartment(), I think that's the sanest behavior - if we switched to a different compartment after leaving script, we shouldn't invoke debugger hooks in the script's compartment or things will just get confusing.\n\nLet me know what you think.", "author": "jdemooij@mozilla.com", "id": 11421724, "time": "2016-05-19T10:02:21Z"}, {"text": "Comment on attachment 8754288\nPart 4 - Trivial debugger ones\n\nOops, I got a little overzealous (based on the assumption that the debugger should always see everything), didn't mean to steal the review.", "author": "luke@mozilla.com", "id": 11422733, "time": "2016-05-19T16:08:37Z"}, {"text": "Comment on attachment 8754312\nPart 5 - More Debugger changes\n\nReview of attachment 8754312:\n-----------------------------------------------------------------\n\n::: js/src/vm/Runtime.cpp\n@@ +589,5 @@\n>          // invoke the onStep handler.\n>          if (cx->compartment()->isDebuggee()) {\n> +            ScriptFrameIter iter(cx, FrameIter::GO_THROUGH_SAVED);\n> +            if (!iter.done() &&\n> +                cx->compartment() == iter.compartment() &&\n\nI don't think this is needed -- the iter.script()->stepModeEnabled is a quick heuristic check to see if we should call Debugger:onSingleStep. That is, if iter.script()->stepModeEnabled(), then we *might* need to call the onStep handler, and if it's not enabled, then we definitely don't need to.\n\nIf iter.script() ends up referring to a non-debuggee script (despite cx->compartment()->isDebuggee()), Debugger::onSingleStep will do nothing and return JSTRAP_CONTINUE. It's slow to figure this out, hence this check. I don't think it's incorrect to leave out the compartment check.\n\nBut of course, run tests and see if things crash or something. :)", "author": "shu@rfrn.org", "id": 11423787, "time": "2016-05-19T21:27:08Z"}, {"text": "(In reply to Shu-yu Guo [:shu] from comment #7)\n> I don't think it's incorrect to leave out the compartment check.\n\nI intended it for a scenario like this:\n\n* Tab A does alert() and spins a nested event loop.\n* Tab B receives an event, ends up calling InvokeInterruptCallback before entering script.\n* Now InvokeInterruptCallback tries to Debugger::onSingleStep for the alert()-calling script in tab A.\n\nI know this is an edge case (both are debuggees, interrupt not from script, etc) and triggering an onStep is probably okay. Makes sense?", "author": "jdemooij@mozilla.com", "id": 11424926, "time": "2016-05-20T08:54:30Z"}, {"text": "Created attachment 8754731\nPart 6 - Expression decompiler\n\nFor the expression decompiler we have a few options. This patch makes it check the script's compartment matches the current compartment.\n\nWe could also use FrameIter's principal filtering, but then we may quietly skip frames we're not allowed to see and it could cause even more confusion.\n\nAs the expression decompiler is an heuristic, and will almost always be used within one compartment, it seemed easiest and safest to only handle that case.", "author": "jdemooij@mozilla.com", "id": 11424979, "time": "2016-05-20T09:16:17Z"}, {"text": "Created attachment 8754751\nPart 7 - rollbackPartiallyInitializedObjects and ReportIncompatibleSelfHostedMethod\n\nTypeNewScript::rollbackPartiallyInitializedObjects looks for a particular JSFunction* callee - that will only match frames belonging to the same compartment and it can safely look through saved frames.\n\nReportIncompatibleSelfHostedMethod is directly called from script.", "author": "jdemooij@mozilla.com", "id": 11425075, "time": "2016-05-20T10:05:30Z"}, {"text": "Created attachment 8754777\nPart 8 - fun.caller and fun.arguments\n\nInitially I thought we had to change fun.caller to use FrameIter's principal filtering, but that would be wrong: if the caller is something we're not allowed to access, we should return null (instead of skipping to the next frame we *are* allowed to see).\n\nWe currently use CheckedUnwrap to implement this security check, and I think that will do the right thing with GO_THROUGH_SAVED. It's just like Error().stack: you can see through saved frame boundaries, but we apply security checks.", "author": "jdemooij@mozilla.com", "id": 11425183, "time": "2016-05-20T11:09:54Z"}, {"text": "With these patches, the remaining places where we use STOP_AT_SAVED are:\n\n(1) JS::DescribeScriptedCaller and JS::GetScriptedCallerGlobal (jsapi.cpp)\n\nNot sure yet what to do here - there are a bunch of callers...\n\n(2) js::GetOutermostEnclosingFunctionOfScriptedCaller (jsfriendapi.cpp)\n\nThe only caller is mozJSComponentLoader::FindTargetObject. bz, do you know what that code is trying to do? We don't wrap the result AFAICS, so maybe we can assert/check the GetOutermostEnclosingFunctionOfScriptedCaller return value is in the same compartment? I'm not familiar with mozJSComponentLoader so I'm not sure what it needs exactly.\n\n(3) js::DescribeScriptedCallerForCompilation (jsscript.cpp)\n\nWe use this for direct and indirect eval, to get the caller's filename/lineno/etc. Luke, do you think we should use principal filtering here?", "author": "jdemooij@mozilla.com", "id": 11425216, "time": "2016-05-20T11:36:38Z"}, {"text": "Comment on attachment 8754731\nPart 6 - Expression decompiler\n\nReview of attachment 8754731:\n-----------------------------------------------------------------\n\n::: js/src/jsopcode.cpp\n@@ +1493,5 @@\n>       * Get the second-to-top frame, the caller of the builtin that called the\n>       * intrinsic.\n>       */\n>      ++frameIter;\n> +    if (frameIter.done() || !frameIter.hasScript() || frameIter.compartment() != cx->compartment())\n\nYou should be able to assert the compartment invariant here, right?\n\nI'm not opposed to asserting but then testing anyway. Decompiler. :-P", "author": "jorendorff@mozilla.com", "id": 11425380, "time": "2016-05-20T13:05:55Z"}, {"text": "D'oh. Of course you can't. Never mind.", "author": "jorendorff@mozilla.com", "id": 11425382, "time": "2016-05-20T13:07:24Z"}, {"text": "> bz, do you know what that code is trying to do?\n\nYeah.  In the case when the component loader uses a single global for all components, this is trying to find the right \"this\" object to evaluate the xpcom component script against (which is not the global itself, to avoid different components stomping on each other).  https://bugzilla.mozilla.org/show_bug.cgi?id=807845#c0 actually summarizes what's going on pretty well.\n\nGiven all that, restricting to \"same compartment\" just means restricting to the shared component global.  Maybe that's OK anyway.  \n\nBut the other thing is, jsloader.reuseGlobal is only true on b2g, so this code is only used on b2g.  I don't know whether there are any plans to use it on non-b2g and hence whether we care about it at all...  Bobby, do you know?", "author": "bzbarsky@mit.edu", "id": 11425728, "time": "2016-05-20T15:17:29Z"}, {"text": "> We use this for direct and indirect eval, to get the caller's filename/lineno/etc.\n> Luke, do you think we should use principal filtering here?\n\nWe totally should.  Consider this conceptual testcase:\n\n  <script>\n    callSomeBrowserAPIThatInvokesTheCallback(eval.bind(undefined, \"stuff\"));\n  </script>\n\nIf callSomeBrowserAPIThatInvokesTheCallback is implemented in C++, the eval will get the file/line of the callsite, right?  But if it's implemented in chrome JS, in our current world it won't.  I think it should, because that sort of implementation detail should not affect page-visible behavior.  Doing principal-filtering would allow us to do that.  If desired, I can try to find an actual API where this is an issue, but we certainly have a test API like that if we just want to write a test.\n\nNote that there is still weirdness in cases like:\n\n  <script>\n    var el = document.documentElement;\n    el.addEventListener(\"click\", eval.bind(undefined, \"throw new Error()\"));\n    el.click();\n  </script>\n\nThis logs an exception with filename set to \"\"file:///Users/bzbarsky/baz.html line 4 > eval\": the location of the click() call.  Which makes sense in terms of our impl, but it would be more helpful to use the file/line of the addEventListener call or something, in terms of actual debuggability.  That's a separate issue, though.", "author": "bzbarsky@mit.edu", "id": 11425774, "time": "2016-05-20T15:32:31Z"}, {"text": "(Thanks bz, agreed.)", "author": "luke@mozilla.com", "id": 11425964, "time": "2016-05-20T16:32:28Z"}, {"text": "(In reply to Boris Zbarsky [:bz] from comment #15)\n> > bz, do you know what that code is trying to do?\n> \n> Yeah.  In the case when the component loader uses a single global for all\n> components, this is trying to find the right \"this\" object to evaluate the\n> xpcom component script against (which is not the global itself, to avoid\n> different components stomping on each other). \n> https://bugzilla.mozilla.org/show_bug.cgi?id=807845#c0 actually summarizes\n> what's going on pretty well.\n> \n> Given all that, restricting to \"same compartment\" just means restricting to\n> the shared component global.  Maybe that's OK anyway.  \n> \n> But the other thing is, jsloader.reuseGlobal is only true on b2g, so this\n> code is only used on b2g.  I don't know whether there are any plans to use\n> it on non-b2g and hence whether we care about it at all...  Bobby, do you\n> know?\n\nBill had some plans to do something similar in Desktop, and might know better than me whether this is relevant. Also worth asking njn what he thinks about eliminating that machinery.", "author": "bobbyholley@gmail.com", "id": 11426062, "time": "2016-05-20T17:07:42Z"}, {"text": "(In reply to Bobby Holley (busy) from comment #18)\n> Bill had some plans to do something similar in Desktop, and might know\n> better than me whether this is relevant. Also worth asking njn what he\n> thinks about eliminating that machinery.\n\nThe patch I was working on did something pretty different than what B2G does, so I don't care if we remove it or significantly change it.", "author": "bill.mccloskey@gmail.com", "id": 11426111, "time": "2016-05-20T17:24:22Z"}, {"text": "(In reply to Jan de Mooij [:jandem] from comment #8)\n> (In reply to Shu-yu Guo [:shu] from comment #7)\n> > I don't think it's incorrect to leave out the compartment check.\n> \n> I intended it for a scenario like this:\n> \n> * Tab A does alert() and spins a nested event loop.\n> * Tab B receives an event, ends up calling InvokeInterruptCallback before\n> entering script.\n> * Now InvokeInterruptCallback tries to Debugger::onSingleStep for the\n> alert()-calling script in tab A.\n> \n> I know this is an edge case (both are debuggees, interrupt not from script,\n> etc) and triggering an onStep is probably okay. Makes sense?\n\nOkay -- disallowing this seems fine, even preferred, to me.", "author": "shu@rfrn.org", "id": 11426649, "time": "2016-05-20T20:45:05Z"}, {"text": "Created attachment 8755003\nPart 9 - DescribeScriptedCallerForCompilation\n\nThis adds principal filtering to DescribeScriptedCallerForCompilation.\n\nI added a jit-test based on bz's scenario, it's possible to test this in the shell with newGlobal's principal option.", "author": "jdemooij@mozilla.com", "id": 11426660, "time": "2016-05-20T20:47:18Z"}, {"text": "The patches in this bug take care of everything except (1) and (2) in comment 12. Those APIs are mostly used by code outside SpiderMonkey and I don't know what the plan there is.\n\nIs there more I can do here or is this enough to unblock you?", "author": "jdemooij@mozilla.com", "id": 11426804, "time": "2016-05-20T21:22:46Z"}, {"text": "(In reply to Jan de Mooij [:jandem] from comment #22)\n> Those APIs are mostly used by code outside SpiderMonkey and I\n> don't know what the plan there is.\n\nI could try working on this too, if someone can explain what the plan is for this (and for JS_IsRunning while we're at it). It seems pretty complicated though, so not sure how useful that'd be.", "author": "jdemooij@mozilla.com", "id": 11426840, "time": "2016-05-20T21:33:38Z"}, {"text": "(In reply to Bill McCloskey (:billm) from comment #19)\n> \n> The patch I was working on did something pretty different than what B2G\n> does, so I don't care if we remove it or significantly change it.\n\nI'm ok with it, too.", "author": "n.nethercote@gmail.com", "id": 11427288, "time": "2016-05-21T01:19:06Z"}, {"text": "OK, I thought about GetOutermostEnclosingFunctionOfScriptedCaller some more and I'm not actually sure what the right thing there is.  Can we just stop once we hit something from another compartment?  Are there situations where same-compartment code will be up from us but across an event loop spin here?  Kyle, do you happen to recall what the desired semantics are here?\n\nFor GetScriptedCallerGlobal, we set the scripted caller override any time we want to cut things off.  And the only caller of this function does some special principal handling (treats non-subsumed scripted caller different from no scripted caller).  So we definitely shouldn't principal-filter here, I think, but it's fine to walk across saved stacks in today's world.\n\nFor DescribeScriptedCaller, I would have to audit the callsites and see what's going on at them and what they end up using things for.  In _general_ I think principal-filtering is the right thing there, but I'd need to check them all to make sure.  I'm happy to take that part; it might be worth spinning out into a separate bug.\n\n> and for JS_IsRunning while we're at it\n\nI just looked at the non-js.cpp and non-jsapi-test consumers of JS_IsRunning.  The ones in jscntxt.cpp are not reached in Gecko, because cx->options().autoJSAPIOwnsErrorReporting() is always true.  The one in ~AutoLastFrameCheck in jsapi.cpp doesn't matter for the same reason; the overall condition tests false no matter what JS_IsRunning says.  The one in XPCComponents.cpp... it's totally not expecting JS_IsRunning to depend on whether frames are saved!  This was added as a way to run GC when the stack fully unwinds, so we know the stack scanner won't entrain stuff; see bug 661927.  In today's world, I guess it would want all the Rooted off the stack or something.  But of course none of that stack stuff is affected by JS_IsRunning.  We should add an API that answers the real question we care about.  Probably whether there are Rooted live on the lists of the JSContext involved (and maybe on the runtime?).  Terrence, does that seem like the most accurate reflection of what's needed here?  The other thing that might be checkable is whether cx is in a compartment or something, but that doesn't seem like what this code is about.  Anyway, this should be a separate bug, because it's going to change how some tests work I expect...", "author": "bzbarsky@mit.edu", "id": 11427301, "time": "2016-05-21T01:38:54Z"}, {"text": "Created attachment 8755294\nPart 10 - GetScriptedCallerGlobal\n\nAccording to comment 25 this should be fine. I wanted to ask bz to review this, but he's not accepting review requests atm :)\n\n(FWIW the fast path I added here last week also doesn't check for saved frame boundaries.)", "author": "jdemooij@mozilla.com", "id": 11429299, "time": "2016-05-23T07:06:08Z"}, {"text": "(In reply to Boris Zbarsky [:bz] from comment #25)\n> For DescribeScriptedCaller, I would have to audit the callsites and see\n> what's going on at them and what they end up using things for.  In _general_\n> I think principal-filtering is the right thing there, but I'd need to check\n> them all to make sure.  I'm happy to take that part; it might be worth\n> spinning out into a separate bug.\n\nOK, I filed bug 1274915.\n\n> The one in\n> XPCComponents.cpp... it's totally not expecting JS_IsRunning to depend on\n> whether frames are saved!  This was added as a way to run GC when the stack\n> fully unwinds, so we know the stack scanner won't entrain stuff; see bug\n> 661927.\n\nHm that one also has O(NumContexts * NumActivations) behavior. I can work on this (bug 981201).", "author": "jdemooij@mozilla.com", "id": 11429319, "time": "2016-05-23T07:19:01Z"}, {"text": "(In reply to Boris Zbarsky [:bz] from comment #25)\n> OK, I thought about GetOutermostEnclosingFunctionOfScriptedCaller some more\n> and I'm not actually sure what the right thing there is.  Can we just stop\n> once we hit something from another compartment?  Are there situations where\n> same-compartment code will be up from us but across an event loop spin here?\n> Kyle, do you happen to recall what the desired semantics are here?\n\nMy recollection is that we did global reuse by compiling each component/JSM as a function in the context of a single global and applying said functions to a unique object.  If you have a JSM that does\n\nfunction doStuff() {\n  Components.utils.import(\"blahblahblah\"); // Installs a blah() function.\n}\n\ndoStuff();\nblah();\n\nWithout global reuse this just works.  With global reuse, if you grab the immediate caller's this object and install the properties on there this script will fail.  Instead we need to go out to the outermost function (the \"fake\" one that we created) and get its this object and install the properties on there.\n\nI think you can always terminate your search at a compartment boundary here.", "author": "khuey@kylehuey.com", "id": 11430236, "time": "2016-05-23T14:44:12Z"}, {"text": "I meant to needinfo terrence for the end of comment 25.", "author": "bzbarsky@mit.edu", "id": 11430350, "time": "2016-05-23T15:24:37Z"}, {"text": "It seems reasonable and the patch should be a trivial to write, regardless. The only question is whether there are any perma-rooteds that live above the event loop. I think probably not, but we'll want to double check.", "author": "terrence.d.cole@gmail.com", "id": 11430688, "time": "2016-05-24T00:34:57Z"}, {"text": "(In reply to Terrence Cole [:terrence] from comment #30)\n> The only question is whether there are any perma-rooteds that live above the\n> event loop. I think probably not, but we'll want to double check.\n\nYes that was also my worry... We could also go with an API that simply returns whether there are any activations on the stack, that might be good enough here and it avoids that potential footgun.", "author": "jdemooij@mozilla.com", "id": 11430732, "time": "2016-05-24T00:50:06Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/f96ba14774c0\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/24ac08253efd\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/722a014fc551\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/23d2fda9a914\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/192f327451ec", "author": "pulsebot@bots.tld", "id": 11432359, "time": "2016-05-24T13:18:04Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/701378e19df1\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/faa07a14d470\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/ee7ad0668921\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/8fa9dceab5e6\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/472fd2e0cf31", "author": "pulsebot@bots.tld", "id": 11433223, "time": "2016-05-24T19:52:16Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/f96ba14774c0\nhttps://hg.mozilla.org/mozilla-central/rev/24ac08253efd\nhttps://hg.mozilla.org/mozilla-central/rev/722a014fc551\nhttps://hg.mozilla.org/mozilla-central/rev/23d2fda9a914\nhttps://hg.mozilla.org/mozilla-central/rev/192f327451ec", "author": "cbook@mozilla.com", "id": 11433381, "time": "2016-05-24T20:07:05Z"}, {"text": "Created attachment 8755860\nPart 11 - GetOutermostEnclosingFunctionOfScriptedCaller\n\nAccording to Kyle it's okay to stop at compartment boundaries, so this just checks the compartment.\n\nWith this, we only use STOP_AT_SAVED in DescribeScriptedCaller (bug 1274915).", "author": "jdemooij@mozilla.com", "id": 11433520, "time": "2016-05-24T20:46:46Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/b47a1a49cda2", "author": "pulsebot@bots.tld", "id": 11436338, "time": "2016-05-25T15:40:14Z"}, {"text": "And we're done here. The last STOP_AT_SAVED user is DescribeScriptedCaller, that's bug 1274915.", "author": "jdemooij@mozilla.com", "id": 11436340, "time": "2016-05-25T15:41:31Z"}, {"text": "Backout:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/b8dbe70e2500", "author": "pulsebot@bots.tld", "id": 11436573, "time": "2016-05-25T17:12:54Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/73cf91bc2b67", "author": "pulsebot@bots.tld", "id": 11436608, "time": "2016-05-25T17:30:18Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/701378e19df1\nhttps://hg.mozilla.org/mozilla-central/rev/faa07a14d470\nhttps://hg.mozilla.org/mozilla-central/rev/ee7ad0668921\nhttps://hg.mozilla.org/mozilla-central/rev/8fa9dceab5e6\nhttps://hg.mozilla.org/mozilla-central/rev/472fd2e0cf31", "author": "cbook@mozilla.com", "id": 11437105, "time": "2016-05-25T20:22:03Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/73cf91bc2b67", "author": "kwierso@gmail.com", "id": 11439073, "time": "2016-05-25T22:36:18Z"}], "cf_last_resolved": "2016-05-25T20:22:03Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2016-05-26T18:41:28Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [979730, 1275999], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript Engine", "votes": 0, "cf_status_firefox49": "fixed", "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla49", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "jdemooij@mozilla.com", "id": 375297, "name": "jdemooij@mozilla.com", "real_name": "Jan de Mooij [:jandem] (PTO Mar 8)"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "bill.mccloskey@gmail.com", "id": 389993, "name": "bill.mccloskey@gmail.com", "real_name": "Bill McCloskey [inactive unless it's an emergency] (:billm)"}, {"email": "bobbyholley@gmail.com", "id": 313730, "name": "bobbyholley@gmail.com", "real_name": "Bobby Holley (:bholley)"}, {"email": "bzbarsky@mit.edu", "id": 20209, "name": "bzbarsky@mit.edu", "real_name": "Boris Zbarsky [:bz] (no decent commit message means r-)"}, {"email": "jorendorff@mozilla.com", "id": 281791, "name": "jorendorff@mozilla.com", "real_name": "Jason Orendorff [:jorendorff]"}, {"email": "khuey@kylehuey.com", "id": 336670, "name": "khuey@kylehuey.com", "real_name": "Kyle Huey [:khuey] (Exited; not receiving bugmail, email if necessary)"}, {"email": "luke@mozilla.com", "id": 347312, "name": "luke@mozilla.com", "real_name": "Luke Wagner [:luke]"}, {"email": "shu@rfrn.org", "id": 381259, "name": "shu@rfrn.org", "real_name": "Shu-yu Guo [:shu]"}, {"email": "terrence.d.cole@gmail.com", "id": 231770, "name": "terrence.d.cole@gmail.com", "real_name": "Terrence Cole [:terrence]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "luke@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8754262, "added": "review?(luke@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-19T08:39:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8754266, "added": "review?(luke@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-19T09:01:40Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8754285, "added": "review?(luke@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-19T09:21:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8754288, "added": "review?(shu@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-19T09:31:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8754312, "added": "review?(shu@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-19T10:02:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8754262, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-19T16:02:54Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8754266, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-19T16:03:20Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8754285, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-19T16:05:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(shu@mozilla.com)", "attachment_id": 8754288, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-19T16:06:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8754288, "added": "review?(shu@mozilla.com)"}], "who": "luke@mozilla.com", "when": "2016-05-19T16:08:37Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(shu@mozilla.com)", "attachment_id": 8754288, "added": "review+"}], "who": "shu@rfrn.org", "when": "2016-05-19T21:16:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(shu@mozilla.com)", "attachment_id": 8754312, "added": "review+"}], "who": "shu@rfrn.org", "when": "2016-05-19T21:27:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jorendorff@mozilla.com"}], "who": "jorendorff@mozilla.com", "when": "2016-05-19T23:25:59Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(shu@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-20T08:54:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8754731, "added": "review?(jorendorff@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-20T09:16:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8754751, "added": "review?(luke@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-20T10:05:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8754777, "added": "review?(luke@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-20T11:09:54Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(luke@mozilla.com), needinfo?(bzbarsky@mit.edu)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-20T11:36:38Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jorendorff@mozilla.com)", "attachment_id": 8754731, "added": "review+"}], "who": "jorendorff@mozilla.com", "when": "2016-05-20T13:05:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bobbyholley@gmail.com"}, {"removed": "needinfo?(bzbarsky@mit.edu)", "field_name": "flagtypes.name", "added": "needinfo?(bobbyholley@gmail.com)"}], "who": "bzbarsky@mit.edu", "when": "2016-05-20T15:17:29Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8754751, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-20T16:28:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8754777, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-20T16:29:03Z"}, {"changes": [{"removed": "needinfo?(luke@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "luke@mozilla.com", "when": "2016-05-20T16:32:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "n.nethercote@gmail.com, wmccloskey@mozilla.com"}, {"removed": "needinfo?(bobbyholley@gmail.com)", "field_name": "flagtypes.name", "added": "needinfo?(wmccloskey@mozilla.com), needinfo?(n.nethercote@gmail.com)"}], "who": "bobbyholley@gmail.com", "when": "2016-05-20T17:07:42Z"}, {"changes": [{"removed": "needinfo?(wmccloskey@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "bill.mccloskey@gmail.com", "when": "2016-05-20T17:24:22Z"}, {"changes": [{"removed": "needinfo?(shu@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "shu@rfrn.org", "when": "2016-05-20T20:45:05Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8755003, "added": "review?(luke@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-20T20:47:18Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bzbarsky@mit.edu)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-20T21:22:46Z"}, {"changes": [{"removed": "needinfo?(n.nethercote@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "n.nethercote@gmail.com", "when": "2016-05-21T01:19:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "khuey@kylehuey.com"}, {"removed": "needinfo?(bzbarsky@mit.edu)", "field_name": "flagtypes.name", "added": "needinfo?(khuey@kylehuey.com)"}], "who": "bzbarsky@mit.edu", "when": "2016-05-21T01:38:54Z"}, {"changes": [{"removed": "n.nethercote@gmail.com", "field_name": "cc", "added": ""}], "who": "n.nethercote@gmail.com", "when": "2016-05-22T23:26:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8755294, "added": "review?(luke@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-23T07:06:08Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1274915"}], "who": "jdemooij@mozilla.com", "when": "2016-05-23T07:11:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8755003, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-23T13:53:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8755294, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-23T13:53:45Z"}, {"changes": [{"removed": "needinfo?(khuey@kylehuey.com)", "field_name": "flagtypes.name", "added": ""}], "who": "khuey@kylehuey.com", "when": "2016-05-23T14:44:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "terrence@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(terrence@mozilla.com)"}], "who": "bzbarsky@mit.edu", "when": "2016-05-23T15:24:37Z"}, {"changes": [{"removed": "needinfo?(terrence@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "terrence.d.cole@gmail.com", "when": "2016-05-24T00:34:57Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "leave-open"}], "who": "jdemooij@mozilla.com", "when": "2016-05-24T13:19:29Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8755860, "added": "review?(luke@mozilla.com)"}], "who": "jdemooij@mozilla.com", "when": "2016-05-24T20:46:46Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(luke@mozilla.com)", "attachment_id": 8755860, "added": "review+"}], "who": "luke@mozilla.com", "when": "2016-05-24T21:27:00Z"}, {"changes": [{"removed": "leave-open", "field_name": "keywords", "added": ""}], "who": "jdemooij@mozilla.com", "when": "2016-05-25T15:41:31Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla49"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-05-25 13:22:03"}, {"removed": "---", "field_name": "cf_status_firefox49", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2016-05-25T20:22:03Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1275999"}], "who": "bzbarsky@mit.edu", "when": "2016-05-26T18:41:28Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}