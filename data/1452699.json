{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "ckerschb@christophkerschbaumer.com", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "ckerschb@christophkerschbaumer.com", "id": 363267, "name": "ckerschb@christophkerschbaumer.com", "real_name": "Christoph Kerschbaumer [:ckerschb]"}, {"email": "dveditz@mozilla.com", "id": 1689, "name": "dveditz@mozilla.com", "real_name": "Daniel Veditz [:dveditz]"}, {"email": "valentin.gosu@gmail.com", "id": 415378, "name": "valentin.gosu@gmail.com", "real_name": "Valentin Gosu [:valentin]"}], "cf_last_resolved": "2018-04-17T09:57:31Z", "attachments": [{"creator": "francois@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-14T12:23:43Z", "type_id": 4, "creation_date": "2018-04-10T02:12:47Z", "id": 1741509, "setter": "valentin.gosu@gmail.com"}, {"status": "+", "name": "review", "modification_date": "2018-04-15T16:14:15Z", "type_id": 4, "creation_date": "2018-04-13T00:51:03Z", "id": 1743455, "setter": "ckerschb@christophkerschbaumer.com"}, {"status": "+", "name": "approval-mozilla-beta", "modification_date": "2018-04-19T12:42:49Z", "type_id": 721, "creation_date": "2018-04-17T20:48:25Z", "id": 1745243, "setter": "jcristau@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8966442}, {"creator": "francois@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-15T16:14:31Z", "type_id": 4, "creation_date": "2018-04-14T01:59:50Z", "id": 1744002, "setter": "ckerschb@christophkerschbaumer.com"}, {"status": "+", "name": "approval-mozilla-beta", "modification_date": "2018-04-19T12:42:56Z", "type_id": 721, "creation_date": "2018-04-17T20:49:13Z", "id": 1745244, "setter": "jcristau@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8967917}], "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 30, "comments": [{"text": "", "author": "ckerschb@christophkerschbaumer.com", "id": 13192642, "time": "2018-04-09T17:40:34Z"}, {"text": "I think it's best to add that pref here [1] to simply ignore the attribute.\n\n[1] https://dxr.mozilla.org/mozilla-central/source/netwerk/cookie/nsCookieService.cpp#3951-3955", "author": "ckerschb@christophkerschbaumer.com", "id": 13192648, "time": "2018-04-09T17:42:19Z"}, {"text": "Created attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nReview commit: https://reviewboard.mozilla.org/r/235144/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/235144/", "author": "francois@mozilla.com", "id": 13193840, "time": "2018-04-10T02:12:47Z"}, {"text": "The function that Christoph suggested, nsCookieService::ParseAttributes(), is a static function so we unfortunately can't use the same pref-caching mechanism as for the other prefs.\n\nI chose to put the pref-checking code there anyways though because:\n\n- Preventing the attribute from being parsed is the simplest way to make sure that none of the SameSite codepaths are ever executed.\n- We intend for this to be a temporary killswitch for 60/61. We'll remove it in 62.\n- The extra pref check only happens for sites that use SameSite and we don't believe there are many of those yet.", "author": "francois@mozilla.com", "id": 13193843, "time": "2018-04-10T02:19:22Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nhttps://reviewboard.mozilla.org/r/235144/#review240850\n\njust adding a drive by nit.\n\n::: netwerk/cookie/nsCookieService.cpp:3979\n(Diff revision 1)\n> +      bool sameSiteEnabled = false;\n> +      nsCOMPtr<nsIPrefBranch> prefs = do_GetService(NS_PREFSERVICE_CONTRACTID);\n> +      if (prefs &&\n> +          NS_SUCCEEDED(prefs->GetBoolPref(\"network.cookie.same-site.enabled\",\n> +                                          &sameSiteEnabled)) &&\n> +          sameSiteEnabled) {\n\ncookies are quite a hot code path and querying a pref is an expensive operation. I suggest we use some sort of singleton pattern to only query the pref once, something like:\n\nstatic bool sameSiteEnabled = false;\nstatic bool prefInitialized = false;\nif (!prefInitialized) {\n  nsCOMPtr<nsIPrefBranch> prefs =\n    do_GetService(NS_PREFSERVICE_CONTRACTID);\n  prefs->GetBoolPref(\"network.cookie.same-site.enabled\", &sameSiteEnabled);\n  prefInitialized = true;\n}\n\nif (sameSiteEnabled) {\n  bla\n}", "author": "ckerschb@christophkerschbaumer.com", "id": 13194057, "time": "2018-04-10T06:30:17Z"}, {"text": "(In reply to Christoph Kerschbaumer [:ckerschb] from comment #4)\n> > +          NS_SUCCEEDED(prefs->GetBoolPref(\"network.cookie.same-site.enabled\",\n> > +                                          &sameSiteEnabled)) &&\n> > +          sameSiteEnabled) {\n> \n> cookies are quite a hot code path and querying a pref is an expensive\n> operation. I suggest we use some sort of singleton pattern to only query the\n> pref once, something like:\n> \n> static bool sameSiteEnabled = false;\n> static bool prefInitialized = false;\n> if (!prefInitialized) {\n>   nsCOMPtr<nsIPrefBranch> prefs =\n>     do_GetService(NS_PREFSERVICE_CONTRACTID);\n>   prefs->GetBoolPref(\"network.cookie.same-site.enabled\", &sameSiteEnabled);\n>   prefInitialized = true;\n> }\n\nPreferences::AddBoolVarCache is even better, as you don't have to do all the dirty work yourself :)", "author": "valentin.gosu@gmail.com", "id": 13194430, "time": "2018-04-10T10:27:33Z"}, {"text": "(In reply to Valentin Gosu [:valentin] from comment #5)\n> Preferences::AddBoolVarCache is even better, as you don't have to do all the\n> dirty work yourself :)\n\nIndeed. In fact it needs to be AddBoolVarCache which gets notified in case the pref gets updated!", "author": "ckerschb@christophkerschbaumer.com", "id": 13194446, "time": "2018-04-10T10:41:47Z"}, {"text": "You've put the check in the attribute parsing code, but that code landed in 58 and is already on the 60 branch. If we're worried about uplifting then shouldn't the pref control the new behavior of whether we _send_ the cookie?", "author": "dveditz@mozilla.com", "id": 13195088, "time": "2018-04-10T15:04:24Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/235144/diff/1-2/", "author": "francois@mozilla.com", "id": 13196026, "time": "2018-04-10T20:23:20Z"}, {"text": "(In reply to Daniel Veditz [:dveditz] from comment #7)\n> You've put the check in the attribute parsing code, but that code landed in\n> 58 and is already on the 60 branch. If we're worried about uplifting then\n> shouldn't the pref control the new behavior of whether we _send_ the cookie?\n\nYou're right, we don't really need to disable the parsing code which has already been in the platform for a while. I chose to go with Christoph's approach because it seemed like the simplest way to ensure we don't treat SameSite cookies differently in any way. I also don't see any downsides in disabling the parsing of the cookie attribute.", "author": "francois@mozilla.com", "id": 13196179, "time": "2018-04-10T21:19:22Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nhttps://reviewboard.mozilla.org/r/235144/#review241722\n\nr=me with a couple minor nits.\n\n::: netwerk/cookie/nsCookieService.cpp:79\n(Diff revision 2)\n>   * nsCookieService impl:\n>   * useful types & constants\n>   ******************************************************************************/\n>  \n>  static StaticRefPtr<nsCookieService> gCookieService;\n> +bool nsCookieService::gSameSiteEnabled = false;\n\nnit: I think the naming convention is sSameSiteEnabled if it's a static on the cookieService, or gSameSiteEnabled if it's a \"global\" variable.\n\n::: netwerk/cookie/nsCookieService.cpp:3977\n(Diff revision 2)\n>      // just set the boolean\n>      else if (tokenString.LowerCaseEqualsLiteral(kHttpOnly))\n>        aCookieAttributes.isHttpOnly = true;\n>  \n>      else if (tokenString.LowerCaseEqualsLiteral(kSameSite)) {\n> +      if (gSameSiteEnabled) {\n\nInstead of the indentation level, you could put gSameSiteEnabled in the condition above:\nif (tokenString.Equals(..) && gSameSiteEnabled)", "author": "valentin.gosu@gmail.com", "id": 13200317, "time": "2018-04-12T09:34:08Z"}, {"text": "(In reply to Daniel Veditz [:dveditz] from comment #7)\n> You've put the check in the attribute parsing code, but that code landed in\n> 58 and is already on the 60 branch. If we're worried about uplifting then\n> shouldn't the pref control the new behavior of whether we _send_ the cookie?\n\nI guess Dan is right. Think about the following scenario, someone visits a page which sets a same site cookie using FF59. The cookie gets set, but there is no enforcement of same-site cookies within FF59. Now that user updates to Firefox 60 and disables the pref.\n\nDisabling the pref now means the no *new* same-site cookies can bet set, right? But the once that are already set are enforced in the backend code, right? Given that I think it might make more sense to go with Dan's approach and actually disable the the 'enforcement' code.\n\nProbably worth rebasing after Bug 1452496 has landed.", "author": "ckerschb@christophkerschbaumer.com", "id": 13200495, "time": "2018-04-12T11:24:19Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/235144/diff/2-3/", "author": "francois@mozilla.com", "id": 13202693, "time": "2018-04-13T00:51:03Z"}, {"text": "(In reply to Fran\u00e7ois Marier [:francois] from comment #9)\n> I also don't see any downsides in disabling the parsing of the cookie attribute.\n\nThere is one downside, which I suppose is what Dan had in mind: since the parsing has been enabled in many releases, existing profiles likely already have cookies with the SameSite attribute stored. If we only disable the parsing of attributes, we prevent new cookies from being treated in the same-site way, but we let existing cookies go through the same-site restrictions. \n\nThis latest revision follows the approach suggested by Dan in comment 7.\n\nIt turns out we can't rely on nsCookieService::Init() being called before nsCookieService::ParseAttributes(), therefore we can't stash the AddBoolVarCache() call there and need to resort to the local static variable trick that Christoph originally suggested in comment 4.", "author": "francois@mozilla.com", "id": 13202703, "time": "2018-04-13T00:56:01Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nFlagging Valentin again since the patch has changed quite a bit since the last r+.", "author": "francois@mozilla.com", "id": 13202705, "time": "2018-04-13T00:56:49Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nhttps://reviewboard.mozilla.org/r/235144/#review242134\n\nYeah, having the pref there correctly guards the enforcement of same-site cookies. r=me\n\n::: netwerk/cookie/nsCookieService.cpp:3080\n(Diff revision 3)\n>        (aCookie->IsDomain() && StringEndsWith(aHost, aCookie->Host()));\n>  }\n>  \n>  bool\n> +nsCookieService::IsSameSiteEnabled()\n> +{\n\nI personally prefer the static variable also to be in the static function, but that's just my personal preference. I leave that up to you!", "author": "ckerschb@christophkerschbaumer.com", "id": 13203054, "time": "2018-04-13T06:36:35Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nhttps://reviewboard.mozilla.org/r/235144/#review242162", "author": "valentin.gosu@gmail.com", "id": 13203246, "time": "2018-04-13T08:55:48Z"}, {"text": "Created attachment 8967917\nBug 1452699 - Work-around caching issues in test_same_site_cookies_*.\n\nReview commit: https://reviewboard.mozilla.org/r/236614/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/236614/", "author": "francois@mozilla.com", "id": 13205530, "time": "2018-04-14T01:59:50Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/235144/diff/3-4/", "author": "francois@mozilla.com", "id": 13205531, "time": "2018-04-14T01:59:50Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nAfter going through some manual tests, I found that I also needed to add a check here: https://searchfox.org/mozilla-central/rev/fca4426325624fecbd493c31389721513fc49fef/netwerk/cookie/nsCookieService.cpp#3472-3481\n\nI extended our automated tests to cover both the same-site.enabled = true and same-site.enabled = false cases.", "author": "francois@mozilla.com", "id": 13205532, "time": "2018-04-14T02:03:31Z"}, {"text": "The first patch is a work-around for some caching issues I discovered while extending the tests. I noticed that the following would fail in test_same_site_cross_origin_context.html:\n\nvar tests = [\n  {\n    description: \"regular cookie in cross origin context\",\n    imgSRC: CROSS_ORIGIN + PATH + \"?setRegularCookie\",\n    frameSRC: CROSS_ORIGIN + PATH + \"?loadFrame\",\n    result: \"myKey=regularCookie\",\n  },\n  {\n    description: \"regular cookie in cross origin context\",\n    imgSRC: CROSS_ORIGIN + PATH + \"?setRegularCookie\",\n    frameSRC: CROSS_ORIGIN + PATH + \"?loadFrame\",\n    result: \"myKey=regularCookie\",\n  },\n];\n\n(i.e. running the same test twice)\n\nAs far as I can tell, the cookie does get cleared properly between runs, but the second attempt to set a cookie will always fail. This means that the test would pass regardless of whether or not the implementation works.\n\nI spent several hours trying to get to the bottom of this, but in the end I gave up and found a work-around which works reliably.", "author": "francois@mozilla.com", "id": 13205535, "time": "2018-04-14T02:06:15Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nhttps://reviewboard.mozilla.org/r/235144/#review242420\n\nLooks good. Thanks for the tests!", "author": "valentin.gosu@gmail.com", "id": 13205795, "time": "2018-04-14T12:23:43Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nhttps://reviewboard.mozilla.org/r/235144/#review242472\n\nOk, I am fine with this!", "author": "ckerschb@christophkerschbaumer.com", "id": 13206814, "time": "2018-04-15T16:14:15Z"}, {"text": "Comment on attachment 8967917\nBug 1452699 - Work-around caching issues in test_same_site_cookies_*.\n\nhttps://reviewboard.mozilla.org/r/236614/#review242474\n\nSame here, I am fine with this. Thanks!", "author": "ckerschb@christophkerschbaumer.com", "id": 13206815, "time": "2018-04-15T16:14:31Z"}, {"text": "Pushed by fmarier@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/a22a88728d52\nWork-around caching issues in test_same_site_cookies_*. r=ckerschb\nhttps://hg.mozilla.org/integration/autoland/rev/38a419def0a7\nAdd a temporary pref to disable same-site cookies. r=ckerschb,valentin", "author": "pulsebot@bots.tld", "id": 13210293, "time": "2018-04-16T17:32:07Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/a22a88728d52\nhttps://hg.mozilla.org/mozilla-central/rev/38a419def0a7", "author": "cbrindusan@mozilla.com", "id": 13211921, "time": "2018-04-17T09:57:31Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nApproval Request Comment\n[Feature/Bug causing the regression]: bug 795346\n[User impact if declined]: No way to disable same-site cookies if our implementation causes problems.\n[Is this code covered by automated tests?]: Yes, see second patch.\n[Has the fix been verified in Nightly?]: Yes, the automated tests pass.\n[Needs manual test from QE? If yes, steps to reproduce]: No.\n[List of other uplifts needed for the feature/fix]: None.\n[Is the change risky?]: No\n[Why is the change risky/not risky?]: It's actually reducing risk by giving us a way to turn off the feature on release.\n[String changes made/needed]: None", "author": "francois@mozilla.com", "id": 13213640, "time": "2018-04-17T20:48:25Z"}, {"text": "Comment on attachment 8967917\nBug 1452699 - Work-around caching issues in test_same_site_cookies_*.\n\nApproval Request Comment\n\nSee comment 26. This needs to be applied first.", "author": "francois@mozilla.com", "id": 13213643, "time": "2018-04-17T20:49:13Z"}, {"text": "Comment on attachment 8966442\nBug 1452699 - Add a temporary pref to disable same-site cookies.\n\nsounds good, approved for 60.0b14", "author": "jcristau@mozilla.com", "id": 13218287, "time": "2018-04-19T12:42:49Z"}, {"text": "https://hg.mozilla.org/releases/mozilla-beta/rev/3d169f37e563\nhttps://hg.mozilla.org/releases/mozilla-beta/rev/daf993d98606", "author": "aryx.bugmail@gmx-topmail.de", "id": 13218943, "time": "2018-04-19T16:08:34Z"}], "id": 1452699, "priority": "P1", "cc": ["ckerschb@christophkerschbaumer.com", "dveditz@mozilla.com", "valentin.gosu@gmail.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [795346], "qa_contact": "", "creation_time": "2018-04-09T17:40:34Z", "cf_status_firefox_esr52": "---", "component": "Networking: Cookies", "assigned_to_detail": {"email": "francois@mozilla.com", "id": 303427, "name": "francois@mozilla.com", "real_name": "Fran\u00e7ois Marier [:francois]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "fixed", "cf_status_firefox60": "fixed", "target_milestone": "mozilla61", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "ckerschb@christophkerschbaumer.com", "id": 363267, "name": "ckerschb@christophkerschbaumer.com", "real_name": "Christoph Kerschbaumer [:ckerschb]"}, "whiteboard": "[necko-triaged]", "mentors": [], "summary": "Add pref to disable same-site cookies", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [{"status": "+", "name": "in-testsuite", "modification_date": "2018-04-19T18:36:38Z", "type_id": 37, "creation_date": "2018-04-19T18:36:38Z", "id": 1746483, "setter": "aryx.bugmail@gmx-topmail.de"}], "last_change_time": "2018-04-19T18:36:38Z", "assigned_to": "francois@mozilla.com", "is_open": false, "history": [{"changes": [{"removed": "--", "field_name": "priority", "added": "P1"}, {"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "DOM: Security", "field_name": "component", "added": "Networking: Cookies"}, {"removed": "", "field_name": "blocks", "added": "795346"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "francois@mozilla.com"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2018-04-09T17:41:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ckerschb@christophkerschbaumer.com"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2018-04-09T17:42:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dveditz@mozilla.com"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2018-04-09T18:45:46Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966442, "added": "review?(valentin.gosu@gmail.com)"}, {"removed": "", "field_name": "cc", "added": "valentin.gosu@gmail.com"}], "who": "francois@mozilla.com", "when": "2018-04-10T02:12:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(valentin.gosu@gmail.com)", "attachment_id": 8966442, "added": "review+"}], "who": "valentin.gosu@gmail.com", "when": "2018-04-12T09:34:08Z"}, {"changes": [{"removed": "", "field_name": "whiteboard", "added": "[necko-triaged]"}], "who": "hurley@mozilla.com", "when": "2018-04-12T18:54:34Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966442, "added": "review?(ckerschb@christophkerschbaumer.com)"}], "who": "francois@mozilla.com", "when": "2018-04-13T00:51:03Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8966442, "added": "review?(valentin.gosu@gmail.com)"}], "who": "francois@mozilla.com", "when": "2018-04-13T00:56:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8966442, "added": "review+"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2018-04-13T06:36:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(valentin.gosu@gmail.com)", "attachment_id": 8966442, "added": "review+"}], "who": "valentin.gosu@gmail.com", "when": "2018-04-13T08:55:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967917, "added": "review?(ckerschb@christophkerschbaumer.com)"}], "who": "francois@mozilla.com", "when": "2018-04-14T01:59:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+, review+", "attachment_id": 8966442, "added": "review?(valentin.gosu@gmail.com), review?(ckerschb@christophkerschbaumer.com)"}], "who": "francois@mozilla.com", "when": "2018-04-14T02:03:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(valentin.gosu@gmail.com)", "attachment_id": 8966442, "added": "review+"}], "who": "valentin.gosu@gmail.com", "when": "2018-04-14T12:23:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8966442, "added": "review+"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2018-04-15T16:14:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(ckerschb@christophkerschbaumer.com)", "attachment_id": 8967917, "added": "review+"}], "who": "ckerschb@christophkerschbaumer.com", "when": "2018-04-15T16:14:31Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-04-17 09:57:31"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "cbrindusan@mozilla.com", "when": "2018-04-17T09:57:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966442, "added": "approval-mozilla-beta?"}], "who": "francois@mozilla.com", "when": "2018-04-17T20:48:25Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967917, "added": "approval-mozilla-beta?"}], "who": "francois@mozilla.com", "when": "2018-04-17T20:49:13Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "approval-mozilla-beta?", "attachment_id": 8966442, "added": "approval-mozilla-beta+"}], "who": "jcristau@mozilla.com", "when": "2018-04-19T12:42:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "approval-mozilla-beta?", "attachment_id": 8967917, "added": "approval-mozilla-beta+"}], "who": "jcristau@mozilla.com", "when": "2018-04-19T12:42:56Z"}, {"changes": [{"removed": "---", "field_name": "cf_status_firefox60", "added": "fixed"}], "who": "aryx.bugmail@gmx-topmail.de", "when": "2018-04-19T16:08:34Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "in-testsuite+"}], "who": "aryx.bugmail@gmx-topmail.de", "when": "2018-04-19T18:36:38Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}