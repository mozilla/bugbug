{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "n.nethercote@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2014-09-30T00:31:10Z", "type_id": 4, "creation_date": "2014-09-29T09:24:22Z", "id": 989999, "setter": "mh+mozilla@glandium.org"}], "content_type": "text/plain", "id": 8496740}], "classification": "Components", "creator": "n.nethercote@gmail.com", "cc": ["continuation@gmail.com", "erahm@mozilla.com", "mh+mozilla@glandium.org"], "depends_on": [1044709], "creation_time": "2014-09-29T00:25:35Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "x86_64", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Add a --fix-stacks option to dmd.py", "id": 1074008, "assigned_to_detail": {"email": "n.nethercote@gmail.com", "id": 334849, "name": "n.nethercote@gmail.com", "real_name": "Nicholas Nethercote [:njn]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "n.nethercote@gmail.com", "comment_count": 11, "comments": [{"text": "After bug 1044709 converts DMD to produce JSON output, on Linux and Mac you'll have to run the appropriate fix*.py script *and* dmd.py to get nice output, which is a pain.\n\nMy plan is to add a --fix-stacks option to dmd.py that would cause the JSON to be fixed in-place. (If the output had already been fixed, this would have no effect.)", "author": "n.nethercote@gmail.com", "id": 9371783, "time": "2014-09-29T00:25:35Z"}, {"text": "Created attachment 8496740\nAdd a --fix-stacks option to dmd.py", "author": "n.nethercote@gmail.com", "id": 9372852, "time": "2014-09-29T09:24:22Z"}, {"text": "Comment on attachment 8496740\nAdd a --fix-stacks option to dmd.py\n\nReview of attachment 8496740:\n-----------------------------------------------------------------\n\n::: memory/replace/dmd/dmd.py\n@@ +173,5 @@\n>  \n> +# Fix stacks if necessary: first write the output to a tempfile, then replace\n> +# the original file with it.\n> +def maybeFixStackTraces():\n> +    if args.fix_stacks:\n\nThat should be tested outside (and the function renamed not to start with maybe as a consequence)\n\n@@ +194,5 @@\n> +        # Fix stacks, writing output to a temporary file, and then overwrite\n> +        # the original file.\n> +        with tempfile.NamedTemporaryFile(delete=False) as tmp:\n> +            for line in args.input_file:\n> +                tmp.write(fixModule.fixSymbols(line))\n\nSeems to me you intended to write tmp.write(fix(line)) but forgot.", "author": "mh+mozilla@glandium.org", "id": 9377959, "time": "2014-09-30T00:31:10Z"}, {"text": "Comment on attachment 8496740\nAdd a --fix-stacks option to dmd.py\n\nReview of attachment 8496740:\n-----------------------------------------------------------------\n\n::: memory/replace/dmd/dmd.py\n@@ +173,5 @@\n>  \n> +# Fix stacks if necessary: first write the output to a tempfile, then replace\n> +# the original file with it.\n> +def maybeFixStackTraces():\n> +    if args.fix_stacks:\n\nI did it that way to mirror |maybeTrimStackTraces|, which involves two options and so can't be done that way.", "author": "n.nethercote@gmail.com", "id": 9378004, "time": "2014-09-30T00:41:05Z"}, {"text": "erahm and mccr8 suggested that the JSON include a property that describes whether stacks have been fixed. It's a nice idea but there's a problem: B2G. The B2G stack fixing is done by get_about_memory.py independently of dmd.py. So it would be easy to end up with a file that claims to not have been fixed but actually has been fixed. All of which makes me nervous.", "author": "n.nethercote@gmail.com", "id": 9378734, "time": "2014-09-30T05:21:52Z"}, {"text": "Comment on attachment 8496740\nAdd a --fix-stacks option to dmd.py\n\nReview of attachment 8496740:\n-----------------------------------------------------------------\n\n::: memory/replace/dmd/dmd.py\n@@ +182,5 @@\n> +        # XXX: should incorporate fix_stack_using_bpsyms.py here as well, like\n> +        #      in testing/mochitests/runtests.py\n> +        sysname = platform.system()\n> +        if sysname == 'Linux':\n> +            import fix_linux_stack as fixModule\n\nI need to get fix_stack_using_bpsyms.py working in order to make the xpcshell test (bug 1073312) work on TBPL. And that requires knowing the symbolsPath. glandium, do you know how I can get the symbolsPath that in this script?\n\nLooking around, it looks like I can get it something like this:\n\n> options.symbolsPath = os.path.join(distdir, 'crashreporter-symbols')\n\nand |distdir| like this:\n\n> distdir = os.path.join(topobjdir, 'dist')\n\nbut I don't know how to get topobjdir in this script. Or maybe all that is totally heading in the wrong direction, I don't know.", "author": "n.nethercote@gmail.com", "id": 9382983, "time": "2014-09-30T20:47:06Z"}, {"text": "> I need to get fix_stack_using_bpsyms.py working in order to make the\n> xpcshell test (bug 1073312) work on TBPL. And that requires knowing the\n> symbolsPath.\n\nAnother possibility: the xpcshell test harness knows the symbolsPath. It already sets a couple of environment variables ($DMD, $PYTHON) to pass information to DMD's xpcshell test. It could set another one to pass the symbolsPath.", "author": "n.nethercote@gmail.com", "id": 9383220, "time": "2014-09-30T21:29:07Z"}, {"text": "Comment 6 is probably better than munging paths in crazy ways, especially when the test environment on local builds and tbpl builds is so completely different.", "author": "mh+mozilla@glandium.org", "id": 9383354, "time": "2014-09-30T21:58:19Z"}, {"text": "(In reply to Nicholas Nethercote [:njn] from comment #4)\n> erahm and mccr8 suggested that the JSON include a property that describes\n> whether stacks have been fixed. It's a nice idea but there's a problem: B2G.\n> The B2G stack fixing is done by get_about_memory.py independently of dmd.py.\n> So it would be easy to end up with a file that claims to not have been fixed\n> but actually has been fixed. All of which makes me nervous.\n\nBut I will make stack-fixing in dmd.py the default behaviour.", "author": "n.nethercote@gmail.com", "id": 9391871, "time": "2014-10-02T04:12:07Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/2b73787681bd", "author": "n.nethercote@gmail.com", "id": 9404926, "time": "2014-10-06T01:48:00Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/2b73787681bd", "author": "cbook@mozilla.com", "id": 9406669, "time": "2014-10-06T13:48:45Z"}], "cf_last_resolved": "2014-10-06T13:48:45Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2014-10-06T13:48:45Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [1073312], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "DMD", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla35", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "n.nethercote@gmail.com", "id": 334849, "name": "n.nethercote@gmail.com", "real_name": "Nicholas Nethercote [:njn]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, {"email": "erahm@mozilla.com", "id": 496127, "name": "erahm@mozilla.com", "real_name": "Eric Rahm [:erahm] (Away until 3/19) (please no mozreview requests)"}, {"email": "mh+mozilla@glandium.org", "id": 47192, "name": "mh+mozilla@glandium.org", "real_name": "Mike Hommey [:glandium]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "blocks", "added": "1073312"}, {"removed": "", "field_name": "depends_on", "added": "1044709"}], "who": "n.nethercote@gmail.com", "when": "2014-09-29T05:41:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8496740, "added": "review?(mh+mozilla@glandium.org)"}, {"removed": "", "field_name": "cc", "added": "mh+mozilla@glandium.org"}], "who": "n.nethercote@gmail.com", "when": "2014-09-29T09:24:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mh+mozilla@glandium.org)", "attachment_id": 8496740, "added": "review+"}], "who": "mh+mozilla@glandium.org", "when": "2014-09-30T00:31:10Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mh+mozilla@glandium.org)"}], "who": "n.nethercote@gmail.com", "when": "2014-09-30T20:47:24Z"}, {"changes": [{"removed": "needinfo?(mh+mozilla@glandium.org)", "field_name": "flagtypes.name", "added": ""}], "who": "mh+mozilla@glandium.org", "when": "2014-09-30T21:58:19Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla35"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2014-10-06 06:48:45"}], "who": "cbook@mozilla.com", "when": "2014-10-06T13:48:45Z"}], "resolution": "FIXED", "op_sys": "Linux", "cf_fx_points": "---", "cf_blocking_fennec": "---"}