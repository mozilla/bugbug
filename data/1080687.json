{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "jmathies@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/plain", "id": 8623109}, {"creator": "jmathies@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8623120}, {"creator": "jmathies@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8623127}, {"creator": "jmathies@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8623294}, {"creator": "jmathies@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-06-24T19:37:02Z", "type_id": 4, "creation_date": "2015-06-16T21:45:37Z", "id": 1192980, "setter": "bent.mozilla@gmail.com"}], "content_type": "text/plain", "id": 8623302}, {"creator": "jmathies@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8628496}, {"creator": "jmathies@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8631664}, {"creator": "jmathies@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8634330}, {"creator": "jmathies@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-07-16T09:53:11Z", "type_id": 4, "creation_date": "2015-07-15T20:19:41Z", "id": 1210804, "setter": "gkrizsanits@mozilla.com"}], "content_type": "text/plain", "id": 8634332}], "classification": "Components", "creator": "luke@mozilla.com", "cc": ["aenosedney@gmail.com", "bent.mozilla@gmail.com", "brad@lassey.us", "gkrizsanits@mozilla.com", "jmathies@mozilla.com", "josh@joshmatthews.net", "luke@mozilla.com", "malix0@gmail.com", "margaret.leibovic@gmail.com", "smacleod@mozilla.com", "ttaubert@mozilla.com", "vseerror@lehigh.edu"], "depends_on": [], "creation_time": "2014-10-09T16:54:55Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": ["crash"], "cf_tracking_e10s": "m7+", "summary": "[e10s] Tabs appear to crash during system shutdown", "id": 1080687, "assigned_to_detail": {"email": "jmathies@mozilla.com", "id": 279663, "name": "jmathies@mozilla.com", "real_name": "Jim Mathies [:jimm]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "jmathies@mozilla.com", "comment_count": 50, "comments": [{"text": "When I shut down Windows today with an e10s Nightly running, Firefox showed the crashed tab page for a few seconds before the Firefox window closed.  I assume this is the OS killing the content process before the parent process.  I don't know how shutdown works on Windows, but I'm guessing there are some notifications we could listen to so that we can shutdown more gracefully in a way that doesn't involve showing a crashed tab.", "author": "luke@mozilla.com", "id": 9426445, "time": "2014-10-09T16:54:55Z"}, {"text": "Mossop had an interesting hypothesis that I wanted to get down:\n\nThere have been a few isolated reports of folks losing partial or all tab state after a restart. :margaret, for example, described having only a single tab having its state restored after restarting to apply an update on Nightly.\n\nWhen SessionStore notices that the application is quitting, it flushes the state of all open windows, which involves us sending CPOW messages down to the child in order to synchronously grab tab state. Suppose we have many tabs open - that's one (unsafe) CPOW message for each tab, followed by a number of messages coming up from the child to the parent to supply it with state information.\n\nI wonder if perhaps the crash that people were seeing as reported in comment 0 are related to what margaret and others are experiencing - if the content process crashes or is killed before the tab state can be flushed, attempting to manipulate a CPOW for a process that's now gone is going to throw, and I don't think SessionStore is prepared to deal with that. That might account for the missing session data on restart.\n\nDoes that sound plausible, smacleod?", "author": "mconley@mozilla.com", "id": 9970756, "time": "2015-02-28T23:09:35Z"}, {"text": "I would have thought we would be resistant to this, but I could be totally wrong. Tim what do you think?", "author": "smacleod@mozilla.com", "id": 10017562, "time": "2015-03-11T21:26:48Z"}, {"text": "So, this actually happened to me today, and I think I've got a better sense of what was happening.\n\nI don't think the content process was _hung_, but it definitely wasn't showing me anything but spinners. Looking at Activity Monitor though, it looked like it was still moving and wasn't stuck.\n\nI took a process trace, but like a fool, I accidentally closed and lost it. I remember, however, that the content process seemed to be executing some JS off of a timer at the time I sampled it.\n\nThen I quit in the parent, restarted, and all of my tabs were blank. It's almost as if we completely lost contact with the child even though it was still running.", "author": "mconley@mozilla.com", "id": 10017605, "time": "2015-03-11T21:33:46Z"}, {"text": "I also thought we're resistant to things like that but looks like we are not. Corrupt session files seem to be under control but not data corruption (or loss of data) before we write to disk. It would be great if we can find a way to reproduce this, sessionstore doesn't seem to think anything went wrong.\n\nIn the case as described above we'd probably be better with just not writing to disk at all and just restore the state from ~30s ago on the next startup, and handle it as a crash. I have no good explanation why tabs would go blank if we collected state before successfully...", "author": "ttaubert@mozilla.com", "id": 10039385, "time": "2015-03-17T11:57:45Z"}, {"text": "Luke do you still see this? I'd be especially interested if you see it after bug 1109875", "author": "brad@lassey.us", "id": 10233934, "time": "2015-05-05T20:35:32Z"}, {"text": "I'm afraid I am able to reproduce one time out of two tries.  When it reproduced, I had 3 tabs open.  If it helps, this was on Win7 on a machine with several cores.", "author": "luke@mozilla.com", "id": 10235420, "time": "2015-05-06T03:03:32Z"}, {"text": "Do you have any unsubmitted crash reports in about:crashes?", "author": "brad@lassey.us", "id": 10236751, "time": "2015-05-06T12:19:04Z"}, {"text": "I don't (there isn't much time between the sad tabs and then FF and then Windows shutting down).", "author": "luke@mozilla.com", "id": 10236982, "time": "2015-05-06T13:39:16Z"}, {"text": "What's happening here is that Windows shuts down the child processes first since they do not have top level windows [1]. We interpret this as an abnormal shutdown and briefly show the crashed tabs page while the browser works on shutting itself down. We hacked around this years ago for single process [2] but I guess we never dealt with this in content processes.\n\n[1] https://msdn.microsoft.com/en-us/library/ms700677(v=vs.85).aspx\n[2] http://mxr.mozilla.org/mozilla-central/source/widget/windows/nsWindow.cpp#4523", "author": "jmathies@mozilla.com", "id": 10371125, "time": "2015-06-10T19:02:29Z"}, {"text": "Hmm, I was hoping WM_QUERYENDSESSION hit the browser before the content children get killed, but this isn't the case on my win7 system. Which means we can't trap this in the parent. Maybe there's some way to pick up on this in the child, maybe through a hidden window or something.", "author": "jmathies@mozilla.com", "id": 10371635, "time": "2015-06-10T20:26:09Z"}, {"text": "Let me get this right, so tabs are actually lost when this crash occurs, correct? This is data-loss, correct? So why was the severity moved from critical to normal? Data loss is above critical in my view.\n\nAlso, consider this: Firefox's built-in session restore would surely have some sort of code stating that:\n~if tabcount X seconds (call it 30 second, whatever) before browser closing and/or crashing is greater than [Y significant amount]\n~then restore tabs that were open 30 seconds before closing/crashing\n\nFor a person, it's ridiculously obvious that if you had 120 tabs open 30 seconds before browser crash/close, and suddenly when you re-open the browser, you now have only 1 tab, that something has gone horribly wrong!\n\nSo how can the session restore code not see this?", "author": "aenosedney@gmail.com", "id": 10385535, "time": "2015-06-13T18:36:21Z"}, {"text": "Created attachment 8623109\nholdupshutdown.cpp\n\nUtility for testing. Running this is the background will hold up a shutdown order which you can then cancel using the overlay Windows throws up. Usually fx will exit during this, although it can take a few tries. Note this will also shut down other apps on your system like your irc client.", "author": "jmathies@mozilla.com", "id": 10394880, "time": "2015-06-16T16:06:38Z"}, {"text": "(In reply to Aeed from comment #11)\n> Let me get this right, so tabs are actually lost when this crash occurs,\n> correct? This is data-loss, correct? So why was the severity moved from\n> critical to normal? Data loss is above critical in my view.\n\nBecause I hate bright red bug listings in my assigned bug lists. :)", "author": "jmathies@mozilla.com", "id": 10394913, "time": "2015-06-16T16:19:17Z"}, {"text": "Created attachment 8623120\npatch v.1\n\nThis attempts to work around this in the following manner:\n\n1) child process listens for an early shutdown notification and forwards it to the parent.\n2) the child will then try to hold the Windows notification thread for as long as it can.\n3) The chrome process in response initiates a forced shutdown before the content processes go away.", "author": "jmathies@mozilla.com", "id": 10394987, "time": "2015-06-16T16:28:50Z"}, {"text": "Created attachment 8623127\npatch v.1\n\n- minus all the debug code.", "author": "jmathies@mozilla.com", "id": 10395028, "time": "2015-06-16T16:41:17Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=20b748e4cb92", "author": "jmathies@mozilla.com", "id": 10395038, "time": "2015-06-16T16:45:20Z"}, {"text": "Created attachment 8623294\npatch v.2\n\n- fixes xp run issues, GetThreadId was only available on Vista and up.", "author": "jmathies@mozilla.com", "id": 10396507, "time": "2015-06-16T21:27:31Z"}, {"text": "Comment on attachment 8623294\npatch v.2\n\nBen, can't really think of anyone else who would know this stuff. Feel free to reassign if you want. This is straight win32 goodness, should be a fun review!", "author": "jmathies@mozilla.com", "id": 10396512, "time": "2015-06-16T21:29:05Z"}, {"text": "Created attachment 8623302\npatch v.2\n\n- whitespace and some comment nits fixed", "author": "jmathies@mozilla.com", "id": 10396578, "time": "2015-06-16T21:45:37Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=e0df4a755478", "author": "jmathies@mozilla.com", "id": 10396601, "time": "2015-06-16T21:51:06Z"}, {"text": "(In reply to Jim Mathies [:jimm] from comment #13)\n> (In reply to Aeed from comment #11)\n> > Let me get this right, so tabs are actually lost when this crash occurs,\n> > correct? This is data-loss, correct? So why was the severity moved from\n> > critical to normal? Data loss is above critical in my view.\n> \n> Because I hate bright red bug listings in my assigned bug lists. :)\n\nYou don't think that a user who may have just lost TWO HUNDRED TABS worth of data would be a tad more pissed off than you would be at seeing a bright red bug listing? (not me this time, I've learned the hard way that Firefox will probably *never* be able to 100% guarantee zero tab loss upon browser crash and I've had the 'Save My Tabs' extension running for a long time now as a backup solution - but most people won't use something like this)", "author": "aenosedney@gmail.com", "id": 10401210, "time": "2015-06-17T18:54:55Z"}, {"text": "Comment on attachment 8623302\npatch v.2\n\nReview of attachment 8623302:\n-----------------------------------------------------------------\n\nHrm, I haven't looked too carefully at the windows-specific parts of this yet, but the general approach in terms of process separation worries me. It makes a code path whereby a child process can take down the parent process very quickly. Wouldn't it be better to simply have an async message sent to the parent that simply says \"I'm about to be killed by the OS, don't worry if I suddenly die\"? Then the parent would eventually receive the same notification from the OS and shut down anything that hadn't gone away already?", "author": "bent.mozilla@gmail.com", "id": 10414965, "time": "2015-06-22T22:00:53Z"}, {"text": "(In reply to Ben Turner [:bent] (use the needinfo flag!) from comment #22)\n> Comment on attachment 8623302\n> patch v.2\n> \n> Review of attachment 8623302:\n> -----------------------------------------------------------------\n> \n> Hrm, I haven't looked too carefully at the windows-specific parts of this\n> yet, but the general approach in terms of process separation worries me. It\n> makes a code path whereby a child process can take down the parent process\n> very quickly. Wouldn't it be better to simply have an async message sent to\n> the parent that simply says \"I'm about to be killed by the OS, don't worry\n> if I suddenly die\"? Then the parent would eventually receive the same\n> notification from the OS and shut down anything that hadn't gone away\n> already?\n\nMaybe. I'd need to solve a session store problem, we lose tab state if the child is gone by the time the browser shuts down. There may be other backend state things that need to get cleaned up as well when we don't shut down properly. Also I don't think these notification messages can be async since Windows is very aggressive in shutting down the child. I can put this on the back burner and look at alternatives next week if you like.", "author": "jmathies@mozilla.com", "id": 10418308, "time": "2015-06-24T13:45:10Z"}, {"text": "Can we synchronously collect and send the session store data from child->parent when the child detects shutdown? That way the parent doesn't have to ask the child for anything.", "author": "bent.mozilla@gmail.com", "id": 10418812, "time": "2015-06-24T16:54:22Z"}, {"text": "We currently listen for the frame loader's \"unload\" event, collect data synchronously and send an async message to the parent. Is the async message the problem here in case of a child shutting down?", "author": "ttaubert@mozilla.com", "id": 10418857, "time": "2015-06-24T17:07:05Z"}, {"text": "Well, there's two issues... I think we just need to have a separate path in the child that does:\n\n1. detect OS shutdown\n2. synchronously collect session store data\n3. send a synchronous \"os is shutting down\" message to the parent including the session data\n\n1-3 would have to happen before returning to the event loop I think, otherwise Windows might kill it. Right Jim?\n\nThen the parent, when it receives this new message, would just disable the crash reporter and use the session data it gets directly instead of then trying to ask the child process for it later.", "author": "bent.mozilla@gmail.com", "id": 10418889, "time": "2015-06-24T17:17:23Z"}, {"text": "And I guess the parent process should try to prevent shutdown for as long as it can until all child processes have closed?", "author": "bent.mozilla@gmail.com", "id": 10418895, "time": "2015-06-24T17:18:22Z"}, {"text": "Comment on attachment 8623302\npatch v.2\n\nReview of attachment 8623302:\n-----------------------------------------------------------------\n\nI want us to figure out a better IPC pattern for this, but I figured I'd go ahead and review the shutdown listener parts. I think this looks fine overall, just needs to get tightened up a little.\n\n::: toolkit/xre/WorkstationShutdownListener.cpp\n@@ +16,5 @@\n> +namespace mozilla {\n> +namespace embed {\n> +\n> +// For various waits here, the maximum time a thread is kept waiting on an event.\n> +#define MAX_WAIT_MSEC 45000\n\nNit: Rather than #define I'd use a |const unsigned int| here. Now that we do unified cpp builds where we glue lots of files together these #defines can leak out and cause problems elsewhere.\n\n@@ +26,5 @@\n> +const wchar_t* kPropNameWorkstationListener = L\"WorkstationShutdownListenerProp\";\n> +\n> +// Runnable this module posts to the main gecko thread when it detect\n> +// the system is shutting down.\n> +class ShutdownMsgRunnable : public nsRunnable\n\nThis could be replaced entirely by NS_NewRunnableFunction() with a new C++ lambda if you want.\n\n@@ +31,5 @@\n> +{\n> +public:\n> +  NS_IMETHOD Run() override {\n> +    mozilla::dom::ContentChild* cp = mozilla::dom::ContentChild::GetSingleton();\n> +    if (cp) {\n\nYou should be able to assert this rather than checking.\n\n@@ +40,5 @@\n> +  }\n> +};\n> +\n> +// Sets an event when torn down, does not free the event object.\n> +class SetEventHelper\n\nMOZ_STACK_CLASS here... Though you could just specialize nsAutoRefTraits<HANDLE> here and use nsAutoRef<HANDLE> instead of rolling your own.\n\n@@ +45,5 @@\n> +{\n> +public:\n> +  SetEventHelper(HANDLE aEvent) :\n> +    mEvent(aEvent) {\n> +  }\n\nNit: style is a little weird here, and in a couple other places. I'd stick to https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style#Classes\n\n@@ +58,5 @@\n> +  }\n> +  HANDLE mEvent;\n> +};\n> +\n> +WorkstationShutdownListener::WorkstationShutdownListener() :\n\nMOZ_ASSERT(NS_IsMainThread()) here!\n\n@@ +66,5 @@\n> +  mWatcherWnd(NULL)\n> +{\n> +  mEventEntry = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> +  mEventExit = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> +  mEventShutdownWait = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n\nAll of these could fail, right?\n\n@@ +68,5 @@\n> +  mEventEntry = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> +  mEventExit = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> +  mEventShutdownWait = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> +  // create our background system event listener thread\n> +  mThread = (HANDLE)_beginthreadex(nullptr, 0, ThreadEntryPoint, (void*)this, 0, &mThreadId);\n\nIt's a little scary to pass |this| to a thread func... This object lives on the stack, so if the main thread exits quickly the new thread will get a garbage pointer to stack memory... I think it'd be better to explicitly wait for the thread to start here.\n\n@@ +69,5 @@\n> +  mEventExit = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> +  mEventShutdownWait = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> +  // create our background system event listener thread\n> +  mThread = (HANDLE)_beginthreadex(nullptr, 0, ThreadEntryPoint, (void*)this, 0, &mThreadId);\n> +  MOZ_ASSERT(mThread, \"WorkstationShutdownListener background thread creation failed.\");\n\nThis can fail in several cases right? Maybe make it MOZ_RELEASE_ASSERT to at least see failures in crashstats?\n\n@@ +80,5 @@\n> +\n> +void\n> +WorkstationShutdownListener::Quit()\n> +{\n> +  NS_ASSERTION(NS_IsMainThread(), \"Wrong thread!\");\n\nThis should be MOZ_ASSERT (all new code should use the fatal asserts!)\n\n@@ +89,5 @@\n> +  // Let the held WM_QUERYENDSESSION thread go, we're done so windows can continue.\n> +  ::SetEvent(mEventShutdownWait);\n> +\n> +  // wait for the thread to exit\n> +  ::WaitForSingleObject(mEventExit, MAX_WAIT_MSEC);\n\nI think you actually need to wait on the mThread handle here. Otherwise mThread might still be in use and CloseHandle will fail on it.\n\n@@ +94,5 @@\n> +\n> +  ::CloseHandle(mThread);\n> +  ::CloseHandle(mEventEntry);\n> +  ::CloseHandle(mEventExit);\n> +  ::CloseHandle(mEventShutdownWait);\n\nWhat if the other thread is waiting on this event still? Setting it above doesn't necessarily mean that the thread woke up yet.\n\n@@ +102,5 @@\n> +WorkstationShutdownListener::CloseThread()\n> +{\n> +  if (!mThreadShouldExit) {\n> +    mThreadShouldExit = true;\n> +    ::PostThreadMessage(mThreadId, WM_QUIT, 0, 0);\n\nWait, why do you need |mThreadShouldExit| if you also post a quit message? I think just posting the message should be sufficient, right?\n\n@@ +115,5 @@\n> +    static_cast<WorkstationShutdownListener*>(aContext);\n> +  MOZ_ASSERT(self, \"no this pointer?\");\n> +\n> +  mozilla::AutoRestore<bool> ar(self->mThreadIsAlive);\n> +  self->mThreadIsAlive = true;\n\nThis is pretty useless, you're never testing this member. Just remove it?\n\n@@ +116,5 @@\n> +  MOZ_ASSERT(self, \"no this pointer?\");\n> +\n> +  mozilla::AutoRestore<bool> ar(self->mThreadIsAlive);\n> +  self->mThreadIsAlive = true;\n> +  SetEventHelper sehEntry(self->mEventEntry);\n\nSame. You're never checking this at the moment.\n\n@@ +132,5 @@\n> +               \"We won't get system shutdown notifications.\");\n> +    return -1;\n> +  }\n> +\n> +  self->mWatcherWnd = ::CreateWindowW(kWndClassName, L\"\",\n\nIs there any reason not to just have the HWND be a stack-local variable here? I don't think you need it to be a member of WorkstationShutdownListener since it's never touched elsewhere.\n\nNit: You could just pass the return value of RegisterClassEx here (an ATOM) instead of passing the class name again. Otherwise pass |wcex.lpszClassName| just so you only have to specify it in one place.\n\n@@ +133,5 @@\n> +    return -1;\n> +  }\n> +\n> +  self->mWatcherWnd = ::CreateWindowW(kWndClassName, L\"\",\n> +                                      WS_OVERLAPPEDWINDOW, CW_USEDEFAULT,\n\nIs WS_OVERLAPPEDWINDOW really what you want? Maybe it doesn't matter, but that seems to add a bunch of stuff you don't actually care about.\n\n@@ +134,5 @@\n> +  }\n> +\n> +  self->mWatcherWnd = ::CreateWindowW(kWndClassName, L\"\",\n> +                                      WS_OVERLAPPEDWINDOW, CW_USEDEFAULT,\n> +                                      0, CW_USEDEFAULT, 0, NULL, NULL,\n\nCan you specify HWND_MESSAGE here to make this window hidden? I don't know if you'll still receive WM_QUERYENDSESSION (the docs aren't clear), but if that works then this sounds much better!\n\n@@ +154,5 @@\n> +    MSG msg;\n> +    // blocks\n> +    DWORD result = ::GetMessageW(&msg, NULL, 0, 0);\n> +    // WM_QUIT processed or internal error\n> +    if (!result || result == -1) {\n\nYou should be able to assert that result is never -1, sounds like that's only possible if you pass in an invalid hwnd\n\n@@ +159,5 @@\n> +      break;\n> +    }\n> +    ::TranslateMessage(&msg);\n> +    ::DispatchMessage(&msg);\n> +  } while (!self->mThreadShouldExit);\n\nNot sure why you should have this extra mThreadShouldExit check. WM_QUIT should be enough, and if you do bail early somehow then you might leave unprocessed messages in the queue...\n\n@@ +175,5 @@\n> +  switch (message)\n> +  {\n> +    case WM_DESTROY:\n> +      ::PostQuitMessage(0);\n> +      return 0;\n\nDo you need to handle this? I would hope you never get this until after you've already posted the WM_QUIT message from the other thread. In any case posting more than one quit message sounds weird.\n\n@@ +181,5 @@\n> +    case WM_QUERYENDSESSION:\n> +    {\n> +      // if we don't have xpcom yet then we really don't care about\n> +      // clean shutdown.\n> +      nsCOMPtr<nsIRunnable> runnable = do_QueryObject(new ShutdownMsgRunnable());\n\nNo need for do_QueryObject.\n\n@@ +182,5 @@\n> +    {\n> +      // if we don't have xpcom yet then we really don't care about\n> +      // clean shutdown.\n> +      nsCOMPtr<nsIRunnable> runnable = do_QueryObject(new ShutdownMsgRunnable());\n> +      if (runnable) {\n\nThis can't fail, new is infallible.\n\n::: toolkit/xre/WorkstationShutdownListener.h\n@@ +17,5 @@\n> +\n> +namespace mozilla {\n> +namespace embed {\n> +\n> +class WorkstationShutdownListener\n\nNit: This should be marked |final| and |MOZ_STACK_CLASS| too I think.\n\n@@ +23,5 @@\n> +public:\n> +  WorkstationShutdownListener();\n> +  ~WorkstationShutdownListener();\n> +\n> +protected:\n\nNit: This doesn't need to be protected, private seems fine.\n\n@@ +24,5 @@\n> +  WorkstationShutdownListener();\n> +  ~WorkstationShutdownListener();\n> +\n> +protected:\n> +  static unsigned int WINAPI ThreadEntryPoint(LPVOID context);\n\nFrom what I can tell looking through docs this should return DWORD (not always the same as unsigned int).", "author": "bent.mozilla@gmail.com", "id": 10419632, "time": "2015-06-24T19:37:02Z"}, {"text": "(In reply to Ben Turner [:bent] (use the needinfo flag!) from comment #26)\n> Well, there's two issues... I think we just need to have a separate path in\n> the child that does:\n> \n> 1. detect OS shutdown\n> 2. synchronously collect session store data\n> 3. send a synchronous \"os is shutting down\" message to the parent including\n> the session data\n> \n> 1-3 would have to happen before returning to the event loop I think,\n> otherwise Windows might kill it. Right Jim?\n> \n> Then the parent, when it receives this new message, would just disable the\n> crash reporter and use the session data it gets directly instead of then\n> trying to ask the child process for it later.\n\nYes that's basically what I was thinking. I think getting this hooked up and working on the parent side is going to be a bit messier than it sounds here.", "author": "jmathies@mozilla.com", "id": 10430553, "time": "2015-06-29T14:44:08Z"}, {"text": "(In reply to Ben Turner [:bent] (use the needinfo flag!) from comment #27)\n> And I guess the parent process should try to prevent shutdown for as long as\n> it can until all child processes have closed?\n\nUnfortunately unless a child holds the shutdown thread all the children will get terminated before the browser receives a shutdown notification.", "author": "jmathies@mozilla.com", "id": 10430555, "time": "2015-06-29T14:45:22Z"}, {"text": "(In reply to Tim Taubert [:ttaubert] from comment #25)\n> We currently listen for the frame loader's \"unload\" event, collect data\n> synchronously and send an async message to the parent. Is the async message\n> the problem here in case of a child shutting down?\n\nHey Tim, can you point me at this message? I'm not finding much poking around in PContent.ipdl.", "author": "jmathies@mozilla.com", "id": 10431503, "time": "2015-06-29T17:45:43Z"}, {"text": "Here's where we send it from the unload handler:\n\nhttp://hg.mozilla.org/mozilla-central/annotate/e137fc38c431/browser/components/sessionstore/content/content-sessionStore.js#l779", "author": "ttaubert@mozilla.com", "id": 10431644, "time": "2015-06-29T18:00:25Z"}, {"text": "(In reply to Ben Turner [:bent] (use the needinfo flag!) from comment #28)\n> Comment on attachment 8623302\n> patch v.2\n> \n> Review of attachment 8623302:\n> -----------------------------------------------------------------\n> \n> I want us to figure out a better IPC pattern for this, but I figured I'd go\n> ahead and review the shutdown listener parts. I think this looks fine\n> overall, just needs to get tightened up a little.\n\nI've updated this to not hold the thread and let the child processes terminate. On the parent side I'm disabling things like crash reporting to avoid crash reports getting generated or crash ui showing up.\n\n> ::: toolkit/xre/WorkstationShutdownListener.cpp\n> @@ +16,5 @@\n> > +namespace mozilla {\n> > +namespace embed {\n> > +\n> > +// For various waits here, the maximum time a thread is kept waiting on an event.\n> > +#define MAX_WAIT_MSEC 45000\n> \n> Nit: Rather than #define I'd use a |const unsigned int| here. Now that we do\n> unified cpp builds where we glue lots of files together these #defines can\n> leak out and cause problems elsewhere.\n\nupdated.\n\n> \n> @@ +26,5 @@\n> > +const wchar_t* kPropNameWorkstationListener = L\"WorkstationShutdownListenerProp\";\n> > +\n> > +// Runnable this module posts to the main gecko thread when it detect\n> > +// the system is shutting down.\n> > +class ShutdownMsgRunnable : public nsRunnable\n> \n> This could be replaced entirely by NS_NewRunnableFunction() with a new C++\n> lambda if you want.\n\nI've added to this class now so I think I'll keep it the way it is.\n\n> @@ +31,5 @@\n> > +{\n> > +public:\n> > +  NS_IMETHOD Run() override {\n> > +    mozilla::dom::ContentChild* cp = mozilla::dom::ContentChild::GetSingleton();\n> > +    if (cp) {\n> \n> You should be able to assert this rather than checking.\n\nNot really, there was a bug here, this was loading into other child processes as well, which was good except it was unanticipated in the code. I've added support for plugin and gmp processes.\n\n> @@ +40,5 @@\n> > +  }\n> > +};\n> > +\n> > +// Sets an event when torn down, does not free the event object.\n> > +class SetEventHelper\n> \n> MOZ_STACK_CLASS here... Though you could just specialize\n> nsAutoRefTraits<HANDLE> here and use nsAutoRef<HANDLE> instead of rolling\n> your own.\n\nupdated.\n\n> @@ +58,5 @@\n> > +  }\n> > +  HANDLE mEvent;\n> > +};\n> > +\n> > +WorkstationShutdownListener::WorkstationShutdownListener() :\n> \n> MOZ_ASSERT(NS_IsMainThread()) here!\n\nadded.\n\n> @@ +66,5 @@\n> > +  mWatcherWnd(NULL)\n> > +{\n> > +  mEventEntry = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> > +  mEventExit = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> > +  mEventShutdownWait = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> \n> All of these could fail, right?\n\nI added assets.\n\n> \n> @@ +68,5 @@\n> > +  mEventEntry = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> > +  mEventExit = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> > +  mEventShutdownWait = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> > +  // create our background system event listener thread\n> > +  mThread = (HANDLE)_beginthreadex(nullptr, 0, ThreadEntryPoint, (void*)this, 0, &mThreadId);\n> \n> It's a little scary to pass |this| to a thread func... This object lives on\n> the stack, so if the main thread exits quickly the new thread will get a\n> garbage pointer to stack memory... I think it'd be better to explicitly wait\n> for the thread to start here.\n\nadded.\n\n> @@ +69,5 @@\n> > +  mEventExit = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> > +  mEventShutdownWait = ::CreateEventW(NULL, FALSE, FALSE, NULL);\n> > +  // create our background system event listener thread\n> > +  mThread = (HANDLE)_beginthreadex(nullptr, 0, ThreadEntryPoint, (void*)this, 0, &mThreadId);\n> > +  MOZ_ASSERT(mThread, \"WorkstationShutdownListener background thread creation failed.\");\n> \n> This can fail in several cases right? Maybe make it MOZ_RELEASE_ASSERT to at\n> least see failures in crashstats?\n\nHmm, I guess. I wouldn't expect this to fail at all though unless the system has memory issues.\n\n> @@ +80,5 @@\n> > +\n> > +void\n> > +WorkstationShutdownListener::Quit()\n> > +{\n> > +  NS_ASSERTION(NS_IsMainThread(), \"Wrong thread!\");\n> \n> This should be MOZ_ASSERT (all new code should use the fatal asserts!)\n\nupdated.\n\n> @@ +89,5 @@\n> > +  // Let the held WM_QUERYENDSESSION thread go, we're done so windows can continue.\n> > +  ::SetEvent(mEventShutdownWait);\n> > +\n> > +  // wait for the thread to exit\n> > +  ::WaitForSingleObject(mEventExit, MAX_WAIT_MSEC);\n> \n> I think you actually need to wait on the mThread handle here. Otherwise\n> mThread might still be in use and CloseHandle will fail on it.\n\nthis code changed.\n\n> @@ +94,5 @@\n> > +\n> > +  ::CloseHandle(mThread);\n> > +  ::CloseHandle(mEventEntry);\n> > +  ::CloseHandle(mEventExit);\n> > +  ::CloseHandle(mEventShutdownWait);\n> \n> What if the other thread is waiting on this event still? Setting it above\n> doesn't necessarily mean that the thread woke up yet.\n\nEverything should be signaled if mEventExit is signaled. I'm not sure what your concern is here but mEventShutdownWait was removed with some other changes so maybe it's been addressed.\n\n> @@ +115,5 @@\n> > +    static_cast<WorkstationShutdownListener*>(aContext);\n> > +  MOZ_ASSERT(self, \"no this pointer?\");\n> > +\n> > +  mozilla::AutoRestore<bool> ar(self->mThreadIsAlive);\n> > +  self->mThreadIsAlive = true;\n> \n> This is pretty useless, you're never testing this member. Just remove it?\n\nremoved.\n\n> @@ +132,5 @@\n> > +               \"We won't get system shutdown notifications.\");\n> > +    return -1;\n> > +  }\n> > +\n> > +  self->mWatcherWnd = ::CreateWindowW(kWndClassName, L\"\",\n> \n> Is there any reason not to just have the HWND be a stack-local variable\n> here? I don't think you need it to be a member of\n> WorkstationShutdownListener since it's never touched elsewhere.\n\nsure.\n\n> Nit: You could just pass the return value of RegisterClassEx here (an ATOM)\n> instead of passing the class name again. Otherwise pass |wcex.lpszClassName|\n> just so you only have to specify it in one place.\n> \n\nWhat's wrong with using kWndClassName? It's a constant that won't change.\n\n> @@ +133,5 @@\n> > +    return -1;\n> > +  }\n> > +\n> > +  self->mWatcherWnd = ::CreateWindowW(kWndClassName, L\"\",\n> > +                                      WS_OVERLAPPEDWINDOW, CW_USEDEFAULT,\n> \n> Is WS_OVERLAPPEDWINDOW really what you want? Maybe it doesn't matter, but\n> that seems to add a bunch of stuff you don't actually care about.\n\nI don't think it makes any difference unless the window is displayed.\n\n> @@ +134,5 @@\n> > +  }\n> > +\n> > +  self->mWatcherWnd = ::CreateWindowW(kWndClassName, L\"\",\n> > +                                      WS_OVERLAPPEDWINDOW, CW_USEDEFAULT,\n> > +                                      0, CW_USEDEFAULT, 0, NULL, NULL,\n> \n> Can you specify HWND_MESSAGE here to make this window hidden? I don't know\n> if you'll still receive WM_QUERYENDSESSION (the docs aren't clear), but if\n> that works then this sounds much better!\n\nsure.\n\n> @@ +154,5 @@\n> > +    MSG msg;\n> > +    // blocks\n> > +    DWORD result = ::GetMessageW(&msg, NULL, 0, 0);\n> > +    // WM_QUIT processed or internal error\n> > +    if (!result || result == -1) {\n> \n> You should be able to assert that result is never -1, sounds like that's\n> only possible if you pass in an invalid hwnd\n\nMSDN doesn't state that - \n\n\"If there is an error, the return value is -1. For example, the function fails if hWnd is an invalid window handle or lpMsg is an invalid pointer. To get extended error information, call GetLastError.\"\n\nI would prefer to exit the loop if we get something unexpetced, otherwise this could cause shutdown hangs.\n\n> \n> @@ +159,5 @@\n> > +      break;\n> > +    }\n> > +    ::TranslateMessage(&msg);\n> > +    ::DispatchMessage(&msg);\n> > +  } while (!self->mThreadShouldExit);\n> \n> Not sure why you should have this extra mThreadShouldExit check. WM_QUIT\n\nI removed this, it was dead code.\n\n> \n> @@ +175,5 @@\n> > +  switch (message)\n> > +  {\n> > +    case WM_DESTROY:\n> > +      ::PostQuitMessage(0);\n> > +      return 0;\n> \n> Do you need to handle this? I would hope you never get this until after\n> you've already posted the WM_QUIT message from the other thread. In any case\n> posting more than one quit message sounds weird.\n\nIf I destroy the window it's useless, but if 3rd party code closes it, I'd like to pick it up and exit the thread. Again trying to avoid weird shutdown hangs.\n \n> \n> @@ +181,5 @@\n> > +    case WM_QUERYENDSESSION:\n> > +    {\n> > +      // if we don't have xpcom yet then we really don't care about\n> > +      // clean shutdown.\n> > +      nsCOMPtr<nsIRunnable> runnable = do_QueryObject(new ShutdownMsgRunnable());\n> \n> No need for do_QueryObject.\n\nremoved.\n\n> @@ +182,5 @@\n> > +    {\n> > +      // if we don't have xpcom yet then we really don't care about\n> > +      // clean shutdown.\n> > +      nsCOMPtr<nsIRunnable> runnable = do_QueryObject(new ShutdownMsgRunnable());\n> > +      if (runnable) {\n> \n> This can't fail, new is infallible.\n\nyeah right. :)\n\n> ::: toolkit/xre/WorkstationShutdownListener.h\n> @@ +17,5 @@\n> > +\n> > +namespace mozilla {\n> > +namespace embed {\n> > +\n> > +class WorkstationShutdownListener\n> \n> Nit: This should be marked |final| and |MOZ_STACK_CLASS| too I think.\n> \n> @@ +23,5 @@\n> > +public:\n> > +  WorkstationShutdownListener();\n> > +  ~WorkstationShutdownListener();\n> > +\n> > +protected:\n> \n> Nit: This doesn't need to be protected, private seems fine.\n> \n> @@ +24,5 @@\n> > +  WorkstationShutdownListener();\n> > +  ~WorkstationShutdownListener();\n> > +\n> > +protected:\n> > +  static unsigned int WINAPI ThreadEntryPoint(LPVOID context);\n> \n> From what I can tell looking through docs this should return DWORD (not\n> always the same as unsigned int).\n\nHmm, from msdn it's |static unsigned __stdcall|. Updated. (That's what I get for copy pasting mozilla code.)\n\nPatch forthcoming. Unfortunately I guess I have to find a new reviewer. :( You're the last knowledgeable win32 platform guy we have. I'm not sure who to ask. :)", "author": "jmathies@mozilla.com", "id": 10441768, "time": "2015-07-01T18:31:21Z"}, {"text": "Nah, I'll be happy to look at it if it comes up soon!", "author": "bent.mozilla@gmail.com", "id": 10442066, "time": "2015-07-01T19:29:08Z"}, {"text": "> > @@ +134,5 @@\n> > > +  }\n> > > +\n> > > +  self->mWatcherWnd = ::CreateWindowW(kWndClassName, L\"\",\n> > > +                                      WS_OVERLAPPEDWINDOW, CW_USEDEFAULT,\n> > > +                                      0, CW_USEDEFAULT, 0, NULL, NULL,\n> > \n> > Can you specify HWND_MESSAGE here to make this window hidden? I don't know\n> > if you'll still receive WM_QUERYENDSESSION (the docs aren't clear), but if\n> > that works then this sounds much better!\n> \n> sure.\n> \n\nThis window didn't get the message we need, I've reverted the change.", "author": "jmathies@mozilla.com", "id": 10442123, "time": "2015-07-01T19:41:37Z"}, {"text": "I've been working on getting this hooked up in both the gmp and plugin processes. Gmp is working but the plugin process is hit or miss. Sometimes the flash sub processes that are communicating with flash code in our plugin-container shut down first. This causes the plugin-container to crash before our WorkstationShutdownListener gets notified. I'm not too concerned about this, we currently crash the plugin process in release on shutdown so not much changes here. While I have not fixed the problem 100%, I've improved on it.", "author": "jmathies@mozilla.com", "id": 10442285, "time": "2015-07-01T20:15:49Z"}, {"text": "Created attachment 8628496\npatch v.3", "author": "jmathies@mozilla.com", "id": 10442743, "time": "2015-07-01T21:44:03Z"}, {"text": "Comment on attachment 8628496\npatch v.3\n\nFor the session store front end changes. Testing this it seems to work, I tried loading up a few tabs, shutdown, then restarted the browser and found session store had the right data.", "author": "jmathies@mozilla.com", "id": 10442748, "time": "2015-07-01T21:45:19Z"}, {"text": "There's some left over printf_stderr kludge in WorkstationShutdownListener, I've removed that locally.", "author": "jmathies@mozilla.com", "id": 10442762, "time": "2015-07-01T21:48:27Z"}, {"text": "Created attachment 8631664\npatch v.3", "author": "jmathies@mozilla.com", "id": 10475483, "time": "2015-07-09T16:46:12Z"}, {"text": "Comment on attachment 8631664\npatch v.3\n\nReview of attachment 8631664:\n-----------------------------------------------------------------\n\nSorry for not replying sooner, I forgot about this. So we listen for the child shutdowns and then send an async message. What ensures that we receive this messages? Is the parent kept alive and just the content process quits early? There is no code in the parent that waits for the children to send their final messages.", "author": "ttaubert@mozilla.com", "id": 10475549, "time": "2015-07-09T16:54:18Z"}, {"text": "(In reply to Tim Taubert [:ttaubert] from comment #41)\n> Comment on attachment 8631664\n> patch v.3\n> \n> Review of attachment 8631664:\n> -----------------------------------------------------------------\n> \n> Sorry for not replying sooner, I forgot about this. So we listen for the\n> child shutdowns and then send an async message. What ensures that we receive\n> this messages?\n\nThe ChildProcessIsShuttingDown() messages are all sync. The workstation code also waits for the observer we fire in the content process to flush session store data. So the only questionable call is \n\nMessageQueue.send({isFinal: true});\n\nAFAICT the data generally gets over via this. I'm not sure if this is sync or async but it seems toi work.\n\n> Is the parent kept alive and just the content process quits\n> early? There is no code in the parent that waits for the children to send\n> their final messages.\n\nWhat final message am I missing that needs to be sent?", "author": "jmathies@mozilla.com", "id": 10475681, "time": "2015-07-09T17:12:23Z"}, {"text": "(In reply to Jim Mathies [:jimm] from comment #9)\n> What's happening here is that Windows shuts down the child processes first\n> since they do not have top level windows\n\nI've started reading the bug and the patch and getting to the review part in a bit. But in the meanwhile what I don't get is that why don't we just use SetProcessShutdownParameters [1] to set the priority of the parent so that it gets shut down always earlier than its child processes? Wouldn't that make this work a lot simpler?\n\n[1] https://msdn.microsoft.com/en-us/library/windows/desktop/ms686227%28v=vs.85%29.aspx", "author": "gkrizsanits@mozilla.com", "id": 10485558, "time": "2015-07-13T13:01:21Z"}, {"text": "Comment on attachment 8631664\npatch v.3\n\nReview of attachment 8631664:\n-----------------------------------------------------------------\n\nCancelling review for now until Jim is trying out if the previously mentioned API works and helps.", "author": "gkrizsanits@mozilla.com", "id": 10498567, "time": "2015-07-15T17:31:12Z"}, {"text": "Created attachment 8634330\npatch v.4\n\nLoving this way more than patch v.3!", "author": "jmathies@mozilla.com", "id": 10499504, "time": "2015-07-15T20:16:15Z"}, {"text": "Created attachment 8634332\npatch v.4\n\n- without the debugging code", "author": "jmathies@mozilla.com", "id": 10499509, "time": "2015-07-15T20:18:31Z"}, {"text": "Comment on attachment 8634332\npatch v.4\n\nReview of attachment 8634332:\n-----------------------------------------------------------------\n\nLooks great, I'm glad it worked out.", "author": "gkrizsanits@mozilla.com", "id": 10502166, "time": "2015-07-16T09:53:11Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/914bcf031b0e", "author": "pulsebot@bots.tld", "id": 10502387, "time": "2015-07-16T11:27:41Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/914bcf031b0e", "author": "ryanvm@gmail.com", "id": 10504431, "time": "2015-07-16T19:03:40Z"}], "cf_last_resolved": "2015-07-16T19:03:40Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2015-07-16T19:03:40Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "IPC", "votes": 0, "groups": [], "cf_status_firefox60": "---", "cf_status_firefox42": "fixed", "target_milestone": "mozilla42", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "luke@mozilla.com", "id": 347312, "name": "luke@mozilla.com", "real_name": "Luke Wagner [:luke]"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "aenosedney@gmail.com", "id": 506201, "name": "aenosedney@gmail.com", "real_name": "Aeed"}, {"email": "bent.mozilla@gmail.com", "id": 200444, "name": "bent.mozilla@gmail.com", "real_name": "Ben Turner (not reading bugmail, use the needinfo flag!)"}, {"email": "brad@lassey.us", "id": 181004, "name": "brad@lassey.us", "real_name": "Brad Lassey [:blassey] (use needinfo?)"}, {"email": "gkrizsanits@mozilla.com", "id": 420273, "name": "gkrizsanits@mozilla.com", "real_name": "Gabor Krizsanits (INACTIVE)"}, {"email": "jmathies@mozilla.com", "id": 279663, "name": "jmathies@mozilla.com", "real_name": "Jim Mathies [:jimm]"}, {"email": "josh@joshmatthews.net", "id": 241497, "name": "josh@joshmatthews.net", "real_name": "Josh Matthews [:jdm]"}, {"email": "luke@mozilla.com", "id": 347312, "name": "luke@mozilla.com", "real_name": "Luke Wagner [:luke]"}, {"email": "malix0@gmail.com", "id": 170215, "name": "malix0@gmail.com", "real_name": "Massimo Fidanza"}, {"email": "margaret.leibovic@gmail.com", "id": 346894, "name": "margaret.leibovic@gmail.com", "real_name": ":Margaret Leibovic"}, {"email": "smacleod@mozilla.com", "id": 460415, "name": "smacleod@mozilla.com", "real_name": "Steven MacLeod [:smacleod]"}, {"email": "ttaubert@mozilla.com", "id": 402526, "name": "ttaubert@mozilla.com", "real_name": "Tim Taubert [:ttaubert]"}, {"email": "vseerror@lehigh.edu", "id": 29811, "name": "vseerror@lehigh.edu", "real_name": "Wayne Mery (:wsmwk)"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "---", "field_name": "cf_tracking_e10s", "added": "?"}], "who": "luke@mozilla.com", "when": "2014-10-09T16:55:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "blassey.bugs@lassey.us"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "mconley@mozilla.com"}, {"removed": "?", "field_name": "cf_tracking_e10s", "added": "m5+"}], "who": "brad@lassey.us", "when": "2014-10-09T21:46:59Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "josh@joshmatthews.net"}], "who": "josh@joshmatthews.net", "when": "2014-10-14T23:42:07Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "crash"}, {"removed": "", "field_name": "cc", "added": "vseerror@lehigh.edu"}, {"removed": "normal", "field_name": "severity", "added": "critical"}], "who": "vseerror@lehigh.edu", "when": "2014-12-31T14:42:30Z"}, {"changes": [{"removed": "m5+", "field_name": "cf_tracking_e10s", "added": "m7+"}], "who": "brad@lassey.us", "when": "2015-02-26T17:49:41Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "smacleod@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(smacleod@mozilla.com)"}], "who": "mconley@mozilla.com", "when": "2015-02-28T23:09:35Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "margaret.leibovic@gmail.com"}], "who": "mconley@mozilla.com", "when": "2015-02-28T23:09:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ttaubert@mozilla.com"}, {"removed": "needinfo?(smacleod@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(ttaubert@mozilla.com)"}], "who": "smacleod@mozilla.com", "when": "2015-03-11T21:26:48Z"}, {"changes": [{"removed": "needinfo?(ttaubert@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "ttaubert@mozilla.com", "when": "2015-03-17T11:57:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "luke@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(luke@mozilla.com)"}, {"removed": "m7+", "field_name": "cf_tracking_e10s", "added": "?"}], "who": "brad@lassey.us", "when": "2015-05-05T20:35:32Z"}, {"changes": [{"removed": "needinfo?(luke@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "luke@mozilla.com", "when": "2015-05-06T03:03:32Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(luke@mozilla.com)"}], "who": "brad@lassey.us", "when": "2015-05-06T12:19:04Z"}, {"changes": [{"removed": "needinfo?(luke@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "luke@mozilla.com", "when": "2015-05-06T13:39:16Z"}, {"changes": [{"removed": "mconley@mozilla.com", "field_name": "assigned_to", "added": "jmathies@mozilla.com"}, {"removed": "?", "field_name": "cf_tracking_e10s", "added": "m7+"}], "who": "brad@lassey.us", "when": "2015-05-07T16:34:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jmathies@mozilla.com"}, {"removed": "[e10s] crashed tab during shutdown", "field_name": "summary", "added": "[e10s] Tabs appear to crash during system shutdown"}], "who": "jmathies@mozilla.com", "when": "2015-06-10T12:28:18Z"}, {"changes": [{"removed": "critical", "field_name": "severity", "added": "normal"}], "who": "jmathies@mozilla.com", "when": "2015-06-10T12:55:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "aenosedney@gmail.com"}], "who": "aenosedney@gmail.com", "when": "2015-06-13T18:36:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "malix0@gmail.com"}], "who": "malix0@gmail.com", "when": "2015-06-16T00:47:02Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8623120, "added": "1"}], "who": "jmathies@mozilla.com", "when": "2015-06-16T16:41:17Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8623127, "added": "1"}], "who": "jmathies@mozilla.com", "when": "2015-06-16T21:27:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bent.mozilla@gmail.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8623294, "added": "review?(bent.mozilla@gmail.com)"}], "who": "jmathies@mozilla.com", "when": "2015-06-16T21:29:05Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8623294, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bent.mozilla@gmail.com)", "attachment_id": 8623294, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8623302, "added": "review?(bent.mozilla@gmail.com)"}], "who": "jmathies@mozilla.com", "when": "2015-06-16T21:45:37Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jmathies@mozilla.com)"}], "who": "bent.mozilla@gmail.com", "when": "2015-06-22T22:01:31Z"}, {"changes": [{"removed": "needinfo?(jmathies@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jmathies@mozilla.com", "when": "2015-06-24T13:45:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bent.mozilla@gmail.com)", "attachment_id": 8623302, "added": "review-"}], "who": "bent.mozilla@gmail.com", "when": "2015-06-24T19:37:02Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(ttaubert@mozilla.com)"}], "who": "jmathies@mozilla.com", "when": "2015-06-29T17:45:43Z"}, {"changes": [{"removed": "needinfo?(ttaubert@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "ttaubert@mozilla.com", "when": "2015-06-29T18:00:25Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8623302, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8628496, "added": "review?(bent.mozilla@gmail.com)"}], "who": "jmathies@mozilla.com", "when": "2015-07-01T21:44:03Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8628496, "added": "review?(ttaubert@mozilla.com)"}], "who": "jmathies@mozilla.com", "when": "2015-07-01T21:45:19Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8628496, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(bent.mozilla@gmail.com), review?(ttaubert@mozilla.com)", "attachment_id": 8628496, "added": ""}, {"removed": "", "field_name": "cc", "added": "gkrizsanits@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8631664, "added": "review?(gkrizsanits@mozilla.com)"}], "who": "jmathies@mozilla.com", "when": "2015-07-09T16:46:12Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(ttaubert@mozilla.com)"}], "who": "jmathies@mozilla.com", "when": "2015-07-09T17:12:23Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gkrizsanits@mozilla.com)", "attachment_id": 8631664, "added": ""}], "who": "gkrizsanits@mozilla.com", "when": "2015-07-15T17:31:12Z"}, {"changes": [{"removed": "needinfo?(ttaubert@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jmathies@mozilla.com", "when": "2015-07-15T20:15:12Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8631664, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8634330, "added": "review?(gkrizsanits@mozilla.com)"}], "who": "jmathies@mozilla.com", "when": "2015-07-15T20:16:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gkrizsanits@mozilla.com)", "attachment_id": 8634330, "added": ""}], "who": "jmathies@mozilla.com", "when": "2015-07-15T20:16:35Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8634330, "added": "1"}], "who": "jmathies@mozilla.com", "when": "2015-07-15T20:18:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8634332, "added": "review?(gkrizsanits@mozilla.com)"}], "who": "jmathies@mozilla.com", "when": "2015-07-15T20:19:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gkrizsanits@mozilla.com)", "attachment_id": 8634332, "added": "review+"}], "who": "gkrizsanits@mozilla.com", "when": "2015-07-16T09:53:11Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla42"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-07-16 12:03:40"}, {"removed": "---", "field_name": "cf_status_firefox42", "added": "fixed"}], "who": "ryanvm@gmail.com", "when": "2015-07-16T19:03:40Z"}], "resolution": "FIXED", "op_sys": "Windows 7", "cf_fx_points": "---", "cf_blocking_fennec": "---"}