{"cf_tracking_thunderbird_esr52": "---", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "andy+bugzilla@mckay.pub", "mentors_detail": [], "depends_on": [1465129, 1465120, 1467720, 1467727], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cf_status_firefox57": "wontfix", "cc_detail": [{"email": "ajfhajf@yandex.ru", "id": 559449, "name": "ajfhajf@yandex.ru", "real_name": ""}, {"email": "albert@scheiner.cc", "id": 449258, "name": "albert@scheiner.cc", "real_name": "Albert Scheiner [:alberts]"}, {"email": "alexeiatyahoodotcom+mzllbgzll@gmail.com", "id": 558679, "name": "alexeiatyahoodotcom+mzllbgzll@gmail.com", "real_name": "Alexei"}, {"email": "am@adguard.com", "id": 524798, "name": "am@adguard.com", "real_name": "Andrey Meshkov"}, {"email": "amarchesini@mozilla.com", "id": 446257, "name": "amarchesini@mozilla.com", "real_name": "Andrea Marchesini [:baku]"}, {"email": "aswan@mozilla.com", "id": 561655, "name": "aswan@mozilla.com", "real_name": "Andrew Swan [:aswan] (on PTO until 6/25)"}, {"email": "boyans@abv.bg", "id": 524550, "name": "boyans@abv.bg", "real_name": "Boyan Ilianov"}, {"email": "bugmail@asutherland.org", "id": 151407, "name": "bugmail@asutherland.org", "real_name": "Andrew Sutherland [:asuth]"}, {"email": "bzhao@mozilla.com", "id": 424852, "name": "bzhao@mozilla.com", "real_name": "Hector Zhao [:hectorz]"}, {"email": "cosmin.badescu@softvision.ro", "id": 557772, "name": "cosmin.badescu@softvision.ro", "real_name": "CosminB"}, {"email": "cr0ydon@outlook.com", "id": 517385, "name": "cr0ydon@outlook.com", "real_name": "Croydon"}, {"email": "ddurst@mozilla.com", "id": 500559, "name": "ddurst@mozilla.com", "real_name": "David Durst [:ddurst]"}, {"email": "e7358d9c@opayq.com", "id": 590837, "name": "e7358d9c@opayq.com", "real_name": "ExE Boss"}, {"email": "eglassercamp@mozilla.com", "id": 570623, "name": "eglassercamp@mozilla.com", "real_name": "Ethan Glasser-Camp (:glasserc)"}, {"email": "fx4waldi@yahoo.com", "id": 420676, "name": "fx4waldi@yahoo.com", "real_name": ""}, {"email": "grahamperrin@gmail.com", "id": 258142, "name": "grahamperrin@gmail.com", "real_name": "Graham Perrin"}, {"email": "gwarser@gmail.com", "id": 472632, "name": "gwarser@gmail.com", "real_name": ""}, {"email": "ianb@mozilla.com", "id": 49196, "name": "ianb@mozilla.com", "real_name": "Ian Bicking (:ianbicking)"}, {"email": "jmaher@mozilla.com", "id": 324370, "name": "jmaher@mozilla.com", "real_name": "Joel Maher ( :jmaher ) (UTC-4)"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "kernp25@yahoo.com", "id": 436361, "name": "kernp25@yahoo.com", "real_name": ""}, {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, {"email": "lgreco@mozilla.com", "id": 339062, "name": "lgreco@mozilla.com", "real_name": "Luca Greco [:rpl]"}, {"email": "mconley@mozilla.com", "id": 403756, "name": "mconley@mozilla.com", "real_name": "Mike Conley (:mconley) (:\u2699\ufe0f) (Catching up on needinfos / reviews)"}, {"email": "mdaly@mozilla.com", "id": 609492, "name": "mdaly@mozilla.com", "real_name": "Marion Daly [:mdaly]"}, {"email": "rwood@mozilla.com", "id": 447387, "name": "rwood@mozilla.com", "real_name": "Robert Wood [:rwood]"}, {"email": "simon.mainey@gmail.com", "id": 587136, "name": "simon.mainey@gmail.com", "real_name": "Simon Mainey"}, {"email": "smultron45@gmail.com", "id": 406912, "name": "smultron45@gmail.com", "real_name": "mapx"}, {"email": "Virtual@teknik.io", "id": 342842, "name": "Virtual@teknik.io", "real_name": "Virtual_ManPL [:Virtual] - (please needinfo? me - so I will see your comment/reply/question/etc.)"}], "cf_last_resolved": "2018-06-06T22:03:08Z", "attachments": [{"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-30T04:57:21Z", "type_id": 4, "creation_date": "2018-05-17T16:58:07Z", "id": 1758313, "setter": "aswan@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8920222}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-01-17T20:45:54Z", "type_id": 4, "creation_date": "2017-10-19T17:11:43Z", "id": 1667900, "setter": "kmaglione+bmo@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8920223}, {"creator": "lgreco@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8920224}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-01-17T21:03:38Z", "type_id": 4, "creation_date": "2017-10-19T17:11:43Z", "id": 1667902, "setter": "kmaglione+bmo@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8920225}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-23T20:44:14Z", "type_id": 4, "creation_date": "2018-04-19T19:27:26Z", "id": 1746509, "setter": "aswan@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8920226}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-16T21:17:12Z", "type_id": 4, "creation_date": "2018-05-10T17:00:37Z", "id": 1755357, "setter": "aswan@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8920227}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-23T20:50:01Z", "type_id": 4, "creation_date": "2018-04-19T19:27:26Z", "id": 1746511, "setter": "aswan@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8920228}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-23T20:51:35Z", "type_id": 4, "creation_date": "2018-04-19T19:27:26Z", "id": 1746512, "setter": "aswan@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8920229}, {"creator": "lgreco@mozilla.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8938663}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8938754}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-06-06T10:26:53Z", "type_id": 4, "creation_date": "2018-06-06T10:21:00Z", "id": 1766452, "setter": "amarchesini@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8954173}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-21T16:40:56Z", "type_id": 4, "creation_date": "2018-05-17T16:57:32Z", "id": 1758312, "setter": "aswan@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8968193}, {"creator": "lgreco@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-05-30T05:05:22Z", "type_id": 4, "creation_date": "2018-05-17T17:50:45Z", "id": 1758356, "setter": "aswan@mozilla.com"}], "content_type": "text/x-review-board-request", "id": 8969284}], "votes": 4, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 317, "comments": [{"text": "This is a tracking bug for moving storage.local to be backed by indexedDB, instead of serialized to a file in the profile directory.\n\nThe main benefits are expected to be:\n* lower memory usage bug 1371255\n* better at storing small changes to a large structure as shown by uBlock Origin and ABP\n\nThere would also need to be a migration of data into this new storage from the serialization file.\n\nSee also bug 1277612.", "author": "andy+bugzilla@mckay.pub", "id": 12733446, "time": "2017-10-05T20:47:52Z"}, {"text": "Created attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nThis patch defined a new ExtensionStorageIDB module, which provides the\nsame \"internal\" API currently provided by ExtensionStorage and uses\nIndexedDB as its backend (instead of the JSONFile used as the backend\nprovided by ExtensionStorage).\n\nReview commit: https://reviewboard.mozilla.org/r/191230/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/191230/", "author": "lgreco@mozilla.com", "id": 12773734, "time": "2017-10-19T15:25:44Z"}, {"text": "Created attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview commit: https://reviewboard.mozilla.org/r/191232/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/191232/", "author": "lgreco@mozilla.com", "id": 12773735, "time": "2017-10-19T15:25:44Z"}, {"text": "Created attachment 8920224\nBug 1406181 - Use indexedDB as the backend for storage.local.\n\nThis patch integrates the new ExtensionStorageIDB.jsm into the storage API modules\n(ext-storage.js and ext-c-storage.js).\n\n## storage.local backend selection\n\nThe IDB backend is enabled by a preference (\"extensions.webextensions.useExtensStorageIDB\")\nwhich is read by the extension when is starting and stored in a property of the internal\nextension object, so that it can be used in the main and the child process to ensure that\nwe keep using the same backend while the extension is running, even if the preference\nis switched.\n\n## storage.local data migration\n\nWhen the new backend is enabled and the extension is started (or restarted), the data\nstored in the storage.local file backend is migrated into the IndexedDB backend before\nany extension page is loaded.\n\n## storage.local memory usage optimization\n\nWhen the IDB storage.local backend is enabled, the data stored in the underlying IndexedDB\nstorage is not in a single file anymore:\n\n- data smaller than a certain threshold is compressed and stored in the sqlite file\n- data bigger than the threshold is compressed and stored into separated files\n\nThe above is the standard IndexedDB behavior and it should provide better performance\nthan the simple File backend currently used by the API for certain usage scenarios of\nthe API (e.g. there is a higher chance that we can handle the storage.local API call\nwithout loading the full file content in memory).\n\nBesides this potential improvements (which are side-effects of using IndexedDB as a\nbackend), we can still introduce some additional optimization related to the memory usage\nof the API in some additional API usage scenarios:\n\n- storage.local.get API call can be fulfilled in ext-c-storage.js, so that we can spare\n  a good amount of memory by not serialize/deseriale the API call parameters and\n  results (as well as moving this data between processes using message manager events)\n\n- when there are no storage.onChanged listeners subscribed, we can make\n  storage.local.set/remove/clear to use a smaller amount of memory by:\n\n  - fulfill the API call in the child process if there were no onChanged listeners\n    subscribed when the API call is starting to process the request\n\n  - do not retrieve the previously stored data to be able to sent the onChanged\n    event details (because we do not need to send any event)\n\n  - when processing the API call in the main process (because there were listeners when the\n    API call was starting to be processed in ext-c-storage.js), we can still try to spare\n    some memory in ext-storage.js if all the onChanged listeners have been unsubscribed in\n    the meantime (by not retrieving the previously stored data and not creating the onChanged\n    event details)\n\nReview commit: https://reviewboard.mozilla.org/r/191234/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/191234/", "author": "lgreco@mozilla.com", "id": 12773736, "time": "2017-10-19T15:25:44Z"}, {"text": "Created attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview commit: https://reviewboard.mozilla.org/r/191236/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/191236/", "author": "lgreco@mozilla.com", "id": 12773737, "time": "2017-10-19T15:25:44Z"}, {"text": "Created attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview commit: https://reviewboard.mozilla.org/r/191238/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/191238/", "author": "lgreco@mozilla.com", "id": 12773738, "time": "2017-10-19T15:25:44Z"}, {"text": "Created attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview commit: https://reviewboard.mozilla.org/r/191240/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/191240/", "author": "lgreco@mozilla.com", "id": 12773739, "time": "2017-10-19T15:25:44Z"}, {"text": "Created attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview commit: https://reviewboard.mozilla.org/r/191242/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/191242/", "author": "lgreco@mozilla.com", "id": 12773740, "time": "2017-10-19T15:25:44Z"}, {"text": "Created attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview commit: https://reviewboard.mozilla.org/r/191244/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/191244/", "author": "lgreco@mozilla.com", "id": 12773741, "time": "2017-10-19T15:25:44Z"}, {"text": "Comment on attachment 8920224\nBug 1406181 - Use indexedDB as the backend for storage.local.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191234/diff/1-2/", "author": "lgreco@mozilla.com", "id": 12781834, "time": "2017-10-23T11:48:25Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/1-2/", "author": "lgreco@mozilla.com", "id": 12781835, "time": "2017-10-23T11:48:25Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/1-2/", "author": "lgreco@mozilla.com", "id": 12781836, "time": "2017-10-23T11:48:25Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/1-2/", "author": "lgreco@mozilla.com", "id": 12781837, "time": "2017-10-23T11:48:25Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/1-2/", "author": "lgreco@mozilla.com", "id": 12781838, "time": "2017-10-23T11:48:25Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/1-2/", "author": "lgreco@mozilla.com", "id": 12781839, "time": "2017-10-23T11:48:25Z"}, {"text": "Created attachment 8938663\nBug 1406181 - Run more storage.local.set code in the child process when IDB backend is enabled.\n\nReview commit: https://reviewboard.mozilla.org/r/209274/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/209274/", "author": "lgreco@mozilla.com", "id": 12933899, "time": "2017-12-22T19:10:17Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/1-2/", "author": "lgreco@mozilla.com", "id": 12933900, "time": "2017-12-22T19:10:17Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191232/diff/1-2/", "author": "lgreco@mozilla.com", "id": 12933901, "time": "2017-12-22T19:10:17Z"}, {"text": "Comment on attachment 8920224\nBug 1406181 - Use indexedDB as the backend for storage.local.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191234/diff/2-3/", "author": "lgreco@mozilla.com", "id": 12933902, "time": "2017-12-22T19:10:17Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/2-3/", "author": "lgreco@mozilla.com", "id": 12933903, "time": "2017-12-22T19:10:17Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/2-3/", "author": "lgreco@mozilla.com", "id": 12933904, "time": "2017-12-22T19:10:17Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/2-3/", "author": "lgreco@mozilla.com", "id": 12933905, "time": "2017-12-22T19:10:17Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/2-3/", "author": "lgreco@mozilla.com", "id": 12933906, "time": "2017-12-22T19:10:17Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/2-3/", "author": "lgreco@mozilla.com", "id": 12933907, "time": "2017-12-22T19:10:17Z"}, {"text": "# Profiles Firefox \"extension child process\" enabled + ABP 3.0.2 (manually collected profile)\n\nFollows profiles (manually) collected from:\n- 2 Firefox instances in OOP mode (with the extension running in the extensions child process):\n  - one Firefox instance is using the current storage.local JSONFile backend\n  - the other one using the storage.local IndexedDB backend (which has: the patches attached to this issue \n    and the \"extensions.webextensions.useExtensionStorageIDB\" about:config preference switched to true).\n\nBoth these Firefox instances have AdBlock Plus 3.0.2 installed and the same 11 filters lists subscribed (the default ones + some additional ones subscribed from https://adblockplus.org/subscriptions).\n\nThe following are the shared profiles from perf-html.io:\n\n- with the current JSONFile backend: https://perfht.ml/2zh92hJ\n- with the experimental IndexedDB backend: https://perfht.ml/2zfSs1D\n\nHere is a bit more detailed description of the scenario executed and collected in the above two profiles:\n- profiling data collection started just before pressing the \"Update all filter lists\" in the Advanced tab \n  of the ABP Options page\n- profiling data collection stopped just a bit after that all the subscriptions have been updated \n (while scrolling the page continuously to get a feeling of the kind of \"user perceivable\" jank \n that a user may experience while the storage.local API is sending the data across the processes, \n serializing/deserializing it and finally storing it on disk)\n\n(the following video shows the scenario as executed in the two firefox instances, unfortunately the jank that is happening during the page scrolling can't be perceived exactly as it does locally): https://youtu.be/C1YeGB2pH7U.\n\nThe JSONFile backend profile seems to show (unsurprisingly) that more \"event processing delay\" ranges are happening in the main process (which was something that was easily perceived, e.g. scrolling the page showed visible pauses) compared to the one collected from the instance that is using the IndexedDB as the storage backend, that has less \"event processing delay\" ranges in the main process \n(especially because, in the last version of the experimental IndexedDB backend, most of the storage.local.set code is running in the child process instead of the main process, and the IndexedDB calls that require some code to run in the main process, to be able to write the data on disk, are going to run in a different thread of the main process, and so the only part of the storage.local.set call that still uses \"heavily\" the main process is \"notify the onChanged message to the subscribed listeners\").\n\n# mochitest-browser collected profiles\n\nBesides the above two profiles, collected by executing the scenario manually on both the Firefox instances, I've also used a custom mochitest-browser test to collect more profiling data (so that I can more quickly collect profiling data from more combination of the different settings, e.g. with and without the extension child process and with and without e10s).\n\nmochitest-browser profiling tested scenario:\n\n- start 2 test extensions, wait both to start their background page and content scripts, start profiler\n- each one sets two keys with a 20MB of data value\n  (the second extension after ~500ms)\n  from a content script (running in the content child process),\n- wait for the onchanged message in the background page (running in the extension child process)\n- wait 1 sec (which gives Firefox some idle time to save the data into the JSONFile\n- stop profiling and dump it to a json file\n\n(unfortunately these profiles are currently missing the C++ symbols, I'll take a deeper look at how to successfully symbolicate these profiles collected without the geckoprofiler addon, on the plus side they also have data collected from\nthe IndexedDB threads).\n\n## \"extension child process\" enabled / \"content child process\" enabled\n\nProfiles collected with the remote webextensions mode enabled (with the background page running in the extension child process and the content script running in the content process) \n\n- with JSONFile backend: https://perfht.ml/2zmNQXS\n- with IDB backend: https://perfht.ml/2zm5iLX\n\n## \"extension child process\" disabled / \"content child process\" enabled\n\nProfiles collected with the remote webextensions mode disabled (with the background page running in the main process and the content script running in the content\nprocess)\n\n- with JSONFile backend: https://perfht.ml/2zl11Ze\n- with IDB backend: https://perfht.ml/2zlXNEP\n\n## \"extension child process\" disabled / \"content child process\" disabled\n\nProfiles collected with e10s disable\n(mostly because it gives a profile which should be similar to the ones we could collect from on Firefox for Android, which is currently in non-e10s mode)\n\n- with JSONFile backend: https://perfht.ml/2zllFIz\n- with IDB backend: https://perfht.ml/2zlYYnJ", "author": "lgreco@mozilla.com", "id": 12934433, "time": "2017-12-23T16:02:04Z"}, {"text": "Created attachment 8938754\nCollect_storage_local_profiler_data_from_a_mochitest_browser_test_.patch\n\nThis patch contains the mochitest-browser test from which the last groups of profiles linked in comment 24 have been collected.", "author": "lgreco@mozilla.com", "id": 12934435, "time": "2017-12-23T16:05:51Z"}, {"text": "# mochitest-browser collected profiles (with C++ symbols)\n\nFollows the profiles collected from the mochitest-browser test, this time with the C++ symbols (using mstange's analyze-tryserver-profiles python scripts with the following changes applied https://github.com/mstange/analyze-tryserver-profiles/compare/master...rpl:symbolicate_profile_with_nm_symbols?expand=1)\n\n## \"extension child process\" enabled / \"content child process\" enabled\n\nProfiles collected with the remote webextensions mode enabled (with the background page running in the extension child process and the content script running in the content process) \n\n- with JSONFile backend: https://perfht.ml/2A5WHgZ\n- with IDB backend: https://perfht.ml/2A7j3yt\n\n## \"extension child process\" disabled / \"content child process\" enabled\n\nProfiles collected with the remote webextensions mode disabled (with the background page running in the main process and the content script running in the content\nprocess)\n\n- with JSONFile backend: https://perfht.ml/2A4TQF0\n- with IDB backend: https://perfht.ml/2A8PNri\n\n## \"extension child process\" disabled / \"content child process\" disabled\n\nProfiles collected with e10s disable\n(mostly because it gives a profile which should be similar to the ones we could collect from on Firefox for Android, which is currently in non-e10s mode)\n\n- with JSONFile backend: https://perfht.ml/2A6xbYP\n- with IDB backend: https://perfht.ml/2A6xZNn", "author": "lgreco@mozilla.com", "id": 12940323, "time": "2018-01-02T15:18:23Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review219436\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:34\n(Diff revision 2)\n> +this.ExtensionStorageIDB = {\n> +  // Map<extension-id, Set<Function>>\n> +  listeners: new Map(),\n> +\n> +  _open(extensionId) {\n> +    return IndexedDB.open(`${IDB_NAME_PREFIX}-${extensionId}`, IDB_OPTIONS, db => {\n\nThis database needs to have an extension origin.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:44\n(Diff revision 2)\n> +  _loadAllStoredKeys(db) {\n> +    return db.objectStore(IDB_DATA_STORENAME, \"readonly\").getAllKeys();\n> +  },\n> +\n> +  async _loadData(db, keysParam) {\n> +    const storedKeys = await this._loadAllStoredKeys(db);\n\nThere's no need to do this when we have a list of keys to retrieve. If you really need to know the difference between a key with an undefined value and a nonexistent key, you can use a cursor. Or we can just forbid `undefined` as a storage value and normalize it to `null`.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:54\n(Diff revision 2)\n> +\n> +    const objectStore = db.objectStore(IDB_DATA_STORENAME, \"readonly\");\n> +\n> +    for (let key of keys) {\n> +      if (storedKeys.includes(key)) {\n> +        loadedPromises.push(objectStore.get(key).then(value => {\n\nIt would be much more efficient to call `Promise.all()` on the get requests and then iterate over the results, rather than adding a .then() clause to each request.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:79\n(Diff revision 2)\n> +   *        said object. Any values which are StructuredCloneHolder\n> +   *        instances are deserialized before being stored.\n> +   * @returns {Promise<void>}\n> +   */\n> +  async set(extensionId, items) {\n> +    const db = await this._open(extensionId);\n\nOpening a fresh database connection every time we want to read or change a key is a bad idea.\n\nAlso, passing around DB objects like this is weird. If you want to build something on top of a DB, please create a class that owns the DB instance for an extension.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:83\n(Diff revision 2)\n> +  async set(extensionId, items) {\n> +    const db = await this._open(extensionId);\n> +    const data = await this._loadData(db, Object.keys(items));\n> +\n> +    const changes = {};\n> +    const savedPromises = [];\n\nNit: `savePromises`\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:87\n(Diff revision 2)\n> +    for (let key in items) {\n> +      let value = items[key];\n> +      changes[key] = {oldValue: data[key], newValue: value};\n> +      savedPromises.push(store.put(value, key));\n> +    }\n> +\n> +    await Promise.all(savedPromises);\n\nThis all needs to happen in a single transaction, or we'll wind up with interleaved transactions and listeners that contain stale values.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:87\n(Diff revision 2)\n> +    const changes = {};\n> +    const savedPromises = [];\n> +\n> +    const store = db.objectStore(IDB_DATA_STORENAME, \"readwrite\");\n> +\n> +    for (let key in items) {\n\n`for (let key of Object.keys(items))`\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:138\n(Diff revision 2)\n> +\n> +    // If keysParam is an object, use the passed value for every non existent key.\n> +    if (hasDefaults) {\n> +      for (let key of keys) {\n> +        if (!(key in data)) {\n> +          data[key] = keysParam[key];\n\nIt would be better to just fill in the defaults object as we get values and then return it.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:157\n(Diff revision 2)\n> +    if (!keys || keys.length === 0) {\n> +      return null;\n> +    }\n\nWhy?\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:173\n(Diff revision 2)\n> +    for (let key of keys) {\n> +      if (key in data) {\n> +        changes[key] = {oldValue: data[key]};\n> +        promisesChanged.push(store.delete(key));\n> +        changed = true;\n> +      }\n> +    }\n> +\n> +    if (changed) {\n> +      await promisesChanged;\n\nAgain, this all needs to happen in a transaction.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:198\n(Diff revision 2)\n> +    const db = await this._open(extensionId);\n> +    const data = await this._loadData(db);\n> +\n> +    let changed = false;\n> +    let changes = {};\n> +\n> +    for (let key in data) {\n> +      changes[key] = {oldValue: data[key]};\n> +      changed = true;\n> +    }\n> +\n> +    if (changed) {\n> +      const store = db.objectStore(IDB_DATA_STORENAME, \"readwrite\");\n> +\n> +      await store.clear();\n\nSingle transaction.", "author": "kmaglione+bmo@mozilla.com", "id": 12977282, "time": "2018-01-17T20:39:45Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nhttps://reviewboard.mozilla.org/r/191232/#review219442", "author": "kmaglione+bmo@mozilla.com", "id": 12977290, "time": "2018-01-17T20:45:54Z"}, {"text": "Comment on attachment 8920224\nBug 1406181 - Use indexedDB as the backend for storage.local.\n\nhttps://reviewboard.mozilla.org/r/191234/#review219444\n\n::: toolkit/components/extensions/Extension.jsm:1500\n(Diff revision 3)\n> +      if (this.useExtensionStorageIDB) {\n> +        await this.migrateStorageLocalData();\n\nWe don't need to do this at every startup, only when the storage backend changes.\n\n::: toolkit/components/extensions/Extension.jsm:1537\n(Diff revision 3)\n> +    let oldStorageFile = Cc[\"@mozilla.org/file/local;1\"].createInstance(Ci.nsIFile);\n> +    oldStorageFile.initWithPath(ExtensionStorage.getStorageFile(this.id));\n> +\n> +    if (!oldStorageFile.exists()) {\n\nThis needs to use the OS.File API.\n\n::: toolkit/components/extensions/Extension.jsm:1545\n(Diff revision 3)\n> +    if (!oldStorageFile.exists()) {\n> +      return;\n> +    }\n> +\n> +    const isEmpty = await ExtensionStorageIDB.isEmpty(this.id);\n> +\n\nNit: Remove line.\n\n::: toolkit/components/extensions/Extension.jsm:1552\n(Diff revision 3)\n> +      // Cancel the data migration is the indexedDB backend for the extension is not empty.\n> +      return;\n> +    }\n> +\n> +    let jsonFile;\n> +\n\nRemove line.\n\n::: toolkit/components/extensions/Extension.jsm:1568\n(Diff revision 3)\n> +    for (let [key, value] of jsonFile.data.entries()) {\n> +      try {\n> +        await ExtensionStorageIDB.set(this.id, {[key]: value});\n> +      } catch (err) {\n> +        completedWithErrors = true;\n> +\n> +        // Report the migration error and continue to migrate the remaining data.\n> +        Cu.reportError(\n> +          new Error(`Extension error during storage.local data migration for ${this.id} ` +\n> +                    `on key '${key}': ${err.message} :: ${err.stack}`)\n> +        );\n> +      }\n> +    }\n\nWe should do this in a single request, and make sure we don't try to notify listeners.\n\n::: toolkit/components/extensions/Extension.jsm:1578\n(Diff revision 3)\n> +\n> +        // Report the migration error and continue to migrate the remaining data.\n> +        Cu.reportError(\n> +          new Error(`Extension error during storage.local data migration for ${this.id} ` +\n> +                    `on key '${key}': ${err.message} :: ${err.stack}`)\n> +        );\n\nNit: Move to previous line. Also, no need for `new Error`.\n\n::: toolkit/components/extensions/Extension.jsm:1582\n(Diff revision 3)\n> +                    `on key '${key}': ${err.message} :: ${err.stack}`)\n> +        );\n> +      }\n> +    }\n> +\n> +    oldStorageFile.renameTo(null, `${oldStorageFile.leafName}.migrated`);\n\nWe should probably just remove this if the migration was successful.\n\nAlso, this needs to use the OS.File API.\n\n::: toolkit/components/extensions/Extension.jsm:1737\n(Diff revision 3)\n> +  get useExtensionStorageIDB() {\n> +    if (this._useExtensionStorageIDB == null) {\n> +      this._useExtensionStorageIDB = Services.prefs.getBoolPref(EXT_STORAGE_IDB_PREF,\n> +                                                                EXT_STORAGE_IDB_PREF_DEFAULT);\n> +    }\n> +\n> +    return this._useExtensionStorageIDB;\n> +  }\n\nPlease just use `defineLazyPrefGetter`\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:66\n(Diff revision 3)\n> +    const db = await this._open(extensionId);\n> +    const storedKeys = await this._loadAllStoredKeys(db);\n> +    await db.close();\n> +    return storedKeys.length === 0;\n\nThis is seriously inefficient.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:211\n(Diff revision 3)\n>      let changes = {};\n>      let promisesChanged = [];\n>  \n>      for (let key of keys) {\n> -      if (key in data) {\n> +      if (skipNotify) {\n> +        promisesChanged.push(store.delete(key));\n\nThis doesn't need to be in both branches.\n\n::: toolkit/components/extensions/ext-c-storage.js:68\n(Diff revision 3)\n> -        },\n> +      },\n> +      set: async function(items) {\n> +        const stopwatchKey = {};\n> +        TelemetryStopwatch.start(storageSetHistogram, stopwatchKey);\n> +        try {\n> +          const hasListeners = await hasParentListeners();\n\nThis is going to be super expensive and racy.\n\n::: toolkit/components/extensions/ext-c-storage.js:73\n(Diff revision 3)\n> +            result = await context.childManager.callParentAsyncFunction(\"storage.local.set\", [\n> +              serialize(items),\n> +            ]);\n\nThis isn't really a good idea. We should always perform the IDB transactions in a child process. If we need to handle cross-process listeners, we should either find some way to use transactions to handle ordering them correctly, or have non-extension processes proxy their changes and listeners through the extension process.\n\n::: toolkit/components/extensions/ext-c-storage.js:78\n(Diff revision 3)\n> +              skipNotify: true,\n> +            });\n\n`{skipNotify: true})`", "author": "kmaglione+bmo@mozilla.com", "id": 12977328, "time": "2018-01-17T21:01:20Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191236/#review219448", "author": "kmaglione+bmo@mozilla.com", "id": 12977334, "time": "2018-01-17T21:03:38Z"}, {"text": "Does this supersede bug 1277612? Why is it better to have a standalone IndexedDB backend vs. using the kinto.js library as an API that wraps IndexedDB or Sqlite?", "author": "eglassercamp@mozilla.com", "id": 12977396, "time": "2018-01-17T21:32:53Z"}, {"text": "(In reply to Ethan Glasser-Camp (:glasserc) from comment #31)\n> Does this supersede bug 1277612? Why is it better to have a standalone\n> IndexedDB backend vs. using the kinto.js library as an API that wraps\n> IndexedDB or Sqlite?\n\nThat's a good question. In general, I'd prefer to use as much of the same implementation as possible for the local and sync backends. The only real issue I see is that we'd really like the DB interaction to happen as much in the child process as possible, and I'm not sure the kinto backend allows for that.\n\nAlso, addendum to the above comments:\n\nWe should really either be storing values as StructuredCloneBlobs in the DB, or find some way to serialize and deserialize them in the extension compartment. Otherwise we're going to wind up reintroducing a bunch of unnecessary clones every time data is read or changed.", "author": "kmaglione+bmo@mozilla.com", "id": 12977408, "time": "2018-01-17T21:39:12Z"}, {"text": "(In reply to Kris Maglione [:kmag] (long backlog; ping on IRC if you're blocked) from comment #32)\n> We should really either be storing values as StructuredCloneBlobs in the DB,\n> or find some way to serialize and deserialize them in the extension\n> compartment. Otherwise we're going to wind up reintroducing a bunch of\n> unnecessary clones every time data is read or changed.\n\nMaybe IndexedDB wants to grow a little bit more chrome-supporting logic.  I see two aspects that could help:\n\n1) Re: comment 27 and using the extension's origin, there's some prior art for the dom/cache API which has a notion of (a fixed, enumerated set of) namespaces, with the ServiceWorker internals using that namespace to store the ServiceWorker scripts under their own origin, but where content can't directly access them.  If IndexedDB grew similar explicit functionality, that might be useful here.\n\n   It's of course possible to hack something up using OriginAttributes and attribute patterns.  IndexedDB might even want to go that same route to implement namespaces.  (Noting that when I raised the prospect of adding an attribute for differing levels of session persistence, :baku indicated a new attribute would be inappropriate, but the container userContextId mechanism might be an acceptable way to partition things without exploding the number of dimensions... we can allocate specific id's for specific purposes... possibly negative ones.)\n\n\n2) StructuredCloneBlob's ability to deal with other globals looks super useful.  If IDB added some ChromeOnly methods so that add/put could take a global, and that the result values could be extracted into a specific global, that sounds like it would facilitate the use-case without getting into the downsides of making StructuredCloneBlob something that can be persisted, duplicating persistence-related efforts, or losing the benefits of IndexedDB's disk-backed Blobs and their deduplication-via-under-the-hood-references magic.\n\n  IndexedDB already limits persistence to a subset of all the things that can notionally be structured cloned.  An effort has been made to try and keep things stable across versions, although this hasn't stopped things from accidentally sneaking in that complicate things (ex: Bug 1431241, also the initial landing of StructuredCloneBlob).  There's now a spec for persistence at https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeforstorage and a general WebIDL extensibility mechanism ([Serializable] and [Transferable]) that is tracked for DOM as Bug 1350254.  While those enhancements will likely end up StructuredCloneHolder anyways, it would still be less scary if only IndexedDB had to worry about persistence and upgrades.\n\n\n\nAs another aside, re: the mention of listeners, I believe we are strongly considering https://github.com/WICG/indexed-db-observers although I don't see us down as committed at https://www.chromestatus.com/feature/5669292892749824.  Certainly, since Chrome already has a prototype implementation hidden behind a flag, if you're hoping for cross-browser consistent semantics, building on that rather than something more ad-hoc might be good.", "author": "bugmail@asutherland.org", "id": 12977878, "time": "2018-01-18T01:20:38Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review219436\n\n> This all needs to happen in a single transaction, or we'll wind up with interleaved transactions and listeners that contain stale values.\n\nBased on the implementation of the `objectStore method` (and its jsdoc comment https://searchfox.org/mozilla-central/rev/e3cba77cee3ff1be38313abe9c804d13c51bd95b/toolkit/modules/IndexedDB.jsm#307-308), `db.objectStore(...)` return value should be the transaction, am I reading it wrong?\n\nThat is also the reason why store.put has to be called synchronously for every key and then await on `Promise.all(savePromises)`, otherwise (e.g. if we await inside the loop on every single promise returned by `store.put(...)`), only the first `store.put(...)` would succeed, and the rest would fail because the transaction has been already closed).\n\nis there anything that I'm missing about the behavior implemented by the IndexedDB.jsm wrapper to ensure that everything is going to happen in the same transaction?", "author": "lgreco@mozilla.com", "id": 12992178, "time": "2018-01-24T18:19:59Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review219436\n\n> Based on the implementation of the `objectStore method` (and its jsdoc comment https://searchfox.org/mozilla-central/rev/e3cba77cee3ff1be38313abe9c804d13c51bd95b/toolkit/modules/IndexedDB.jsm#307-308), `db.objectStore(...)` return value should be the transaction, am I reading it wrong?\n> \n> That is also the reason why store.put has to be called synchronously for every key and then await on `Promise.all(savePromises)`, otherwise (e.g. if we await inside the loop on every single promise returned by `store.put(...)`), only the first `store.put(...)` would succeed, and the rest would fail because the transaction has been already closed).\n> \n> is there anything that I'm missing about the behavior implemented by the IndexedDB.jsm wrapper to ensure that everything is going to happen in the same transaction?\n\nNevermind I think that I found the answer myself: the part that read the existent data from the db wasn't part of the code highlighted by this comment and so it wasn't immediately clear from the comment itself, nevetheless the data is being read and written in two different transactions, and they should be part of a single transaction.", "author": "lgreco@mozilla.com", "id": 12996912, "time": "2018-01-26T10:06:03Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review219436\n\n> This database needs to have an extension origin.\n\nI agree, I avoided it in the first prototype on the IDB backend because I was unsure about which strategy we could use to make the database invisible from the extension code.\n\nNevertheless the strategy that ashut mentioned in his comment (using an extension principal isolated in a \"reserved\" userContextId) is exactly the one that I was thinking of, and ashut's comment motivated me to giving it a try asap, and so the new version of the backend is now going to open the database using the extension principal.\n\n> There's no need to do this when we have a list of keys to retrieve. If you really need to know the difference between a key with an undefined value and a nonexistent key, you can use a cursor. Or we can just forbid `undefined` as a storage value and normalize it to `null`.\n\nOne reason was that when browser.storage.local.get is called with null as parameter, the API is supposed to retrieve all the stored data and return it.\n\nI totally agree that we can avoid to retrieve all the keys at once, and so I've rewritten it to use a cursor when keysParam is null.\n\n> Opening a fresh database connection every time we want to read or change a key is a bad idea.\n> \n> Also, passing around DB objects like this is weird. If you want to build something on top of a DB, please create a class that owns the DB instance for an extension.\n\nI definitely agree, the first prototype wasn't yet reusing the db connection, the new version is now using a class that abstract the db connection and provides methods to read/write data from/to it, this db connection is then reused for multiple API requests (cached in a WeakMap with the extension as a key, and currently also removed from the WeakMap on idle).\n\n> Why?\n\nIt was to early exit if there are no keys to remove.", "author": "lgreco@mozilla.com", "id": 13030149, "time": "2018-02-09T12:12:29Z"}, {"text": "Comment on attachment 8920224\nBug 1406181 - Use indexedDB as the backend for storage.local.\n\nhttps://reviewboard.mozilla.org/r/191234/#review219444\n\n> We don't need to do this at every startup, only when the storage backend changes.\n\nThat is true, it was of the point I wanted to discuss, I'm going to take a look again to find a reasonable strategy to detect when the backend is changing for the first time (but also, let me know if you have any ideas or preferred strategy that we could use to achieve it).\n\n> We should probably just remove this if the migration was successful.\n> \n> Also, this needs to use the OS.File API.\n\nThat was one of the options I was thinking of, but given that the amount of data that can be currently stored in not that match (the JSONFile backend breaks when the stored data is becoming too big) I opted to just rename the file (which can be still used to recover same data if something goes wrong).", "author": "lgreco@mozilla.com", "id": 13030152, "time": "2018-02-09T12:13:51Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191232/diff/2-3/", "author": "lgreco@mozilla.com", "id": 13030187, "time": "2018-02-09T12:31:00Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/2-3/", "author": "lgreco@mozilla.com", "id": 13030188, "time": "2018-02-09T12:31:00Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13030189, "time": "2018-02-09T12:31:00Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13030190, "time": "2018-02-09T12:31:00Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13030191, "time": "2018-02-09T12:31:00Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13030192, "time": "2018-02-09T12:31:00Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13030193, "time": "2018-02-09T12:31:00Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review224772\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:26\n(Diff revision 3)\n> +// TODO(rpl): we should move this const into a file that is shared with the\n> +// contextual identities internals so that we are sure that the user context id\n> +// is reserved to this kind of usage and not reused for other purpose\n> +// (and that is not allowed to be used on a opened tab).\n> +const RESERVED_USER_CONTEXT_ID = -10;\n\nThis is a negative userContextId that I'm temporarily using to experiment the approach suggested in ashut comment to ensure that the indexedDB storage used as a browser.storage.local backend is not visible from the extension code.\n\nThe approach is working as expected, but we need to choose how to make sure that the \"containers feature internals\" are aware that these \"user context ids\" are reserved and should not be allowed elsewhere (e.g. it should not be allowed to use them for opened tabs, they should not be allowed in the WebExtensions APIs and the reserved user context ids should not be reused for different purposes) \n\n(I also need to add a new test case which verify that in an automated test, but in the meantime I verified that is working as expected using a small test extension)", "author": "lgreco@mozilla.com", "id": 13030207, "time": "2018-02-09T12:38:20Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review224778\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:208\n(Diff revision 3)\n> +  async set(items, {serialize} = {}) {\n> +    const global = this;\n> +\n> +    const changes = await this.runIDBTransactionTask(function* (objectStore, transaction) {\n> +      const result = {};\n> +\n> +      for (let key of Object.keys(items)) {\n\nIt looks that we can't use async functions and idb requests wrapped in promises to read and write data in a single IndexedDB transaction, because the transaction is closed as soon as the async function is resumed once the first \"promise-wrapped IDB request\" is resolved.\n\nI've currently opted to use generator functions to express the group of IDB operations as a sequence of IDB requests.\n\nThe runIDBTransactionTask helper method process the IDB request yielded by the generator and resume the generator as soon as the IDB request has been completed.\n\n(Given that after I gradually rewritten the get/set/remove/clear methods to this approach the new version is now using the Promise-based API provided by the IndexedDB.jsm base class only in one place, I'm probably going to just remove it and turn ExtensionStorageLocalIDB into a class that doesn't extend any base class).\n\n::: toolkit/components/extensions/ext-c-storage.js:76\n(Diff revision 3)\n> +          const hasListeners = await hasParentListeners();\n> +          if (hasListeners) {\n> +            await context.childManager.callParentAsyncFunction(\"storage.fireStorageLocalOnChanged\", [\n> +              changes,\n> +            ]);\n> +          }\n\nIn this new version the data is always read and updated in the child process, but the changes are still sent to the main process which route them to the other child processes.\n\nIf we could reuse an IndexedDB observer as suggested in ashut comment instead of re-invent a similar mechanisms just for this API it would be great.\n\nIn the meantime I've been thinking if there could be a short term strategy that we can put in place to reduce the amount of data that these event has to send in a messageManager event.\n\nHow about using another IndexedDB db in \"temporary\" storage mode, add the actual \"changes\" data to it and send the generated (autoIncrement) key across the processes, so that the listeners in the other processes can retrieve the changes from the \"temporary\" db?\n\n::: toolkit/components/extensions/ext-storage.js:60\n(Diff revision 3)\n> +  getLocalIDBBackend(context, {deserialize, hasListeners}) {\n> +    return {\n> +      set: function(items) {\n> +        // TODO: do we need ensure that we have a shutdown blocker active while the\n> +        // indexeddb transaction are potentially still running:\n> +        /*\n> +        AsyncShutdown.profileBeforeChange.addBlocker(\n> +          `Extension Storage IDB: Wait for extension ${extension.id} to save data`,\n> +          setDataPromise);\n> +\n> +        return setDataPromise;*/\n> +      },\n> +      remove: function(keys) {\n> +        // TODO: do we need ensure that we have a shutdown blocker active while the\n> +        // indexeddb transaction are potentially still running:\n> +      },\n> +      clear: function() {\n> +        // TODO: do we need ensure that we have a shutdown blocker active while the\n> +        // indexeddb transaction are potentially still running:\n> -        },\n> +      },\n> +    };\n\nThese set/remove/clear methods are currently all unused, because these are all implemented in the ext-c-storage.js.\n\nI've not removed them yet only because I want to double-check if we still need to add AsyncShutdown blocker in the main process,  \nas the JSONFile backend is doing to ensure that we wait the data to be stored when the browser is shutting down (e.g. I was wondering if this is something that we still have to do for the indexedDB transactions, which are now always happening in the child processes, or if it is something that the indexedDB is already doing internally).", "author": "lgreco@mozilla.com", "id": 13030260, "time": "2018-02-09T13:09:41Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review224900\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:180\n(Diff revision 3)\n> +  getUsage() {\n> +    return new Promise(resolve => {\n> +      Services.qms.getUsageForPrincipal(\n> +        this.params.storagePrincipal,\n> +        request => resolve(request.result.usage));\n> +    });\n> +  }\n\nThis method is not currently used anywhere, I added it because:\n\n- I was checking the usage of the `getUsageForPrincipal` to report the amount of data stored (e.g. because we could use it to provide the getBytesInUse API method, https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/storage/StorageArea/getBytesInUse)\n\n- I was briefly verifying if the db opened using the extension principal is limited by the quota (which seems that it is not currently enforced, but I've not yet investigated the underlying reasons).", "author": "lgreco@mozilla.com", "id": 13031367, "time": "2018-02-09T18:44:43Z"}, {"text": "Unfortunately, due to recent staffing changes, I think IndexedDB observers are off the table for now.", "author": "bugmail@asutherland.org", "id": 13041915, "time": "2018-02-14T16:43:12Z"}, {"text": "(In reply to Andrew Sutherland [:asuth] from comment #48)\n> Unfortunately, due to recent staffing changes, I think IndexedDB observers\n> are off the table for now.\n\nHi Andrew,\nThanks for pointing it out, I'm going to take it into account.\n\nThank you very much also for all the suggestions you provided in comment 33, they have been very helpful!\n(and I've now started to discuss with :baku about where it would be better to add the reserved userContextId).", "author": "lgreco@mozilla.com", "id": 13045665, "time": "2018-02-15T19:05:30Z"}, {"text": "Created attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview commit: https://reviewboard.mozilla.org/r/223334/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/223334/", "author": "lgreco@mozilla.com", "id": 13070619, "time": "2018-02-26T21:23:46Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191232/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13070620, "time": "2018-02-26T21:23:46Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13070621, "time": "2018-02-26T21:23:46Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13070622, "time": "2018-02-26T21:23:46Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13070623, "time": "2018-02-26T21:23:46Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13070624, "time": "2018-02-26T21:23:46Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13070625, "time": "2018-02-26T21:23:46Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13070626, "time": "2018-02-26T21:23:46Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nHi Andrea,\nDuring the past week I took a look at the ContextualIdentityService.jsm part of  \"reserving a private userContextId for the WebExtensions storage.local IndexedDB backend\" that we briefly discussed over IRC and I'd like to get a preliminary feedback on it.\n\nThe user context id is still hardcoded into the ExtensionStorageIDB.jsm module (which is mostly used in the child process where we can't load arbitrary file from the profile dir), but while I was looking into the migration of the containers json file I noticed that (besides giving a name to the private reserved userContextId) we should also ensure that the extension data is not cleared when ContextualIdentityService.jsm clears all the other identities.\n\nI also added some additional assertions to the test_corrupted.js unit test (so that we check that the reserved identity is still available if the containers.json file is corrupted, and that the extension storage data is not cleared on the reserved identity, as well as a new test case for the migration of an old json file to the last version (and that the expected changes are applied, e.g. the new reserved identity should be available as well as any custom user-created identity that was part of the old containers.json file content).", "author": "lgreco@mozilla.com", "id": 13070664, "time": "2018-02-26T21:33:03Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nhttps://reviewboard.mozilla.org/r/223334/#review229524\n\nI would like to see a test for migration3to4\n\n::: toolkit/components/contextualidentity/ContextualIdentityService.jsm:76\n(Diff revision 1)\n>        icon: \"fingerprint\",\n>        color: \"blue\",\n>        l10nID: \"userContextPersonal.label\",\n>        accessKey: \"userContextPersonal.accesskey\",\n>        telemetryId: 1,\n> +      keepData: false,\n\nthis name is confusing, plus, it is used only in notifyAllContainersCleared().\n\nProbably we should just ignore private containers in notifyAllContainersCleared() and delete data only for the public ones.", "author": "amarchesini@mozilla.com", "id": 13072100, "time": "2018-02-27T11:11:47Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/1-2/", "author": "lgreco@mozilla.com", "id": 13072449, "time": "2018-02-27T14:06:24Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13072450, "time": "2018-02-27T14:06:24Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13072451, "time": "2018-02-27T14:06:24Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13072452, "time": "2018-02-27T14:06:24Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13072453, "time": "2018-02-27T14:06:24Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13072454, "time": "2018-02-27T14:06:24Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nhttps://reviewboard.mozilla.org/r/223334/#review229524\n\nDefinitely, it was missing from the patch because I forgot to \"hg add\" it :-)\n\nI've just added it and pushed an update on this patch: https://reviewboard.mozilla.org/r/191228/diff/5-6/\n\n> this name is confusing, plus, it is used only in notifyAllContainersCleared().\n> \n> Probably we should just ignore private containers in notifyAllContainersCleared() and delete data only for the public ones.\n\nYeah, using the existing \"public\" attribute sounds great to me, I'm going to update the patch accordingly.", "author": "lgreco@mozilla.com", "id": 13072462, "time": "2018-02-27T14:09:52Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191236/#review229562\n\n\nCode analysis found 1 defect in this patch:\n - 1 defect found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint path/to/file` (JS/Python)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: toolkit/components/extensions/test/xpcshell/test_ext_storage.js:86\n(Diff revision 6)\n>    await extension.unload();\n>  });\n>  \n>  add_task(async function test_single_initialization() {\n>    // Grab access to this via the backstage pass to check if we're calling openConnection too often.\n> -  const {FirefoxAdapter} = ChromeUtils.import(\"resource://gre/modules/ExtensionStorageSync.jsm\", {});\n> +  const {FirefoxAdapter} = Cu.import(\"resource://gre/modules/ExtensionStorageSync.jsm\", {});\n\nError: Please use chromeutils.import instead of cu.import [eslint: mozilla/use-chromeutils-import]", "author": "jkeromnes+clangbot@mozilla.com", "id": 13072484, "time": "2018-02-27T14:20:25Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review224778\n\n> It looks that we can't use async functions and idb requests wrapped in promises to read and write data in a single IndexedDB transaction, because the transaction is closed as soon as the async function is resumed once the first \"promise-wrapped IDB request\" is resolved.\n> \n> I've currently opted to use generator functions to express the group of IDB operations as a sequence of IDB requests.\n> \n> The runIDBTransactionTask helper method process the IDB request yielded by the generator and resume the generator as soon as the IDB request has been completed.\n> \n> (Given that after I gradually rewritten the get/set/remove/clear methods to this approach the new version is now using the Promise-based API provided by the IndexedDB.jsm base class only in one place, I'm probably going to just remove it and turn ExtensionStorageLocalIDB into a class that doesn't extend any base class).\n\nHey Kris,\nI was re-looking if I could finally kill this `runIDBTransactionTask` hack and just using an async function to run multiple read/write requests in a single IndexedDB transaction now that Bug 1193394 has been fixed, and based on this Bug 1193394 Comment 164 it seems that I can definitely kill this hack now \\o/\n\nI'm going to give it a try asap (I have to rebase these patches on top of a more recent m-c first), if you didn't reached this part of the code yet in your review, keep it into account that this hack is going away.", "author": "lgreco@mozilla.com", "id": 13141416, "time": "2018-03-20T00:38:57Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191232/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13158430, "time": "2018-03-27T11:46:57Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13158431, "time": "2018-03-27T11:46:57Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/2-3/", "author": "lgreco@mozilla.com", "id": 13158432, "time": "2018-03-27T11:46:57Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13158433, "time": "2018-03-27T11:46:57Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13158434, "time": "2018-03-27T11:46:57Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13158435, "time": "2018-03-27T11:46:57Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13158436, "time": "2018-03-27T11:46:57Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13158437, "time": "2018-03-27T11:46:57Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191236/#review237040\n\n\nCode analysis found 1 defect in this patch:\n - 1 defect found by mozlint\n\nYou can run this analysis locally with:\n - `./mach lint path/to/file` (JS/Python)\n\n\nIf you see a problem in this automated review, please report it here: http://bit.ly/2y9N9Vx\n\n\n::: toolkit/components/extensions/test/xpcshell/test_ext_storage.js:86\n(Diff revision 7)\n>    await extension.unload();\n>  });\n>  \n>  add_task(async function test_single_initialization() {\n>    // Grab access to this via the backstage pass to check if we're calling openConnection too often.\n> -  const {FirefoxAdapter} = ChromeUtils.import(\"resource://gre/modules/ExtensionStorageSync.jsm\", {});\n> +  const {FirefoxAdapter} = Cu.import(\"resource://gre/modules/ExtensionStorageSync.jsm\", {});\n\nError: Please use chromeutils.import instead of cu.import [eslint: mozilla/use-chromeutils-import]", "author": "jkeromnes+clangbot@mozilla.com", "id": 13158442, "time": "2018-03-27T11:49:25Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review224778\n\n> Hey Kris,\n> I was re-looking if I could finally kill this `runIDBTransactionTask` hack and just using an async function to run multiple read/write requests in a single IndexedDB transaction now that Bug 1193394 has been fixed, and based on this Bug 1193394 Comment 164 it seems that I can definitely kill this hack now \\o/\n> \n> I'm going to give it a try asap (I have to rebase these patches on top of a more recent m-c first), if you didn't reached this part of the code yet in your review, keep it into account that this hack is going away.\n\nLast week I have rebased all the patches on a recent mozilla-central tip, and then removed the runIDBTransationTask helper and changed the generators into async functions.\n\nBesides that I've resolved the conflicts related to the tests converted from mochitest into xpcshell tests recently.", "author": "lgreco@mozilla.com", "id": 13158444, "time": "2018-03-27T11:52:47Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13158456, "time": "2018-03-27T12:05:38Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13158457, "time": "2018-03-27T12:05:38Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13158458, "time": "2018-03-27T12:05:38Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13158459, "time": "2018-03-27T12:05:38Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13158460, "time": "2018-03-27T12:05:38Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review241058\n\n::: toolkit/components/extensions/Extension.jsm:1213\n(Diff revision 5)\n>      this._optionalOrigins = null;\n>      this.webAccessibleResources = null;\n>  \n>      this.emitter = new EventEmitter();\n>  \n> +    XPCOMUtils.defineLazyPreferenceGetter(this, \"useExtensionStorageIDB\", EXT_STORAGE_IDB_PREF);\n\nHaving this as a lazy getter on an extension instance makes no sense at all. The storage backend an instance uses should never change.\n\n::: toolkit/components/extensions/Extension.jsm:1698\n(Diff revision 5)\n> +    const oldStoragePath = ExtensionStorage.getStorageFile(this.id);\n> +    const oldStorageExists = await OS.File.exists(oldStoragePath);\n> +\n> +    if (!oldStorageExists) {\n> +      return;\n> +    }\n\nDoing this check on every startup is unacceptable performance overhead.\n\n::: toolkit/components/extensions/Extension.jsm:1749\n(Diff revision 5)\n> +    }\n> +\n> +    // If the new ExtensionStorageIDB is not empty anymore, then rename the\n> +    // old file to prevent a new data migration to be tried on the next\n> +    // extension startup.\n> +    OS.File.move(oldStoragePath, `${oldStoragePath}.migrated`);\n\nI'm pretty sure I asked you not to leave this file around if the migratino was successful...\n\n::: toolkit/components/extensions/ExtensionChild.jsm:596\n(Diff revision 5)\n> +    // Preserve the same storage.local backend choosen by the extension\n> +    // in the main process.\n\nThis comment is not useful.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:30\n(Diff revision 5)\n> +    const principal = Services.scriptSecurityManager.createCodebasePrincipal(\n> +      extension.baseURI, {userContextId: RESERVED_USER_CONTEXT_ID});\n\nPlease don't duplicate this code.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:35\n(Diff revision 5)\n> +    request.onupgradeneeded = event => {\n> +      let db = new this(request.result);\n> +      db.createObjectStore(IDB_DATA_STORENAME);\n> +    };\n> +\n> +    return new Promise((resolve, reject) => {\n> +      request.onsuccess = () => resolve(new ExtensionStorageLocalIDB(request.result, {\n> +        extension,\n> +        storagePrincipal: principal,\n> +      }));\n> +      request.onerror = () => reject(request.error);\n> +    });\n\nPlease don't duplicate this code from IndexedDB.js\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:64\n(Diff revision 5)\n> +    super();\n> +    this.db = db;\n> +    this.params = params;\n> +  }\n> +\n> +  async loadData(keysParam, defaultValues) {\n\nThis should be called something like `get`. And since a `get` method exists, and is the only caller, this should just be rolled into that.\n\nAlso, please don't put 'Param' in the name of a parameter. We can see it's a param.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:75\n(Diff revision 5)\n> +        request.onerror = reject;\n> +        request.onsuccess = (evt) => {\n> +          const cursor = evt.target.result;\n> +          if (cursor) {\n> +            result[cursor.key] = cursor.value;\n> +            cursor.continue();\n> +          } else {\n> +            // No more items to get.\n> +            resolve(result);\n> +          }\n> +        };\n\nThe promise wrappers in the indexedDB classes exist for a reason. Please use them rather than using requests directly.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:92\n(Diff revision 5)\n> +    }\n> +\n> +    const objectStore = this.objectStore(IDB_DATA_STORENAME);\n> +    for (let key of keysParam) {\n> +      const storedValue = await objectStore.get(key);\n> +      if (typeof(storedValue) === \"undefined\") {\n\nNo need for `typeof`. `if (storedValue === undefined)`\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:96\n(Diff revision 5)\n> +\n> +        continue;\n> +      }\n> +\n> +      result[key] = storedValue;\n\nPlease use an `else` rather than a continue.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:109\n(Diff revision 5)\n> +  }\n> +\n> +  async isEmpty() {\n> +    const {cursor} = await this.objectStore(IDB_DATA_STORENAME, \"readonly\").openKeyCursor();\n> +\n> +    // If the cursor is undefined, then the DB is empty.\n\nNo, the cursor should never be undefined.\n\nIf it were, though, this should be something like `return !cursor;`\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:168\n(Diff revision 5)\n> +        newValue = serialize ? serialize(items[key]) : items[key];\n> +\n> +        // Using the value deserialized from the StructuredCloneHolder will make\n> +        // the IndexedDB put operation faster (because it will not spent that much time\n> +        // on the Xrays wrappers).\n> +        const valueToStore = newValue && newValue.deserialize ?\n> +                newValue.deserialize(global) : newValue;\n\nThis still gives us tons of extra structured clone overhead, even if it improves the X-ray overhead. I'd rather we extend the indexedDB APIs to handle cloning directly from/to the content compartment, like Andrew suggested.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:309\n(Diff revision 5)\n> +    // Clear the db connection when idle.\n> +    ChromeUtils.idleDispatch(async () => {\n> +      this.dbConnections.delete(extension);\n> +    }, {timeout: IDB_IDLE_TIMEOUT});\n\nNo. Why would we do this?\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:317\n(Diff revision 5)\n> +  async isEmpty(extension) {\n> +    const db = await this._open(extension);\n> +    const isEmpty = await db.isEmpty();\n> +    await db.close();\n> +\n> +    return isEmpty;\n> +  },\n\nPlease just have callers obtain an instance when they initialize the API and use that rather than wrapping every method to open a copy of the DB and then call a method on it.\n\n::: toolkit/components/extensions/ext-storage.js:63\n(Diff revision 5)\n> +        // TODO: do we need ensure that we have a shutdown blocker active while the\n> +        // indexeddb transaction are potentially still running:\n\nNo.\n\n::: toolkit/components/extensions/ext-storage.js:65\n(Diff revision 5)\n> +        /*\n> +        AsyncShutdown.profileBeforeChange.addBlocker(\n> +          `Extension Storage IDB: Wait for extension ${extension.id} to save data`,\n> +          setDataPromise);\n> +\n> +        return setDataPromise;*/\n> +      },\n> +      remove: function(keys) {\n> +        // TODO: do we need ensure that we have a shutdown blocker active while the\n> +        // indexeddb transaction are potentially still running:\n> +      },\n> +      clear: function() {\n> +        // TODO: do we need ensure that we have a shutdown blocker active while the\n> +        // indexeddb transaction are potentially still running:\n> -        },\n> +      },\n\nWhy does any of this need to exist?", "author": "kmaglione+bmo@mozilla.com", "id": 13196460, "time": "2018-04-10T23:22:01Z"}, {"text": "Created attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nReview commit: https://reviewboard.mozilla.org/r/236876/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/236876/", "author": "lgreco@mozilla.com", "id": 13209673, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191232/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13209674, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13209675, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13209676, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13209677, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13209678, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13209679, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13209680, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13209681, "time": "2018-04-16T14:32:48Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13209786, "time": "2018-04-16T15:00:57Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13209787, "time": "2018-04-16T15:00:57Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13209788, "time": "2018-04-16T15:00:57Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13209789, "time": "2018-04-16T15:00:57Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13209790, "time": "2018-04-16T15:00:57Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13209791, "time": "2018-04-16T15:00:57Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13209792, "time": "2018-04-16T15:00:57Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13209794, "time": "2018-04-16T15:01:12Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13209795, "time": "2018-04-16T15:01:12Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review241058\n\n> Having this as a lazy getter on an extension instance makes no sense at all. The storage backend an instance uses should never change.\n\nIn the updated patch I completely reworked how the active storage.local backend for an extension is being detected (and the data migrated if needed), so that it happens when the storage.local API is used for the first time, and so this part is totally gone.\n\n> Doing this check on every startup is unacceptable performance overhead.\n\nI definitely agreed on that, and that was the reason why I never cleared the \"comment with issue\" https://bugzilla.mozilla.org/show_bug.cgi?id=1406181#c37 (or https://reviewboard.mozilla.org/r/191234/#review219444 on mozreview), because I wanted to discuss about it with you and evaluate other options.\n\nAnyway, I briefly chatted about this with aswan last week, and then reworked the patch based on that discussion (basically deferring the data migration and any check related to it to the first usage of the storage.local API for a given extension).\n\n> I'm pretty sure I asked you not to leave this file around if the migratino was successful...\n\nIn the updated patch the old migrated file is going to be removed (but if the file fails to be removed after the data has been migrated, it still uses the IDB backend).\n\nAs for the comment above: in https://bugzilla.mozilla.org/show_bug.cgi?id=1406181#c37 I was actually trying to discuss it in a bit more detail with you right after the previous round of review comments.\n\n\"Removing the migration file when the migration has been successful\" sounds obviously reasonable to me too, but what I wanted was to double-check which were the other scenarios around the data migration and which storage.local backend to use as a result (e.g. keep using the JSONfile backend or still proceed with using the IndexedDB backend), and be sure that I wasn't missing some additional scenario that you could have in mind.\n\nAnyway, even now that the migrated file is removed, I still feel that the data migration could use an additional brief discussion related to some of the possible scenarios (e.g. currently if an extension fails to migrate its existing data to the IDB backend, it logs a warning message in the Browser Console and then it does keep to use of the JSONFile backend, which could be nice during the testing phase, but to be sure that all the extensions are going to use the new backend we should avoid that at some point).\n\n> This comment is not useful.\n\nThis part has been completely removed as part of the last round of changes.\n\n> Please don't duplicate this code.\n\nDuplicating this code wasn't actually the intention, this is part of the changes applied after your last review, and it did contain the draft code needed to open the indexedDB with the reserved userContextId (as it has been discussed https://bugzilla.mozilla.org/show_bug.cgi?id=1406181#c33, https://bugzilla.mozilla.org/show_bug.cgi?id=1406181#c33 and some of the other bugzilla comments above), which was meant to become part of the wrapper defined by IndexedDB.jsm after double-checking with you that we are ok with this strategy (I mean the \"reserved\"/\"non-public\" userContextId).\n\nAnyway, I've added a new patch in this mozreview request, which contains a proposed set of changes to cover this directly from the IndexedDB.jsm wrapper.\n\n> Please don't duplicate this code from IndexedDB.js\n\nSame as above.\n\n> This should be called something like `get`. And since a `get` method exists, and is the only caller, this should just be rolled into that.\n> \n> Also, please don't put 'Param' in the name of a parameter. We can see it's a param.\n\nOuch, I should have rolled this back into the `get` method in the previous refactoring (which reworked the other method so that they don't need to load all the data anymore) and I forgot, I did it in the updated patch.\n\nAbout the 'Param\" in the name, it was there because this method was actually inside the `get` method and eslint was complaining of the \"shadowing\" the variable already declared in the scope (which was the actual `keys` array, while `keysParams` could have been both an array of keys of the items object).\n\nBesides rolling `loadData` back inside the `get` method, I've also renamed `keysParam` into `keysOrItems` in the updated `get` method (so that it makes eslint happy, but it still make it clear that it may not be the array of the keys, and hopefully this new name does also sound better to you too ;-)).\n\n> The promise wrappers in the indexedDB classes exist for a reason. Please use them rather than using requests directly.\n\nWell, initially this was using directly the IndexedDB cursor request because of the issues with the Promises and IndexedDB transactions before Bug 1193394 (as mentioned in https://bugzilla.mozilla.org/show_bug.cgi?id=1406181#c68), and then I forgot to look into making the IndexedDB.jsm openCursor/openKeyCursor wrappers able to work correctly with a cursor that is being updated (e.g. using cursor.continue() as above), because the current version of the IndexedDB wrapper is wrapping the openCursor into a single promise, which can be resolved only once, on the contrary the `request.onsuccess` handler is going to be called again with the updated cursor when `cursor.continue()` (or the other cursor methods that update the cursor) are being called.\n\nThe new patch in this mozreview request contains a set of proposed changes to IndexedDB.jsm so that we can use the wrapped cursor instance here.\n\n> No need for `typeof`. `if (storedValue === undefined)`\n\nDone.\n\n> Please use an `else` rather than a continue.\n\nDone.\n\n> No, the cursor should never be undefined.\n> \n> If it were, though, this should be something like `return !cursor;`\n\nThe instance of the Cursor class (which wraps the real cursor) is always going to be created, it is the wrapped cursor that would be undefined if the database is empty:\n\nhttps://searchfox.org/mozilla-central/source/toolkit/modules/IndexedDB.jsm#155-159\n\nAnyway, I've changed this based on the proposed changes to the Cursor class defined by IndexedDB.jsm.\n\n> This still gives us tons of extra structured clone overhead, even if it improves the X-ray overhead. I'd rather we extend the indexedDB APIs to handle cloning directly from/to the content compartment, like Andrew suggested.\n\nI don't disagree, but I've not changed it yet (I have to look into the indexedDB internals in a bit more details to get a picture of the amount/kind of changes that this would need, and so I opted to work on the other pieces first).   \n \nShould we block this on the implementation of that additional IndexedDB chromeOnly behaviors?\nor it is something that we could improve in a follow up? \n(e.g. if it would not require another data migration once we do have such feature available).\n\n> No. Why would we do this?\n\nThat was actually something that I wanted to ask to be sure, but that definitely answer it.\n\nRemoved.\n\n> Please just have callers obtain an instance when they initialize the API and use that rather than wrapping every method to open a copy of the DB and then call a method on it.\n\nDone.\n\n> No.\n\nOk, removed inlined TODO comment and the non-needed methods in the parent process ext-storage.js.\n\n> Why does any of this need to exist?\n\nSame question as above, the above answer was already enough ;-)\n\nRemoved.", "author": "lgreco@mozilla.com", "id": 13209999, "time": "2018-04-16T15:56:13Z"}, {"text": "Created attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview commit: https://reviewboard.mozilla.org/r/238008/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/238008/", "author": "lgreco@mozilla.com", "id": 13218439, "time": "2018-04-19T13:41:45Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13218440, "time": "2018-04-19T13:41:45Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13218441, "time": "2018-04-19T13:41:45Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/10-11/", "author": "lgreco@mozilla.com", "id": 13218442, "time": "2018-04-19T13:41:45Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/10-11/", "author": "lgreco@mozilla.com", "id": 13218443, "time": "2018-04-19T13:41:45Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/10-11/", "author": "lgreco@mozilla.com", "id": 13218444, "time": "2018-04-19T13:41:45Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/10-11/", "author": "lgreco@mozilla.com", "id": 13218445, "time": "2018-04-19T13:41:45Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/10-11/", "author": "lgreco@mozilla.com", "id": 13218446, "time": "2018-04-19T13:41:45Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/11-12/", "author": "lgreco@mozilla.com", "id": 13218532, "time": "2018-04-19T14:00:39Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/11-12/", "author": "lgreco@mozilla.com", "id": 13218533, "time": "2018-04-19T14:00:39Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/11-12/", "author": "lgreco@mozilla.com", "id": 13218534, "time": "2018-04-19T14:00:39Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/11-12/", "author": "lgreco@mozilla.com", "id": 13218535, "time": "2018-04-19T14:00:39Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13219504, "time": "2018-04-19T19:18:26Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/1-2/", "author": "lgreco@mozilla.com", "id": 13219505, "time": "2018-04-19T19:18:26Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/11-12/", "author": "lgreco@mozilla.com", "id": 13219506, "time": "2018-04-19T19:18:26Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/12-13/", "author": "lgreco@mozilla.com", "id": 13219507, "time": "2018-04-19T19:18:26Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/12-13/", "author": "lgreco@mozilla.com", "id": 13219508, "time": "2018-04-19T19:18:26Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/12-13/", "author": "lgreco@mozilla.com", "id": 13219509, "time": "2018-04-19T19:18:26Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/12-13/", "author": "lgreco@mozilla.com", "id": 13219510, "time": "2018-04-19T19:18:26Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191238/#review244772\n\nThis looks good, another possibility would be to add a helper to the extension xpchsell head.js that handles setting a pref (or prefs), running a test, then clearing the pref(s).  That would avoid the last cleanup task.  Looks like normandy has something similar for mochitest:\nhttps://searchfox.org/mozilla-central/rev/8f06c1b9a080b84435a2906e420fe102e1ed780b/toolkit/components/normandy/test/browser/head.js#219-230", "author": "aswan@mozilla.com", "id": 13227729, "time": "2018-04-23T20:44:14Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191240/#review244778\n\nThis is testing an extension directly using localStorage and indexedDB twice, why not separate that part and only do the browser.storage tests with the two backends?", "author": "aswan@mozilla.com", "id": 13227736, "time": "2018-04-23T20:46:39Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191242/#review244782\n\nLooks good, though the main test logic is here is repeated a few times, it would be a good candidate to move into a single function.\nAlso see the comment on the telemtry test patch.", "author": "aswan@mozilla.com", "id": 13227749, "time": "2018-04-23T20:50:01Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191244/#review244786\n\nSee the comment from the telemetry test patch", "author": "aswan@mozilla.com", "id": 13227752, "time": "2018-04-23T20:51:35Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13232876, "time": "2018-04-25T16:01:07Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/2-3/", "author": "lgreco@mozilla.com", "id": 13232877, "time": "2018-04-25T16:01:07Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/12-13/", "author": "lgreco@mozilla.com", "id": 13232878, "time": "2018-04-25T16:01:07Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/13-14/", "author": "lgreco@mozilla.com", "id": 13232879, "time": "2018-04-25T16:01:07Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/13-14/", "author": "lgreco@mozilla.com", "id": 13232880, "time": "2018-04-25T16:01:07Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/13-14/", "author": "lgreco@mozilla.com", "id": 13232881, "time": "2018-04-25T16:01:07Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/13-14/", "author": "lgreco@mozilla.com", "id": 13232882, "time": "2018-04-25T16:01:07Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191240/#review244778\n\nyeah, I agree, I extracted the part the is different (basically the writeData and readData functions and the assertions) from the \"test plan\" function, this way we reuse the shared part without repeating the test for IndexedDB and localStorage data twice (this is the interdiff restricted to this change: https://reviewboard.mozilla.org/r/191240/diff/13-14/).\n\nThanks for your review comments!", "author": "lgreco@mozilla.com", "id": 13232899, "time": "2018-04-25T16:05:13Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nThis patch has been already r+ed by baku (https://bugzilla.mozilla.org/show_bug.cgi?id=1406181#c59), but bugzilla lost the r+ when I reordered the patches, and so I'm setting the r+ on bugzilla manually.", "author": "lgreco@mozilla.com", "id": 13232911, "time": "2018-04-25T16:08:08Z"}, {"text": "(In reply to Andrew Swan [:aswan] from comment #123)\n> Comment on attachment 8920226\n> Bug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n> \n> https://reviewboard.mozilla.org/r/191238/#review244772\n> \n> This looks good, another possibility would be to add a helper to the\n> extension xpchsell head.js that handles setting a pref (or prefs), running a\n> test, then clearing the pref(s).  That would avoid the last cleanup task. \n> Looks like normandy has something similar for mochitest:\n> https://searchfox.org/mozilla-central/rev/\n> 8f06c1b9a080b84435a2906e420fe102e1ed780b/toolkit/components/normandy/test/\n> browser/head.js#219-230\n\nyep, sounds like a good idea to me.\n\nI've applied this change in all the xpcshell tests (and added a new `runWithPrefs` helper in https://reviewboard.mozilla.org/r/191236/diff/12-13/ and applied it to the test_ext_storage.js xpcshell test, then in the other patches I've used the new helper to the other xpcshell tests).", "author": "lgreco@mozilla.com", "id": 13232921, "time": "2018-04-25T16:11:44Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nhttps://reviewboard.mozilla.org/r/238008/#review248386\n\n::: toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js:13\n(Diff revision 3)\n> +// This test file verify the following scenarios related to the data migration\n> +// from the JSONFile backend to the IDB backend:\n> +//\n> +// - all the old data have been migrated successfully\n> +// - the old data file was corrupted\n> +// - some of the old data file entries fails to be stored in the IDB backend\n\nnit: can you put descriptions of the individual test cases at each add_task() call instead?  (that would give room for a more detailed description)\n\n::: toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js:33\n(Diff revision 3)\n> +}\n>  \n>  add_task(async function setup() {\n> +  Services.prefs.setBoolPref(ExtensionStorageIDB.BACKEND_ENABLED_PREF, true);\n> +\n>    await ExtensionTestUtils.startAddonManager();\n\nNone of the test extensions have useAddonManager, why do you need to start the addon manager?\n\n::: toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js:96\n(Diff revision 3)\n> -    FirefoxAdapter.openConnection = origOpenConnection;\n> -  }\n> -});\n>  \n> -add_task(async function test_config_flag_needed() {\n> -  function background() {\n> +  // Create the file under the expected directory tree.\n> +  const {oldStorageFilename} = await createExtensionJSONFileWithData(EXTENSION_ID, {\n\nwhy actually write a valid file here just to overwrite it below?\n\n::: toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js:106\n(Diff revision 3)\n> -  }\n> +  ExtensionStorage.jsonFilePromises.clear();\n>  \n> -  Preferences.set(STORAGE_SYNC_PREF, false);\n> -  ok(!Preferences.get(STORAGE_SYNC_PREF));\n> -  let extension = ExtensionTestUtils.loadExtension({\n> -    manifest: {\n> +  // Overwrite the json file with some invalid data.\n> +  await OS.File.writeAtomic(oldStorageFilename, invalidData, {flush: true});\n> +  equal(await OS.File.read(oldStorageFilename, {encoding: \"utf-8\"}),\n> +        invalidData, \"The old json file has been overwritted with invalid data\");\n\nnit: overwritten\n\n::: toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js:157\n(Diff revision 3)\n> -          },\n> -        });\n>  \n> -        await browser.test.assertRejects(\n> -          storage.set({\n> -            window,\n> +  // Store a fake invalid value which is going to fail to be saved into IndexedDB\n> +  // (because it can't be cloned and it is going to raise a DataCloneError).\n> +  jsonFile.data.set(\"fake_invalid_key\", new Error());\n\nI don't understand what real world scenario this is meant to test.  Is this a proxy for some sort of IDB failure?", "author": "aswan@mozilla.com", "id": 13264099, "time": "2018-05-09T00:02:26Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13268793, "time": "2018-05-10T17:00:37Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/13-14/", "author": "lgreco@mozilla.com", "id": 13268794, "time": "2018-05-10T17:00:37Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/14-15/", "author": "lgreco@mozilla.com", "id": 13268795, "time": "2018-05-10T17:00:37Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/14-15/", "author": "lgreco@mozilla.com", "id": 13268796, "time": "2018-05-10T17:00:37Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/14-15/", "author": "lgreco@mozilla.com", "id": 13268797, "time": "2018-05-10T17:00:37Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/14-15/", "author": "lgreco@mozilla.com", "id": 13268798, "time": "2018-05-10T17:00:37Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nhttps://reviewboard.mozilla.org/r/238008/#review248386\n\n> nit: can you put descriptions of the individual test cases at each add_task() call instead?  (that would give room for a more detailed description)\n\nSure, that's a good idea.\n\n> None of the test extensions have useAddonManager, why do you need to start the addon manager?\n\nNo need actually, not anymore at least (this was original part of another test and then I splitted it in one of the last updates).\n\nGood catch, removed.\n\n> why actually write a valid file here just to overwrite it below?\n\nJust because it ensures that the actual directory tree is being created (without duplicating the same sequence of code here), the json data file is expected to be in a path like \"<<profile_dir>>/browser-extension-data/<<extension_id>>/storage.js\".\n\nAnd so I opted to let the existent code to deal with creating the expected directory tree, and then write some valid data in it so that, if for any reason the test is not overwriting the file as expected, the test is going to fail because unexpected data is beind found in the migrated backend.\n\n> I don't understand what real world scenario this is meant to test.  Is this a proxy for some sort of IDB failure?\n\nyeah, I can't really think of anything that would be able to be stored successfully into the JSONFile backend and then not being able to be saved into the IDB backend during the migration.\n\nBut... still, I wanted to check explicitly that the behavior and final outcome would still be the one we expect/want (e.g. no partially migrated data stored in the new backend, the new backend initialized and enabled, and the original file still on disk, in case the user wants to inspect it and/or share it to investigate the issue).", "author": "lgreco@mozilla.com", "id": 13268801, "time": "2018-05-10T17:00:59Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191240/#review250484\n\nr=me with comment addressed\n\n::: toolkit/components/extensions/test/mochitest/test_ext_storage_cleanup.html:26\n(Diff revision 15)\n> +  // that the \"keep uuid\" logic works correctly.  Do the storage flag in\n> +  // a separate prefEnv so we can pop it below, leaving the uuid flag set.\n\nI'm having a hard time following this since you push twice but pop once and the callers who call pop also call push themeslves.  I think this actually works correctly right now, but it is difficult to reason through.\n\nHow about just pushing the uuid setting once at the beginning of the test file, and have test_uninstall()  push and pop the storage setting, but leave everything in the same state when it is finished.", "author": "aswan@mozilla.com", "id": 13282810, "time": "2018-05-16T21:17:12Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nhttps://reviewboard.mozilla.org/r/238008/#review248386\n\n> Just because it ensures that the actual directory tree is being created (without duplicating the same sequence of code here), the json data file is expected to be in a path like \"<<profile_dir>>/browser-extension-data/<<extension_id>>/storage.js\".\n> \n> And so I opted to let the existent code to deal with creating the expected directory tree, and then write some valid data in it so that, if for any reason the test is not overwriting the file as expected, the test is going to fail because unexpected data is beind found in the migrated backend.\n\nYou can also do that with `OS.File.makeDir()` and avoid doing other unnecessary work...\n\n> yeah, I can't really think of anything that would be able to be stored successfully into the JSONFile backend and then not being able to be saved into the IDB backend during the migration.\n> \n> But... still, I wanted to check explicitly that the behavior and final outcome would still be the one we expect/want (e.g. no partially migrated data stored in the new backend, the new backend initialized and enabled, and the original file still on disk, in case the user wants to inspect it and/or share it to investigate the issue).\n\nWell anything we can store in JSON should also be storable in IDB.  The more likely scenario here seems like some sort of transient issue with IDB (eg some internal sqlite error, a disk I/O error, something like that...)  In one of those cases, are you sure that's the desired outcome?", "author": "aswan@mozilla.com", "id": 13283013, "time": "2018-05-16T22:22:05Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/15-16/", "author": "lgreco@mozilla.com", "id": 13285002, "time": "2018-05-17T16:48:48Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/15-16/", "author": "lgreco@mozilla.com", "id": 13285003, "time": "2018-05-17T16:48:48Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/15-16/", "author": "lgreco@mozilla.com", "id": 13285004, "time": "2018-05-17T16:48:48Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review241058\n\n> I don't disagree, but I've not changed it yet (I have to look into the indexedDB internals in a bit more details to get a picture of the amount/kind of changes that this would need, and so I opted to work on the other pieces first).   \n>  \n> Should we block this on the implementation of that additional IndexedDB chromeOnly behaviors?\n> or it is something that we could improve in a follow up? \n> (e.g. if it would not require another data migration once we do have such feature available).\n\nI forgot to mention that I've removed the extra structured clone in one of the previous push to mozreview.", "author": "lgreco@mozilla.com", "id": 13285013, "time": "2018-05-17T16:51:12Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nhttps://reviewboard.mozilla.org/r/191240/#review250484\n\n> I'm having a hard time following this since you push twice but pop once and the callers who call pop also call push themeslves.  I think this actually works correctly right now, but it is difficult to reason through.\n> \n> How about just pushing the uuid setting once at the beginning of the test file, and have test_uninstall()  push and pop the storage setting, but leave everything in the same state when it is finished.\n\nyeah, I agree, it was already pretty tricky to read in its initial version, but the refactoring made it even harder to reason about it.\n\nI also guess that the way the tests (I mean the add_tasks) and the test helpers were sorted in the file was also making it harder, I've just pushed an update that move the \"keeps UUID\" pref in its own prefEnv (the only was not balanced and active for the entire file), and every other pushEnv / popEnv always balanced in the same function.\n\nThese changes should make the \"pref environment push and pop\" logic much easier to reason.", "author": "lgreco@mozilla.com", "id": 13285023, "time": "2018-05-17T16:52:27Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nhttps://reviewboard.mozilla.org/r/238008/#review248386\n\n> You can also do that with `OS.File.makeDir()` and avoid doing other unnecessary work...\n\nThat's fair ;-) (updated version which uses `OS.File.makeDir` is coming).\n\n> Well anything we can store in JSON should also be storable in IDB.  The more likely scenario here seems like some sort of transient issue with IDB (eg some internal sqlite error, a disk I/O error, something like that...)  In one of those cases, are you sure that's the desired outcome?\n\nWell, evaluate the desidered (and ensure that it would be also \"the actual\") outcome is the main reason why I tried to add an explicit test case for that lines of code (like I said in my previous comment I also agree that everything that we can store in the json file should also be stored fine by IDB)\n\nMy initial feeling is that a \"partial migrated storage data\" is not going to make the user happier (or to work better) than \"nothing has been migrated, but the old file is still on your disk\", and it would probably generate just more confusing (and harder to investigate) bug reports.\n\nWhat do you think?", "author": "lgreco@mozilla.com", "id": 13285112, "time": "2018-05-17T17:19:00Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13285206, "time": "2018-05-17T17:50:45Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/14-15/", "author": "lgreco@mozilla.com", "id": 13285207, "time": "2018-05-17T17:50:45Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/15-16/", "author": "lgreco@mozilla.com", "id": 13285208, "time": "2018-05-17T17:50:45Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/16-17/", "author": "lgreco@mozilla.com", "id": 13285209, "time": "2018-05-17T17:50:45Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/16-17/", "author": "lgreco@mozilla.com", "id": 13285210, "time": "2018-05-17T17:50:45Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/16-17/", "author": "lgreco@mozilla.com", "id": 13285211, "time": "2018-05-17T17:50:45Z"}, {"text": "Yeah, leaving partial migrated data isn't good.  But if the problem is about indexedDB generally (as opposed to a problem with the data), then it doesn't seem like we should switch over to it...\nI'm having a hard time thinking about this without specific failure scenarios to consider.", "author": "aswan@mozilla.com", "id": 13285284, "time": "2018-05-17T18:17:35Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nhttps://reviewboard.mozilla.org/r/236876/#review250826\n\n::: toolkit/modules/IndexedDB.jsm:274\n(Diff revision 1)\n> +  static openForPrincipal(principal, dbName, options, onupgradeneeded = null) {\n> +    const request = indexedDB.openForPrincipal(principal, dbName, options);\n> +    return this._wrapOpenRequest(request, onupgradeneeded, principal);\n> +  }\n>  \n> +  static _wrapOpenRequest(request, onupgradeneeded = null, storagePrincipal = null) {\n\n`storagePrincipal` isn't used here...", "author": "aswan@mozilla.com", "id": 13285596, "time": "2018-05-17T20:33:51Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nhttps://reviewboard.mozilla.org/r/236876/#review250842\n\nI'm not all that familiar with IndexedDB, but the `awaitRequest()` api seems a little strange to me.  Is it practical to just make some of the wrapped methods (e.g. `continue()`) automatically do the promise wrapping so that a user of this module can just `await cursor.continue()` instead of `cursor.continue(); await cursor.awaitRequest();`?\n\n::: toolkit/modules/IndexedDB.jsm:168\n(Diff revision 1)\n> -      return new CursorWithValue(cursor, this);\n> +    return cursor.awaitRequest();\n> -    });\n>    }\n>  \n>    openKeyCursor(...args) {\n> -    return wrapRequest(this.cursed.openKeyCursor(...args)).then(cursor => {\n> +    const cursor = new Cursor(this.cursed.openCursor(...args), this);\n\nlooks like this should be openKeyCursor()", "author": "aswan@mozilla.com", "id": 13285683, "time": "2018-05-17T21:13:10Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/236876/diff/1-2/", "author": "lgreco@mozilla.com", "id": 13287979, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13287980, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/10-11/", "author": "lgreco@mozilla.com", "id": 13287981, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13287982, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/15-16/", "author": "lgreco@mozilla.com", "id": 13287983, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/16-17/", "author": "lgreco@mozilla.com", "id": 13287984, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/17-18/", "author": "lgreco@mozilla.com", "id": 13287985, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/17-18/", "author": "lgreco@mozilla.com", "id": 13287986, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/17-18/", "author": "lgreco@mozilla.com", "id": 13287987, "time": "2018-05-18T18:31:24Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nhttps://reviewboard.mozilla.org/r/236876/#review250826\n\n> `storagePrincipal` isn't used here...\n\nThanks! I forgot to remove that parameter when I moved this method from ExtensionStorageIDB.jsm into the superclass defined in IndexedDB.jsm.", "author": "lgreco@mozilla.com", "id": 13287999, "time": "2018-05-18T18:37:07Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nhttps://reviewboard.mozilla.org/r/236876/#review250842\n\nI agree, I can't recall right now (it has been a bunch of time ago), but I'm pretty sure that it was also my original intention, but then I forgot to change `continue` and friends (after I verified that `cursor.awaitRequest` on its own was working like we wanted, and expected).\n\n> looks like this should be openKeyCursor()\n\nThanks! Good catch! I wrote openCursor instead of openKeyCursor by mistake when I was rewriting both.", "author": "lgreco@mozilla.com", "id": 13288000, "time": "2018-05-18T18:37:11Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nhttps://reviewboard.mozilla.org/r/236876/#review251462\n\n::: toolkit/modules/IndexedDB.jsm:133\n(Diff revision 2)\n> +    await wrapRequest(this.cursorRequest).then(cursor => {\n> +      this.cursor = cursor;\n> +    });\n\nAny reason not to just write this as\n```\nthis.cursor = await wrapRequest(...);\nreturn this;\n```\n\n::: toolkit/modules/IndexedDB.jsm:140\n(Diff revision 2)\n> +  async advance(...args) {\n> +    const promise = this.awaitRequest();\n> +    this.cursor.advance(...args);\n> +    await promise;\n> +  }\n\nSince you use the same pattern 3 times, consider making a generic wrapper?\nAlso, you don't need an async function, something like this should work:\n```\nfunction whatever(...args) {\n  const promise = this.awaitRequest();\n  this.curor.whatever(...args);\n  return promise;\n}\n```\n\n::: toolkit/modules/IndexedDB.jsm:284\n(Diff revision 2)\n>    static open(dbName, options, onupgradeneeded = null) {\n>      let request = indexedDB.open(dbName, options);\n> +    return this._wrapOpenRequest(request, onupgradeneeded);\n> +  }\n> +\n> +  static openForPrincipal(principal, dbName, options, onupgradeneeded = null) {\n\ndoc comment here?", "author": "aswan@mozilla.com", "id": 13294474, "time": "2018-05-21T16:40:56Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review251468\n\n::: toolkit/components/extensions/Extension.jsm:214\n(Diff revision 11)\n>      if (!uuid) {\n>        return;\n>      }\n>  \n>      if (!Services.prefs.getBoolPref(LEAVE_STORAGE_PREF, false)) {\n> -      // Clear browser.local.storage\n> +      // Clear browser.local.storage backends.\n\nnit: browser.storage.local\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:23\n(Diff revision 11)\n> +// The reserved userContextID (related to the private \"userContextIdInternal.webextStorageLocal\"\n> +// identity, unfortunately we can't get the identity using the ContextualIdentityService.jsm\n> +// getPrivateIdentity method from the child process), See Bug 1406181 for a rationale.\n> +const RESERVED_USER_CONTEXT_ID = -10;\n\nThis could use a better explanation, the bug you cite has over 170 comments and it isn't easy to find the relevant discussion about contextId)\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:38\n(Diff revision 11)\n> +    const storagePrincipal = Services.scriptSecurityManager.createCodebasePrincipal(\n> +      extension.baseURI, {userContextId: RESERVED_USER_CONTEXT_ID});\n\nHow about extending `Exension.createPrincipal()` to take a contextId (or arbitrary origin attributes) and calling it from here?\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:59\n(Diff revision 11)\n> +   * Asynchronously sets the values of the given storage items for the\n> +   * given extension.\n\nI found this comment confusing at first, since there isn't actually a \"given extension\", it is implicit for this instance of ExtensionStorageIDB.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:74\n(Diff revision 11)\n> +   * @returns {Promise<void|object>}\n> +   *        Return a promise which resolves to the computed \"changes\" object\n> +   *        when \"returnChages\" is true, otherwise it just resolves to undefined.\n\nwhat is returnChanges?  Also, this appears to resolve to either null or an object (not void)\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:82\n(Diff revision 11)\n> +    const transaction = this.transaction(IDB_DATA_STORENAME, \"readwrite\");\n> +    const objectStore = transaction.objectStore(IDB_DATA_STORENAME, \"readwrite\");\n\nthis can be done with `this.objectStore()` right?\nI actually prefer this since its clearer while reading the code rather than having the transaction created inside a method for which the name does not suggest that it creates a transaction, but ideally `get()` and `set()` here would have the same basic structure...\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:97\n(Diff revision 11)\n> +        // exception is going to be raised to the caller, and it will be already\n> +        // serialized to be sent across the processing in a message manager message.\n\nI don't understand the last part of this comment\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:114\n(Diff revision 11)\n> +        transaction.abort();\n> +        throw err;\n> +      }\n> +    }\n> +\n> +    return changed ? changes : null;\n\nthis is my ignorance of indexedDB, is it not necessary to explicitly commit the transaction?\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:137\n(Diff revision 11)\n> +    if (Array.isArray(keysOrItems)) {\n> +      keys = keysOrItems;\n> +    } else if (keysOrItems && typeof(keysOrItems) === \"object\") {\n> +      keys = Object.keys(keysOrItems);\n> +      defaultValues = keysOrItems;\n> +    }\n\nThe handling of different types of arguments to the extension-visible storage methods should be handled in ext-storage.js, otherwise we have to duplicate this code and risk having subtle differences between the different backends.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:318\n(Diff revision 11)\n> +  },\n> +\n> +  // Check if the IDB backend has been selected (and cache the result while the extension\n> +  // is still running, an extension child context asks the main process once per child\n> +  // process) and wait the data migration to be completed if needed.\n> +  promiseIsSelectedBackend(context) {\n\nThis name is a little misleading, the fact that this can trigger a migration as a side effect is a surprise.  How about something like `promiseSelecteBackend()` ?  (and nit: I think putting promise in the name is probably unnecessary if instead there is a jsdoc comment documenting that it returns a Promise)\n\n::: toolkit/components/extensions/child/ext-storage.js:16\n(Diff revision 11)\n>  const storageSetHistogram = \"WEBEXT_STORAGE_LOCAL_SET_MS\";\n>  \n>  this.storage = class extends ExtensionAPI {\n> +  getLocalFileBackend(context, {deserialize, serialize}) {\n> +    return {\n> +      get: async function(keys) {\n\nnit just use `async get(keys) { ...` ?\n\n::: toolkit/components/extensions/child/ext-storage.js:18\n(Diff revision 11)\n>  this.storage = class extends ExtensionAPI {\n> +  getLocalFileBackend(context, {deserialize, serialize}) {\n> +    return {\n> +      get: async function(keys) {\n> +        const stopwatchKey = {};\n> +        TelemetryStopwatch.start(storageGetHistogram, stopwatchKey);\n\nIs it intentional that the telemetry for both json and idb backends gets put into the same histograms?  That seems like it would make the data very hard to work with.  Has anybody even looked at the data we already have?\n\nFinally, about telemetry, there is a pattern that is repeated here over and over that should be abstracted away.  Something like:\n\n```\nasync function measureOperation(histogram, fn) {\n  const key = {};\n  TelemetryStopwatch.start(histogram, key);\n  try {\n    let result = await fn();\n    TelemetryStopwatch.finish(histogram, key);\n    return result;\n  } catch (e) {\n    TelemetryStopwatch.cancel(histogram, key);\n    throw e;\n  }\n  \n}\n\n...\n\nget(keys) {\n  return measureOperation(storageGetHistogram, () => {\n    return context.childManager.callParentAsyncFunction(...);\n  }\n}\n...\n```\n\n::: toolkit/components/extensions/child/ext-storage.js:55\n(Diff revision 11)\n> +      },\n> +    };\n> +  }\n> +\n> +  getLocalIDBBackend(context, {hasParentListeners, serialize}) {\n> +    const dbPromise = ExtensionStorageIDB.open(context.extension);\n\nDo we care about leaving this open when an extension is not actively using storage?", "author": "aswan@mozilla.com", "id": 13294665, "time": "2018-05-21T17:52:17Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nhttps://reviewboard.mozilla.org/r/236876/#review251462\n\n> Any reason not to just write this as\n> ```\n> this.cursor = await wrapRequest(...);\n> return this;\n> ```\n\nNo reasons actually, and it looks better, I've applied this change (and it will be in the next round of updates pushed to mozreview)\n\n> Since you use the same pattern 3 times, consider making a generic wrapper?\n> Also, you don't need an async function, something like this should work:\n> ```\n> function whatever(...args) {\n>   const promise = this.awaitRequest();\n>   this.curor.whatever(...args);\n>   return promise;\n> }\n> ```\n\nSure, making it a generic wrapper makes sense.\n\nAbout the different (non async version) you suggest, there are actually 2 subtle differences between the two version:\n\n- the one that return the `awaitRequest`'s promise will resolve to what the awaitRequest resolve to, on the contrary the async one that await on the promise and doesn't return nothing is going to always resolve to undefined (which in my opinion was more \"consistent\" to the original cursor.continue/advance/etc. with return undefined: https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/advance)  \n\n- the one written as async function always return a promise (which will be resolved or rejected), the one written as a regular function may also throw an error synchrously (e.g. in this code probably the only code that may throw is `this.cursor.whatever(...)` if cursor is null/undefined, which may happen if you call continue or advance once the cursor\ncan't be moved further, which to be fair is a scenario that we may want to raise or reject a better error for)\n\n> doc comment here?\n\nyeah, I should have added it when I moved it here.", "author": "lgreco@mozilla.com", "id": 13294957, "time": "2018-05-21T19:51:22Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/236876/diff/2-3/", "author": "lgreco@mozilla.com", "id": 13297034, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13297035, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/11-12/", "author": "lgreco@mozilla.com", "id": 13297036, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13297037, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/16-17/", "author": "lgreco@mozilla.com", "id": 13297038, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/17-18/", "author": "lgreco@mozilla.com", "id": 13297039, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/18-19/", "author": "lgreco@mozilla.com", "id": 13297040, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/18-19/", "author": "lgreco@mozilla.com", "id": 13297041, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/18-19/", "author": "lgreco@mozilla.com", "id": 13297042, "time": "2018-05-22T16:05:22Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review251468\n\n> This could use a better explanation, the bug you cite has over 170 comments and it isn't easy to find the relevant discussion about contextId)\n\nyeah, I can't disagree, most of them are actually updates on the mozreview patches, nevertheless it is not that easy to get a rationale from there.\n\nI've reworked the comment a bit to make it (hopefully) a bit more clear, I'm not clearing this mozreview issue yet, let me know if the new comment is clear enough.\n\n> How about extending `Exension.createPrincipal()` to take a contextId (or arbitrary origin attributes) and calling it from here?\n\nuhm... I'm not against moving it in a more \"shared\" place, unfortunately we need to get this principal on the child process side most of the times (the only time we actually running any of this code in the main process is during the data migration).\n\nI think that we have some options to move this elsewhere, here is some that I'm currently thinking of:\n\n- we create the principal we will use for the storage only one in the main process and then we just copy it into the other processes when they are spawned (like we do for the extension principal, which is part of the result of `Extension.prototype.serialize`: https://searchfox.org/mozilla-central/rev/2aa42f2cab4a110edf21dd7281ac23a1ea8901f9/toolkit/components/extensions/Extension.jsm#1491)\n\n- we define `createPrincipal` method also on `BrowserExtensionContent` (which represents the extension in the child processes, https://searchfox.org/mozilla-central/rev/2aa42f2cab4a110edf21dd7281ac23a1ea8901f9/toolkit/components/extensions/ExtensionChild.jsm#578), and maybe a new `storagePrincipal` getter on both `Extension` and `BrowserExtensionContent` classes\n\n> I found this comment confusing at first, since there isn't actually a \"given extension\", it is implicit for this instance of ExtensionStorageIDB.\n\nyeah, the comment was right in a previous version (where the extension was actually one of the given parameters), but it was outdated now.\n\nFixed.\n\n> what is returnChanges?  Also, this appears to resolve to either null or an object (not void)\n\nSame as above. Fixed.\n\n> this can be done with `this.objectStore()` right?\n> I actually prefer this since its clearer while reading the code rather than having the transaction created inside a method for which the name does not suggest that it creates a transaction, but ideally `get()` and `set()` here would have the same basic structure...\n\nyes, the transaction is usually implicitly created by this.objectStore(), in the set method we explicitly get the transaction because we can abort the entire transaction as soon as the first operation fails.\n\nI've added an inline comment near that line (`const transaction = ...`) to explicitly explain why we get the transaction there, I'm not sure if it is worth to do it for the get too, based on the current implementation the `transaction` object will be basically unused in the `get` method.\n\n> I don't understand the last part of this comment\n\nActually that code is not needed anymore, I recall that it was needed in a previous version (very very previous version) of this method to preserve the behavior expected by a browser.storage.local.set API call as it was in the previous version (caught by failures in the existing automated tests), but I verified that it doesn't seem to be needed anymore.\n\nI opted to remove the comment as well as the related code.\n\n> this is my ignorance of indexedDB, is it not necessary to explicitly commit the transaction?\n\nThe transaction should be committed (or better, becomes \"not active\") as soon as no more operations are being added while it is still active (e.g. before Bug 1193394 the IDB operation couldn't be wrapped inside promises, because the promise was resolved too late and the transaction was already closed).\n\nAs an additional confirmation IDBTransaction doesn't have any other method besides `abort` and `objectStore` (https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction or https://searchfox.org/mozilla-central/source/dom/webidl/IDBTransaction.webidl)\n\n> The handling of different types of arguments to the extension-visible storage methods should be handled in ext-storage.js, otherwise we have to duplicate this code and risk having subtle differences between the different backends.\n\nI don't totally disagree (even if having multiple storage.local backends should not be a common thing to happen, besides now that we are migrating between two that are too different to live in the same JSM).\n\nLet me think about it.\n\n> This name is a little misleading, the fact that this can trigger a migration as a side effect is a surprise.  How about something like `promiseSelecteBackend()` ?  (and nit: I think putting promise in the name is probably unnecessary if instead there is a jsdoc comment documenting that it returns a Promise)\n\nApproved ;-)\nChanged applied.\n\n> Is it intentional that the telemetry for both json and idb backends gets put into the same histograms?  That seems like it would make the data very hard to work with.  Has anybody even looked at the data we already have?\n> \n> Finally, about telemetry, there is a pattern that is repeated here over and over that should be abstracted away.  Something like:\n> \n> ```\n> async function measureOperation(histogram, fn) {\n>   const key = {};\n>   TelemetryStopwatch.start(histogram, key);\n>   try {\n>     let result = await fn();\n>     TelemetryStopwatch.finish(histogram, key);\n>     return result;\n>   } catch (e) {\n>     TelemetryStopwatch.cancel(histogram, key);\n>     throw e;\n>   }\n>   \n> }\n> \n> ...\n> \n> get(keys) {\n>   return measureOperation(storageGetHistogram, () => {\n>     return context.childManager.callParentAsyncFunction(...);\n>   }\n> }\n> ...\n> ```\n\nIt was intentional while I was working on the proposed set of patches (especially because I could use the existent tests to ensure that the telemetry was working on both in a similar way), but that is definitely an open question (along with the general open question of the additional telemetry we may want around the backend selection and the result of the data migrations).\n\nI've extracted the pattern and reused on both the JSONFile and IDB backends methods (as you suggested) in the meantime,\nand I'm going to file a new issue to discuss (and apply the changes) about the open questions around telemetry.\n\n> Do we care about leaving this open when an extension is not actively using storage?\n\nI was in doubt too, and so in a previous version there was an idle callback that was clearing the db, but then I removed it after the last round of review comments from Kris (comment 84).", "author": "lgreco@mozilla.com", "id": 13297161, "time": "2018-05-22T16:51:35Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/12-13/", "author": "lgreco@mozilla.com", "id": 13369079, "time": "2018-05-28T13:32:54Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13369080, "time": "2018-05-28T13:32:54Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/17-18/", "author": "lgreco@mozilla.com", "id": 13369081, "time": "2018-05-28T13:32:54Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/18-19/", "author": "lgreco@mozilla.com", "id": 13369082, "time": "2018-05-28T13:32:54Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/19-20/", "author": "lgreco@mozilla.com", "id": 13369083, "time": "2018-05-28T13:32:54Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/19-20/", "author": "lgreco@mozilla.com", "id": 13369084, "time": "2018-05-28T13:32:54Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/19-20/", "author": "lgreco@mozilla.com", "id": 13369085, "time": "2018-05-28T13:32:54Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nhttps://reviewboard.mozilla.org/r/238008/#review248386\n\n> Well, evaluate the desidered (and ensure that it would be also \"the actual\") outcome is the main reason why I tried to add an explicit test case for that lines of code (like I said in my previous comment I also agree that everything that we can store in the json file should also be stored fine by IDB)\n> \n> My initial feeling is that a \"partial migrated storage data\" is not going to make the user happier (or to work better) than \"nothing has been migrated, but the old file is still on your disk\", and it would probably generate just more confusing (and harder to investigate) bug reports.\n> \n> What do you think?\n\nIn the last update push to mozreview, I've changed the behavior expected when \"the data has been successfully read from the old JSONFile backend but it failed to be saved in the new IDB backend\" to not keep using the JSONFile backend and retry to migrate to the new backend on the next extension load (as Andrew and I have been discussed and agreed on last week).\n\nI've also removed this test case, because it is forcing that error scenario, but in a way that isn't immediately clear, and it doesn't exactly reproduce the exact same error conditions.\n\n(I've also rebased the patches to a more recent mozilla-central tip, but I'm pushing it to mozreview separately so that the interdiff of the part described above is still readable and separated from the changes related to the rebase).", "author": "lgreco@mozilla.com", "id": 13369098, "time": "2018-05-28T13:39:24Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191232/diff/6-7/", "author": "lgreco@mozilla.com", "id": 13369141, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/236876/diff/3-4/", "author": "lgreco@mozilla.com", "id": 13369142, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13369143, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/13-14/", "author": "lgreco@mozilla.com", "id": 13369144, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13369145, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/18-19/", "author": "lgreco@mozilla.com", "id": 13369146, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/19-20/", "author": "lgreco@mozilla.com", "id": 13369147, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/20-21/", "author": "lgreco@mozilla.com", "id": 13369148, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/20-21/", "author": "lgreco@mozilla.com", "id": 13369149, "time": "2018-05-28T14:03:21Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/20-21/", "author": "lgreco@mozilla.com", "id": 13369150, "time": "2018-05-28T14:03:21Z"}, {"text": "As mentioned in Comment 193, the last set of mozreview-request comments above are all related to the rebase of the entire set of patches on a more recent mozilla-central tip.", "author": "lgreco@mozilla.com", "id": 13369153, "time": "2018-05-28T14:06:17Z"}, {"text": "(In reply to Luca Greco [:rpl] from comment #193)\n> ... to not keep using the JSONFile backend and retry to migrate to the new backend on the next extension load...\n\ntypo: to KEEP using the JSONfile backend and retry to migrate to the new backend on the next extension load", "author": "lgreco@mozilla.com", "id": 13371587, "time": "2018-05-29T16:08:23Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review253882\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:32\n(Diff revision 14)\n> +// It should match the numeric ID reserved by ContextualIdentityService.jsm for the userContext\n> +// named \"userContextIdInternal.webextStorageLocal\" (unfortunately we can't call the\n> +// ContextualIdentityService.getPrivateIdentity method from the child processes because\n> +// ContextualIndentityService.jsm is accessing files from disk, which is not allowed in child\n> +// processes).\n> +const RESERVED_USER_CONTEXT_ID = -10;\n\nThe comment helps, thank you.  Is there any place we could put this where it could be accessed both from here and from ContextualIdentifyService.jsm?  If there isn't a good candidate, I think this is probably better than creating a new .jsm or something just to hold this constant.\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:44\n(Diff revision 14)\n> +    const storagePrincipal = Services.scriptSecurityManager.createCodebasePrincipal(\n> +      extension.baseURI, {userContextId: RESERVED_USER_CONTEXT_ID});\n\nYou mentioned earlier that this needs to run in the child process so it can't be added to the Extension class, but how about adding something like `createExtensionPrincipal()` to ExtensionUtils.jsm or ExtensionCommon.jsm?\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:368\n(Diff revision 14)\n> +        // running extension.\n> +        promise = context.childManager.callParentAsyncFunction(\n> +          \"storage.local.IDBBackend.selectBackend\", []);\n> +      } else {\n> +        // If migrating to the IDB backend is not enabled by the preference, then we\n> +        // don't need to migrate any data and the new baclend is not enabled.\n\ntypo: backend\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:381\n(Diff revision 14)\n> +          // TODO: This should be a very unlikely scenario, some telemetry data\n> +          // about it may be useful.\n\nreplace this with an explicit reference to bug 1465129\n\n::: toolkit/components/extensions/child/ext-storage.js:31\n(Diff revision 14)\n> +\n>  this.storage = class extends ExtensionAPI {\n> +  getLocalFileBackend(context, {deserialize, serialize}) {\n> +    return {\n> +      get(keys) {\n> +        return measureOp(storageGetHistogram, () => {\n\nShould we be gathering these in the child process?  If we care about the storage performance and comparing the two backends, the IPC overhead should be the same for the two and including it here just adds noise...", "author": "aswan@mozilla.com", "id": 13373341, "time": "2018-05-30T04:37:32Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review253888\n\nAt this point, we're down to nits and things that can happen in follow-ups.  Nice work!\n\n::: toolkit/components/extensions/ExtensionStorageIDB.jsm:325\n(Diff revision 14)\n> +  get isBackendEnabled() {\n> +    return Services.prefs.getBoolPref(BACKEND_ENABLED_PREF, false);\n> +  },\n\nUse a lazy preference getter?", "author": "aswan@mozilla.com", "id": 13373363, "time": "2018-05-30T04:57:21Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review253882\n\n> The comment helps, thank you.  Is there any place we could put this where it could be accessed both from here and from ContextualIdentifyService.jsm?  If there isn't a good candidate, I think this is probably better than creating a new .jsm or something just to hold this constant.\n\nUgh, follow-up to my own follow-up.  Of course there is also the migration code that runs in the parent process.  It would be nice to separate this to clearly denote the common/child-only/parent-only code, but I guess we'll just end up with a bunch of small files in that case...", "author": "aswan@mozilla.com", "id": 13373364, "time": "2018-05-30T04:57:36Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review253882\n\n> You mentioned earlier that this needs to run in the child process so it can't be added to the Extension class, but how about adding something like `createExtensionPrincipal()` to ExtensionUtils.jsm or ExtensionCommon.jsm?\n\nHuh, I had another comment here that ended up somewhere in reviewboard purgatory.\nI just read your suggestion about assigning Extension.storagePrincipal in the main process and then referencing it here, and I think that's a good idea.  It would also let you avoid loading ExtensionStorageIDB.jsm in the parent process just for cleanup (you could pretty easily inline `clearStorageForPrincipal(this.storagePrincipal)` in the storage cleanup code.  That still leaves migration of course...", "author": "aswan@mozilla.com", "id": 13373368, "time": "2018-05-30T05:00:56Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nhttps://reviewboard.mozilla.org/r/238008/#review253894", "author": "aswan@mozilla.com", "id": 13373372, "time": "2018-05-30T05:05:22Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/14-15/", "author": "lgreco@mozilla.com", "id": 13377762, "time": "2018-05-31T15:17:14Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13377763, "time": "2018-05-31T15:17:14Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/19-20/", "author": "lgreco@mozilla.com", "id": 13377764, "time": "2018-05-31T15:17:14Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/20-21/", "author": "lgreco@mozilla.com", "id": 13377765, "time": "2018-05-31T15:17:14Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/21-22/", "author": "lgreco@mozilla.com", "id": 13377766, "time": "2018-05-31T15:17:14Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/21-22/", "author": "lgreco@mozilla.com", "id": 13377767, "time": "2018-05-31T15:17:14Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/21-22/", "author": "lgreco@mozilla.com", "id": 13377768, "time": "2018-05-31T15:17:14Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review253882\n\n> Ugh, follow-up to my own follow-up.  Of course there is also the migration code that runs in the parent process.  It would be nice to separate this to clearly denote the common/child-only/parent-only code, but I guess we'll just end up with a bunch of small files in that case...\n\nActually, a nice side-effect of \"creating a storagePrincipal once from Extension.jsm and then propagate it to the other child processes\" is that we can now retrieve the right userContextId directly from ContextualIdentifyService.getPrivateIdentity, which is supposed to be the more clean way to retrieve the numeric id of an internally reserved identity (e.g. the other \"internal reserved\" identity is used to create the thumbnails).\n\n> Huh, I had another comment here that ended up somewhere in reviewboard purgatory.\n> I just read your suggestion about assigning Extension.storagePrincipal in the main process and then referencing it here, and I think that's a good idea.  It would also let you avoid loading ExtensionStorageIDB.jsm in the parent process just for cleanup (you could pretty easily inline `clearStorageForPrincipal(this.storagePrincipal)` in the storage cleanup code.  That still leaves migration of course...\n\nI've removed the clearStorage methods, and just opted to clear the storage calling Services.qms.clearStoragesForPrincipal:\n\n- in the uninstall observer we already create the regular principal to clear the extension pages' IndexedDB, and we can also create the storagePrincipal from there using the userContextId retrived by calling `ContextualIdentityService.getPrivateIdentity(WEBEXT_STORAGE_USER_CONTEXT_ID)` (and Extension.jsm doesn't need to load ExtensionStorageIDB.jsm anymore)\n\n- during the data migration we have access to the extension.storagePrincipal property (and we can call \n  just call Services.qms.clearStoragesForPrincipal using that)\n  \n(See https://reviewboard.mozilla.org/r/191228/diff/21-22/ for a interdiff which includes the changes described above)\n\n> Should we be gathering these in the child process?  If we care about the storage performance and comparing the two backends, the IPC overhead should be the same for the two and including it here just adds noise...\n\nuhm, I think that comparing the two backends from the same process is more fair, especially because the JSONFile storage.local backend was already measured this way, and changing that would change the measure in ways that doesn't take the IPC overhead anymore, and also because the two backends are a bit different from an IPC point fo view (e.g. the JSONFile backend serialize the data and send it in a messageManager message, while the IDBBackend use the IPC mechanisms of the underlying IndexedDB API, and in the main process the read and writes should happen in a separate IndexedDB thread instead of the main one).", "author": "lgreco@mozilla.com", "id": 13377778, "time": "2018-05-31T15:18:52Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review253888\n\n> Use a lazy preference getter?\n\nUnfortunately that will break the current testing stategy, which switch the enabled backend at runtime (and the lazy getter will keep the value set when is being accessed for the first time.", "author": "lgreco@mozilla.com", "id": 13377779, "time": "2018-05-31T15:19:13Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review253888\n\n> Unfortunately that will break the current testing stategy, which switch the enabled backend at runtime (and the lazy getter will keep the value set when is being accessed for the first time.\n\nIt shouldn't -- lazy preference getters also attach an observer that watches for runtime changes:\nhttps://searchfox.org/mozilla-central/rev/83a923ef7a3b95a516f240a6810c20664b1e0ac9/js/xpconnect/loader/XPCOMUtils.jsm#393-407", "author": "aswan@mozilla.com", "id": 13377792, "time": "2018-05-31T15:23:07Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/15-16/", "author": "lgreco@mozilla.com", "id": 13377951, "time": "2018-05-31T16:20:25Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/10-11/", "author": "lgreco@mozilla.com", "id": 13377952, "time": "2018-05-31T16:20:25Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/20-21/", "author": "lgreco@mozilla.com", "id": 13377953, "time": "2018-05-31T16:20:25Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/21-22/", "author": "lgreco@mozilla.com", "id": 13377954, "time": "2018-05-31T16:20:25Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/22-23/", "author": "lgreco@mozilla.com", "id": 13377955, "time": "2018-05-31T16:20:25Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/22-23/", "author": "lgreco@mozilla.com", "id": 13377956, "time": "2018-05-31T16:20:25Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/22-23/", "author": "lgreco@mozilla.com", "id": 13377957, "time": "2018-05-31T16:20:25Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nhttps://reviewboard.mozilla.org/r/191230/#review253888\n\n> It shouldn't -- lazy preference getters also attach an observer that watches for runtime changes:\n> https://searchfox.org/mozilla-central/rev/83a923ef7a3b95a516f240a6810c20664b1e0ac9/js/xpconnect/loader/XPCOMUtils.jsm#393-407\n\nwell, you are right, I just misread \"lazy pref getter\" as \"lazy getter\" in your previous comment.\n\nI applied this change and updated the attached patch (interdiff: https://reviewboard.mozilla.org/r/191228/diff/22-23/)", "author": "lgreco@mozilla.com", "id": 13377965, "time": "2018-05-31T16:22:39Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/9-10/", "author": "lgreco@mozilla.com", "id": 13378159, "time": "2018-05-31T17:24:00Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/16-17/", "author": "lgreco@mozilla.com", "id": 13378160, "time": "2018-05-31T17:24:00Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/11-12/", "author": "lgreco@mozilla.com", "id": 13378161, "time": "2018-05-31T17:24:00Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/21-22/", "author": "lgreco@mozilla.com", "id": 13378162, "time": "2018-05-31T17:24:00Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/22-23/", "author": "lgreco@mozilla.com", "id": 13378163, "time": "2018-05-31T17:24:00Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/23-24/", "author": "lgreco@mozilla.com", "id": 13378164, "time": "2018-05-31T17:24:00Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/23-24/", "author": "lgreco@mozilla.com", "id": 13378165, "time": "2018-05-31T17:24:00Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/23-24/", "author": "lgreco@mozilla.com", "id": 13378166, "time": "2018-05-31T17:24:00Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nhttps://reviewboard.mozilla.org/r/238008/#review248386\n\n> In the last update push to mozreview, I've changed the behavior expected when \"the data has been successfully read from the old JSONFile backend but it failed to be saved in the new IDB backend\" to not keep using the JSONFile backend and retry to migrate to the new backend on the next extension load (as Andrew and I have been discussed and agreed on last week).\n> \n> I've also removed this test case, because it is forcing that error scenario, but in a way that isn't immediately clear, and it doesn't exactly reproduce the exact same error conditions.\n> \n> (I've also rebased the patches to a more recent mozilla-central tip, but I'm pushing it to mozreview separately so that the interdiff of the part described above is still readable and separated from the changes related to the rebase).\n\nFollow up for this issue filed as \"Bug 1465129 - Collect some telemetry data related to the storage.local \"JSONFile to IDBBackend\" data migration failures\", in the meantime I'm clearing this issue from mozreview.", "author": "lgreco@mozilla.com", "id": 13378175, "time": "2018-05-31T17:27:11Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/17-18/", "author": "lgreco@mozilla.com", "id": 13380005, "time": "2018-06-01T11:57:32Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/12-13/", "author": "lgreco@mozilla.com", "id": 13380006, "time": "2018-06-01T11:57:32Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/22-23/", "author": "lgreco@mozilla.com", "id": 13380007, "time": "2018-06-01T11:57:32Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/23-24/", "author": "lgreco@mozilla.com", "id": 13380008, "time": "2018-06-01T11:57:32Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/24-25/", "author": "lgreco@mozilla.com", "id": 13380009, "time": "2018-06-01T11:57:32Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/24-25/", "author": "lgreco@mozilla.com", "id": 13380010, "time": "2018-06-01T11:57:32Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/24-25/", "author": "lgreco@mozilla.com", "id": 13380011, "time": "2018-06-01T11:57:32Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/18-19/", "author": "lgreco@mozilla.com", "id": 13380395, "time": "2018-06-01T14:43:21Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/13-14/", "author": "lgreco@mozilla.com", "id": 13380396, "time": "2018-06-01T14:43:21Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/23-24/", "author": "lgreco@mozilla.com", "id": 13380397, "time": "2018-06-01T14:43:21Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/24-25/", "author": "lgreco@mozilla.com", "id": 13380398, "time": "2018-06-01T14:43:21Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/25-26/", "author": "lgreco@mozilla.com", "id": 13380399, "time": "2018-06-01T14:43:21Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/25-26/", "author": "lgreco@mozilla.com", "id": 13380400, "time": "2018-06-01T14:43:21Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/25-26/", "author": "lgreco@mozilla.com", "id": 13380401, "time": "2018-06-01T14:43:21Z"}, {"text": "I've just changed one more time the creation of the storagePrincipal (and its propagation to the child processes) to be a bit more lazy, in particular to defer the lazy import of the ContextualIdentityService.jsm as much as possible (e.g. the previous version that was creating the storagePrincipal from the Extension class constructor was failing on \"browser/base/content/test/performance/browser_startup.js\" because ContextualIdentityService was \"imported before handling the user events\", which is prevented by the test for obvious performance reasons, link to the failure on try: https://treeherder.mozilla.org/#/jobs?repo=try&revision=de10f21355b57794e440c6ca621db3827c210811&selectedJob=181176601)\n\nThe new version lazily creates the storagePrincipal (in the main process) when the IDB backend is being selected, and then it propagates the storagePrincipal to the child processes when asked for the enabled backend (and so the ContextualIdentityService.jsm is only loaded from Extension.jsm to clear the extension storages when an extension is uninstalled, and from ExtensionStorageIDB.jsm only when the new IDBBackend is being used for the first time from a storage.local API call).\n\nTo send the storagePrincipal across the processes, it is being serialized into a StructuredCloneHolder (related to a privileged JS global, otherwise it would not be allowed) and then deserialized back into an nsIPrincipal once received by the child processes.\n\n(here is an interdiff of these last round of changes https://reviewboard.mozilla.org/r/191228/diff/21-26/, the changes to ContextualIdentityService.jsm are unrelated to the changes described above, those are actually fixing a wrong behavior of the `deleteContainerData` method that I notice from a android-only test failure in a previous push to try).", "author": "lgreco@mozilla.com", "id": 13380531, "time": "2018-06-01T15:33:10Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191232/diff/7-8/", "author": "lgreco@mozilla.com", "id": 13382195, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/236876/diff/4-5/", "author": "lgreco@mozilla.com", "id": 13382196, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/10-11/", "author": "lgreco@mozilla.com", "id": 13382197, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/19-20/", "author": "lgreco@mozilla.com", "id": 13382198, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/14-15/", "author": "lgreco@mozilla.com", "id": 13382199, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/24-25/", "author": "lgreco@mozilla.com", "id": 13382200, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/25-26/", "author": "lgreco@mozilla.com", "id": 13382201, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/26-27/", "author": "lgreco@mozilla.com", "id": 13382202, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/26-27/", "author": "lgreco@mozilla.com", "id": 13382203, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/26-27/", "author": "lgreco@mozilla.com", "id": 13382204, "time": "2018-06-02T14:11:55Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/11-12/", "author": "lgreco@mozilla.com", "id": 13382211, "time": "2018-06-02T14:49:54Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/20-21/", "author": "lgreco@mozilla.com", "id": 13382212, "time": "2018-06-02T14:49:54Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/15-16/", "author": "lgreco@mozilla.com", "id": 13382213, "time": "2018-06-02T14:49:54Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/25-26/", "author": "lgreco@mozilla.com", "id": 13382214, "time": "2018-06-02T14:49:54Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/26-27/", "author": "lgreco@mozilla.com", "id": 13382215, "time": "2018-06-02T14:49:54Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/27-28/", "author": "lgreco@mozilla.com", "id": 13382216, "time": "2018-06-02T14:49:54Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/27-28/", "author": "lgreco@mozilla.com", "id": 13382217, "time": "2018-06-02T14:49:54Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/27-28/", "author": "lgreco@mozilla.com", "id": 13382218, "time": "2018-06-02T14:49:54Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/12-13/", "author": "lgreco@mozilla.com", "id": 13382360, "time": "2018-06-02T19:30:27Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/21-22/", "author": "lgreco@mozilla.com", "id": 13382361, "time": "2018-06-02T19:30:27Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/16-17/", "author": "lgreco@mozilla.com", "id": 13382362, "time": "2018-06-02T19:30:27Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/26-27/", "author": "lgreco@mozilla.com", "id": 13382363, "time": "2018-06-02T19:30:27Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/27-28/", "author": "lgreco@mozilla.com", "id": 13382364, "time": "2018-06-02T19:30:27Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/28-29/", "author": "lgreco@mozilla.com", "id": 13382365, "time": "2018-06-02T19:30:27Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/28-29/", "author": "lgreco@mozilla.com", "id": 13382366, "time": "2018-06-02T19:30:27Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/28-29/", "author": "lgreco@mozilla.com", "id": 13382367, "time": "2018-06-02T19:30:27Z"}, {"text": "Pushed by luca.greco@alcacoop.it:\nhttps://hg.mozilla.org/integration/autoland/rev/fdac47b8ef20\nMove serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm. r=kmag\nhttps://hg.mozilla.org/integration/autoland/rev/912a2eaf4d26\nAdd openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/3241c2dfb296\nAdd identity reserved for storage.local extension API to ContextualIdentityService. r=baku\nhttps://hg.mozilla.org/integration/autoland/rev/d34810cab822\nAdd ExtensionStorageIDB JSM module. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/62e9126ecd0d\nTest storage.local data migration from JSONFile to IDB backend. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/db783c96c076\nTest storage.local JSONFile and IndexedDB backends. r=kmag\nhttps://hg.mozilla.org/integration/autoland/rev/4f387b4a76a9\nTest storage.local telemetry on file and indexedDB backends. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/b52c2fb70ae1\nTest storage.local cleanup on uninstall on file and indexedDB backends. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/fd61d9faedf0\nTest storage.local from content scripts on file and indexedDB backends. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/06461ddb2699\nTest storage.local from extension tab pages on file and indexedDB backends. r=aswan", "author": "pulsebot@bots.tld", "id": 13382369, "time": "2018-06-02T19:36:01Z"}, {"text": "Backout by csabou@mozilla.com:\nhttps://hg.mozilla.org/integration/autoland/rev/3d3c72079cfd\nBacked out 10 changesets as per developers request.", "author": "pulsebot@bots.tld", "id": 13382713, "time": "2018-06-03T13:23:59Z"}, {"text": "(In reply to Pulsebot from comment #280)\n> Backout by csabou@mozilla.com:\n> https://hg.mozilla.org/integration/autoland/rev/3d3c72079cfd\n> Backed out 10 changesets as per developers request.\n\nThe patches were successfully landed on autoland without any new test failures, but I asked to backout them because in the meantime I\u2019ve noticed another issue with the reserved userContextId that we didn\u2019t caught during the reviews.\n\nIn Bug 1406181 Comment 33 ashut suggested to use a negative userContextId for our reserved userContextId, and using the negative userContextId seems to work correctly at a first glance, e.g the IndexedDB database is definitely not directly accessible to the extension code.\n\nUnfortunately there are also some \u201cnot immediately visible\u201d issues, that we should handle right now, especially given that reserving the userContextId requires a data migration on the containers.json state file:\n\nIn the originAttributes webidl, the userContextId is defined as an \"unsigned long\" (https://searchfox.org/mozilla-central/rev/292d295d6b084b43b70de26a42e68513bb7b36a3/dom/chrome-webidl/ChromeUtils.webidl#367), which means that when we create a principal with a negative userContextId, that userContextId will be automatically converted into a unsigned number and that makes the following check:\n\n     const expectedUserContextId = ContextualIdentityService.getPrivateIdentity(\n       \"userContextIdInternal.webextStorageLocal\").userContextId;\n\n     originAttributes.userContextId === expectedUserContextId\n\nto be false, when we would expect it to be true.\n\nAndrea, what would be the best way to fix this issue from your point of view?\ne.g. \"Explicitly allow the originAttributes userContextId to be a signed number (as per webidl)\" is something that you consider a viable option and you would be open to?\n\nIf using a negative userContextId in the originAttributes is not a viable option in practice, then the definition in ContextualIdentityService.jsm for the reserved userContextId should also be explicitly an unsigned number (to avoid any confusion, and bugs that can come from that), and the logic around lastUserContextId changed to take it into account.\n\nAs an example, when userContextId -10 is converted into a non-negative number, it comes 4294967286, and then we should also make sure that:\n\n  - the `lastUserContextId` (which is also part of the containers.json) is still computed correctly (currently it is computed by sorting the array of all the defined identities and picking the last one, which still gives 5 instead of 4294967286 just because ContextualIdentityService.jsm is using sort() without any parameter to sort the array, and by default it sorts the array according to the string conversion of each element of the array, and so it gives `[1,2,3,4,4294967286,5].pop() => 5`)\n\n  - ContextIdentityService.create should not be allowed to create an identity which uses the same userContextId reserved for the \u201cextension storage.local data\u201d by any chance\n(and that method doesn\u2019t currently check explicitly if the picked userContextId is reserved, it just increments the last used one and assuming that it is not being used, 4294967286 is pretty far from 5, but it still something that should not be allowed explicitly)", "author": "lgreco@mozilla.com", "id": 13382748, "time": "2018-06-03T15:00:17Z"}, {"text": "Andrea and I have discussed about the issue with negative userContextId described in Comment 281 and we agreed on changing the patch included in this bug to reserve 4294967295 (which is UINT32_MAX) for the private \"userContextIdInternal.webextStorageLocal\" identity.\n\nI'm clearing the needinfo assigned to Android, I'm going to update the patch accordingly (and add some additional assertion to the test cases) and ask Andrea to review the additional changes applied in the next push to mozreview.", "author": "lgreco@mozilla.com", "id": 13388269, "time": "2018-06-05T15:15:51Z"}, {"text": "typo :-(\ns/assigned to Android/assigned to Andrea/", "author": "lgreco@mozilla.com", "id": 13388276, "time": "2018-06-05T15:18:38Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/13-14/", "author": "lgreco@mozilla.com", "id": 13388372, "time": "2018-06-05T15:44:23Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/22-23/", "author": "lgreco@mozilla.com", "id": 13388373, "time": "2018-06-05T15:44:23Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/17-18/", "author": "lgreco@mozilla.com", "id": 13388374, "time": "2018-06-05T15:44:23Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/27-28/", "author": "lgreco@mozilla.com", "id": 13388375, "time": "2018-06-05T15:44:23Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/28-29/", "author": "lgreco@mozilla.com", "id": 13388376, "time": "2018-06-05T15:44:23Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/29-30/", "author": "lgreco@mozilla.com", "id": 13388377, "time": "2018-06-05T15:44:23Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/29-30/", "author": "lgreco@mozilla.com", "id": 13388378, "time": "2018-06-05T15:44:23Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/29-30/", "author": "lgreco@mozilla.com", "id": 13388379, "time": "2018-06-05T15:44:23Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nHi Andrea,\nDo you mind to review the additional changes applied to this patch based on our brief discussion?\n\nThe following is a link to the interdiff restricted to this last round of changes:\nhttps://reviewboard.mozilla.org/r/191228/diff/29-30/", "author": "lgreco@mozilla.com", "id": 13388390, "time": "2018-06-05T15:47:19Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/14-15/", "author": "lgreco@mozilla.com", "id": 13390516, "time": "2018-06-06T10:14:47Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/23-24/", "author": "lgreco@mozilla.com", "id": 13390517, "time": "2018-06-06T10:14:47Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/18-19/", "author": "lgreco@mozilla.com", "id": 13390518, "time": "2018-06-06T10:14:47Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/28-29/", "author": "lgreco@mozilla.com", "id": 13390519, "time": "2018-06-06T10:14:47Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/29-30/", "author": "lgreco@mozilla.com", "id": 13390520, "time": "2018-06-06T10:14:47Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/30-31/", "author": "lgreco@mozilla.com", "id": 13390521, "time": "2018-06-06T10:14:47Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/30-31/", "author": "lgreco@mozilla.com", "id": 13390522, "time": "2018-06-06T10:14:47Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/30-31/", "author": "lgreco@mozilla.com", "id": 13390523, "time": "2018-06-06T10:14:47Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nhttps://reviewboard.mozilla.org/r/223334/#review255754", "author": "amarchesini@mozilla.com", "id": 13390546, "time": "2018-06-06T10:26:53Z"}, {"text": "Comment on attachment 8920223\nBug 1406181 - Move serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191232/diff/8-9/", "author": "lgreco@mozilla.com", "id": 13391147, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8968193\nBug 1406181 - Add openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/236876/diff/5-6/", "author": "lgreco@mozilla.com", "id": 13391148, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8954173\nBug 1406181 - Add identity reserved for storage.local extension API to ContextualIdentityService.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/223334/diff/15-16/", "author": "lgreco@mozilla.com", "id": 13391149, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8920222\nBug 1406181 - Add ExtensionStorageIDB JSM module.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191230/diff/24-25/", "author": "lgreco@mozilla.com", "id": 13391150, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8969284\nBug 1406181 - Test storage.local data migration from JSONFile to IDB backend.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/238008/diff/19-20/", "author": "lgreco@mozilla.com", "id": 13391151, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8920225\nBug 1406181 - Test storage.local JSONFile and IndexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191236/diff/29-30/", "author": "lgreco@mozilla.com", "id": 13391152, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8920226\nBug 1406181 - Test storage.local telemetry on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191238/diff/30-31/", "author": "lgreco@mozilla.com", "id": 13391153, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8920227\nBug 1406181 - Test storage.local cleanup on uninstall on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191240/diff/31-32/", "author": "lgreco@mozilla.com", "id": 13391154, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8920228\nBug 1406181 - Test storage.local from content scripts on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191242/diff/31-32/", "author": "lgreco@mozilla.com", "id": 13391155, "time": "2018-06-06T14:39:43Z"}, {"text": "Comment on attachment 8920229\nBug 1406181 - Test storage.local from extension tab pages on file and indexedDB backends.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/191244/diff/31-32/", "author": "lgreco@mozilla.com", "id": 13391156, "time": "2018-06-06T14:39:43Z"}, {"text": "Pushed by luca.greco@alcacoop.it:\nhttps://hg.mozilla.org/integration/autoland/rev/2174226b26dc\nMove serialize/deserialize helpers from ext-c-storage.js to ExtensionStorage.jsm. r=kmag\nhttps://hg.mozilla.org/integration/autoland/rev/e98870938f1b\nAdd openForPrincipal static method and changes to IDB cursor wrapping in IndexedDB.jsm. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/5851a229516d\nAdd identity reserved for storage.local extension API to ContextualIdentityService. r=baku\nhttps://hg.mozilla.org/integration/autoland/rev/7ca1fccbe7b7\nAdd ExtensionStorageIDB JSM module. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/0f5748ff685d\nTest storage.local data migration from JSONFile to IDB backend. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/85a31c13073a\nTest storage.local JSONFile and IndexedDB backends. r=kmag\nhttps://hg.mozilla.org/integration/autoland/rev/645c311bf4ca\nTest storage.local telemetry on file and indexedDB backends. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/077af955cd73\nTest storage.local cleanup on uninstall on file and indexedDB backends. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/73030596b51f\nTest storage.local from content scripts on file and indexedDB backends. r=aswan\nhttps://hg.mozilla.org/integration/autoland/rev/de1544d92b89\nTest storage.local from extension tab pages on file and indexedDB backends. r=aswan", "author": "pulsebot@bots.tld", "id": 13391317, "time": "2018-06-06T15:19:33Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/2174226b26dc\nhttps://hg.mozilla.org/mozilla-central/rev/e98870938f1b\nhttps://hg.mozilla.org/mozilla-central/rev/5851a229516d\nhttps://hg.mozilla.org/mozilla-central/rev/7ca1fccbe7b7\nhttps://hg.mozilla.org/mozilla-central/rev/0f5748ff685d\nhttps://hg.mozilla.org/mozilla-central/rev/85a31c13073a\nhttps://hg.mozilla.org/mozilla-central/rev/645c311bf4ca\nhttps://hg.mozilla.org/mozilla-central/rev/077af955cd73\nhttps://hg.mozilla.org/mozilla-central/rev/73030596b51f\nhttps://hg.mozilla.org/mozilla-central/rev/de1544d92b89", "author": "ncsoregi@mozilla.com", "id": 13392306, "time": "2018-06-06T22:03:08Z"}, {"text": "Hi :rpl\n\nA patch in this bug, more specifically this one,\n\nBug 1406181 - Add ExtensionStorageIDB JSM module. r=aswan\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/7ca1fccbe7b7\n\nAppears to have broken my raptor performance framework web extension [1].\n\nMore specifically, after my web extension does a tab.update, my web extension's content script fails to read the local extension storage (never returns from a browser.storage.local.get call). It works the first time the tab is updated to a URL after an empty tab is created, but the next time after that, when the tab is updated, the content script can no longer read the local storage.\n\nRaptor is a Firefox desktop performance framework that is under development (running locally, and on try on OSX but not in production yet).\n\nCan you please take a look? Any help would be greatly appreciated. :)\n\n[1] https://searchfox.org/mozilla-central/source/testing/raptor/webext/raptor", "author": "rwood@mozilla.com", "id": 13395254, "time": "2018-06-08T00:16:33Z"}, {"text": "(In reply to Robert Wood [:rwood] from comment #314)\n> Hi :rpl\n> \n> A patch in this bug, more specifically this one,\n> \n> Bug 1406181 - Add ExtensionStorageIDB JSM module. r=aswan\n> \n> https://hg.mozilla.org/integration/mozilla-inbound/rev/7ca1fccbe7b7\n> \n> Appears to have broken my raptor performance framework web extension [1].\n> \n> More specifically, after my web extension does a tab.update, my web\n> extension's content script fails to read the local extension storage (never\n> returns from a browser.storage.local.get call). It works the first time the\n> tab is updated to a URL after an empty tab is created, but the next time\n> after that, when the tab is updated, the content script can no longer read\n> the local storage.\n> \n> Raptor is a Firefox desktop performance framework that is under development\n> (running locally, and on try on OSX but not in production yet).\n> \n> Can you please take a look? Any help would be greatly appreciated. :)\n\nHi Robert,\nThanks for having quickly identified and reported this regression, I took a look at it immediately.\n\nThe underlying issue should be the same one also reported by Bug 1467720, which has a similar STR: in raptor the issue is triggered after a content script context is being destroyed, and the extension mentioned in Bug 1467720 after an extension popup has been destroyed.\n\nI've briefly tried the raptor extension locally on a Nightly built with the patch attached to Bug 1467720 applied, and Raptor's content script seems to be working as expected with the fix applied (browser.storage.local.get doesn't get stuck when called from the content script after a page navigation).\n\nLet me know if you have a chance to confirm that, on a Nightly built with the patch from Bug 1467720 applied, the Raptor's webextension functionalities are fully restored or if you see other regressions that are preventing it from working as expected.", "author": "lgreco@mozilla.com", "id": 13395899, "time": "2018-06-08T10:23:11Z"}, {"text": "(In reply to Luca Greco [:rpl] from comment #315)\n\n> Let me know if you have a chance to confirm that, on a Nightly built with\n> the patch from Bug 1467720 applied, the Raptor's webextension\n> functionalities are fully restored or if you see other regressions that are\n> preventing it from working as expected.\n\nHey Luca,\n\nThanks for the speedy reply! I applied the patch in Bug 1467720 and did a nightly build, and yes indeed that patch does also fix Raptor's web extension. Thank you! :)\n\nRob", "author": "rwood@mozilla.com", "id": 13396280, "time": "2018-06-08T14:18:29Z"}], "id": 1406181, "priority": "P1", "cc": ["ajfhajf@yandex.ru", "albert@scheiner.cc", "alexeiatyahoodotcom+mzllbgzll@gmail.com", "am@adguard.com", "amarchesini@mozilla.com", "aswan@mozilla.com", "boyans@abv.bg", "bugmail@asutherland.org", "bzhao@mozilla.com", "cosmin.badescu@softvision.ro", "cr0ydon@outlook.com", "ddurst@mozilla.com", "e7358d9c@opayq.com", "eglassercamp@mozilla.com", "fx4waldi@yahoo.com", "grahamperrin@gmail.com", "gwarser@gmail.com", "ianb@mozilla.com", "jmaher@mozilla.com", "jryans@gmail.com", "kernp25@yahoo.com", "kmaglione+bmo@mozilla.com", "lgreco@mozilla.com", "mconley@mozilla.com", "mdaly@mozilla.com", "rwood@mozilla.com", "simon.mainey@gmail.com", "smultron45@gmail.com", "Virtual@teknik.io"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1371255", "https://bugzilla.mozilla.org/show_bug.cgi?id=1277612"], "cf_tracking_thunderbird_esr60": "---", "status": "RESOLVED", "product": "Toolkit", "cf_fx_iteration": "62.4 - Jul 2", "blocks": [1282972, 1456390], "qa_contact": "", "creation_time": "2017-10-05T20:47:52Z", "cf_status_firefox_esr52": "---", "component": "WebExtensions: Storage", "assigned_to_detail": {"email": "lgreco@mozilla.com", "id": 339062, "name": "lgreco@mozilla.com", "real_name": "Luca Greco [:rpl]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "fixed", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "mozilla62", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "andy+bugzilla@mckay.pub", "id": 397635, "name": "andy+bugzilla@mckay.pub", "real_name": "Andy McKay"}, "whiteboard": "", "mentors": [], "summary": "Use indexedDB as the backend for storage.local", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-08T15:14:08Z", "assigned_to": "lgreco@mozilla.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "ajfhajf@yandex.ru"}], "who": "ajfhajf@yandex.ru", "when": "2017-10-05T20:50:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "smultron45@gmail.com"}], "who": "smultron45@gmail.com", "when": "2017-10-05T20:51:55Z"}, {"changes": [{"removed": "---", "field_name": "cf_status_firefox57", "added": "wontfix"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-10-17T05:00:18Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}], "who": "lgreco@mozilla.com", "when": "2017-10-19T15:26:20Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920223, "added": "review?(kmaglione+bmo@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920224, "added": "review?(kmaglione+bmo@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920225, "added": "review?(kmaglione+bmo@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "kmaglione+bmo@mozilla.com"}], "who": "lgreco@mozilla.com", "when": "2017-10-19T17:11:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Virtual@teknik.io"}], "who": "Virtual@teknik.io", "when": "2017-10-23T10:35:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "alexeiatyahoodotcom+mzllbgzll@gmail.com"}], "who": "alexeiatyahoodotcom+mzllbgzll@gmail.com", "when": "2017-10-29T23:18:38Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cosmin.badescu@softvision.ro"}], "who": "cosmin.badescu@softvision.ro", "when": "2017-11-06T09:09:23Z"}, {"changes": [{"removed": "WebExtensions: General", "field_name": "component", "added": "WebExtensions: Storage"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-11-13T17:13:08Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1282972"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-11-17T22:34:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugmail@asutherland.org"}], "who": "bugmail@asutherland.org", "when": "2017-11-27T22:26:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8938663, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2017-12-22T19:10:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-01-17T20:39:45Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920223, "added": "review+"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-01-17T20:45:54Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920224, "added": ""}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-01-17T21:01:20Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920225, "added": "review+"}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-01-17T21:03:38Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "eglassercamp@mozilla.com"}], "who": "eglassercamp@mozilla.com", "when": "2018-01-17T21:32:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-02-09T12:31:00Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8920224, "added": "1"}], "who": "lgreco@mozilla.com", "when": "2018-02-09T12:31:07Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8938663, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8938663, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-02-09T12:31:08Z"}, {"changes": [{"removed": "meta", "field_name": "keywords", "added": ""}, {"removed": "", "field_name": "cc", "added": "ddurst@mozilla.com"}], "who": "ddurst@mozilla.com", "when": "2018-02-14T15:28:41Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "amarchesini@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8954173, "added": "feedback?(amarchesini@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-02-26T21:33:03Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8954173, "added": "review+"}], "who": "amarchesini@mozilla.com", "when": "2018-02-27T11:11:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+, feedback?(amarchesini@mozilla.com)", "attachment_id": 8954173, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-02-27T14:06:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-02-27T14:06:42Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "feedback?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-02-27T14:12:43Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P1"}, {"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1371255"}], "who": "ddurst@mozilla.com", "when": "2018-02-28T15:18:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "albert@scheiner.cc"}], "who": "albert@scheiner.cc", "when": "2018-03-01T09:59:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mdaly@mozilla.com"}], "who": "mdaly@mozilla.com", "when": "2018-03-08T03:28:04Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com), feedback?"}], "who": "lgreco@mozilla.com", "when": "2018-03-12T16:48:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kernp25@yahoo.com"}], "who": "kernp25@yahoo.com", "when": "2018-03-20T03:24:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "grahamperrin@gmail.com"}], "who": "grahamperrin@gmail.com", "when": "2018-03-24T01:41:20Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?", "attachment_id": 8920222, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-03-27T11:46:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2018-03-29T21:26:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cr0ydon@outlook.com"}], "who": "cr0ydon@outlook.com", "when": "2018-04-01T22:03:46Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}], "who": "kmaglione+bmo@mozilla.com", "when": "2018-04-10T23:22:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bzhao@mozilla.com"}], "who": "bzhao@mozilla.com", "when": "2018-04-13T02:44:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "am@adguard.com"}], "who": "am@adguard.com", "when": "2018-04-14T17:52:35Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-04-16T14:32:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968193, "added": "review?(kmaglione+bmo@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-04-17T18:35:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-04-19T13:41:45Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969284, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-04-19T13:44:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fx4waldi@yahoo.com"}], "who": "fx4waldi@yahoo.com", "when": "2018-04-19T17:39:05Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-04-19T19:18:26Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920226, "added": "review?(aswan@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920227, "added": "review?(aswan@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920228, "added": "review?(aswan@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920229, "added": "review?(aswan@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "aswan@mozilla.com"}], "who": "lgreco@mozilla.com", "when": "2018-04-19T19:27:26Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8920226, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-04-23T20:44:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8920228, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-04-23T20:50:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8920229, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-04-23T20:51:35Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1456390"}], "who": "ptheriault@mozilla.com", "when": "2018-04-24T06:42:01Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1277612"}], "who": "e7358d9c@opayq.com", "when": "2018-04-25T14:38:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "e7358d9c@opayq.com"}], "who": "e7358d9c@opayq.com", "when": "2018-04-25T14:39:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-04-25T16:01:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969284, "added": "review?(aswan@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8920227, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-04-25T16:06:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8954173, "added": "review+"}], "who": "lgreco@mozilla.com", "when": "2018-04-25T16:08:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-04-25T16:35:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920227, "added": "review?(aswan@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-05-10T17:00:37Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8920227, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-05-16T21:17:12Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968193, "added": "review?(aswan@mozilla.com)"}, {"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8954173, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8969284, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-05-17T16:57:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(aswan@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-05-17T16:58:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8969284, "added": "review?(aswan@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-05-17T17:50:45Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8920222, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-05-18T18:31:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8968193, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-05-21T16:40:56Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1465120"}], "who": "lgreco@mozilla.com", "when": "2018-05-29T16:02:52Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1465129"}], "who": "lgreco@mozilla.com", "when": "2018-05-29T16:37:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8920222, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-05-30T04:57:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(aswan@mozilla.com)", "attachment_id": 8969284, "added": "review+"}], "who": "aswan@mozilla.com", "when": "2018-05-30T05:05:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8968193, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8920222, "added": ""}, {"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8969284, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-06-02T18:34:46Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amarchesini@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-06-03T15:00:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "simon.mainey@gmail.com"}], "who": "simon.mainey@gmail.com", "when": "2018-06-03T21:39:00Z"}, {"changes": [{"removed": "---", "field_name": "cf_fx_iteration", "added": "62.4 - Jul 2"}], "who": "ddurst@mozilla.com", "when": "2018-06-05T01:37:27Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mconley@mozilla.com"}], "who": "mconley@mozilla.com", "when": "2018-06-05T15:12:59Z"}, {"changes": [{"removed": "needinfo?(amarchesini@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-06-05T15:15:51Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8954173, "added": "review?(amarchesini@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-06-05T15:47:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ianb@mozilla.com"}], "who": "ianb@mozilla.com", "when": "2018-06-05T18:35:48Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "boyans@abv.bg"}], "who": "boyans@abv.bg", "when": "2018-06-05T18:42:58Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(amarchesini@mozilla.com)", "attachment_id": 8954173, "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-06-06T10:14:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8954173, "added": "review?(amarchesini@mozilla.com)"}], "who": "lgreco@mozilla.com", "when": "2018-06-06T10:21:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(amarchesini@mozilla.com)", "attachment_id": 8954173, "added": "review+"}], "who": "amarchesini@mozilla.com", "when": "2018-06-06T10:26:53Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla62"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-06-06 22:03:08"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "fixed"}], "who": "ncsoregi@mozilla.com", "when": "2018-06-06T22:03:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jmaher@mozilla.com, lgreco@mozilla.com, rwood@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(lgreco@mozilla.com)"}], "who": "rwood@mozilla.com", "when": "2018-06-08T00:16:33Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1467720"}], "who": "lgreco@mozilla.com", "when": "2018-06-08T09:54:04Z"}, {"changes": [{"removed": "needinfo?(lgreco@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "lgreco@mozilla.com", "when": "2018-06-08T10:23:11Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1467727"}], "who": "alice0775@yahoo.co.jp", "when": "2018-06-08T11:05:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gwarser@gmail.com"}], "who": "gwarser@gmail.com", "when": "2018-06-08T15:14:08Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}