{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "continuation@gmail.com", "mentors_detail": [], "depends_on": [1438688, 1449747, 1455221, 1455722], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "bobbyholley@gmail.com", "id": 313730, "name": "bobbyholley@gmail.com", "real_name": "Bobby Holley (On Leave Until June 11th)"}, {"email": "erahm@mozilla.com", "id": 496127, "name": "erahm@mozilla.com", "real_name": "Eric Rahm [:erahm] (please no mozreview requests)"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "mh+mozilla@glandium.org", "id": 47192, "name": "mh+mozilla@glandium.org", "real_name": "Mike Hommey [:glandium]"}, {"email": "n.nethercote@gmail.com", "id": 334849, "name": "n.nethercote@gmail.com", "real_name": "Nicholas Nethercote [:njn]"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "nika@thelayzells.com", "id": 534482, "name": "nika@thelayzells.com", "real_name": ":Nika Layzell"}, {"email": "timeless@bemail.org", "id": 15223, "name": "timeless@bemail.org", "real_name": "timeless"}], "cf_last_resolved": "2018-04-18T10:59:30Z", "attachments": [{"creator": "continuation@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "application/x-gzip", "id": 8964741}, {"creator": "nika@thelayzells.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8965146}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-09T23:26:07Z", "type_id": 4, "creation_date": "2018-04-04T23:48:48Z", "id": 1739488, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8965147}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-10T22:37:22Z", "type_id": 4, "creation_date": "2018-04-04T23:48:54Z", "id": 1739489, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8965148}, {"creator": "nika@thelayzells.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8965149}, {"creator": "nika@thelayzells.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8965150}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2018-04-16T21:11:35Z", "type_id": 4, "creation_date": "2018-04-06T23:29:45Z", "id": 1740655, "setter": "erahm@mozilla.com"}, {"status": "+", "name": "feedback", "modification_date": "2018-04-16T21:11:35Z", "type_id": 607, "creation_date": "2018-04-16T21:11:35Z", "id": 1744664, "setter": "erahm@mozilla.com"}], "content_type": "text/plain", "id": 8965864}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-11T23:47:32Z", "type_id": 4, "creation_date": "2018-04-06T23:29:56Z", "id": 1740656, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8965865}, {"creator": "nika@thelayzells.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8965866}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-09T23:20:32Z", "type_id": 4, "creation_date": "2018-04-09T18:32:53Z", "id": 1741323, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8966320}, {"creator": "nika@thelayzells.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-16T19:23:23Z", "type_id": 4, "creation_date": "2018-04-16T19:21:53Z", "id": 1744606, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8968296}, {"creator": "nika@thelayzells.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8968297}, {"creator": "nika@thelayzells.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8968298}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-16T20:54:36Z", "type_id": 4, "creation_date": "2018-04-16T19:22:21Z", "id": 1744609, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8968299}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-16T20:54:57Z", "type_id": 4, "creation_date": "2018-04-16T19:22:30Z", "id": 1744610, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8968300}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8968321}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-16T20:34:23Z", "type_id": 4, "creation_date": "2018-04-16T20:29:36Z", "id": 1744638, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8968322}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-16T20:35:29Z", "type_id": 4, "creation_date": "2018-04-16T20:29:43Z", "id": 1744639, "setter": "continuation@gmail.com"}], "content_type": "text/plain", "id": 8968323}, {"creator": "nika@thelayzells.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-17T00:45:05Z", "type_id": 4, "creation_date": "2018-04-17T00:15:40Z", "id": 1744727, "setter": "erahm@mozilla.com"}], "content_type": "text/plain", "id": 8968369}], "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 72, "comments": [{"text": "Once bug 1438688 is fixed, it should be possible to eliminate xptiInterfaceEntry, which is a remaining dynamically allocated XPT class. I think this will eliminate most of the remaining 10kb of dynamic information that is not hash tables. It isn't clear that this is worth the effort.\n\nxptiInterfaceEntry is essentially a wrapper around XPTInterfaceDescriptor that stores a few extra pieces of data. If we can statically compute those pieces of data and add them to XPTInterfaceDescriptor, then we can eliminate xptiInterfaceEntry.\n\nThis extra data is:\n- mMethodBaseIndex and mConstantBaseIndex count the sum of the number of methods and constants, respectively, in all of the parent interfaces. With bug 1438688, we have the full definition of all parent classes available statically, so this can be computed statically.\n- mFlags mostly stores the same data as the flags in XPTInterfaceDescriptor. One of the things it stores that the descriptor does not is notxpcom, which is true if any of the methods of the interface are notxpcom, or the parent is notxpcom. As with the base indexes, once all of the parents are statically available, this can be statically computed. The other extra data this stores is the dynamic resolution state. With xptiInterfaceEntry eliminated, there is no dynamic resolution, so this is not needed.\n- mInfo is a weak pointer to a xptiInterfaceInfo, which is a dynamically allocated wrapper (yes, a wrapper wrapper). This ensures that a xptiInterfaceEntry never has more than one wrapper. This can be eliminated either by adding a hash table from XPTInterfaceDescriptor to xptiInterfaceInfo to the xptiTypelibGuts (at the cost of some memory), or by making XPTInterfaceDescriptor somehow implement nsIInterfaceInfo, and eliminating xptiInterfaceInfo entirely.\n- mParent is the xptiInterfaceEntry of the parent. If we merge the two classes, this won't be needed, because we can just use the XPTInterfaceDescriptor parent.\n- mTypelib is a xptiTypelibGuts* that is used to essentially look up the mapping from XPTInterfaceDescriptor to xptiInterfaceEntry. If the latter is eliminated, this is not needed any more. (Also, xptiTypelibGuts will be a singleton, so it isn't needed as a field anyways.)", "author": "continuation@gmail.com", "id": 13119608, "time": "2018-03-11T16:35:27Z"}, {"text": "I spent some time trying to figure out if I could use XPTInterfaceDescriptor in place of nsIInterfaceInfo. I think this will not work easily because we also need to support ShimInterfaceInfo, which dynamically looks up things from WebIDL. In principle, we could statically generate the shim info as XPTInterfaceDescriptor, but bug 1438688 works by having a single global generation step, so I'd have to make XPIDL depends on WebIDL in the build system, which sounds like a lot of trouble.\n\nSo, I think the way forward for that is to add a hash table somewhere instead of the weak pointer. We could also generate a new xptiInterfaceInfo every time one is requested (it looks like ShimInterfaceInfo does this), but that might require a lot of extra memory for wrappers.", "author": "continuation@gmail.com", "id": 13169583, "time": "2018-03-30T18:41:50Z"}, {"text": "I have this mostly working, but it sounds like Nika was looking through this code for another reason and also noticed that we don't really need the dynamic allocations, and wrote up the patches to get rid of it. Hers apparently goes a little further than mine and does the perfect hashing stuff to get rid of the name and IID tables, and she of course already has her followup work rebased on top of this, so we'll just go ahead with her version of things. Once the dust settles from that I'll figure out if the other cleanup bugs I filed are still needed.", "author": "continuation@gmail.com", "id": 13178198, "time": "2018-04-03T23:00:11Z"}, {"text": "Created attachment 8964741\nsemi working patches\n\nFor posterity, here are my work in progress patches. There's a bug in part 7, as I note in the commit message. This is on top of hg commit  a1fb8ffae378963b128deaaf3a76eff9dbb6be21, then the patches from bug 1448454, bug 1449747, bug 1450361, bug 1450321 and bug 1450359.", "author": "continuation@gmail.com", "id": 13178296, "time": "2018-04-03T23:56:34Z"}, {"text": "Nika's patches for this apparently also get rid of nsIInterfaceInfo and the dynamic allocation for the hash tables from nsIDs and names to xptiInterfaceEntry. The latter is another 100kb on top of the 100kb from making xptiInterfaceEntry static. The former isn't tracked right now, but with napkin math I'd say that each one is a couple of words of data, and maybe we have on the order of a 100 or so of them.", "author": "continuation@gmail.com", "id": 13180307, "time": "2018-04-04T17:00:04Z"}, {"text": "Created attachment 8965146\nPart 1: Clear out xptinfo and typelib to make way for the this patch\n\nUnfortunately, I wasn't able to figure out a way to make firefox build & run in\nthe intermediate stages of these commits. Because of this, I am going to just\ndelete most of the code which I am deleting in the first patch, as I figure that\nthose are somewhat uninteresting changes, and then make the other changes in the\nfollowing patches.\n\nIn total, the following things are deleted:\n 1. All of xpcom/typelib - this directory is being subsumed entirely into xpcom/reflect/xptinfo.\n 2. Most of the code in xpcom/reflect/xptinfo, it is being rewritten to avoid allocating and contain all of the necessary data structures.\n 3. idl-parser's typelib.py XPT generator, as its xpt dependency is also being removed in this patch, and it will be replaced.\n 4. Most includes of files which have been deleted.", "author": "nika@thelayzells.com", "id": 13181778, "time": "2018-04-04T23:48:41Z"}, {"text": "Created attachment 8965147\nPart 2: Add the xptshim and xptshimfile attributes to xpidl\n\nIn the previous patch, one of the files which was deleted is ShimInterfaceInfo.\nThis is an implementor of nsIInterfaceInfo which exists for legacy reasons, in\norder to allow Components.interfaces.nsIDOM* to have the correct constants and\nIIDs associated with them.\n\nAs that file was deleted, this information now has to be stored in the typelib.\nTo do this, the information is moved to the xptshim and xptshimfile attributes\non the relevant xpcom interfaces.\n\nxptshim(...) means that this xpcom interface is a shim for the WebIDL interface\nwith the specified name.\n\nxptshimfile(...) is for use when the webidl interface is declared in another\ninterface's .webidl file, (in our case, MessageManager.webidl). It contains the\nname of the parent binding, such that we can #include the correct file in our\ngenerated code.\n\nThis patch does not add the code which uses these changes, only the parsing\nlogic.", "author": "nika@thelayzells.com", "id": 13181779, "time": "2018-04-04T23:48:48Z"}, {"text": "Created attachment 8965148\nPart 3: Replace the XPT file format with a JSON based one\n\nThis patch adds a python script based on the old typelib.py script which takes\nin a parsed XPIDL file, and generates a json-based XPT file to use as a build\nintermediate. I did my best to keep the generated format simple.", "author": "nika@thelayzells.com", "id": 13181780, "time": "2018-04-04T23:48:54Z"}, {"text": "Created attachment 8965149\nPart 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the required datastructures\n\nThis patch contains the meat of the changes here. The following summarize the changes:\n 1. xptinfo.h is rewritten to expose the new interface for reading the XPT data,\n\n    The nsXPTInterfaceInfo object exposes methods with the same signatures as\n    the methods on nsIInterfaceInfo, to make converting code which used\n    nsIInterfaceInfo as easy as possible, even when those methods don't have\n    signatures which make a ton of sense anymore. There are also a few methods\n    which are unnecessary (they return `true` or similar), which should be\n    removed over time.\n\n    Members of the data structures are made private in order to prevent reading\n    them directly. Code should instead call the getter methods. This should make\n    it easier to change their memory representation in the future. Constructing\n    these structs is made possible by making the structs `friend class` with the\n    XPTConstruct class, which is implemented by the code generator, and is able\n    to access the private fields.\n\n    In addition, rather than using integers with flag constants, I opted for\n    using C++ bitfields to store individual flags, as I found it made it easier\n    to both write the code generator, and reason about the layouts of the types.\n\n    I was able to shave a byte off of each nsXPTParamInfo (4 bytes -> 3 bytes)\n    by shoving the flags into spare bits in the nsXPTType. Unfortunately there\n    was not enough room for the retval flag. Fortunately, we already depend in\n    our code on the retval parameter being the last parameter, so I worked\n    around this by removing the retval flag and instead having a `hasretval`\n    flag on the method itself. \n\n 2. An xptinfo.cpp file is added for out-of-line definitions of more complex\n    methods, and the internal implementation details of the perfect hash.\n\n    Notable is the handling of xptshim interfaces. As the type is uniform, a\n    flag is checked when trying to read constant information, and a different\n    table with pointers into webidl data structures is checked when the type is\n    determined to be a shim.\n\n    Ideally we could remove this once we remove the remaining consumers of the\n    existing shim interfaces.\n\n 3. A python code generator which takes in the json XPT files generated in the\n    previous part, and emits a xptdata.cpp file with the data structures. I did\n    my best to heavily comment the code.\n\n    This code uses the friend class trick to construct the private fields of the\n    structs, and avoid a dependency on the ordering of fields in xptinfo.h.\n\n    The sInterfaces array's order is determined by a generated perfect hash\n    which is also written into the binary. This should allow for fast lookups by\n    IID or name of interfaces in memory. The hash function used for the perfect\n    hash is a simple FNV hash, as they're pretty fast.\n\n    For perfect hashing of names, another table is created which contains\n    indexes into the sInterfaces table. Lookup by name is less common, and this\n    form of lookup should still be very fast.\n\n 4. The necessary Makefiles are updated to use the new code generator, and\n    generate the file correctly.", "author": "nika@thelayzells.com", "id": 13181782, "time": "2018-04-04T23:48:59Z"}, {"text": "Created attachment 8965150\nPart 5: Update consumers of nsIInterfaceInfo to use the nsXPTInterfaceInfo directly\n\nDue to the decision to keep the old API on nsXPTInterfaceInfo in part 4, this is\na fairly straightforward patch.\n\n 1. I had to change a couple of consumers of `IsRetval()` due to the movement of\n    that flag.\n 2. I changed all code which held a nsIInterfaceInfo to hold an `const\n    nsXPTInterfaceInfo*` instead.\n 3. I changed code which used the nsIInterfaceInfoManager to instead call the\n    static methods on nsXPTInterfaceInfo.", "author": "nika@thelayzells.com", "id": 13181783, "time": "2018-04-04T23:49:06Z"}, {"text": "try: https://treeherder.mozilla.org/#/jobs?repo=try&revision=3ed30afc0b6ef80846d5a08ce9554295364948e7", "author": "nika@thelayzells.com", "id": 13181788, "time": "2018-04-04T23:50:39Z"}, {"text": "I'm really sorry about how gross the patches are :'-(. I couldn't figure out a way to split them up more nicely.\n\nIf you'd like the patch pushed to github, LMK.", "author": "nika@thelayzells.com", "id": 13181795, "time": "2018-04-04T23:53:20Z"}, {"text": "Are you okay with me reviewing these patches, Nathan?", "author": "continuation@gmail.com", "id": 13184392, "time": "2018-04-05T20:18:30Z"}, {"text": "(In reply to Andrew McCreight [:mccr8] from comment #12)\n> Are you okay with me reviewing these patches, Nathan?\n\nYes!", "author": "nfroyd@mozilla.com", "id": 13184418, "time": "2018-04-05T20:27:31Z"}, {"text": "FYI my review is in progress. I'm planning to give every patch at least a cursory review before I start marking review on anything, so I can try to understand the way everything works together. I'm also not familiar with anything in idl-parser so changes in there will take more time for me to get through.", "author": "continuation@gmail.com", "id": 13186620, "time": "2018-04-06T15:32:45Z"}, {"text": "Created attachment 8965864\nPart 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the required datastructures\n\nMade some updates to these patches to fix build errors.", "author": "nika@thelayzells.com", "id": 13187797, "time": "2018-04-06T23:29:45Z"}, {"text": "Created attachment 8965865\nPart 5: Update consumers of nsIInterfaceInfo to use the nsXPTInterfaceInfo directly", "author": "nika@thelayzells.com", "id": 13187798, "time": "2018-04-06T23:29:56Z"}, {"text": "Created attachment 8965866\nPart 6: Remove XPT files from bundling\n\nI needed to add another section 'cause I was running into infra failures due to\ntests wanting to use the xpt module which is no longer in tree. This patch\ncleans up that unused code.\n\nMozReview-Commit-ID: EYbYMREFc0T", "author": "nika@thelayzells.com", "id": 13187802, "time": "2018-04-06T23:30:35Z"}, {"text": "(In reply to Nika Layzell [:mystor] from comment #17)\n> Created attachment 8965866\n> Part 6: Remove XPT files from bundling\n\nI'm not sure this is going to be okay. I had similar changes to this directory in bug 1438688, but Glandium objected, saying that somebody might be using mozpack across versions, so XPT support should be left in. See comment 50 in that bug. I ended up reverting my mozpack changes entirely. I guess your changes break these tests while mine don't, because I didn't change the XPT format or something? You'll have to get review from Glandium on this part, as I'm not sure what is okay or isn't.", "author": "continuation@gmail.com", "id": 13187828, "time": "2018-04-06T23:52:35Z"}, {"text": "(In reply to Andrew McCreight [:mccr8] from comment #18)\n> I'm not sure this is going to be okay. I had similar changes to this\n> directory in bug 1438688, but Glandium objected, saying that somebody might\n> be using mozpack across versions, so XPT support should be left in. See\n> comment 50 in that bug. I ended up reverting my mozpack changes entirely. I\n> guess your changes break these tests while mine don't, because I didn't\n> change the XPT format or something? You'll have to get review from Glandium\n> on this part, as I'm not sure what is okay or isn't.\n\nThat's unfortunate :-/. If we can't get rid of XPT handling in mozpack, then we'll also have to keep the xpt/tools code around, despite not using XPT files anywhere in our build system.\n\n:glandium, what's the motivation for keeping XPT support in tree when we don't use it?", "author": "nika@thelayzells.com", "id": 13187903, "time": "2018-04-07T00:47:24Z"}, {"text": "Created attachment 8966320\nPart 1: Clear out xptinfo and typelib to make way for the this patch\n\nI figured it'd be easier & cleaner if I just leave the XPT.py stuff in tree and\ndon't remove it entirely, so I've restored it. We can clean that stuff up if we\nwant to later.", "author": "nika@thelayzells.com", "id": 13192832, "time": "2018-04-09T18:32:53Z"}, {"text": "Comment on attachment 8966320\nPart 1: Clear out xptinfo and typelib to make way for the this patch\n\nReview of attachment 8966320:\n-----------------------------------------------------------------\n\nnit: \"the this\" in first line of commit message.\n\n::: dom/xbl/nsXBLPrototypeBinding.cpp\n@@ -34,5 @@\n>  #include \"nsXBLProtoImpl.h\"\n>  #include \"nsCRT.h\"\n>  #include \"nsContentUtils.h\"\n>  #include \"nsTextFragment.h\"\n> -#include \"nsTextNode.h\"\n\nThe removal of this #include is the cause of the build bustage, though I guess you just fixed it by adding it back in part 5.", "author": "continuation@gmail.com", "id": 13193652, "time": "2018-04-09T23:20:32Z"}, {"text": "Comment on attachment 8965147\nPart 2: Add the xptshim and xptshimfile attributes to xpidl\n\nReview of attachment 8965147:\n-----------------------------------------------------------------\n\nIt is nice how this means that if you remove an XPIDL interface you are also automatically removing the shim.\n\nkComponentsInterfaceShimMap has an entry for nsIDOMEventTarget and nsITreeBoxObject, but you don\u2019t add a shim for them here. Why is that? If it is intentional, please explain why in the commit message.\n\nWhy is it okay to remove \"builtinclass\" from some of these interfaces? (I haven't read through the Python code in later patches yet, so apologies if it is obvious later.)\n\nI think the names of these attributes should be more like \"shim\" and \"shimfile\". XPT is more of an implementation detail than a concept in the XPIDL language. The entire XPIDL MDN page only contains \"xpt\" twice. Does that sounds reasonable to you?\n\nCould the shimfile argument have the extension? It feels a little more obvious what it means if it is like \"shimfile(MessageManager.webidl)\". MessageManager isn\u2019t a file, after all. And then check if the extension is webidl somewhere.\n\nIt is too bad that the name argument to shim isn\u2019t optional, but I see there\u2019s no current setup for an optional argument to an attribute, and it doesn\u2019t feel worthwhile to add a mechanism for what is fundamentally a temporary mechanism.\n\nPlease document xptshim and xptshimfile on https://developer.mozilla.org/en-US/docs/Mozilla/XPIDL Just like one sentence on each or something.\n\n::: dom/base/moz.build\n@@ +70,5 @@\n>      'nsDOMNavigationTiming.h',\n>      'nsDOMString.h',\n>      'nsDOMTokenList.h',\n>      'nsFocusManager.h',\n> +    'nsFrameLoader.h',  # Because binding headers include it.\n\nThis looks like it belongs in a later patch that adds something that uses this header. I suppose it doesn't matter where it is added.\n\n::: dom/base/nsIMessageManager.idl\n@@ +264,5 @@\n>   * sent.  For example, a child-process message manager will send\n>   * messages that are only delivered to its one parent-process message\n>   * manager.\n>   */\n> +[xptshim(MessageSender), xptshimfile(MessageManager),\n\nIt is unfortunate that you have to introduce this mechanism for a single case, but I guess it is better than hard coding a special case in the XPIDL parser...", "author": "continuation@gmail.com", "id": 13193659, "time": "2018-04-09T23:26:07Z"}, {"text": "(I've written up most of my review for the C++ code in part 4, but I haven't gone over the Python in 3 and 4 yet, which I need to do before I finish that.)", "author": "continuation@gmail.com", "id": 13193661, "time": "2018-04-09T23:27:54Z"}, {"text": "> Why is it okay to remove \"builtinclass\" from some of these interfaces? (I haven't read through the Python code in later patches yet, so apologies if it is obvious later.)\n\nTo answer my own question, one of the changes these patches make is that shim classes are now implicitly builtinclass.", "author": "continuation@gmail.com", "id": 13196313, "time": "2018-04-10T22:09:00Z"}, {"text": "(In reply to Andrew McCreight [:mccr8] from comment #21)\n> The removal of this #include is the cause of the build bustage, though I\n> guess you just fixed it by adding it back in part 5.\n\nOops D:\n\n\n(In reply to Andrew McCreight [:mccr8] from comment #22)\n> It is nice how this means that if you remove an XPIDL interface you are also\n> automatically removing the shim.\n> \n> kComponentsInterfaceShimMap has an entry for nsIDOMEventTarget and\n> nsITreeBoxObject, but you don\u2019t add a shim for them here. Why is that? If it\n> is intentional, please explain why in the commit message.\n\nI don't remember why I didn't include those here. I looked in our tree & we don't use the shims at all in our code right now, so we can probably get away with leaving them out.\n\n> Why is it okay to remove \"builtinclass\" from some of these interfaces? (I\n> haven't read through the Python code in later patches yet, so apologies if\n> it is obvious later.)\n\nShims are, by definition, not scriptable, so they are also inherently builtinclass.\n\n> I think the names of these attributes should be more like \"shim\" and\n> \"shimfile\". XPT is more of an implementation detail than a concept in the\n> XPIDL language. The entire XPIDL MDN page only contains \"xpt\" twice. Does\n> that sounds reasonable to you?\n\nSure - I can call it shim and shimfile or something like that.\n\n> Could the shimfile argument have the extension? It feels a little more\n> obvious what it means if it is like \"shimfile(MessageManager.webidl)\".\n> MessageManager isn\u2019t a file, after all. And then check if the extension is\n> webidl somewhere.\n\nYeah, I could do something like that. I didn't bother 'cause I was kinda hoping to just get rid of the uses of shimfile & rip it out ASAP D:. Wasn't really thinking much about asthetics.\n\n> It is too bad that the name argument to shim isn\u2019t optional, but I see\n> there\u2019s no current setup for an optional argument to an attribute, and it\n> doesn\u2019t feel worthwhile to add a mechanism for what is fundamentally a\n> temporary mechanism.\n> \n> Please document xptshim and xptshimfile on\n> https://developer.mozilla.org/en-US/docs/Mozilla/XPIDL Just like one\n> sentence on each or something.\n\nSure\n\n> ::: dom/base/moz.build\n> @@ +70,5 @@\n> >      'nsDOMNavigationTiming.h',\n> >      'nsDOMString.h',\n> >      'nsDOMTokenList.h',\n> >      'nsFocusManager.h',\n> > +    'nsFrameLoader.h',  # Because binding headers include it.\n> \n> This looks like it belongs in a later patch that adds something that uses\n> this header. I suppose it doesn't matter where it is added.\n\nThis is used technically when we start generating code. One of the bindings which we have to connect to is FrameLoaderBinding.h, which includes nsFrameLoader.h.\n\nI don't remember how the change ended up here, but this patchset doesn't build in any intermediate state anyway, so I'm not sure it's worth fixing.\n\n> ::: dom/base/nsIMessageManager.idl\n> @@ +264,5 @@\n> >   * sent.  For example, a child-process message manager will send\n> >   * messages that are only delivered to its one parent-process message\n> >   * manager.\n> >   */\n> > +[xptshim(MessageSender), xptshimfile(MessageManager),\n> \n> It is unfortunate that you have to introduce this mechanism for a single\n> case, but I guess it is better than hard coding a special case in the XPIDL\n> parser...\n\nYeah, that was my reasoning. I'd ideally want to move toward getting rid of these shims so we can rip out shimfile.", "author": "nika@thelayzells.com", "id": 13196346, "time": "2018-04-10T22:22:21Z"}, {"text": "Comment on attachment 8965148\nPart 3: Replace the XPT file format with a JSON based one\n\nReview of attachment 8965148:\n-----------------------------------------------------------------\n\nThis cleans out a nice amount of gunk. It was a little hard figuring out how this all worked, because I had to look at the original file, this patch, and the next patch to trace where some things went.\n\n::: python/mozbuild/mozbuild/action/xpidl-process.py\n@@ +66,2 @@\n>      xpt_path = os.path.join(xpt_dir, '%s.xpt' % module)\n> +    with FileAvoidWrite(xpt_path) as fh:\n\nSo, this breaks incremental builds, in a probably inconsequential manner. If you rename an XPCOM module in a moz.build file from foo to bar, then do a build, it'll generate the new bar.xpt file. Then if you change it back, the build system will notice that foo.xpt didn't change, and not build xptdata.cpp again. But I guess that's okay? The module name doesn't affect xptdata.cpp anything as far as I remember. If you changed anything in the module while it was bar.xpt, then foo.xpt will change and it will be fine. Anyways, I just thought I'd mention that in case you can think of some way that will cause a problem.\n\n::: xpcom/idl-parser/xpidl/jsonxpt.py\n@@ +1,2 @@\n> +#!/usr/bin/env python\n> +# jsonxpt.py - Generate json XPT typelib files from IDL.\n\nnit: JSON\n\n@@ +4,5 @@\n> +# This Source Code Form is subject to the terms of the Mozilla Public\n> +# License, v. 2.0. If a copy of the MPL was not distributed with this\n> +# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n> +\n> +\"\"\"Generate a json XPT typelib for an IDL file\"\"\"\n\nnit: JSON\n\n@@ +12,5 @@\n> +import xpidl\n> +import json\n> +import itertools\n> +\n> +# A map of xpidl.py types to xpt enum variants\n\nPlease mention the name of the C++ type you are mapping to.\n\n@@ +60,5 @@\n> +        ret = { 'tag': TypeMap[type.name] }\n> +        if type.name in ['string', 'wstring'] and size_is is not None:\n> +            ret['tag'] += '_SIZE_IS'\n> +            ret['size_is'] = size_is\n> +        return ret\n\nAh, nice, I didn't realize all of that isPtr and isRef stuff wasn't even used in C++. When I was looking at this code, I just preserved all of the bits and didn't notice that kFlagMask was wiping out those parts.\n\n@@ +184,5 @@\n> +            param = mk_param(get_type(a.realtype, 'in'), in_=1)\n> +            methods.append(mk_method(a.name, [param], setter=1, hidden=a.noscript,\n> +                                     context=a.implicit_jscontext))\n> +\n> +    implicit_builtinclass = False\n\nAs an aside, this notion of implicit builtinclass for interfaces that are stubs or have notxpcom methods is inconsistent with how infallible requires explicit builtinclass, but of course this predates your patch.\n\n@@ +211,5 @@\n> +        'methods': methods,\n> +        'consts': consts,\n> +        'parent': iface.base,\n> +        'xptshim': iface.attributes.xptshim,\n> +        'xptshimfile': iface.attributes.xptshimfile,\n\nThere should be an error (in the code in part 2?) if xptshimfile is set, but xptshim is not.", "author": "continuation@gmail.com", "id": 13196372, "time": "2018-04-10T22:37:22Z"}, {"text": "Two things you should look at, if you haven't already, are installer size and, on Windows, compile time. I had to back out bug 1448454 because it caused a large regression in both on Windows. All I did in that patch was make fields private and use a lot of constexpr Ctors, so your patch may also have similar problems.\n\nLinux doesn't seem to have that same problem with constexprs. I checked out the installer size locally in a Clang opt build.\n\nwithout patches:\n~/mc/obj-opt.noindex/dist$ ls -l firefox-61.0a1.en-US.linux-x86_64.tar.bz2\n-rw-rw-r-- 1 amccreight amccreight 68717908 Apr 10 16:36 firefox-61.0a1.en-US.linux-x86_64.tar.bz2\n\nwith patches:\n~/mc/obj-opt.noindex/dist$ ls -l firefox-61.0a1.en-US.linux-x86_64.tar.bz2\n-rw-rw-r-- 1 amccreight amccreight 68753328 Apr 10 16:28 firefox-61.0a1.en-US.linux-x86_64.tar.bz2\n\nThat's a 35,420 byte regression. I'm not sure exactly what that means for the actual libxul size, or what is okay or not. Some regression is probably expected due to having these hash tables around that we didn't before. I'll see if I can think of any size reductions we can do when I look at xptcodegen.py.", "author": "continuation@gmail.com", "id": 13196498, "time": "2018-04-10T23:48:33Z"}, {"text": "(In reply to Andrew McCreight [:mccr8] from comment #27)\n> Two things you should look at, if you haven't already, are installer size\n> and, on Windows, compile time. I had to back out bug 1448454 because it\n> caused a large regression in both on Windows. All I did in that patch was\n> make fields private and use a lot of constexpr Ctors, so your patch may also\n> have similar problems.\n\nHmm. If constexpr ctors are going to be a problem, I can just generate struct literals & move the statics into a friend class.\n\nI'll double-check and if I'm seeing the regression, I'll do that.\n\n> Linux doesn't seem to have that same problem with constexprs. I checked out\n> the installer size locally in a Clang opt build.\n> \n> without patches:\n> ~/mc/obj-opt.noindex/dist$ ls -l firefox-61.0a1.en-US.linux-x86_64.tar.bz2\n> -rw-rw-r-- 1 amccreight amccreight 68717908 Apr 10 16:36\n> firefox-61.0a1.en-US.linux-x86_64.tar.bz2\n> \n> with patches:\n> ~/mc/obj-opt.noindex/dist$ ls -l firefox-61.0a1.en-US.linux-x86_64.tar.bz2\n> -rw-rw-r-- 1 amccreight amccreight 68753328 Apr 10 16:28\n> firefox-61.0a1.en-US.linux-x86_64.tar.bz2\n> \n> That's a 35,420 byte regression. I'm not sure exactly what that means for\n> the actual libxul size, or what is okay or not. Some regression is probably\n> expected due to having these hash tables around that we didn't before. I'll\n> see if I can think of any size reductions we can do when I look at\n> xptcodegen.py.\n\nHuh, that's a pretty big regression. I'll definitely have to look into what's causing it.\n\nBased on the sizes of the hashtables, the regression shouldn't be nearly that large. The tables should only be 2x256 uint32_t and ~1200ish uint16_t so only ~4.5k bytes. Perhaps this increase was caused by more code being inlined into callers? Not sure.", "author": "nika@thelayzells.com", "id": 13196519, "time": "2018-04-11T00:16:38Z"}, {"text": "(In reply to Nika Layzell [:mystor] from comment #28)\n> Huh, that's a pretty big regression. I'll definitely have to look into\n> what's causing it.\nGreat!\n\n> Based on the sizes of the hashtables, the regression shouldn't be nearly\n> that large. The tables should only be 2x256 uint32_t and ~1200ish uint16_t\n> so only ~4.5k bytes. Perhaps this increase was caused by more code being\n> inlined into callers? Not sure.\n\nYeah, after I posted that I looked at the file and saw how tiny the hash table data was. Maybe you didn't implement some of my weird little optimizations for reducing data? As a first step, just check out the length of each data structure with and without the patches.", "author": "continuation@gmail.com", "id": 13196546, "time": "2018-04-11T00:55:42Z"}, {"text": "Comment on attachment 8965864\nPart 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the required datastructures\n\nEric, could you please review the perfect hash generator stuff? That's phf.py, the \"Perfect Hash Function backing data\" section in xpt_struct.h, \"C++ Perfect Hash Helper Functions\" and maybe \"PHF-based interface lookup methods\" in xptinfo.cpp. Thanks.", "author": "continuation@gmail.com", "id": 13198752, "time": "2018-04-11T18:00:53Z"}, {"text": "(In reply to Andrew McCreight [:mccr8] from comment #29)\n> Maybe you didn't implement some of my weird little\n> optimizations for reducing data? As a first step, just check out the length\n> of each data structure with and without the patches.\n\nI looked at how many of each kind of thing are being stored with and without your patch. The number of interfaces, consts, and methods match, as you'd expect. However, params (which are a pretty big chunk of the total data) go from around 5900 to 11000. The mega string goes from around 153000 characters to 162900 characters. So that probably explains a decent amount of the increase.", "author": "continuation@gmail.com", "id": 13198928, "time": "2018-04-11T18:55:21Z"}, {"text": "This is a smaller amount, but I also see that the number of top-level types goes from about 40 to about 200 with your patch. I think there the issue is just that you are missing deduplication for types. For instance, uint8 appears about 40 times.\n\nThis is a pre-existing issue, so I'd leave it for followup work unless you really need it, but I wonder if using a type index instead of an inline type in parameters would save space. The index is smaller, but maybe it wouldn't be if we needed a lot more top level types.", "author": "continuation@gmail.com", "id": 13199207, "time": "2018-04-11T20:17:47Z"}, {"text": "Comment on attachment 8965864\nPart 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the required datastructures\n\nReview of attachment 8965864:\n-----------------------------------------------------------------\n\nOver all, this looks great. I'm r-ing it because I want to see how you address the various changes I'm requesting. I also want to make sure the size regressions are addressed, though I suspect that if you add back in the various optimizations I mention below it will be fine.\n\n\"There are also a few methods which are unnecessary (they return `true` or similar), which should be removed over time.\"\nMaybe file a bug with some details about this, while it is fresh in your mind?\n\nI used njn's script to look at what is in rodata, and everything is as I'd expect. I also ran the profiler on xptcodegen.py. It runs a little slower than xpt.py, about 2.2 seconds instead of about a second, but the extra time is basically taken up by the perfect hash stuff, so that seems totally reasonable. Spending an extra second for an incremental build that touches an IDL file sounds reasonable to me.\n\n::: config/makefiles/xpidl/Makefile.in\n@@ -29,5 @@\n>  dist_idl_dir := $(DIST)/idl\n>  dist_include_dir := $(DIST)/include\n>  dist_xpcrs_dir := $(DIST)/xpcrs\n>  process_py := $(topsrcdir)/python/mozbuild/mozbuild/action/xpidl-process.py\n> -generated_file := $(topobjdir)/xpcom/typelib/xpt/XPTInfo.cpp\n\nThese Makefile changes look trivial (file renames, and changing how a Python command is invoked), so I think it is okay that I review this.\n\nPlease file a bug in the build system component about updating tup for this and CC mshal and chmanchester. (Akin to bug 1450877.)\n\n::: xpcom/reflect/xptinfo/phf.py\n@@ +1,2 @@\n> +#!/usr/bin/env python\n> +# phf.py - Helper for generating perfect hash functions for xptcodegen.py\n\nI'll defer to erahm on this, but please give this file a longer name. \"phf\" is cryptic. Maybe \"hashgen.py\".\n\n::: xpcom/reflect/xptinfo/xptcodegen.py\n@@ +64,5 @@\n> +        return r\n> +\n> +\n> +class Constructor(object):\n> +    # Helper object for defining and using constexpr methods create xpt types.\n\nnit: \"to create\".\n\n@@ +125,5 @@\n> +        return 0\n> +\n> +    # NOTE: State used while linking. This is done with closures rather than a\n> +    # class due to how this file's code evolved.\n> +    includes = []\n\nMaybe rename this to shim_includes so it is more obvious that they are only needed for shims?\n\n@@ +156,5 @@\n> +        else:\n> +            strings[s] = 0\n> +        return strings[s]\n> +\n> +    def describe_type(type): # Create the type's documentation comment.\n\nI'm glad to see that you were less lazy than me about having decent in-file documentation.\n\n@@ +165,5 @@\n> +        elif tag == 'interface_type':\n> +            return type['name']\n> +        elif tag == 'interface_is_type':\n> +            return 'iid_is(%d)' % type['iid_is']\n> +        elif tag.endswith('_size_is'):\n\nI like how 400 lines of type subclasses are boiled down into a couple of lines. (Of course, this code is really only doing the code_gen part of it.)\n\n@@ +181,5 @@\n> +            try:\n> +                d2 = types.index(elty)\n> +            except:\n> +                d2 = len(types)\n> +                types.append(elty)\n\nI think you should add deduplication for top-level types. There's a decent amount of it.\n\n@@ +229,5 @@\n> +        methods.append(struct(\n> +            \"nsXPTMethodInfo\",\n> +            \"%d = %s\" % (len(methods), methodname),\n> +            {\n> +                'mName': lower_string(method['name']),\n\nI was able to also not store the name of the method in the case of hideparams. (See Method::code_gen in xpt.py.) Is that not possible here? This is likely responsible for some of the extra string data with your patches. For instance, on m-c, the XPT data does not contain the string showURIForInput (from the hidden method nsIGIOService), whereas with your patch that is present.\n\n@@ +249,5 @@\n> +        ))\n> +\n> +        if not hideparams:\n> +            for idx, param in enumerate(method['params']):\n> +                lower_param(param, \"%s[%d]\" % (methodname, idx))\n\nAs I said in a bug comment, you should deduplicate lists of parameters. There's a lot of them! The drawback of course is that you can't easily comment which method the parameters are from. I think that's a reasonable tradeoff to save lots of space in the binary. I guess you could list every method name that got merged into a single parameter list if you want, but I don't know how useful that is vs how much work it'll take.\n\n@@ +285,5 @@\n> +        methods = 0\n> +        consts = 0\n> +        builtinclass = False\n> +        while iface is not None:\n> +            methods += len(iface['methods'])\n\nI was worried about the performance of computing parent class values over and over again, but it didn't seem to show up in a profiler run I did. I guess our XPIDL class hierarchies are not very deep!\n\n@@ +296,5 @@\n> +            iface = iid_phf.values[idx - 1]\n> +\n> +        return methods, consts, builtinclass\n> +\n> +    def lower_iface(iface):\n\nSomewhere in here you need to add the equivalent of the check in XPTInterfaceInfoManager::VerifyAndAddEntryIfNew() that if the interface is not builtinclass, the number of methods is <= 250. Also, include the equivalent of that comment here.\n\nYou should also update the comment in xpcom/reflect/xptcall/genstubs.pl that talks about xptiInterfaceInfoManager.cpp to refer to this file instead.\n\n@@ +311,5 @@\n> +            # as they will be pulled from the WebIDL binding instead. Instead,\n> +            # we use the constants offset field to store the index into the prop\n> +            # hooks table.\n> +            consts_off = len(prophooks)\n> +            builtinclass = True  # All shims are builtinclass\n\nI think it would be better if builtinclass was set to True for shims in build_interface in jsonxpt.py. You could assert for it here if you want. But there's already implicit_builtinclass there, and it would be nicer if that was all in one place.\n\n@@ +357,5 @@\n> +    # Include any bindings files which we need to include due to XPT shims.\n> +    for include in includes:\n> +        fd.write('#include \"%s\"\\n' % include)\n> +\n> +    # Write our out header\n\nnit: \"out our\".\n\n@@ +382,5 @@\n> +    #  1. Writing constructors this way means that xptcodegen.py is not\n> +    #     dependent on the order of fields in xptinfo.h\n> +    #  2. As a member of the XPTConstruct struct, we are `friend class` of the\n> +    #     data structures, allowing us to initialize private fields.\n> +    #  3. Stating the name of fields in this python code makes it more\n\nnit: Python.\n\n@@ +384,5 @@\n> +    #  2. As a member of the XPTConstruct struct, we are `friend class` of the\n> +    #     data structures, allowing us to initialize private fields.\n> +    #  3. Stating the name of fields in this python code makes it more\n> +    #     self-documenting.\n> +    fd.write(\"struct XPTConstruct {\")\n\nShould this class have an nsFoo-style name? It seems like the remaining class names are all like that.\n\n@@ +400,5 @@\n> +    array(\"nsXPTMethodInfo\", \"sMethods\", methods)\n> +    array(\"ConstInfo\", \"sConsts\", consts)\n> +    array(\"mozilla::dom::NativePropertyHooks*\", \"sPropHooks\", prophooks)\n> +\n> +    # The strings array. We write out individual characters to avoid msvc restrictions.\n\nnit: MSVC\n\n@@ +434,5 @@\n> +} // namespace xpt\n> +\"\"\")\n> +\n> +\n> +def link_and_write(files, outfile):\n\nxpt.py has some optimization that dumps all non-scriptable interfaces that aren't referred to by scriptable interfaces. It looks like instead you unilaterally drop all non-scriptable interfaces in jsonxpt.py. I don't want to dig through bug 996061 to figure out why they had to keep the non-scriptable interfaces around, so I guess it is okay if try is green. :) I guess my optimization to drop method info from notxpcom methods is similar in spirit to that.\n\n::: xpcom/reflect/xptinfo/xptinfo.cpp\n@@ +81,5 @@\n> +GetWebIDLConst(uint16_t aHookIdx, uint16_t aIndex, const ConstantSpec** aSpec)\n> +{\n> +  const NativePropertyHooks* propHooks = sPropHooks[aHookIdx];\n> +\n> +  uint16_t idx;\n\nidx looks like it is uninitialized here.\n\n@@ +96,5 @@\n> +          // calling isEnabled() here because it's OK to define potentially\n> +          // extra constants on these shim interfaces.\n> +          if (aSpec && idx == aIndex) {\n> +            *aSpec = cs;\n> +            return idx;\n\nIt is nice that you avoided the copy and paste stuff here, but it makes me uneasy how you are returning a value here that is never used, so it is untested code. Maybe make the two separate modes more explicit by returning the number of constants via a possibly-null argument, like it is done for aSpec? Then you can assert that only one or the other is being used, and thus there will be no untested calculations.\n\n@@ +134,5 @@\n> +    }\n> +\n> +    // Extract the value and name from the Constant Info.\n> +    const ConstInfo& info = sConsts[mConsts + aIndex];\n> +    if (info.mSigned || info.mValue <= (uint32_t)INT32_MAX) {\n\nI'm not sure I 100% understand this but looking at the old code it seems reasonable.\n\n@@ +285,5 @@\n> +  return NS_ERROR_FAILURE;\n> +}\n> +\n> +nsresult\n> +nsXPTInterfaceInfo::GetTypeForParam(uint16_t aMethodIndex,\n\nIt feels strange that aMethodIndex is unused here and in the next few methods. I suppose that this is fallout from my earlier hoisting of parameter data to a global structure instead of a per-method structure. Maybe add a comment saying that it is unused? Technically your patch changes behavior in the case where somebody passes in an invalid index, but I don't think that's a real concern.\n\n::: xpcom/reflect/xptinfo/xptinfo.h\n@@ +20,5 @@\n>  \n> +// Forward Declarations\n> +namespace mozilla {\n> +namespace dom {\n> +class NativePropertyHooks;\n\nnit: this should be |struct|, not |class|. I get a lot of build warnings from this.\n\n@@ +34,5 @@\n> +namespace detail {\n> +\n> +// xpt::detail::XPTConstruct is friend class with each of the data classes, such\n> +// that the generated code can access private fields.\n> +class XPTConstruct;\n\nXPTConstruct is a struct here, but a class in xptdata.cpp. I'm getting a warning about that. This probably also applies to the friend class declarations below.\n\n@@ +37,5 @@\n> +// that the generated code can access private fields.\n> +class XPTConstruct;\n> +\n> +inline const nsXPTInterfaceInfo* GetInterface(uint16_t aIndex);\n> +inline const nsXPTType& GetType(uint16_t aIdx);\n\nPlease be consistent about aIdx vs aIndex. (I prefer the latter myself, and it appears to be more common in the code base, but either is fine.)\n\n@@ +42,5 @@\n> +inline const nsXPTParamInfo& GetParam(uint16_t aIdx);\n> +inline const nsXPTMethodInfo& GetMethod(uint16_t aIdx);\n> +inline const char* GetString(uint32_t aIdx);\n> +\n> +extern const uint16_t sInterfacesSize;\n\nYou declare this a second time down below, which seems a little weird. I guess you have to forward declare it because it appears in code in the header, but it would also be odd to not mention it down with the rest of the static variables...\n\n@@ +49,5 @@\n> +} // namespace xpt\n> +\n> +\n> +/*\n> + * An Interface describes a single XPCOM interface, including all of its\n\nMaybe \"nsXPTInterfaceInfo\" instead of \"Interface\" here?\n\n@@ +82,5 @@\n> +    return xpt::detail::GetInterface(mParent);\n> +  }\n> +\n> +  // Do we have an ancestor interface with the given IID?\n> +  bool HasAncestor(const nsIID& aIID) const {\n\nOOC, why are you defining this and Method() inline?\n\n@@ +122,5 @@\n> +  // nsIInterfaceInfo backwards compatibility //\n> +  //////////////////////////////////////////////\n> +\n> +  nsresult GetName(char** aName) const;\n> +  nsresult GetInterfaceIID(nsIID** aIID) const;\n\nI deleted this method, along with GetInfoForParam and GetIIDForParam, in bug 1449747, so you can remove them here.\n\n@@ +129,5 @@\n> +  nsresult GetParent(const nsXPTInterfaceInfo** aParent) const;\n> +  nsresult GetMethodCount(uint16_t* aMethodCount) const;\n> +  nsresult GetConstantCount(uint16_t* aConstantCount) const;\n> +  nsresult GetMethodInfo(uint16_t aIndex, const nsXPTMethodInfo** aInfo) const;\n> +  nsresult GetMethodInfoForName(const char* aMethodName, uint16_t* aIndex,\n\nGetMethodInfoForName and MethodByName are unused, so you should delete them rather than convert them. (I'm not sure when that happened. I'm pretty sure they were used a week or two ago!)\n\n@@ +158,5 @@\n> +                                 const nsXPTParamInfo* aParam,\n> +                                 nsIID* aIID) const;\n> +  nsresult IsMainProcessScriptableOnly(bool* aRetval) const;\n> +\n> +  // XXX(nika): Remove?\n\nMaybe expand on this comment?\n\n@@ +159,5 @@\n> +                                 nsIID* aIID) const;\n> +  nsresult IsMainProcessScriptableOnly(bool* aRetval) const;\n> +\n> +  // XXX(nika): Remove?\n> +  bool EnsureResolved() const { return !mIsShim; }\n\nAh, good point. I didn't think about how shim interfaces act like they are unresolved.\n\n@@ +164,5 @@\n> +\n> +private:\n> +  friend class xpt::detail::XPTConstruct;\n> +  constexpr nsXPTInterfaceInfo()\n> +    : mIID{0}, mName{0}, mParent{0}, mBuiltinClass{0}\n\nOut of curiosity, why the {} instead of ()?\n\n@@ +172,5 @@\n> +  /*\n> +   * This field ordering minimizes the size of this struct.\n> +   */\n> +  nsID mIID;\n> +  uint32_t mName; // Index into XPTHeader::mStrings.\n\nMost or all of these \"Index into\" comments need to be updated. For instance, I think this is actually an index into xpt::detail::sStrings.\n\n@@ +176,5 @@\n> +  uint32_t mName; // Index into XPTHeader::mStrings.\n> +\n> +  uint16_t mParent : 14;\n> +  uint16_t mBuiltinClass : 1;\n> +  // XXX(nika): Do we need this if we don't have addons anymore?\n\nPlease file a bug about maybe removing this.\n\n@@ +182,5 @@\n> +\n> +  uint16_t mMethods; // Index into XPT::sMethods.\n> +\n> +  uint16_t mConsts : 14; // Index into XPT::sConsts.\n> +  uint16_t mIsShim : 1; // Is this interface a ShimInterface?\n\nShimInterface doesn't exist any more. :) Maybe something like \"Is this interface a WebIDL shim interface?\" Is there any in tree documentation of what a shim interface is, now that ShimInterface.* is gone?\n\n@@ +191,3 @@\n>  };\n>  \n> +static_assert(sizeof(nsXPTInterfaceInfo) == 28, \"wrong size?\");\n\nPlease document what depends on this being that size, if anything. Likewise with the other static asserts.\n\n@@ +231,5 @@\n> +};\n> +\n> +\n> +/*\n> + * A TypeDescriptor is a union used to identify the type of a method\n\nnit: \"TypeDescriptor\" should be \"nsXPTType\" in this comment, I think?\n\n@@ +256,5 @@\n> +    return xpt::detail::GetType(mData2);\n> +  }\n> +\n> +  // We store the 16-bit iface value as two 8-bit values in order to\n> +  // avoid 16-bit alignment requirements for XPTTypeDescriptor, which\n\nnit: The two type names in this comment need to be updated. Likewise with later comments.\n\n@@ +293,5 @@\n> +    return Tag() == TD_INTERFACE_IS_TYPE || Tag() == TD_ARRAY ||\n> +           Tag() == TD_PSTRING_SIZE_IS || Tag() == TD_PWSTRING_SIZE_IS;\n> +  }\n> +\n> +  bool IsSizedString() const {\n\nI think this method is unused.\n\n@@ +310,5 @@\n> +  constexpr nsXPTType()\n> +    : mTag{0}, mInParam{0}, mOutParam{0}, mOptionalParam{0}, mData1{0}, mData2{0}\n> +  { }\n> +  MOZ_IMPLICIT nsXPTType(const uint8_t& aPrefix)\n> +    : mTag(aPrefix) { MOZ_ASSERT(aPrefix <= TD_JSVAL); }\n\nShould the other fields be initialized, too? Also, this uses () instead of {}, if that matters.\n\n@@ +370,5 @@\n> +static_assert(sizeof(nsXPTType) == 3, \"wrong size\");\n> +\n> +\n> +/*\n> + * A ParamDescriptor is used to describe either a single argument to a method or\n\nnsXPTParamInfo, not ParamDescriptor.\n\n@@ +379,5 @@\n>  public:\n> +  bool IsIn() const { return mType.mInParam; }\n> +  bool IsOut() const { return mType.mOutParam && !IsDipper(); }\n> +  bool IsOptional() const { return mType.mOptionalParam; }\n> +  bool IsShared() const { return false; } // XXX remove (backcompat)\n\nShould IsScriptable() above have the full \"// XXX remove (backcompat)\" comment? Or would it be harder to remove?\n\n@@ +398,5 @@\n> +  // parameters masquerading as in'. The burden of maintaining this illusion\n> +  // falls mostly on XPConnect, which creates the empty containers, and harvest\n> +  // the results after the call.\n> +  //\n> +  // Currently, the only dipper types are the string classes.\n\nAh, I see you moved the calculation of what is a dipper type from typelib.py to here. You should mention bug 677784 here, then.\n\n@@ +418,5 @@\n> +\n> +static_assert(sizeof(nsXPTParamInfo) == 3, \"wrong size\");\n> +\n> +/*\n> + * A MethodInfo is used to describe a single interface method.\n\nnit: nsXPTMethodInfo\n\n@@ +500,5 @@\n>  };\n> +static_assert(sizeof(ConstInfo) == 8, \"wrong size\");\n> +\n> +//////////////////////////////////////////////\n> +// Raw typelib data stored in const statics //\n\nThese aren't marked as static here, per se. Also, I found it vaguely confusing for \"const\" to suddenly mean the C++ keyword right after the class ConstInfo but maybe that is just me. :) Maybe throw in an explanation here like \"to avoid relocations\"?\n\n@@ +514,5 @@\n> +extern const char sStrings[];\n> +extern const ConstInfo sConsts[];\n> +\n> +// shim constant information\n> +extern const mozilla::dom::NativePropertyHooks* sPropHooks[];\n\nJust to double check here, this'll basically be about the same amount of relocatable data as we had with kComponentsInterfaceShimMap? (A little less, even!)", "author": "continuation@gmail.com", "id": 13199591, "time": "2018-04-11T23:23:39Z"}, {"text": "Comment on attachment 8965865\nPart 5: Update consumers of nsIInterfaceInfo to use the nsXPTInterfaceInfo directly\n\nReview of attachment 8965865:\n-----------------------------------------------------------------\n\nCool! I'm glad this horrible interface is gone.\n\n::: dom/xbl/nsXBLPrototypeBinding.cpp\n@@ +730,5 @@\n>            mInterfaceTable.Put(*iid, mBinding);\n>  \n>            // this block adds the parent interfaces of each interface\n>            // defined in the xbl definition (implements=\"nsI...\")\n> +          const nsXPTInterfaceInfo* parentInfo;\n\nMaybe initialize this to null just to make it safer?\n\n::: js/xpconnect/src/XPCWrappedNative.cpp\n@@ +1399,5 @@\n>  CallMethodHelper::GetOutParamSource(uint8_t paramIndex, MutableHandleValue srcp) const\n>  {\n>      const nsXPTParamInfo& paramInfo = mMethodInfo->GetParam(paramIndex);\n>  \n> +    bool isRetval = mMethodInfo->HasRetval() &&\n\nPlease wrap this up into a predicate method on method info and use it everywhere. This seems a little finicky and hard to understand to have scattered around.\n\n::: xpcom/reflect/xptcall/genstubs.pl\n@@ +15,5 @@\n>  # 1) The current Linux ARM code has a limitation of only having 256-3 stubs,\n>  #    as a result of the limitations of immediate values in ARM assembly.\n>  #\n>  # This number is verified by the IDL parser in xpcom/idl-parser/xpidl.py, as\n> +# well as in xpcom/reflect/xptinfo/xptinfo.cpp, to prevent generating interfaces\n\nAh, I see you updated this file in this patch rather than the previous one.", "author": "continuation@gmail.com", "id": 13199629, "time": "2018-04-11T23:47:32Z"}, {"text": "(In reply to Andrew McCreight [:mccr8] from comment #33)\n> Over all, this looks great. I'm r-ing it because I want to see how you\n> address the various changes I'm requesting. I also want to make sure the\n> size regressions are addressed, though I suspect that if you add back in the\n> various optimizations I mention below it will be fine.\n\nYeah :-). I've been working on optimizing the parameters etc. better :-). So far the changes look promising.\n\n> \"There are also a few methods which are unnecessary (they return `true` or\n> similar), which should be removed over time.\"\n> Maybe file a bug with some details about this, while it is fresh in your\n> mind?\n\nSure, I'll file something when I get closer to landing this.\n\n> I used njn's script to look at what is in rodata, and everything is as I'd\n> expect. I also ran the profiler on xptcodegen.py. It runs a little slower\n> than xpt.py, about 2.2 seconds instead of about a second, but the extra time\n> is basically taken up by the perfect hash stuff, so that seems totally\n> reasonable. Spending an extra second for an incremental build that touches\n> an IDL file sounds reasonable to me.\n\nYeah, I've been running the python profiler on the code on-and-off and the performance difference has pretty much been in the PHF implementation.\n\nIf we wanted to be as efficient as possible with PHF generation, we could use gperf rather than my code, but I don't think we want to add a new build dependency for Firefox right now, which is why I avoided doing so.\n\n> ::: config/makefiles/xpidl/Makefile.in\n> @@ -29,5 @@\n> >  dist_idl_dir := $(DIST)/idl\n> >  dist_include_dir := $(DIST)/include\n> >  dist_xpcrs_dir := $(DIST)/xpcrs\n> >  process_py := $(topsrcdir)/python/mozbuild/mozbuild/action/xpidl-process.py\n> > -generated_file := $(topobjdir)/xpcom/typelib/xpt/XPTInfo.cpp\n> \n> These Makefile changes look trivial (file renames, and changing how a Python\n> command is invoked), so I think it is okay that I review this.\n> \n> Please file a bug in the build system component about updating tup for this\n> and CC mshal and chmanchester. (Akin to bug 1450877.)\n\nOK\n\n> ::: xpcom/reflect/xptinfo/phf.py\n> @@ +1,2 @@\n> > +#!/usr/bin/env python\n> > +# phf.py - Helper for generating perfect hash functions for xptcodegen.py\n> \n> I'll defer to erahm on this, but please give this file a longer name. \"phf\"\n> is cryptic. Maybe \"hashgen.py\".\n\nFair. I'll probably call it perfecthash.py so make it clear what's going on. In other libraries I usually see it referred to by its short PHF acronym, which is why I used that here :-).\n\n> @@ +125,5 @@\n> > +        return 0\n> > +\n> > +    # NOTE: State used while linking. This is done with closures rather than a\n> > +    # class due to how this file's code evolved.\n> > +    includes = []\n> \n> Maybe rename this to shim_includes so it is more obvious that they are only\n> needed for shims?\n\nThey're also used in the WebIDL in XPIDL bug for those includes, so I didn't name it as shim_*.\n\n> @@ +156,5 @@\n> > +        else:\n> > +            strings[s] = 0\n> > +        return strings[s]\n> > +\n> > +    def describe_type(type): # Create the type's documentation comment.\n> \n> I'm glad to see that you were less lazy than me about having decent in-file\n> documentation.\n\nI put entirely too much effort into in-file documentation TBH :p\n\n> @@ +165,5 @@\n> > +        elif tag == 'interface_type':\n> > +            return type['name']\n> > +        elif tag == 'interface_is_type':\n> > +            return 'iid_is(%d)' % type['iid_is']\n> > +        elif tag.endswith('_size_is'):\n> \n> I like how 400 lines of type subclasses are boiled down into a couple of\n> lines. (Of course, this code is really only doing the code_gen part of it.)\n\n^_^ - The joys of shedding off baggage - sometimes stuff becomes way simpler because you're no longer shoehorning a square peg into a round hole :-)\n\n> @@ +181,5 @@\n> > +            try:\n> > +                d2 = types.index(elty)\n> > +            except:\n> > +                d2 = len(types)\n> > +                types.append(elty)\n> \n> I think you should add deduplication for top-level types. There's a decent\n> amount of it.\n\nThey actually should be deduplicated, but when I added the `Instance` class I forgot to add an __eq__ implementation for it, so the duplication test never succeeded >.<\n\nOops - will fix that.\n\n> @@ +229,5 @@\n> > +        methods.append(struct(\n> > +            \"nsXPTMethodInfo\",\n> > +            \"%d = %s\" % (len(methods), methodname),\n> > +            {\n> > +                'mName': lower_string(method['name']),\n> \n> I was able to also not store the name of the method in the case of\n> hideparams. (See Method::code_gen in xpt.py.) Is that not possible here?\n> This is likely responsible for some of the extra string data with your\n> patches. For instance, on m-c, the XPT data does not contain the string\n> showURIForInput (from the hidden method nsIGIOService), whereas with your\n> patch that is present.\n\nYeah I can do that - didn't occur to me to hide those too :-).\n\nOne of the side effects of me writing these patches partially in parallel to your original patches is that I missed some of the clever optimizations you ended up implementing.\n\n> @@ +249,5 @@\n> > +        ))\n> > +\n> > +        if not hideparams:\n> > +            for idx, param in enumerate(method['params']):\n> > +                lower_param(param, \"%s[%d]\" % (methodname, idx))\n> \n> As I said in a bug comment, you should deduplicate lists of parameters.\n> There's a lot of them! The drawback of course is that you can't easily\n> comment which method the parameters are from. I think that's a reasonable\n> tradeoff to save lots of space in the binary. I guess you could list every\n> method name that got merged into a single parameter list if you want, but I\n> don't know how useful that is vs how much work it'll take.\n\nI have a local patch to do this, but it still needs some cleanup before I post it.\n\n> @@ +285,5 @@\n> > +        methods = 0\n> > +        consts = 0\n> > +        builtinclass = False\n> > +        while iface is not None:\n> > +            methods += len(iface['methods'])\n> \n> I was worried about the performance of computing parent class values over\n> and over again, but it didn't seem to show up in a profiler run I did. I\n> guess our XPIDL class hierarchies are not very deep!\n\nYup! I can also cache them fairly easily, I just didn't bother.\n\n> @@ +296,5 @@\n> > +            iface = iid_phf.values[idx - 1]\n> > +\n> > +        return methods, consts, builtinclass\n> > +\n> > +    def lower_iface(iface):\n> \n> Somewhere in here you need to add the equivalent of the check in\n> XPTInterfaceInfoManager::VerifyAndAddEntryIfNew() that if the interface is\n> not builtinclass, the number of methods is <= 250. Also, include the\n> equivalent of that comment here.\n> \n> You should also update the comment in xpcom/reflect/xptcall/genstubs.pl that\n> talks about xptiInterfaceInfoManager.cpp to refer to this file instead.\n\nAs you noted, I do the updated comment in the other code.\n\nAt one point I had the 250 method check here, but it seems like it got deleted in a refactoring - I'll re-add it.\n\n> @@ +311,5 @@\n> > +            # as they will be pulled from the WebIDL binding instead. Instead,\n> > +            # we use the constants offset field to store the index into the prop\n> > +            # hooks table.\n> > +            consts_off = len(prophooks)\n> > +            builtinclass = True  # All shims are builtinclass\n> \n> I think it would be better if builtinclass was set to True for shims in\n> build_interface in jsonxpt.py. You could assert for it here if you want. But\n> there's already implicit_builtinclass there, and it would be nicer if that\n> was all in one place.\n\nYeah, I can do that.\n\n> @@ +384,5 @@\n> > +    #  2. As a member of the XPTConstruct struct, we are `friend class` of the\n> > +    #     data structures, allowing us to initialize private fields.\n> > +    #  3. Stating the name of fields in this python code makes it more\n> > +    #     self-documenting.\n> > +    fd.write(\"struct XPTConstruct {\")\n> \n> Should this class have an nsFoo-style name? It seems like the remaining\n> class names are all like that.\n\nThe reasoning was that this data structure is in xpt::detail::* as it was internal, so I didn't give it the same naming style. I agree that it would probably be cleaner to toss that namespace & just call everything nsXPT*, so I'll probably do that.\n\n> @@ +434,5 @@\n> > +} // namespace xpt\n> > +\"\"\")\n> > +\n> > +\n> > +def link_and_write(files, outfile):\n> \n> xpt.py has some optimization that dumps all non-scriptable interfaces that\n> aren't referred to by scriptable interfaces. It looks like instead you\n> unilaterally drop all non-scriptable interfaces in jsonxpt.py. I don't want\n> to dig through bug 996061 to figure out why they had to keep the\n> non-scriptable interfaces around, so I guess it is okay if try is green. :)\n> I guess my optimization to drop method info from notxpcom methods is similar\n> in spirit to that.\n\nIIRC there were no test problems with this particular decision. There's nothing that XPConnect code can do with unresolved interfaces anyway, so...\n\n> @@ +96,5 @@\n> > +          // calling isEnabled() here because it's OK to define potentially\n> > +          // extra constants on these shim interfaces.\n> > +          if (aSpec && idx == aIndex) {\n> > +            *aSpec = cs;\n> > +            return idx;\n> \n> It is nice that you avoided the copy and paste stuff here, but it makes me\n> uneasy how you are returning a value here that is never used, so it is\n> untested code. Maybe make the two separate modes more explicit by returning\n> the number of constants via a possibly-null argument, like it is done for\n> aSpec? Then you can assert that only one or the other is being used, and\n> thus there will be no untested calculations.\n\nSure\n\n> @@ +134,5 @@\n> > +    }\n> > +\n> > +    // Extract the value and name from the Constant Info.\n> > +    const ConstInfo& info = sConsts[mConsts + aIndex];\n> > +    if (info.mSigned || info.mValue <= (uint32_t)INT32_MAX) {\n> \n> I'm not sure I 100% understand this but looking at the old code it seems\n> reasonable.\n\nThe old code would save a nsXPTType for each constant, which was unnecessary as every constant is always int32_t, uint32_t, int16_t, or uint16_t. All of these types can be promoted to 32-bits, and then I save whether or not to interpret them as signed with int32_t.\n\nAdditionally, the JS engine can optimize when we have an int32_t by representing it as an int directly in the jsval, which ideally we want to use. We can always store signed values in an int32_t, and we can store every unsigned value which we can fit in an int32_t as well. We only need to use double for large uint32_t values.\n\n> @@ +285,5 @@\n> > +  return NS_ERROR_FAILURE;\n> > +}\n> > +\n> > +nsresult\n> > +nsXPTInterfaceInfo::GetTypeForParam(uint16_t aMethodIndex,\n> \n> It feels strange that aMethodIndex is unused here and in the next few\n> methods. I suppose that this is fallout from my earlier hoisting of\n> parameter data to a global structure instead of a per-method structure.\n> Maybe add a comment saying that it is unused? Technically your patch changes\n> behavior in the case where somebody passes in an invalid index, but I don't\n> think that's a real concern.\n\nYeah, that was my reasoning. I can add a comment noting that it is unused now due to the fact that all of this info is now global.\n\n> ::: xpcom/reflect/xptinfo/xptinfo.h\n> @@ +20,5 @@\n> >  \n> > +// Forward Declarations\n> > +namespace mozilla {\n> > +namespace dom {\n> > +class NativePropertyHooks;\n> \n> nit: this should be |struct|, not |class|. I get a lot of build warnings\n> from this.\n\nI have this fixed locally - oops.\n\n> @@ +34,5 @@\n> > +namespace detail {\n> > +\n> > +// xpt::detail::XPTConstruct is friend class with each of the data classes, such\n> > +// that the generated code can access private fields.\n> > +class XPTConstruct;\n> \n> XPTConstruct is a struct here, but a class in xptdata.cpp. I'm getting a\n> warning about that. This probably also applies to the friend class\n> declarations below.\n\nYup, also fixed locally. oops D:\n\n> @@ +42,5 @@\n> > +inline const nsXPTParamInfo& GetParam(uint16_t aIdx);\n> > +inline const nsXPTMethodInfo& GetMethod(uint16_t aIdx);\n> > +inline const char* GetString(uint32_t aIdx);\n> > +\n> > +extern const uint16_t sInterfacesSize;\n> \n> You declare this a second time down below, which seems a little weird. I\n> guess you have to forward declare it because it appears in code in the\n> header, but it would also be odd to not mention it down with the rest of the\n> static variables...\n\nI can remove the second declaration. I was just thinking about putting all of the static declarations in one place, but I also needed this one earlier *shrug*\n\n> @@ +82,5 @@\n> > +    return xpt::detail::GetInterface(mParent);\n> > +  }\n> > +\n> > +  // Do we have an ancestor interface with the given IID?\n> > +  bool HasAncestor(const nsIID& aIID) const {\n> \n> OOC, why are you defining this and Method() inline?\n\nSpecifically in the case of Method() I was imagining that the optimizer could merge some of the checks from MethodCount() and Method() if it was inline, which I thought might be worthwhile. Basically it seemed small enough that I thought perhaps it would be worthwhile to inline.\n\n(also I originally wrote this with everything inline except the XPCOM-style methods, and ended up pulling things out of line that were obviously a bit large to put in the header *shrug*)\n\n> @@ +122,5 @@\n> > +  // nsIInterfaceInfo backwards compatibility //\n> > +  //////////////////////////////////////////////\n> > +\n> > +  nsresult GetName(char** aName) const;\n> > +  nsresult GetInterfaceIID(nsIID** aIID) const;\n> \n> I deleted this method, along with GetInfoForParam and GetIIDForParam, in bug\n> 1449747, so you can remove them here.\n\nnice!\n\nI didn't really bother to check to see if these methods were used anywhere, I just implemented them so things would work. I can easily clean them up though ^_^\n\n> @@ +129,5 @@\n> > +  nsresult GetParent(const nsXPTInterfaceInfo** aParent) const;\n> > +  nsresult GetMethodCount(uint16_t* aMethodCount) const;\n> > +  nsresult GetConstantCount(uint16_t* aConstantCount) const;\n> > +  nsresult GetMethodInfo(uint16_t aIndex, const nsXPTMethodInfo** aInfo) const;\n> > +  nsresult GetMethodInfoForName(const char* aMethodName, uint16_t* aIndex,\n> \n> GetMethodInfoForName and MethodByName are unused, so you should delete them\n> rather than convert them. (I'm not sure when that happened. I'm pretty sure\n> they were used a week or two ago!)\n\n^see above\n\n> @@ +159,5 @@\n> > +                                 nsIID* aIID) const;\n> > +  nsresult IsMainProcessScriptableOnly(bool* aRetval) const;\n> > +\n> > +  // XXX(nika): Remove?\n> > +  bool EnsureResolved() const { return !mIsShim; }\n> \n> Ah, good point. I didn't think about how shim interfaces act like they are\n> unresolved.\n\nYeah, that being said I'm pretty sure that we should never see a shim interface where we call EnsureResolved(), so....\n\nI'm not sure what the best option here is.\n\n> @@ +164,5 @@\n> > +\n> > +private:\n> > +  friend class xpt::detail::XPTConstruct;\n> > +  constexpr nsXPTInterfaceInfo()\n> > +    : mIID{0}, mName{0}, mParent{0}, mBuiltinClass{0}\n> \n> Out of curiosity, why the {} instead of ()?\n\nUhh. I think there was a reason at one point, but it got refactored away. *shrug*.\n\n> @@ +172,5 @@\n> > +  /*\n> > +   * This field ordering minimizes the size of this struct.\n> > +   */\n> > +  nsID mIID;\n> > +  uint32_t mName; // Index into XPTHeader::mStrings.\n> \n> Most or all of these \"Index into\" comments need to be updated. For instance,\n> I think this is actually an index into xpt::detail::sStrings.\n\nYup, can do.\n\n> @@ +176,5 @@\n> > +  uint32_t mName; // Index into XPTHeader::mStrings.\n> > +\n> > +  uint16_t mParent : 14;\n> > +  uint16_t mBuiltinClass : 1;\n> > +  // XXX(nika): Do we need this if we don't have addons anymore?\n> \n> Please file a bug about maybe removing this.\n\nOk\n\n> @@ +191,3 @@\n> >  };\n> >  \n> > +static_assert(sizeof(nsXPTInterfaceInfo) == 28, \"wrong size?\");\n> \n> Please document what depends on this being that size, if anything. Likewise\n> with the other static asserts.\n\nNothing depends on it. This was me checking that my packing worked, and I left it in to make sure that if someone changed the layout of one of these structs, they would have to consider how they were impacting the binary size.\n\n> @@ +293,5 @@\n> > +    return Tag() == TD_INTERFACE_IS_TYPE || Tag() == TD_ARRAY ||\n> > +           Tag() == TD_PSTRING_SIZE_IS || Tag() == TD_PWSTRING_SIZE_IS;\n> > +  }\n> > +\n> > +  bool IsSizedString() const {\n> \n> I think this method is unused.\n\nOops - was part of an earlier patch.\n\n> @@ +310,5 @@\n> > +  constexpr nsXPTType()\n> > +    : mTag{0}, mInParam{0}, mOutParam{0}, mOptionalParam{0}, mData1{0}, mData2{0}\n> > +  { }\n> > +  MOZ_IMPLICIT nsXPTType(const uint8_t& aPrefix)\n> > +    : mTag(aPrefix) { MOZ_ASSERT(aPrefix <= TD_JSVAL); }\n> \n> Should the other fields be initialized, too? Also, this uses () instead of\n> {}, if that matters.\n\nYup. They should be. And it doesn't matter.\n\n> @@ +370,5 @@\n> > +static_assert(sizeof(nsXPTType) == 3, \"wrong size\");\n> > +\n> > +\n> > +/*\n> > + * A ParamDescriptor is used to describe either a single argument to a method or\n> \n> nsXPTParamInfo, not ParamDescriptor.\n\nI'll do a once over of all of the comments - it seems like I had a hayday for messing them up ^_^\n\n> @@ +379,5 @@\n> >  public:\n> > +  bool IsIn() const { return mType.mInParam; }\n> > +  bool IsOut() const { return mType.mOutParam && !IsDipper(); }\n> > +  bool IsOptional() const { return mType.mOptionalParam; }\n> > +  bool IsShared() const { return false; } // XXX remove (backcompat)\n> \n> Should IsScriptable() above have the full \"// XXX remove (backcompat)\"\n> comment? Or would it be harder to remove?\n\nYeah, we should dump it.\n\n> @@ +398,5 @@\n> > +  // parameters masquerading as in'. The burden of maintaining this illusion\n> > +  // falls mostly on XPConnect, which creates the empty containers, and harvest\n> > +  // the results after the call.\n> > +  //\n> > +  // Currently, the only dipper types are the string classes.\n> \n> Ah, I see you moved the calculation of what is a dipper type from typelib.py\n> to here. You should mention bug 677784 here, then.\n\nYeah, doing that work here saves me a bit on every parameter, which allowed me to compress from 4 bytes/param to 3 bytes/param ^_^\n\n> @@ +514,5 @@\n> > +extern const char sStrings[];\n> > +extern const ConstInfo sConsts[];\n> > +\n> > +// shim constant information\n> > +extern const mozilla::dom::NativePropertyHooks* sPropHooks[];\n> \n> Just to double check here, this'll basically be about the same amount of\n> relocatable data as we had with kComponentsInterfaceShimMap? (A little less,\n> even!)\n\nYeah, it's not many relocations. I figured having ~20-something pointers in static memory was no biggie.\n\n\n(In reply to Andrew McCreight [:mccr8] from comment #34)\n> Cool! I'm glad this horrible interface is gone.\n\nMe too! Seeing it in all of its awfulness TBH was one of the things which drove me into this madness (that and WebIDL)\n\n> ::: js/xpconnect/src/XPCWrappedNative.cpp\n> @@ +1399,5 @@\n> >  CallMethodHelper::GetOutParamSource(uint8_t paramIndex, MutableHandleValue srcp) const\n> >  {\n> >      const nsXPTParamInfo& paramInfo = mMethodInfo->GetParam(paramIndex);\n> >  \n> > +    bool isRetval = mMethodInfo->HasRetval() &&\n> \n> Please wrap this up into a predicate method on method info and use it\n> everywhere. This seems a little finicky and hard to understand to have\n> scattered around.\n\nSure.\n\n(In reply to Andrew McCreight [:mccr8] from comment #32)\n> This is a smaller amount, but I also see that the number of top-level types\n> goes from about 40 to about 200 with your patch. I think there the issue is\n> just that you are missing deduplication for types. For instance, uint8\n> appears about 40 times.\n\nYup, as I mention above, I messed up my toplevel type deduplication code accidentally *sigh*\n\n> This is a pre-existing issue, so I'd leave it for followup work unless you\n> really need it, but I wonder if using a type index instead of an inline type\n> in parameters would save space. The index is smaller, but maybe it wouldn't\n> be if we needed a lot more top level types.\n\nWe'd need to probably bump up to at least 16 bits (2 bytes) for type index if we did that, given that there are ~1300 interfaces and we probably need types for a good fraction of them. In addition we'd have to figure out how to handle arrays, which still can only fit 8 bits of type index.\n\nI think keeping the types inline in the param listings (where sizeof(nsXPTType) == sizeof(nsXPTParamInfo) due to my changes), is probably the better idea given that.", "author": "nika@thelayzells.com", "id": 13201172, "time": "2018-04-12T15:37:50Z"}, {"text": "Thanks for the explanations. That all sounds good to me.\n\n(In reply to Nika Layzell [:mystor] from comment #35)\n> If we wanted to be as efficient as possible with PHF generation, we could\n> use gperf rather than my code, but I don't think we want to add a new build\n> dependency for Firefox right now, which is why I avoided doing so.\nYeah, that's the right call. I think the performance is good enough.\n\n> The reasoning was that this data structure is in xpt::detail::* as it was\n> internal, so I didn't give it the same naming style. I agree that it would\n> probably be cleaner to toss that namespace & just call everything nsXPT*, so\n> I'll probably do that.\nOh, I see. I did kind of like things being in xpt::detail:: because it makes it clear that you shouldn't look at it unless you are working on the internals. But whatever you think is best is fine.\n\n> IIRC there were no test problems with this particular decision. There's\n> nothing that XPConnect code can do with unresolved interfaces anyway, so...\nYeah, I don't know what the precise boundaries are for what is or isn't needed, but I assume that if something was wrong it would break everything horribly.\n\n> Yeah, that being said I'm pretty sure that we should never see a shim\n> interface where we call EnsureResolved(), so....\n> \n> I'm not sure what the best option here is.\n\nWhat you have is fine. Somebody can clean it up in followup work if they want.", "author": "continuation@gmail.com", "id": 13201669, "time": "2018-04-12T18:21:41Z"}, {"text": "One minor thing I meant to mention is that it looked like the upper half of every value in the hash stuff was zero, so maybe we could squeeze out a little bit of space that way? I don't know if it is needed or if that much space matters. Probably not.", "author": "continuation@gmail.com", "id": 13201696, "time": "2018-04-12T18:32:24Z"}, {"text": "*** Bug 1447337 has been marked as a duplicate of this bug. ***", "author": "continuation@gmail.com", "id": 13202234, "time": "2018-04-12T21:12:59Z"}, {"text": "*** Bug 1449037 has been marked as a duplicate of this bug. ***", "author": "continuation@gmail.com", "id": 13202236, "time": "2018-04-12T21:13:05Z"}, {"text": "*** Bug 1450321 has been marked as a duplicate of this bug. ***", "author": "continuation@gmail.com", "id": 13202238, "time": "2018-04-12T21:13:11Z"}, {"text": "(In reply to Andrew McCreight [:mccr8] from comment #37)\n> One minor thing I meant to mention is that it looked like the upper half of\n> every value in the hash stuff was zero, so maybe we could squeeze out a\n> little bit of space that way? I don't know if it is needed or if that much\n> space matters. Probably not.\n\nIn an earlier version of the code, I used a 16-bit value for the hash intermediates. It worked pretty well, but was too close for my comfort. I played around with adding/removing interfaces & managed to make it blow through the 16-bit maximum, so I figured I'd make it 32-bits to be safe.\n\nFor the larger table, I write the numbers out as though they were 32 bits wide, but they're actually stored as 16 bits. I should change the formatting string to make that more clear.", "author": "nika@thelayzells.com", "id": 13202659, "time": "2018-04-13T00:04:31Z"}, {"text": "Created attachment 8968296\nIntr 1: Rename phf.py to perfecthash.py", "author": "nika@thelayzells.com", "id": 13210580, "time": "2018-04-16T19:21:53Z"}, {"text": "Created attachment 8968297\nIntr 2: Move implicit_builtinclass into xpidl.py to effectively inherit from base interfaces", "author": "nika@thelayzells.com", "id": 13210581, "time": "2018-04-16T19:22:02Z"}, {"text": "Created attachment 8968298\nIntr 3: Clean up the logic for determining if a parameter is a retval", "author": "nika@thelayzells.com", "id": 13210582, "time": "2018-04-16T19:22:12Z"}, {"text": "Created attachment 8968299\nIntr 4: Eliminate constexpr functions & cache params/types", "author": "nika@thelayzells.com", "id": 13210583, "time": "2018-04-16T19:22:21Z"}, {"text": "Created attachment 8968300\nIntr 5: Change aIdx to aIndex", "author": "nika@thelayzells.com", "id": 13210584, "time": "2018-04-16T19:22:30Z"}, {"text": "I decided to just make a series of interdiffs to make it easier to review the changes.", "author": "nika@thelayzells.com", "id": 13210592, "time": "2018-04-16T19:24:14Z"}, {"text": "Comment on attachment 8968297\nIntr 2: Move implicit_builtinclass into xpidl.py to effectively inherit from base interfaces\n\nReview of attachment 8968297:\n-----------------------------------------------------------------\n\n::: xpcom/idl-parser/xpidl/xpidl.py\n@@ +581,5 @@\n>          for m in members:\n>              if not isinstance(m, CDATA):\n>                  self.namemap.set(m)\n>  \n> +            if m.kind == 'method' and m.notxpcom:\n\nHow does this avoid tagging nsISupports as builtinclass?\n\n::: xpcom/reflect/xptinfo/xptcodegen.py\n@@ -298,5 @@\n>              if idx == 0:\n>                  break\n>              iface = iid_phf.values[idx - 1]\n>  \n> -        return methods, consts, builtinclass\n\nIt looks like you are missing some changes here around the call site to collect_base_info.", "author": "continuation@gmail.com", "id": 13210670, "time": "2018-04-16T19:49:29Z"}, {"text": "Comment on attachment 8968298\nIntr 3: Clean up the logic for determining if a parameter is a retval\n\nReview of attachment 8968298:\n-----------------------------------------------------------------\n\nWhat about CallMethodHelper::GetOutParamSource() and CallMethodHelper::GatherAndConvertResults()?", "author": "continuation@gmail.com", "id": 13210705, "time": "2018-04-16T19:59:09Z"}, {"text": "What's the impact on the installer size on the OS of your choice with the new version of these patches? (Just asking you directly seems easier than trying to figure out how to apply these new patches locally, but I could work it out myself if you give me a rollup patch and a base commit or something.)", "author": "continuation@gmail.com", "id": 13210776, "time": "2018-04-16T20:27:17Z"}, {"text": "Created attachment 8968321\nIntr 1: Rename phf.py to perfecthash.py", "author": "nika@thelayzells.com", "id": 13210780, "time": "2018-04-16T20:29:21Z"}, {"text": "Created attachment 8968322\nIntr 2: Move implicit_builtinclass into xpidl.py to effectively inherit from base interfaces", "author": "nika@thelayzells.com", "id": 13210783, "time": "2018-04-16T20:29:36Z"}, {"text": "Created attachment 8968323\nIntr 3: Clean up the logic for determining if a parameter is a retval", "author": "nika@thelayzells.com", "id": 13210784, "time": "2018-04-16T20:29:43Z"}, {"text": "Comment on attachment 8968299\nIntr 4: Eliminate constexpr functions & cache params/types\n\nReview of attachment 8968299:\n-----------------------------------------------------------------\n\n::: xpcom/reflect/xptinfo/xptcodegen.py\n@@ +252,2 @@\n>  \n> +            # If our method is hidden, we can save some memory by not\n\nYou can remove this comment now.\n\n@@ +327,5 @@\n> +        # The number of maximum methods is not arbitrary. It is the same value\n> +        # as in xpcom/reflect/xptcall/genstubs.pl; do not change this value\n> +        # without changing that one or you WILL see problems.\n> +        #\n> +        # In addition, mNumMethods and mNumConsts are stored as a 8-bit int,\n\nnit: I think this should be \"are stored as 8-bit ints\".", "author": "continuation@gmail.com", "id": 13210856, "time": "2018-04-16T20:54:36Z"}, {"text": "Comment on attachment 8965864\nPart 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the required datastructures\n\nr=me with the changes in the interdiffs, assuming there's no big impact on the installer size from your patches.", "author": "continuation@gmail.com", "id": 13210875, "time": "2018-04-16T20:59:01Z"}, {"text": "Comment on attachment 8965864\nPart 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the required datastructures\n\nReview of attachment 8965864:\n-----------------------------------------------------------------\n\nMostly just nitpicky stuff, but f+ for now. I'd like to see some more comments / naming cleanup. The algorithm itself seems okay, but I'd like to see some tests for that. At some point it would be really nice to have a separate perfect hash table wrapper class that we could reuse (it would make adding tests easier as well) similar to DAFSA [1].\n\n[1] https://searchfox.org/mozilla-central/search?q=symbol:T_mozilla%3A%3ADafsa&redirect=false\n\n::: xpcom/reflect/xptinfo/phf.py\n@@ +1,2 @@\n> +#!/usr/bin/env python\n> +# phf.py - Helper for generating perfect hash functions for xptcodegen.py\n\nI think mystor already agreed, but perfecthash.py sounds good.\n\n@@ +2,5 @@\n> +# phf.py - Helper for generating perfect hash functions for xptcodegen.py\n> +#\n> +# This Source Code Form is subject to the terms of the Mozilla Public\n> +# License, v. 2.0. If a copy of the MPL was not distributed with this\n> +# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nCan you provide a toplevel comment on what a FNV/perfect hash is and some useful links? Nothing huge, just make it easy for others to lookup. Also if this was inspired by any external code can you provide a link?\n\n@@ +5,5 @@\n> +# License, v. 2.0. If a copy of the MPL was not distributed with this\n> +# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n> +\n> +FNV_OFFSET_BASIS = 0x811C9DC5\n> +FNV_PRIME = 16777619\n\nMaybe make it explicit these are the 32-bit versions.\n\n@@ +26,5 @@\n> +\n> +class PHF(object):\n> +    \"\"\"An object representing a perfect hash function\"\"\"\n> +    def __init__(self, intsize, data):\n> +        \"\"\"Keys should be a list of (bytearray, value) pairs\"\"\"\n\nI think you mean `data` instead of keys right? Can you document `intsize`? Actually now that I realized it's the intermediate table can you change the name to `intermediate_table_size` or something more explicit?\n\n@@ +29,5 @@\n> +    def __init__(self, intsize, data):\n> +        \"\"\"Keys should be a list of (bytearray, value) pairs\"\"\"\n> +        mapsize = len(data) # Size of the target values array\n> +\n> +        buckets = [(i, []) for i in range(intsize)]\n\nThis is just a style nit, but I think it would make everything a bit easier to understand, right now were indexing into tuples like:\n\n> buckets[hash(key) % intsize][1].append((key, val))\n> buckets.sort(key=lambda b: len(b[1]), reverse=True)\n> self.values[freecursor] = bucket[0][1]\n> slot = hash(bucket[i][0], basis) % mapsize\n\nLooking at that with fresh eyes is a bit confusing. I see a couple options:\n  1a) Get rid of tracking the idx in buckets (so tuple[0]) and just recalculate it when inserting into the intermediate table\n  1b) Do some sort of named tuple for this of (hash_idx, entries)\n  2a) Add some sort of key/value named tuple for the entries\n  2b) Just explode the tuple wherever it's used, ie: k,v = bucket\n\n@@ +30,5 @@\n> +        \"\"\"Keys should be a list of (bytearray, value) pairs\"\"\"\n> +        mapsize = len(data) # Size of the target values array\n> +\n> +        buckets = [(i, []) for i in range(intsize)]\n> +        self.inter = [0] * intsize\n\nIt's more verbose, but maybe intermediate would be more appropriate here. Well unless you mean some variation of inter.\n\n@@ +45,5 @@\n> +        # Look at the largest bucket first.\n> +        buckets.sort(key=lambda b: len(b[1]), reverse=True)\n> +\n> +        freecursor = 0\n> +        for idx, bucket in buckets:\n\nnit: maybe `intermediate_idx`, or if you take suggestion 1a above this goes away.\n\n::: xpcom/reflect/xptinfo/xptcodegen.py\n@@ +28,5 @@\n> +    assert idx == len(s)\n> +\n> +def split_iid(iid): # Get the individual components out of an IID string.\n> +    iid = iid.replace('-', '') # Strip any '-' delimiters\n> +    return tuple(split_at_idxs(iid, (8, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2)))\n\nI think a high level doc about why this is tedious and short description of our crazytown internal nsID format is worth noting here.\n\n@@ +32,5 @@\n> +    return tuple(split_at_idxs(iid, (8, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2)))\n> +\n> +def iid_bytes(iid): # Get the byte representation of the IID for hashing.\n> +    bs = bytearray()\n> +    # We store the bytes in little-endian (XXX: Big endian support?)\n\nIf we supported it before, then yes we need it.\n\nTBH I'm surprised nsID isn't just always using a bigendian array, it would be much easier to encode / decode / compare. We have to work with what we have I guess :(\n\n::: xpcom/reflect/xptinfo/xptinfo.cpp\n@@ +22,5 @@\n> +static const uint32_t FNV_PRIME = 16777619;\n> +static const uint32_t U32_HIGH_BIT = 0x80000000;\n> +\n> +static uint32_t\n> +Phf_DoHash(const void* bytes, uint32_t len, uint32_t h=FNV_OFFSET_BASIS)\n\nAt some point it would be nice to move this out into a separate class, similar to our DAFSA impl so that it can be reused.\n\n@@ +50,5 @@\n> +\n> +/* static */ const nsXPTInterfaceInfo*\n> +nsXPTInterfaceInfo::ByIID(const nsIID& aIID)\n> +{\n> +  uint16_t idx = Phf_DoLookup(&aIID, sizeof(nsIID), sPHF_IIDs);\n\nWe probably need to assert this index is in range.\n\n@@ +52,5 @@\n> +nsXPTInterfaceInfo::ByIID(const nsIID& aIID)\n> +{\n> +  uint16_t idx = Phf_DoLookup(&aIID, sizeof(nsIID), sPHF_IIDs);\n> +\n> +  const nsXPTInterfaceInfo* found = &sInterfaces[idx];\n\nIn what instance do we not find the interface? For the perfect hash to work every lookup needs to be valid\n\n@@ +60,5 @@\n> +\n> +/* static */ const nsXPTInterfaceInfo*\n> +nsXPTInterfaceInfo::ByName(const char* aName)\n> +{\n> +  uint16_t idx = Phf_DoLookup(aName, strlen(aName), sPHF_Names);\n\nDitto.\n\n::: xpcom/reflect/xptinfo/xptinfo.h\n@@ +517,5 @@\n> +// shim constant information\n> +extern const mozilla::dom::NativePropertyHooks* sPropHooks[];\n> +\n> +// Perfect Hash Function backing data\n> +static const uint16_t kPHFSize = 256;\n\nOften a prime number is used (particularly for smaller tables) as it gets better distribution. I get that this is a nice mod value but we've found that is still a net loss in the past. It would be interesting to at least *test* a different value.", "author": "erahm@mozilla.com", "id": 13210911, "time": "2018-04-16T21:11:35Z"}, {"text": "(In reply to Andrew McCreight [:mccr8] from comment #55)\n> r=me with the changes in the interdiffs, assuming there's no big impact on\n> the installer size from your patches.\n\nFrom my quick test, this caused a reduction of 3.5k bytes in terms of installer size. (NOTE: This includes the webidl patches too)", "author": "nika@thelayzells.com", "id": 13211020, "time": "2018-04-16T21:57:07Z"}, {"text": "(In reply to Nika Layzell [:mystor] from comment #57)\n> From my quick test, this caused a reduction of 3.5k bytes in terms of\n> installer size. (NOTE: This includes the webidl patches too)\n\nGreat! Thanks for checking.", "author": "continuation@gmail.com", "id": 13211025, "time": "2018-04-16T22:00:05Z"}, {"text": "(In reply to Eric Rahm [:erahm] (please no mozreview requests) from comment #56)\n> Mostly just nitpicky stuff, but f+ for now. I'd like to see some more\n> comments / naming cleanup. The algorithm itself seems okay, but I'd like to\n> see some tests for that. At some point it would be really nice to have a\n> separate perfect hash table wrapper class that we could reuse (it would make\n> adding tests easier as well) similar to DAFSA [1].\n> \n> [1]\n> https://searchfox.org/mozilla-central/search?q=symbol:\n> T_mozilla%3A%3ADafsa&redirect=false\n\nI would like to do the generic-ification as a follow-up, rather than doing it in this bug. The bug's gotten big enough as-is.\n\n> ::: xpcom/reflect/xptinfo/phf.py\n> @@ +1,2 @@\n> > +#!/usr/bin/env python\n> > +# phf.py - Helper for generating perfect hash functions for xptcodegen.py\n> \n> I think mystor already agreed, but perfecthash.py sounds good.\n\nAlready done :-). Works for me.\n\n> @@ +2,5 @@\n> > +# phf.py - Helper for generating perfect hash functions for xptcodegen.py\n> > +#\n> > +# This Source Code Form is subject to the terms of the Mozilla Public\n> > +# License, v. 2.0. If a copy of the MPL was not distributed with this\n> > +# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n> \n> Can you provide a toplevel comment on what a FNV/perfect hash is and some\n> useful links? Nothing huge, just make it easy for others to lookup. Also if\n> this was inspired by any external code can you provide a link?\n\nSure. I can do this.\n\n> @@ +5,5 @@\n> > +# License, v. 2.0. If a copy of the MPL was not distributed with this\n> > +# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n> > +\n> > +FNV_OFFSET_BASIS = 0x811C9DC5\n> > +FNV_PRIME = 16777619\n> \n> Maybe make it explicit these are the 32-bit versions.\n\nOK.\n\n> @@ +26,5 @@\n> > +\n> > +class PHF(object):\n> > +    \"\"\"An object representing a perfect hash function\"\"\"\n> > +    def __init__(self, intsize, data):\n> > +        \"\"\"Keys should be a list of (bytearray, value) pairs\"\"\"\n> \n> I think you mean `data` instead of keys right? Can you document `intsize`?\n> Actually now that I realized it's the intermediate table can you change the\n> name to `intermediate_table_size` or something more explicit?\n\nYes.\n\n> @@ +29,5 @@\n> > +    def __init__(self, intsize, data):\n> > +        \"\"\"Keys should be a list of (bytearray, value) pairs\"\"\"\n> > +        mapsize = len(data) # Size of the target values array\n> > +\n> > +        buckets = [(i, []) for i in range(intsize)]\n> \n> This is just a style nit, but I think it would make everything a bit easier\n> to understand, right now were indexing into tuples like:\n\nI think you failed to finish this comment?\n\nI might make this a namedtuple so we can avoid the array indexing.\n\n> > buckets[hash(key) % intsize][1].append((key, val))\n> > buckets.sort(key=lambda b: len(b[1]), reverse=True)\n> > self.values[freecursor] = bucket[0][1]\n> > slot = hash(bucket[i][0], basis) % mapsize\n> \n> Looking at that with fresh eyes is a bit confusing. I see a couple options:\n>   1a) Get rid of tracking the idx in buckets (so tuple[0]) and just\n> recalculate it when inserting into the intermediate table\n>   1b) Do some sort of named tuple for this of (hash_idx, entries)\n>   2a) Add some sort of key/value named tuple for the entries\n>   2b) Just explode the tuple wherever it's used, ie: k,v = bucket\n\nI think the namedtuple option would work well for clearing this up, so I think I will take that option.\n\n> @@ +30,5 @@\n> > +        \"\"\"Keys should be a list of (bytearray, value) pairs\"\"\"\n> > +        mapsize = len(data) # Size of the target values array\n> > +\n> > +        buckets = [(i, []) for i in range(intsize)]\n> > +        self.inter = [0] * intsize\n> \n> It's more verbose, but maybe intermediate would be more appropriate here.\n> Well unless you mean some variation of inter.\n\nSure.\n\n> ::: xpcom/reflect/xptinfo/xptcodegen.py\n> @@ +28,5 @@\n> > +    assert idx == len(s)\n> > +\n> > +def split_iid(iid): # Get the individual components out of an IID string.\n> > +    iid = iid.replace('-', '') # Strip any '-' delimiters\n> > +    return tuple(split_at_idxs(iid, (8, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2)))\n> \n> I think a high level doc about why this is tedious and short description of\n> our crazytown internal nsID format is worth noting here.\n\nYup. I can do that.\n\n> @@ +32,5 @@\n> > +    return tuple(split_at_idxs(iid, (8, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2)))\n> > +\n> > +def iid_bytes(iid): # Get the byte representation of the IID for hashing.\n> > +    bs = bytearray()\n> > +    # We store the bytes in little-endian (XXX: Big endian support?)\n> \n> If we supported it before, then yes we need it.\n> \n> TBH I'm surprised nsID isn't just always using a bigendian array, it would\n> be much easier to encode / decode / compare. We have to work with what we\n> have I guess :(\n\nYeah, that would be nice. I could change the representation to be consistently big-endian in gecko, but that feels like it might be a bit of a larger project to ensure works well. Is there a good way for me to check in this script whether or not the target architecture is big-endian?\n\n> @@ +52,5 @@\n> > +nsXPTInterfaceInfo::ByIID(const nsIID& aIID)\n> > +{\n> > +  uint16_t idx = Phf_DoLookup(&aIID, sizeof(nsIID), sPHF_IIDs);\n> > +\n> > +  const nsXPTInterfaceInfo* found = &sInterfaces[idx];\n> \n> In what instance do we not find the interface? For the perfect hash to work\n> every lookup needs to be valid.\n\nIf you try to look up an IID which isn't scriptable, or one which doesn't exist, then you'll perform a lookup and get a random interface. This will only happen if the IID isn't in the table, so we just do an equality check of the IID/name and return nullptr if we failed to perform the lookup.\n\nEvery entry which is in the table will take you to the right entry, so I'm pretty sure this is sound.\n\n> ::: xpcom/reflect/xptinfo/xptinfo.h\n> @@ +517,5 @@\n> > +// shim constant information\n> > +extern const mozilla::dom::NativePropertyHooks* sPropHooks[];\n> > +\n> > +// Perfect Hash Function backing data\n> > +static const uint16_t kPHFSize = 256;\n> \n> Often a prime number is used (particularly for smaller tables) as it gets\n> better distribution. I get that this is a nice mod value but we've found\n> that is still a net loss in the past. It would be interesting to at least\n> *test* a different value.\n\nMy reasoning here is that getting better distribution isn't that big of a deal because the hash values are precomputed, so the distribution quality doesn't really matter as much. I think we can get away with it.", "author": "nika@thelayzells.com", "id": 13211088, "time": "2018-04-16T22:17:42Z"}, {"text": "Comment on attachment 8965864\nPart 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the required datastructures\n\nReview of attachment 8965864:\n-----------------------------------------------------------------\n\nglandium, in xptcodegen.py we need to know the endianeness of the target platform when generating some hashtables. Can you help us find a way to hook that into the build system?", "author": "erahm@mozilla.com", "id": 13211185, "time": "2018-04-16T23:11:32Z"}, {"text": "(In reply to Nika Layzell [:mystor] from comment #59)\n> (In reply to Eric Rahm [:erahm] (please no mozreview requests) from comment\n> #56)\n> > Mostly just nitpicky stuff, but f+ for now. I'd like to see some more\n> > comments / naming cleanup. The algorithm itself seems okay, but I'd like to\n> > see some tests for that. At some point it would be really nice to have a\n> > separate perfect hash table wrapper class that we could reuse (it would make\n> > adding tests easier as well) similar to DAFSA [1].\n> > \n> > [1]\n> > https://searchfox.org/mozilla-central/search?q=symbol:\n> > T_mozilla%3A%3ADafsa&redirect=false\n> \n> I would like to do the generic-ification as a follow-up, rather than doing\n> it in this bug. The bug's gotten big enough as-is.\n\nFor sure, I just wanted you to know that I think this is valuable elsewhere :)\n\n\n> > This is just a style nit, but I think it would make everything a bit easier\n> > to understand, right now were indexing into tuples like:\n> \n> I think you failed to finish this comment?\n\nYeah bad editing, I just wanted to justify not using tuples for the sake of code sanity.\n \n> Yeah, that would be nice. I could change the representation to be\n> consistently big-endian in gecko, but that feels like it might be a bit of a\n> larger project to ensure works well. Is there a good way for me to check in\n> this script whether or not the target architecture is big-endian?\n\nThat would definitely be a follow up (not necessarily for you). I ni'd glandium to see if he has any ideas re: endianness. Another option would be to have the C++ side flip the bits appropriately when hashing on big endian which is janky but better than broken.\n\n> > @@ +52,5 @@\n> > > +nsXPTInterfaceInfo::ByIID(const nsIID& aIID)\n> > > +{\n> > > +  uint16_t idx = Phf_DoLookup(&aIID, sizeof(nsIID), sPHF_IIDs);\n> > > +\n> > > +  const nsXPTInterfaceInfo* found = &sInterfaces[idx];\n> > \n> > In what instance do we not find the interface? For the perfect hash to work\n> > every lookup needs to be valid.\n> \n> If you try to look up an IID which isn't scriptable, or one which doesn't\n> exist, then you'll perform a lookup and get a random interface. This will\n> only happen if the IID isn't in the table, so we just do an equality check\n> of the IID/name and return nullptr if we failed to perform the lookup.\n> \n> Every entry which is in the table will take you to the right entry, so I'm\n> pretty sure this is sound.\n\nSorry I completely missed the equality check.\n\n> > ::: xpcom/reflect/xptinfo/xptinfo.h\n> > @@ +517,5 @@\n> > > +// shim constant information\n> > > +extern const mozilla::dom::NativePropertyHooks* sPropHooks[];\n> > > +\n> > > +// Perfect Hash Function backing data\n> > > +static const uint16_t kPHFSize = 256;\n> > \n> > Often a prime number is used (particularly for smaller tables) as it gets\n> > better distribution. I get that this is a nice mod value but we've found\n> > that is still a net loss in the past. It would be interesting to at least\n> > *test* a different value.\n> \n> My reasoning here is that getting better distribution isn't that big of a\n> deal because the hash values are precomputed, so the distribution quality\n> doesn't really matter as much. I think we can get away with it.\n\nFair point.", "author": "erahm@mozilla.com", "id": 13211192, "time": "2018-04-16T23:18:36Z"}, {"text": "(In reply to Eric Rahm [:erahm] (please no mozreview requests) from comment #61)\n> > Yeah, that would be nice. I could change the representation to be\n> > consistently big-endian in gecko, but that feels like it might be a bit of a\n> > larger project to ensure works well. Is there a good way for me to check in\n> > this script whether or not the target architecture is big-endian?\n> \n> That would definitely be a follow up (not necessarily for you). I ni'd\n> glandium to see if he has any ideas re: endianness. Another option would be\n> to have the C++ side flip the bits appropriately when hashing on big endian\n> which is janky but better than broken.\n\nI think I'll do that for now, and we can come back & take a better approach in the future if we discover a better way to handle this.", "author": "nika@thelayzells.com", "id": 13211195, "time": "2018-04-16T23:25:22Z"}, {"text": "Created attachment 8968369\nIntr 6: Changes to Perfect Hashing\n\nHere are some changes in reply to your patches.", "author": "nika@thelayzells.com", "id": 13211232, "time": "2018-04-17T00:15:40Z"}, {"text": "(In reply to Eric Rahm [:erahm] (please no mozreview requests) from comment #60)\n> Comment on attachment 8965864\n> Part 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the\n> required datastructures\n> \n> Review of attachment 8965864:\n> -----------------------------------------------------------------\n> \n> glandium, in xptcodegen.py we need to know the endianeness of the target\n> platform when generating some hashtables. Can you help us find a way to hook\n> that into the build system?\n\nExpose the endianness through a set_config in build/moz.configure/init.configure, and get the value from buildconfig.substs in the code gen python script.", "author": "mh+mozilla@glandium.org", "id": 13211240, "time": "2018-04-17T00:25:24Z"}, {"text": "Comment on attachment 8968369\nIntr 6: Changes to Perfect Hashing\n\nReview of attachment 8968369:\n-----------------------------------------------------------------\n\nThanks for the interdiff, lgtm.", "author": "erahm@mozilla.com", "id": 13211258, "time": "2018-04-17T00:45:05Z"}, {"text": "(In reply to Mike Hommey [:glandium] from comment #64)\n> Expose the endianness through a set_config in\n> build/moz.configure/init.configure, and get the value from\n> buildconfig.substs in the code gen python script.\n\nCurrently xptcodegen.py isn't part of the virtualenv (like the other xpidl stuff) IIRC, so I'm not sure whether or not buildconfig is available there?\n\nIn any case, I think this can be done in a follow-up.", "author": "nika@thelayzells.com", "id": 13211393, "time": "2018-04-17T02:27:42Z"}, {"text": "I think you can add -I $(DEPTH)/build to the PYTHONPATH call wrapping xpidl stuff and import buildconfig.", "author": "mh+mozilla@glandium.org", "id": 13211402, "time": "2018-04-17T02:33:06Z"}, {"text": "Pushed by nika@thelayzells.com:\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/da98166e73a8\nPart 1: Clear out xptinfo and typelib to make way for the this patch, r=mccr8\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/e6049a77ddc2\nPart 2: Add the xptshim and xptshimfile attributes to xpidl, r=mccr8\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/a0b17dbda47e\nPart 3: Replace the XPT file format with a JSON based one, r=mccr8\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/4425a51bc165\nPart 4: Rewrite xptinfo, and write a new xptcodegen.py to generate the required datastructures, r=mccr8\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/90e79480ebc6\nPart 5: Update consumers of nsIInterfaceInfo to use the nsXPTInterfaceInfo directly, r=mccr8", "author": "pulsebot@bots.tld", "id": 13213988, "time": "2018-04-17T23:22:19Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/da98166e73a8\nhttps://hg.mozilla.org/mozilla-central/rev/e6049a77ddc2\nhttps://hg.mozilla.org/mozilla-central/rev/a0b17dbda47e\nhttps://hg.mozilla.org/mozilla-central/rev/4425a51bc165\nhttps://hg.mozilla.org/mozilla-central/rev/90e79480ebc6", "author": "ccoroiu@mozilla.com", "id": 13215020, "time": "2018-04-18T10:59:30Z"}, {"text": "10 failures in 782 pushes (0.013 failures/push) were associated with this bug in the last 7 days.    \n\nRepository breakdown:\n* mozilla-inbound: 6\n* autoland: 3\n* mozilla-central: 1\n\nPlatform breakdown:\n* linux64: 10\n\nFor more details, see:\nhttps://treeherder.mozilla.org/intermittent-failures.html#/bugdetails?bug=1444745&startday=2018-04-16&endday=2018-04-22&tree=trunk", "author": "orangefactor@bots.tld", "id": 13224730, "time": "2018-04-23T01:09:32Z"}, {"text": "*** Bug 425603 has been marked as a duplicate of this bug. ***", "author": "continuation@gmail.com", "id": 13362218, "time": "2018-05-24T21:18:07Z"}], "id": 1444745, "priority": "P2", "cc": ["bobbyholley@gmail.com", "erahm@mozilla.com", "mcastelluccio@mozilla.com", "mh+mozilla@glandium.org", "n.nethercote@gmail.com", "nfroyd@mozilla.com", "nika@thelayzells.com", "timeless@bemail.org"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1451959, 1455024, 1438287, 1444991, 1451425, 1454811], "qa_contact": "", "creation_time": "2018-03-11T16:35:27Z", "cf_status_firefox_esr52": "---", "component": "XPCOM", "assigned_to_detail": {"email": "nika@thelayzells.com", "id": 534482, "name": "nika@thelayzells.com", "real_name": ":Nika Layzell"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "fixed", "cf_status_firefox60": "---", "target_milestone": "mozilla61", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, "whiteboard": "", "mentors": [], "summary": "Eliminate xptiInterfaceEntry", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-24T21:18:07Z", "assigned_to": "nika@thelayzells.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "bobbyholley@gmail.com"}], "who": "bobbyholley@gmail.com", "when": "2018-03-11T16:41:16Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1449747"}], "who": "continuation@gmail.com", "when": "2018-03-28T21:25:09Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1450321"}], "who": "continuation@gmail.com", "when": "2018-03-30T18:28:40Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P2"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "continuation@gmail.com"}], "who": "continuation@gmail.com", "when": "2018-04-03T15:41:27Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1450359"}], "who": "continuation@gmail.com", "when": "2018-04-03T15:42:32Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nika@thelayzells.com"}, {"removed": "1450321, 1450359", "field_name": "depends_on", "added": ""}, {"removed": "continuation@gmail.com", "field_name": "assigned_to", "added": "nika@thelayzells.com"}], "who": "continuation@gmail.com", "when": "2018-04-03T23:00:11Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1451425"}], "who": "continuation@gmail.com", "when": "2018-04-04T17:53:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965146, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-04T23:48:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965147, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-04T23:48:48Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965148, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-04T23:48:54Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965149, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-04T23:48:59Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965150, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-04T23:49:06Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1444991"}], "who": "nika@thelayzells.com", "when": "2018-04-04T23:52:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(nfroyd@mozilla.com)"}], "who": "continuation@gmail.com", "when": "2018-04-05T20:18:30Z"}, {"changes": [{"removed": "needinfo?(nfroyd@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "nfroyd@mozilla.com", "when": "2018-04-05T20:27:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965864, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-06T23:29:45Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8965149, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8965149, "added": ""}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8965150, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8965150, "added": ""}], "who": "nika@thelayzells.com", "when": "2018-04-06T23:29:47Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965865, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-06T23:29:56Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965866, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-06T23:30:35Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mh+mozilla@glandium.org"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mh+mozilla@glandium.org)"}], "who": "nika@thelayzells.com", "when": "2018-04-07T00:47:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8966320, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-09T18:32:53Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8965146, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8965146, "added": ""}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8965866, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8965866, "added": ""}], "who": "nika@thelayzells.com", "when": "2018-04-09T18:32:54Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8966320, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-09T23:20:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8965147, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-09T23:26:07Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8965148, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-10T22:37:22Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "erahm@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965864, "added": "review?(erahm@mozilla.com)"}], "who": "continuation@gmail.com", "when": "2018-04-11T18:00:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8965864, "added": "review-"}], "who": "continuation@gmail.com", "when": "2018-04-11T23:23:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8965865, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-11T23:47:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968296, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-16T19:21:53Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968297, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-16T19:22:02Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968298, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-16T19:22:12Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968299, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-16T19:22:21Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968300, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-16T19:22:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8968296, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-16T19:23:23Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8968296, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8968297, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8968297, "added": ""}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8968298, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8968298, "added": ""}], "who": "nika@thelayzells.com", "when": "2018-04-16T20:29:22Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968322, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-16T20:29:36Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968323, "added": "review?(continuation@gmail.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-16T20:29:43Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8968322, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-16T20:34:23Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8968323, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-16T20:35:29Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8968299, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-16T20:54:36Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(continuation@gmail.com)", "attachment_id": 8968300, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-16T20:54:57Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review-", "attachment_id": 8965864, "added": "review+"}], "who": "continuation@gmail.com", "when": "2018-04-16T20:59:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+, review?(erahm@mozilla.com)", "attachment_id": 8965864, "added": "review-, feedback+"}], "who": "erahm@mozilla.com", "when": "2018-04-16T21:11:35Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1451959"}], "who": "continuation@gmail.com", "when": "2018-04-16T22:25:27Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8965864, "added": "feedback?(mh+mozilla@glandium.org)"}], "who": "erahm@mozilla.com", "when": "2018-04-16T23:11:32Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968369, "added": "review?(erahm@mozilla.com)"}], "who": "nika@thelayzells.com", "when": "2018-04-17T00:15:40Z"}, {"changes": [{"removed": "needinfo?(mh+mozilla@glandium.org)", "field_name": "flagtypes.name", "added": ""}], "who": "mh+mozilla@glandium.org", "when": "2018-04-17T00:25:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(mh+mozilla@glandium.org)", "attachment_id": 8965864, "added": ""}], "who": "mh+mozilla@glandium.org", "when": "2018-04-17T00:25:41Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(erahm@mozilla.com)", "attachment_id": 8968369, "added": "review+"}], "who": "erahm@mozilla.com", "when": "2018-04-17T00:45:05Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1454811"}], "who": "nika@thelayzells.com", "when": "2018-04-17T23:08:03Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-04-18 10:59:30"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "ccoroiu@mozilla.com", "when": "2018-04-18T10:59:30Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1455024"}], "who": "erahm@mozilla.com", "when": "2018-04-18T17:04:51Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1455221"}], "who": "continuation@gmail.com", "when": "2018-04-19T15:21:34Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1455722"}], "who": "cmanchester@mozilla.com", "when": "2018-04-20T19:10:46Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2018-04-27T11:18:38Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "timeless@bemail.org"}], "who": "continuation@gmail.com", "when": "2018-05-24T21:18:07Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}