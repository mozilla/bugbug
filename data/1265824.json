{"cf_tracking_thunderbird_esr52": "---", "status": "ASSIGNED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "jmuizelaar@mozilla.com", "mentors_detail": [], "depends_on": [1467619], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": ["perf"], "cc_detail": [{"email": "albert@scheiner.cc", "id": 449258, "name": "albert@scheiner.cc", "real_name": "Albert Scheiner [:alberts]"}, {"email": "b56girard@gmail.com", "id": 368375, "name": "b56girard@gmail.com", "real_name": "Benoit Girard (:BenWa)"}, {"email": "bas@basschouten.com", "id": 272464, "name": "bas@basschouten.com", "real_name": "Bas Schouten (:bas.schouten)"}, {"email": "bignose1007+bugzilla@gmail.com", "id": 473405, "name": "bignose1007+bugzilla@gmail.com", "real_name": "Jerry Shih[:jerry] (UTC+8) (inactive)"}, {"email": "bugmail@mozilla.staktrace.com", "id": 426788, "name": "bugmail@mozilla.staktrace.com", "real_name": "Kartikaya Gupta (email:kats@mozilla.com)"}, {"email": "bugzilla@flaki.hu", "id": 449932, "name": "bugzilla@flaki.hu", "real_name": "Szmozs\u00e1nszky Istv\u00e1n [:flaki]"}, {"email": "bvandyk@mozilla.com", "id": 560379, "name": "bvandyk@mozilla.com", "real_name": "Bryce Van Dyk (:bryce)"}, {"email": "bwong@mozilla.com", "id": 467567, "name": "bwong@mozilla.com", "real_name": "Benson Wong [:mostlygeek]"}, {"email": "camden.narzt@hotmail.com", "id": 386156, "name": "camden.narzt@hotmail.com", "real_name": "Cam"}, {"email": "chrislord.net@gmail.com", "id": 194366, "name": "chrislord.net@gmail.com", "real_name": "Chris Lord [:cwiiis]"}, {"email": "dietrich@mozilla.com", "id": 213632, "name": "dietrich@mozilla.com", "real_name": "Dietrich Ayala (:dietrich)"}, {"email": "dmose@mozilla.org", "id": 1537, "name": "dmose@mozilla.org", "real_name": "Dan Mosedale (:dmose)"}, {"email": "dothayer@mozilla.com", "id": 582499, "name": "dothayer@mozilla.com", "real_name": "Doug Thayer [:dthayer] (PTO on June 4)"}, {"email": "ehsan@mozilla.com", "id": 251051, "name": "ehsan@mozilla.com", "real_name": ":Ehsan Akhgari"}, {"email": "emilio@crisal.io", "id": 546716, "name": "emilio@crisal.io", "real_name": "Emilio Cobos \u00c1lvarez [:emilio]"}, {"email": "eoger@fastmail.com", "id": 521718, "name": "eoger@fastmail.com", "real_name": "Edouard Oger [:eoger]"}, {"email": "gandalf@aviary.pl", "id": 41270, "name": "gandalf@aviary.pl", "real_name": "Zibi Braniecki [:gandalf][:zibi]"}, {"email": "hikezoe@mozilla.com", "id": 131213, "name": "hikezoe@mozilla.com", "real_name": "Hiroyuki Ikezoe (:hiro)"}, {"email": "howareyou322@gmail.com", "id": 452554, "name": "howareyou322@gmail.com", "real_name": "Peter Chang[:pchang]"}, {"email": "hpradhan@gmail.com", "id": 34707, "name": "hpradhan@gmail.com", "real_name": "Harshal Pradhan"}, {"email": "hujq@live.com", "id": 538286, "name": "hujq@live.com", "real_name": ""}, {"email": "jgong@mozilla.com", "id": 489805, "name": "jgong@mozilla.com", "real_name": "Jean Gong :jgong"}, {"email": "jgriffiths@mozilla.com", "id": 421111, "name": "jgriffiths@mozilla.com", "real_name": "Jeff Griffiths (:canuckistani) (:\u26a1\ufe0e)"}, {"email": "jnicol@mozilla.com", "id": 541747, "name": "jnicol@mozilla.com", "real_name": "Jamie Nicol [:jnicol]"}, {"email": "josh@joshmatthews.net", "id": 241497, "name": "josh@joshmatthews.net", "real_name": "Josh Matthews [:jdm]"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "kinetik@flim.org", "id": 274575, "name": "kinetik@flim.org", "real_name": "Matthew Gregan [:kinetik]"}, {"email": "mark.paxman99@gmail.com", "id": 600305, "name": "mark.paxman99@gmail.com", "real_name": "Mark"}, {"email": "matt.woodrow@gmail.com", "id": 380838, "name": "matt.woodrow@gmail.com", "real_name": "Matt Woodrow (:mattwoodrow)"}, {"email": "mconley@mozilla.com", "id": 403756, "name": "mconley@mozilla.com", "real_name": "Mike Conley (:mconley) (:\u2699\ufe0f) (Catching up on needinfos / reviews)"}, {"email": "mdeboer@mozilla.com", "id": 463945, "name": "mdeboer@mozilla.com", "real_name": "Mike de Boer [:mikedeboer]"}, {"email": "michaelnussbaum08@gmail.com", "id": 609725, "name": "michaelnussbaum08@gmail.com", "real_name": ""}, {"email": "milaninbugzilla@gmail.com", "id": 456486, "name": "milaninbugzilla@gmail.com", "real_name": "Milan Sreckovic [:milan] (needinfo for best results)"}, {"email": "mozilla-bugs@sourcefoundry.co.uk", "id": 97834, "name": "mozilla-bugs@sourcefoundry.co.uk", "real_name": "Brian Lyttle"}, {"email": "mozilla@metasieben.org", "id": 388139, "name": "mozilla@metasieben.org", "real_name": "matthias koplenig"}, {"email": "mstange@themasta.com", "id": 293943, "name": "mstange@themasta.com", "real_name": "Markus Stange [:mstange]"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "nical.bugzilla@gmail.com", "id": 438998, "name": "nical.bugzilla@gmail.com", "real_name": "Nicolas Silva [:nical]"}, {"email": "nihsanullah@invalid.bugs", "id": 441971, "name": "nihsanullah@invalid.bugs", "real_name": "Naveed Ihsanullah [:naveed]"}, {"email": "nissan4321@gmail.com", "id": 414417, "name": "nissan4321@gmail.com", "real_name": "Mikel"}, {"email": "reuben.bmo@gmail.com", "id": 390952, "name": "reuben.bmo@gmail.com", "real_name": "Reuben Morais [:reuben]"}, {"email": "strayer@olle-orks.org", "id": 420422, "name": "strayer@olle-orks.org", "real_name": ""}, {"email": "timbugzilla@gmail.com", "id": 437905, "name": "timbugzilla@gmail.com", "real_name": ""}, {"email": "tnikkel@gmail.com", "id": 255010, "name": "tnikkel@gmail.com", "real_name": "Timothy Nikkel (:tnikkel)"}, {"email": "Virtual@teknik.io", "id": 342842, "name": "Virtual@teknik.io", "real_name": "Virtual_ManPL [:Virtual] - (please needinfo? me - so I will see your comment/reply/question/etc.)"}, {"email": "yoasif@gmail.com", "id": 347239, "name": "yoasif@gmail.com", "real_name": "Asif Youssuff"}], "cf_last_resolved": null, "attachments": [{"creator": "bugmail@mozilla.staktrace.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/plain", "id": 8748795}, {"creator": "matt.woodrow@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8768908}, {"creator": "jmuizelaar@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8798180}, {"creator": "jmuizelaar@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8799032}, {"creator": "mstange@themasta.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "image/jpeg", "id": 8842569}, {"creator": "ehsan@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "video/webm", "id": 8848181}, {"creator": "jmuizelaar@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8856495}, {"creator": "bignose1007+bugzilla@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8934464}, {"creator": "bignose1007+bugzilla@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8934465}, {"creator": "bignose1007+bugzilla@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8934466}, {"creator": "bignose1007+bugzilla@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8934467}, {"creator": "bignose1007+bugzilla@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8934468}, {"creator": "bignose1007+bugzilla@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8934469}, {"creator": "bignose1007+bugzilla@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8934470}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8979705}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8979706}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8979707}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8979708}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8979709}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8979710}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8979711}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8979712}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8980356}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8980357}, {"creator": "jmuizelaar@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8982099}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8982578}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8983537}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8983574}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8983900}, {"creator": "dothayer@mozilla.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "text/html", "id": 8983901}], "votes": 6, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 107, "comments": [{"text": "Our current upload path on OS X is quite poor. CoreAnimation does much better. We should too.", "author": "jmuizelaar@mozilla.com", "id": 11338525, "time": "2016-04-19T18:12:21Z"}, {"text": "*** Bug 949573 has been marked as a duplicate of this bug. ***", "author": "jmuizelaar@mozilla.com", "id": 11338533, "time": "2016-04-19T18:13:40Z"}, {"text": "Our ideas are in https://public.etherpad-mozilla.org/p/client-storage .", "author": "mstange@themasta.com", "id": 11338642, "time": "2016-04-19T18:47:36Z"}, {"text": "Created attachment 8748795\nSnapshot of etherpad\n\nBecause I don't trust etherpad to not delete stuff randomly", "author": "bugmail@mozilla.staktrace.com", "id": 11382469, "time": "2016-05-04T18:57:05Z"}, {"text": "There's also some documentation on the client storage feature at https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/OpenGL-MacProgGuide/opengl_texturedata/opengl_texturedata.html and https://www.opengl.org/registry/specs/APPLE/client_storage.txt", "author": "bugmail@mozilla.staktrace.com", "id": 11382473, "time": "2016-05-04T18:57:46Z"}, {"text": "BufferTextureHost already has most of what you need to get client storage working, you just need to add a ClientStorageTextureSource that wraps the BufferTextureHost the same way we do with the basic compositor (see BufferTextureHost::EnsureWrappingTextureSource).\nSo we don't need for an extra TextureClient/Host pair.", "author": "nical.bugzilla@gmail.com", "id": 11483433, "time": "2016-06-14T16:20:53Z"}, {"text": "Created attachment 8768908\nWIP: client storage support\n\nBased on m-c 300620:1828937da949\n\nThis code holds the read lock to the textures for quite a few frames after they have been used (probably more than necessary) to ensure that OpenGL has finished reading from them before we attempt to write to the system memory again.\n\nThis unfortunately interacts really poorly with our tile recycling, and we end up doing a lot of allocations (and spending time in the VM mapping and zeroing memory).\n\nWe probably need to figure out the minimum number of frames we need to hold them for, and then fix the tile pool to recycle nicely for this. Alternatively we should try blocking the compositor until previous frames have fully completed (using the apple fence extension?) so that our existing recycling assumptions work.\n\nThe patch also has code to temporarily disable alignment to partial tiles. Aligning to partial tiles means that we get lots of invalidations for partial tiles, and spend a lot of time reading from the old front buffer into our new back which was interacting badly with the above recycling issues. This is just experimental, probably not something we want to do for real (since we can get partial tiles in other ways, like the document boundary).", "author": "matt.woodrow@gmail.com", "id": 11532062, "time": "2016-07-07T20:25:36Z"}, {"text": "It looks like CoreAnimations is actually using TexSubImage in addition to TexImage (this makes some sense). I'll investigate more into what they're doing.", "author": "jmuizelaar@mozilla.com", "id": 11570289, "time": "2016-07-23T14:37:52Z"}, {"text": "(In reply to Jeff Muizelaar [:jrmuizel] from comment #7)\n> It looks like CoreAnimations is actually using TexSubImage in addition to\n> TexImage (this makes some sense). I'll investigate more into what they're\n> doing.\n\nYeah, they seem to be doing full TexSubImage2Ds. This explains why we were seeing so much more allocation traffic then Safari. They are also not TexSubImage2ding the same textures every frame. They seem to be alternating between sets of textures per frame. (i.e. it appears to be double buffering, but could be something more sophisticated).", "author": "jmuizelaar@mozilla.com", "id": 11570299, "time": "2016-07-23T14:54:16Z"}, {"text": "The basic picture here seems to be to:\n1. texture->TexImage2D(size, buffer_addr);\n2. texture->Draw()\n3. Swap();\n4. texture2->TexImage2D(size, buffer_addr2);\n5. texture2->Draw();\n6. Swap();\n8. texture1->TexSubImage2D(size, buffer_addr);\n9. texture1->Draw();\n10. Swap();\n11. texture1->TexSubImage2D(size, buffer_addr2);\n12. texture1->Draw();\netc.\n\nThe modifications of the buffer_addr*[] seem to be protected by fences but the exact mechanism is not clear to me.\n\nTypically the same buffer is always used with TexImage2D and TexSubImage2D as otherwise a copy will occur.\n\nCoreanimation does not always flip between sets of textures. Sometimes it uses the same ones in a row. I don't know why.", "author": "jmuizelaar@mozilla.com", "id": 11573389, "time": "2016-07-25T19:19:21Z"}, {"text": "It turns out all of the weirdness I was seeing was because of the out-of-order dtrace printing. When sorting the logs entries by the order they happened everything seems to make sense. Here's my current understanding.\n\nFrame1\n0. fence1->FinishFence()\n1. texture->TexImage2D(size, buffer_addr);\n2. texture->Draw()\n3. Swap();\n4. fence1->SetFence();\n\nFrame2\n5. fence2->FinishFence();\n6. texture2->TexImage2D(size, buffer_addr2);\n7. texture2->Draw();\n8. read_unlock(buffer_addr);\n9. Swap();\n10. fence2->SetFence();\n\nFrame3\n11. fence1->FinishFence();\n12. texture1->TexSubImage2D(size, buffer_addr);\n13. texture1->Draw();\n14. read_unlock(buffer_addr2);\n15. Swap();\n16. fenec1->SetFence();\n\nFrame4\n17. fence2->FinishFence();\n18. texture1->TexSubImage2D(size, buffer_addr2);\n19. texture1->Draw();\n20. read_unlock(buffer_addr);\n21. Swap();\n22. fence2->SetFence();", "author": "jmuizelaar@mozilla.com", "id": 11576449, "time": "2016-07-26T18:49:10Z"}, {"text": "The other interesting thing to know would be when do they write to buffer_addr(2)?\n\nI assume it's between the fence and the TexImag2D call.", "author": "matt.woodrow@gmail.com", "id": 11577237, "time": "2016-07-26T23:05:14Z"}, {"text": "My understanding is that the write to buffer_addr will happen sometime after the read_unlock(buffer_addr2) and before the next TexSubImage2D(size, buffer_addr2). Unfortunately, confirming this is difficult as the writes happen in another process.", "author": "jmuizelaar@mozilla.com", "id": 11577504, "time": "2016-07-27T01:20:21Z"}, {"text": "In particular, assuming comment 12 is true, the timing of the write violates the client storage spec. The spec says that, before you write to the memory, you need to bind a different buffer to your texture with another call to glTexImage2D or delete the texture. It does not look like CoreAnimation is doing that.\n\nAlso, Jeff's investigations are being done on 10.9. CoreAnimation's behavior may well have changed in the meantime.", "author": "mstange@themasta.com", "id": 11580121, "time": "2016-07-27T20:55:44Z"}, {"text": "(In reply to Nicolas Silva [:nical] from comment #5)\n> BufferTextureHost already has most of what you need to get client storage\n> working, you just need to add a ClientStorageTextureSource that wraps the\n> BufferTextureHost the same way we do with the basic compositor (see\n> BufferTextureHost::EnsureWrappingTextureSource).\n> So we don't need for an extra TextureClient/Host pair.\n\nSince we now need the texture's lifetime to persist as long as the buffer it seems like we need a different approach. What would you recommend nical?", "author": "jmuizelaar@mozilla.com", "id": 11583396, "time": "2016-07-28T21:26:45Z"}, {"text": "(In reply to Jeff Muizelaar [:jrmuizel] from comment #14)\n> Since we now need the texture's lifetime to persist as long as the buffer it\n> seems like we need a different approach. What would you recommend nical?\n\nI am not sure I understand what you mean by that (or in what way it is different from what we had before, which I don't remember in detail).\n\nAs long as all you need to share between the content and compositor processes is a shmem, there is no need to add a new TextureClient/Host pair. The ClientStorage TextureSource can do all of the API-specific things and there are hooks in BufferTextureHost for all of the interesting steps the TextureSource would need to be notified.", "author": "nical.bugzilla@gmail.com", "id": 11584500, "time": "2016-07-29T09:09:23Z"}, {"text": "I have a test app at https://github.com/jrmuizel/client-storage that is happily uploading about 4k*4k of textures per frame with no noticeable cpu usage being spent in texture upload.", "author": "jmuizelaar@mozilla.com", "id": 11586820, "time": "2016-07-30T04:13:22Z"}, {"text": "I found the missing piece for synchronization. CoreAnimation calls FinishObjectAPPLE on the textures before read_unlocking them.", "author": "jmuizelaar@mozilla.com", "id": 11587134, "time": "2016-07-30T15:30:08Z"}, {"text": "I've updated the repo above to use FinishObjectAPPLE for synchronization. It works although is slow because we call FinishObjectAPPLE immediately after Swap() which causes us to actually block. CoreAnimation doesn't call FinishObjectAPPLE until the next frame. Here's the updated timeline:\n\nFrame1\n1. texture1->TexImage2D(size, buffer_addr1);\n2. texture1->Draw()\n3. Swap();\n\nFrame2\n4. texture2->TexImage2D(size, buffer_addr2);\n5. texture2->Draw();\n6. texture1->FinishObject();\n7. read_unlock(buffer_addr1);\n8. Swap();\n\nFrame3\n9. texture1->TexSubImage2D(size, buffer_addr1);\n10. texture1->Draw();\n11. texture2->FinishObject();\n12. read_unlock(buffer_addr2);\n13. Swap();\n\nFrame4\n14. texture2->TexSubImage2D(size, buffer_addr2);\n15. texture2->Draw();\n16. texture1->FinishObject();\n17. read_unlock(buffer_addr1);\n18. Swap();", "author": "jmuizelaar@mozilla.com", "id": 11587142, "time": "2016-07-30T15:57:17Z"}, {"text": "Nical, CoreAnimation doesn't try to unlock the buffer until the end/beginning of the next frame (i.e. 15ms after the Swap) what's the best way for us to do this?", "author": "jmuizelaar@mozilla.com", "id": 11587321, "time": "2016-07-31T01:07:38Z"}, {"text": "IIUC the current Compositor::ReadUnlockAfterComposition helper does exactly that. It is called for all textures that are not already ReadUnlock'ed (uploads etc.) when they are not current on any compositable (as soon as they have been replaced by another texture), and as a result the compositor ReadUnlocks the textures at the end of the frame where they have been replaced.\n\nWe should try that with IOSurfaces and see. It sounds like what you want and it would work the same way other shared gpu textures, which is nice.", "author": "nical.bugzilla@gmail.com", "id": 11587629, "time": "2016-07-31T16:07:27Z"}, {"text": "(In reply to Nicolas Silva [:nical] from comment #20)\n> IIUC the current Compositor::ReadUnlockAfterComposition helper does exactly\n> that. It is called for all textures that are not already ReadUnlock'ed\n> (uploads etc.) when they are not current on any compositable (as soon as\n> they have been replaced by another texture), and as a result the compositor\n> ReadUnlocks the textures at the end of the frame where they have been\n> replaced.\n> \n> We should try that with IOSurfaces and see. It sounds like what you want and\n> it would work the same way other shared gpu textures, which is nice.\n\nIs there a way for the TextureSource to know before this is happening? We need a place to call FinishObject on the texture. From my current reading it looks like the unlocking happens without the involvement of the TextureSource.", "author": "jmuizelaar@mozilla.com", "id": 11587749, "time": "2016-07-31T20:58:39Z"}, {"text": "Won't we need to have triple buffering for this to work correctly?\n\nIf we have content drawing and compositing running simultaneously, then we have one buffer being drawn to, one buffer getting TexSubImage2D called on it, and a 3rd waiting in the pipeline for us to read_unlock it.", "author": "matt.woodrow@gmail.com", "id": 11587831, "time": "2016-07-31T23:51:25Z"}, {"text": "(In reply to Jeff Muizelaar [:jrmuizel] from comment #21)\n> Is there a way for the TextureSource to know before this is happening? We\n> need a place to call FinishObject on the texture. From my current reading it\n> looks like the unlocking happens without the involvement of the\n> TextureSource.\n\nYou can just add methods to TextureSource and have the TextureHost call them.\n\n(In reply to Matt Woodrow (:mattwoodrow) from comment #22)\n> Won't we need to have triple buffering for this to work correctly?\n\nSure, but that's outside the scope of TextureClient/Host/Source. The buffering logic is in whichever CompositableClient uses the texture, and we already have made most of them play nice with gralloc which is somewhat similar, although now that I think about it we have fences with gralloc so we can afford to block production instead of adding more buffers I guess.", "author": "nical.bugzilla@gmail.com", "id": 11588884, "time": "2016-08-01T09:42:04Z"}, {"text": "(In reply to Matt Woodrow (:mattwoodrow) from comment #22)\n> Won't we need to have triple buffering for this to work correctly?\n> \n> If we have content drawing and compositing running simultaneously, then we\n> have one buffer being drawn to, one buffer getting TexSubImage2D called on\n> it, and a 3rd waiting in the pipeline for us to read_unlock it.\n\nCoreAnimation does not triple buffer which suggests we shouldn't have to either. The time between a buffer getting TexSubImage2Ded and previous buffer being unlocked should be short enough that we can block production for this period of time.", "author": "jmuizelaar@mozilla.com", "id": 11589125, "time": "2016-08-01T12:06:58Z"}, {"text": "(In reply to Jeff Muizelaar [:jrmuizel] from comment #24)\n> \n> CoreAnimation does not triple buffer which suggests we shouldn't have to\n> either. The time between a buffer getting TexSubImage2Ded and previous\n> buffer being unlocked should be short enough that we can block production\n> for this period of time.\n\nOk, that seems reasonable. We don't currently have infrastructure (within the tiling code at least) to wait for a lock to become available, the code just checks and creates a new tile if the existing one is locked.", "author": "matt.woodrow@gmail.com", "id": 11590571, "time": "2016-08-01T23:16:25Z"}, {"text": "In talking about this with mstange we thought it might be able to use the same mach connection that we use for shared memory allocations to do this blocking.", "author": "jmuizelaar@mozilla.com", "id": 11659629, "time": "2016-08-26T19:31:44Z"}, {"text": "Created attachment 8798180\nWIP towards better reuse/finishing", "author": "jmuizelaar@mozilla.com", "id": 11763003, "time": "2016-10-05T19:41:24Z"}, {"text": "Created attachment 8799032\nWIP\n\nThis version actually seems to work.\n\nAs long as we're not creating or destroying textures, we don't seem to spend a noticeable amount of time doing upload. It currently has a hack where we spin on the readlock to wait on the compositor. Currently, we spend a substantial amount of time spinning but the the cpu time in the compositor stays low.", "author": "jmuizelaar@mozilla.com", "id": 11769585, "time": "2016-10-07T20:54:55Z"}, {"text": "I had a friend ping me about janky scrolling performance in Firefox, and when talking with kats yesterday, he pointed me to this bug.  It would be great to get this fixed.", "author": "nfroyd@mozilla.com", "id": 11999073, "time": "2017-01-20T21:44:54Z"}, {"text": "Created attachment 8842569\nCoreAnimation timeline\n\nJeff and I refreshed our minds today again about how CoreAnimation does this. Here's a picture and a piece of text.\n\nCoreAnimation has two buffers per \"tile\". When content wants to paint to a buffer, it sends a blocking message to the mach ipc thread on the Compositor. Once that message is replied to, it starts to paint.\n\nEvery composite does these things, in this order:\n    - Iterate over all textures used in the previous composite and call\n      glFinishObjectAPPLE on them.\n    - Signal a condition variable to record that these textures are now\n      available, and possibly to unblock the libdispatch thread that might be\n      waiting on it.\n    - Composite the current frame, uploading the new textures via\n      glTexSubimage() in the process.\n    - Swap buffers.\n\nThe mach IPC thread has a handler for the message that content sends when it wants to paint. This handler:\n    - Checks the condition variable for that set of textures\n    - If it has already been signaled, which means that those textures have\n      already been glFinishObjectAPPLE'd, then it directly replies to the\n      message from content, and content can paint.\n    - If the condition variable has not been signaled, then it kicks off a\n      task using GCD. This task will run on a libdispatch thread. This task\n      does one thing: it blocks on the condition variable.\n    - Once the condition variable has been signaled, and the waiting task is\n      unblocked, that task sends the reply to the blocking message from content. \n      This will unblock content so that it can paint.\n\nThis achieves the following:\n    - Don't write to textures that the compositor is using.\n    - Don't allocate a third buffer if both buffers are in use; instead, make\n      content wait.\n    - Don't block the mach IPC thread if content needs to wait - do the waiting\n      on a different thread.\n\nThe current plan is to implement something extremely similar to this, because it's a known-to-work state. There might be things we can simplify later on (e.g. don't use mach ipc and take advantage of our own IPDL / IPC mechanisms), but we can do that once we have something that works.\n\nThe patch that is currently attached in this bug already has a lot of this, but it doesn't implement the part that would make content wait until it can paint. The same is true for https://github.com/jrmuizel/client-storage/ - it's missing the waiting.\n\nJeff would like to finish this bug, once he has time, but if somebody else is available to work on it, please do, and don't wait for Jeff.", "author": "mstange@themasta.com", "id": 12107880, "time": "2017-03-01T20:09:17Z"}, {"text": "Is this still relevant with Web Render? If so I will make it a qf:p1", "author": "nihsanullah@invalid.bugs", "id": 12114331, "time": "2017-03-03T18:28:37Z"}, {"text": "It will probably not be relevant with webrender.", "author": "jmuizelaar@mozilla.com", "id": 12114358, "time": "2017-03-03T18:33:39Z"}, {"text": "Even if it's not relevant with Web Render, do we want to keep janking until Web Render ships?", "author": "ehsan@mozilla.com", "id": 12114801, "time": "2017-03-03T20:33:21Z"}, {"text": "No. I'd rather stop janking before WebRender ships.", "author": "jmuizelaar@mozilla.com", "id": 12115143, "time": "2017-03-03T22:10:26Z"}, {"text": "Bas, can you please help find an owner for this?  Thanks!", "author": "ehsan@mozilla.com", "id": 12134122, "time": "2017-03-10T15:42:09Z"}, {"text": "Milan, neither me, nical or jamie have OS X machines, do we have someone that could deal with this?", "author": "bas@basschouten.com", "id": 12134144, "time": "2017-03-10T15:48:40Z"}, {"text": "Created attachment 8848181\nVideo demontrating the jank\n\nHere is a video demonstrating how bad this bug can be in practice.  Look at the tab throbber to get a sense of the UI jank caused by this.  I was trying to scroll constantly while capturing the video.  The places in the video when Firefox wasn't scrolling was where we were janking.", "author": "ehsan@mozilla.com", "id": 12151926, "time": "2017-03-16T18:36:11Z"}, {"text": "(In reply to Naveed Ihsanullah [:naveed] from comment #31)\n> Is this still relevant with Web Render? If so I will make it a qf:p1\n\nEven if it's Mac only?", "author": "milaninbugzilla@gmail.com", "id": 12181806, "time": "2017-03-27T19:57:39Z"}, {"text": "Yes this should be [qf:p1]. This is bad enough as a user experience that it isn't really shippable in the current form. The compositor jank janks the entire window and the impact is across many sites.", "author": "nihsanullah@invalid.bugs", "id": 12184613, "time": "2017-03-28T15:34:44Z"}, {"text": "Created attachment 8856495\nElaborated sketch\n\nHere's a somewhat elaborated sketch that I worked on over the weekend. One thing missing is that the frame/transaction id probably needs to live in shared memory so that the client side can check for completion without needing to do any ipc.", "author": "jmuizelaar@mozilla.com", "id": 12221313, "time": "2017-04-10T13:11:55Z"}, {"text": "Re-tagging for QF triage as this is OS X only.", "author": "milaninbugzilla@gmail.com", "id": 12224570, "time": "2017-04-11T09:14:22Z"}, {"text": "Even though this is OSX only the jank is severe enough that users may leave over it. That hits our P1 criteria.", "author": "nihsanullah@invalid.bugs", "id": 12226644, "time": "2017-04-11T20:51:50Z"}, {"text": "Given this is OS X-only, it seems like it's time to not have this as qf:p1.", "author": "overholt@mozilla.com", "id": 12491547, "time": "2017-07-20T20:11:08Z"}, {"text": "According to Milan this will require resources that are already stretched with the current qf:p1 load for FF57. Moving to qf:p2 and will re-evaluate for FF58.", "author": "nihsanullah@invalid.bugs", "id": 12502216, "time": "2017-07-24T22:40:02Z"}, {"text": "I will do the remaining work.", "author": "bignose1007+bugzilla@gmail.com", "id": 12861804, "time": "2017-11-21T11:06:58Z"}, {"text": "Jerry, I don't know if the patches in bug 1005441 are relevant, take a look.", "author": "milaninbugzilla@gmail.com", "id": 12880763, "time": "2017-11-28T18:27:42Z"}, {"text": "That patch was written before the tiling landed.\nI think we could do the whole things in CreateWrappingDataSourceSurface()(just like the wip attachment 8768908). I'm getting a weird screen result with my local patch. The tiled buffers are updated by content side unexpectedly. Maybe the problem comes from the tile-buffer recycling.", "author": "bignose1007+bugzilla@gmail.com", "id": 12882623, "time": "2017-11-29T10:08:49Z"}, {"text": "Created attachment 8934464\nP1: remove the unsed member in GLTextureSource.\n\nThe \"mExternallyOwned\" is used for gralloc buffer. We don't use the gralloc buffer now.\n\nMozReview-Commit-ID: 7Gurpa3kdp0", "author": "bignose1007+bugzilla@gmail.com", "id": 12898008, "time": "2017-12-05T10:20:06Z"}, {"text": "Created attachment 8934465\nP2: add a new texture source type \"DirectMapTextureSource\".\n\nThe DirectMapTextureSource could let the compositor to read the buffer directly.\nThat could get rid of some memory copy operations during texture uploading.\n\nMozReview-Commit-ID: CHhoR96P7VG", "author": "bignose1007+bugzilla@gmail.com", "id": 12898009, "time": "2017-12-05T10:20:14Z"}, {"text": "Created attachment 8934466\nP3: pass the texture direct mapping capability from CompositorOGL to KnowsCompositor.\n\nThe client side can't get the GL context in CompositorOGL. So, it can't know\nthe texture direct mapping capability directly. This patch adds the texture\ndirect mapping info in TextureFactoryIdentifier. Then, the client side could\nget the info form the TextureFactoryIdentifier.\n\nMozReview-Commit-ID: KEazDVg0p9Y", "author": "bignose1007+bugzilla@gmail.com", "id": 12898011, "time": "2017-12-05T10:20:24Z"}, {"text": "Created attachment 8934467\nP4: pass the texture direct mapping info to all texture creating functions.\n\nMozReview-Commit-ID: He7UNvBCa8z", "author": "bignose1007+bugzilla@gmail.com", "id": 12898012, "time": "2017-12-05T10:20:33Z"}, {"text": "Created attachment 8934468\nP5: implement CreateDataTextureSourceAroundYCbCr() and CreateDataTextureSourceAround() for CompositorOGL.\n\nThis patch will use DirectMapTextureSource to wrap the DataSourceSurface data for gpu access.\nThat could improve the texture uploading performance.\n\nMozReview-Commit-ID: CGPFcCsR1RY", "author": "bignose1007+bugzilla@gmail.com", "id": 12898013, "time": "2017-12-05T10:20:42Z"}, {"text": "Created attachment 8934469\nP6: handle the texture uploading and readLock related things for direct mapping texture source.\n\nMozReview-Commit-ID: BC065h1Ac6k", "author": "bignose1007+bugzilla@gmail.com", "id": 12898015, "time": "2017-12-05T10:20:52Z"}, {"text": "Created attachment 8934470\nP7: don't recycle the texture source if it's direct mapping.\n\nThere is no benefit to use recycle the old one. That will have an additional\nmemory copy from the new texture host to the old texture source. We should\njust wrap the new texture host to a direct mapping texture source to get\nbetter texture uploading performance.\n\nMozReview-Commit-ID: 9ONQAhvKmuh", "author": "bignose1007+bugzilla@gmail.com", "id": 12898016, "time": "2017-12-05T10:21:06Z"}, {"text": "Wait for the reftest and talos's result.", "author": "bignose1007+bugzilla@gmail.com", "id": 12898032, "time": "2017-12-05T10:26:47Z"}, {"text": "There are a lot of tests failed. Wait for the updated try.", "author": "bignose1007+bugzilla@gmail.com", "id": 12901219, "time": "2017-12-06T08:47:32Z"}, {"text": "The talos result has a lot of regressions. I'm checking the profile data.\nhttps://treeherder.mozilla.org/perf.html#/compare?originalProject=mozilla-central&newProject=try&newRevision=0ebbaef03c6ee06f350afa9af012087d6211a74f&framework=1&filter=osx&selectedTimeRange=172800", "author": "bignose1007+bugzilla@gmail.com", "id": 12903792, "time": "2017-12-07T01:05:40Z"}, {"text": "The performance regression comes from the TileClient buffer allocation. It's addressed in comment 24 and comment 25. In my patch, TileClient will allocate a new buffer when the frontbuffer is still read-locked. The buffer allocation costs a lot. But I can see the client_storage improves a lot for texImage2D() calls in profiler. I will try to add a waiting code as comment 24 and 25 or try to have triple buffers for TileClient.", "author": "bignose1007+bugzilla@gmail.com", "id": 12904581, "time": "2017-12-07T09:51:53Z"}, {"text": "Here are the comparison between the original texture uploading path and the client-storage.\n\nTest with the full-screen video from https://www.csfd.cz/film/402192-zmensovani/videa/\n\na) The original path:\nhttps://perfht.ml/2mL3nwO\n\nb) client-storage\nhttps://perfht.ml/2mLWlrO\n\nThis version use client-storage for texture uploading. And it also creates a glSync object after the teximage2d/texSubImage2d call. Then, we will wait the glSync object at the  end of next composition. I don't have a good way to make the client side waiting for the readlock. So, I just use a simple spinlook at client side. We can see the waiting time in profiler if the compositor doesn't handle the glSync object. We could adjust the glSync waiting position to another position.", "author": "bignose1007+bugzilla@gmail.com", "id": 12975002, "time": "2018-01-17T01:44:58Z"}, {"text": "The original idea for client-storage is that:\n\n1) before a tiled layer painting, send a sync message to parent\n2) parent side starts to wait glsync object. Then, go back to child side.\n3) start to paint.\n\nThis model will have problem if there are a lot of painting layers. If we try to reduce the message number, we should have a preprocessing step to find all tiled painting layer. And send a message to wait all sync object for these layers. And If the parent side is busy, it can't handle the message soon. Then, the child side could spend more time for waiting.\n\nThat's why I don't create a message to trigger the glsync object waiting.", "author": "bignose1007+bugzilla@gmail.com", "id": 12975006, "time": "2018-01-17T01:53:05Z"}, {"text": "Quick update on where this is right now, to any interested parties:\n\nI've set up the IPC on the mach connection we use for shared memory (per comment 26). I went through a bunch of iterations on this, because I was trying to sort out a way to simply sync on a transaction ID. Transaction IDs didn't work out - as far as I can tell this is because we can reuse tiles across many transactions, meaning we might free up some tiles with a transaction but leave the rest alive. I ended up resorting to tracking a set of texture serial IDs per process, and sending an array of required texture IDs up to the parent process when are going to need them. This waits on a condition variable until items are removed from the set, at which point it checks again.\n\nIn any case, this does seem to perform rather well, and makes scrolling on sites like gsmarena.com (from Bug 1457413) very smooth. However, it does regress some of the motionmark tests in talos. We seem to be trading memcpy time in the compositor for allocation time in the content process due to the double buffering (?).\n\nAdditionally, and more importantly, I'm running into intermittent crashes on talos from timeouts waiting on texture serials to free up. My assumption is that if we're waiting on a texture serial to get the back buffer, then we've already sent up the front buffer, meaning the back buffer should stop being used within a matter of time, but that doesn't seem to be the case. Are there cases where both the front buffer and the back buffer should be locked and won't unlock until we allocate a new back buffer and send it up? It could be a bug in my code, but I just wanted to make sure that assumption was correct. In the mean time I'm just sending up talos runs with printf's scattered everywhere trying to understand better where this is coming from.\n\nFeel free to call out anything in the above that seems off.", "author": "dothayer@mozilla.com", "id": 13295354, "time": "2018-05-21T23:20:31Z"}, {"text": "Resolved the crashes, but still seeing the motionmark regressions. Not sure what to do about them. Going to sleep on it.", "author": "dothayer@mozilla.com", "id": 13295740, "time": "2018-05-22T06:35:16Z"}, {"text": "(In reply to Doug Thayer [:dthayer] (PTO on May 17) from comment #62)\n> Resolved the crashes, but still seeing the motionmark regressions. Not sure\n> what to do about them. Going to sleep on it.\n\nWe have existing bugs open where we're really slow due to allocating (and memset(0)ing) tiles.\n\nThe solution to both problems might be to investigate the tile pool size/allocation strategy and see if we can do better.", "author": "matt.woodrow@gmail.com", "id": 13295753, "time": "2018-05-22T06:41:37Z"}, {"text": "(In reply to Matt Woodrow (:mattwoodrow) from comment #63)\n> We have existing bugs open where we're really slow due to allocating (and\n> memset(0)ing) tiles.\n> \n> The solution to both problems might be to investigate the tile pool\n> size/allocation strategy and see if we can do better.\n\nYeah, it seemed like a problem that I was just exacerbating with my changes. From my profiling, it seems the tile pool isn't in the hot path here, since we end up using ClientSingleTiledLayerBuffer for most of the heavy lifting in these tests. I'm not sure what it would take to keep a pool for the ClientSingleTiledLayerBuffer, since its tiles are all different sizes. Maybe we could benefit from using a set of predefined tile sizes and finding the smallest predefined size that fits our requested size, assuming our requested size isn't something like 5x1000.\n\nIn either case I don't know what I can do for this within the scope of this bug, so I'm not sure how to go forward here.", "author": "dothayer@mozilla.com", "id": 13296959, "time": "2018-05-22T15:35:57Z"}, {"text": "Created attachment 8979705\nBug 1265824 - remove the unsed member in GLTextureSource.\n\nThe \"mExternallyOwned\" is used for gralloc buffer. We don't use the gralloc buffer now.\n\nReview commit: https://reviewboard.mozilla.org/r/245854/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/245854/", "author": "dothayer@mozilla.com", "id": 13297619, "time": "2018-05-22T19:26:46Z"}, {"text": "Created attachment 8979706\nBug 1265824 - add a new texture source type \"DirectMapTextureSource\".\n\nThe DirectMapTextureSource could let the compositor to read the buffer directly.\nThat could get rid of some memory copy operations during texture uploading.\n\nReview commit: https://reviewboard.mozilla.org/r/245856/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/245856/", "author": "dothayer@mozilla.com", "id": 13297620, "time": "2018-05-22T19:26:46Z"}, {"text": "Created attachment 8979707\nBug 1265824 - pass the texture direct mapping capability from CompositorOGL to KnowsCompositor.\n\nThe client side can't get the GL context in CompositorOGL. So, it can't know\nthe texture direct mapping capability directly. This patch adds the texture\ndirect mapping info in TextureFactoryIdentifier. Then, the client side could\nget the info form the TextureFactoryIdentifier.\n\nReview commit: https://reviewboard.mozilla.org/r/245858/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/245858/", "author": "dothayer@mozilla.com", "id": 13297621, "time": "2018-05-22T19:26:46Z"}, {"text": "Created attachment 8979708\nBug 1265824 - pass the texture direct mapping info to all texture creating functions.\n\nReview commit: https://reviewboard.mozilla.org/r/245860/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/245860/", "author": "dothayer@mozilla.com", "id": 13297622, "time": "2018-05-22T19:26:46Z"}, {"text": "Created attachment 8979709\nBug 1265824 - implement CreateDataTextureSourceAroundYCbCr() and CreateDataTextureSourceAround() for CompositorOGL.\n\nThis patch will use DirectMapTextureSource to wrap the DataSourceSurface data for gpu access.\nThat could improve the texture uploading performance.\n\nReview commit: https://reviewboard.mozilla.org/r/245862/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/245862/", "author": "dothayer@mozilla.com", "id": 13297623, "time": "2018-05-22T19:26:46Z"}, {"text": "Created attachment 8979710\nBug 1265824 - handle the texture uploading and readLock related things for direct mapping texture source.\n\nReview commit: https://reviewboard.mozilla.org/r/245864/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/245864/", "author": "dothayer@mozilla.com", "id": 13297624, "time": "2018-05-22T19:26:46Z"}, {"text": "Created attachment 8979711\nBug 1265824 - don't recycle the texture source if it's direct mapping.\n\nThere is no benefit to use recycle the old one. That will have an additional\nmemory copy from the new texture host to the old texture source. We should\njust wrap the new texture host to a direct mapping texture source to get\nbetter texture uploading performance.\n\nReview commit: https://reviewboard.mozilla.org/r/245866/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/245866/", "author": "dothayer@mozilla.com", "id": 13297625, "time": "2018-05-22T19:26:46Z"}, {"text": "Created attachment 8979712\nBug 1265824 - Wait on texture handles with IPC\n\nReview commit: https://reviewboard.mozilla.org/r/245868/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/245868/", "author": "dothayer@mozilla.com", "id": 13297626, "time": "2018-05-22T19:26:46Z"}, {"text": "The patches still need some cleanup, but I'm throwing them up here in the mean time in case anyone wants to pull them down and take a look.", "author": "dothayer@mozilla.com", "id": 13297630, "time": "2018-05-22T19:27:49Z"}, {"text": "Animated gifs on the new reddit (not on the old reddit) are busted with this. If I switch the textures from GL_TEXTURE_RECTANGLE to GL_TEXTURE_2D it avoids the problem, but that doesn't allow us to avoid the driver copy that we avoid with glTextureRangeAPPLE. Trying to figure out why we're running into this, and what's special about the new reddit's animated gifs.", "author": "dothayer@mozilla.com", "id": 13300212, "time": "2018-05-23T18:08:56Z"}, {"text": "Created attachment 8980356\nBug 1265824 - Avoid extra copies in driver\n\nUsing GL_TEXTURE_RECTANGLE along with glTextureRangeAPPLE ensures\nwe avoid a driver-side copy of the buffer. Additionally, using\nGL_STORAGE_SHARED_APPLE avoids the copy into VRAM. The latter\ntechnique is potentially unnecessary - still experimenting.\n\nReview commit: https://reviewboard.mozilla.org/r/246526/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/246526/", "author": "dothayer@mozilla.com", "id": 13354854, "time": "2018-05-24T16:53:21Z"}, {"text": "Created attachment 8980357\nBug 1265824 - Use glFinishObjectAPPLE instead of glClientWaitSync\n\nThis is necessary (?) if we avoid the copy into VRAM via\nGL_STORAGE_SHARED_APPLE hint.\n\nReview commit: https://reviewboard.mozilla.org/r/246528/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/246528/", "author": "dothayer@mozilla.com", "id": 13354855, "time": "2018-05-24T16:53:21Z"}, {"text": "Comment on attachment 8979712\nBug 1265824 - Wait on texture handles with IPC\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/245868/diff/1-2/", "author": "dothayer@mozilla.com", "id": 13354856, "time": "2018-05-24T16:53:21Z"}, {"text": "Hey Jeff - do you have any thoughts on either of these two things?\n\n- What can we do to mitigate the cost of the extra allocations we're now doing? I'm specifically interested in the talos regressions of the motionmark tests, which are the only regression I'm seeing on try. It seems like we don't need to be allocating so much - we don't use a texture pool because we hit the ClientSingleTiledLayerBuffer, since the tests tend to just be large numbers of tiny layers. Could we explore using a pool or set of pools for ClientSingleTiledLayerBuffer? I don't know enough context around this and what exploration has already been done here.\n\n- Can you think of any reasons why using GL_TEXTURE_RECTANGLE_ARB in the DirectMapTextureSource (this looks roughly like the sketch you posted a while ago) would interfere with animated gifs sometimes? It seems to me to be interfering with MacIOSurfaceTextureHost planes, but I'm not sure. Those also use GL_TEXTURE_RECTANGLE_ARB, but I don't see why that would result in any conflict. See comment 74.", "author": "dothayer@mozilla.com", "id": 13355268, "time": "2018-05-24T17:01:40Z"}, {"text": "So the animated gif thing is actually related to videos which perhaps makes some sense. We should try to figure out more about what scenario's cause it.\n\nI'm don't have a concrete suggestion for the motionmark problem yet. I'm going to think about it more.", "author": "jmuizelaar@mozilla.com", "id": 13360917, "time": "2018-05-24T18:53:56Z"}, {"text": "Can you post before and after profiles of this patch on the motionmark bouncing clipped rectangle test?", "author": "jmuizelaar@mozilla.com", "id": 13360999, "time": "2018-05-24T18:55:35Z"}, {"text": "Comment on attachment 8979712\nBug 1265824 - Wait on texture handles with IPC\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/245868/diff/2-3/", "author": "dothayer@mozilla.com", "id": 13361033, "time": "2018-05-24T18:56:15Z"}, {"text": "My assertion that it was due to allocations appears to be off? Maybe I accidentally fixed a bug since I last profiled that test :/\n\nAnyway, here they are:\n\nbefore: https://perfht.ml/2IMPdZu\nafter: https://perfht.ml/2xdet5G\n\nNothing jumps out at me at the outset - the profiles look very similar to me. But maybe you can pick out something I can't. Do you happen to know how the scores are calculated for this test?", "author": "dothayer@mozilla.com", "id": 13362102, "time": "2018-05-24T20:41:24Z"}, {"text": "On lower DPI it's a much different picture, for some reason:\n\nbefore: https://perfht.ml/2IMPdZu\nafter: https://perfht.ml/2xdet5G", "author": "dothayer@mozilla.com", "id": 13362203, "time": "2018-05-24T21:13:56Z"}, {"text": "wait - wrong profiles (ignore the above comment)\n\nbefore: https://perfht.ml/2IJqp07\nafter: https://perfht.ml/2xbarKT", "author": "dothayer@mozilla.com", "id": 13362209, "time": "2018-05-24T21:16:00Z"}, {"text": "I had a play with the latest Try \n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&author=dothayer@mozilla.com&selectedJob=180086432\n\nand it looks great on gsmarena.com. It also seems to fix some of my high GPU power consumption complaints on other pages.\n\nBut I sometimes see large black (unrendered?) areas. \n\nI just got it now, I switched to the (already loaded) gsmarena.com tab and it appeared completely black with just the toolbar. I cmd-R 'd to reload and it refused to render, it just stayed black. Sometimes it shows a small broken thumbnail of the whole page at the center of the blackness. Scrolling or mouseovering shows the status bar hints bottom left but nothing else.\n\nThis profile is me scrolling and reloading the blank gsmarena.com tab\n\nhttps://perfht.ml/2GNUjyx\n\n\nThis is on a MacBookPro11,1 @ 1440x900 resolution. Mostly default settings but gfx.compositor.glcontext.opaque TRUE.\n\nhope that's useful to you, keep up the good work.", "author": "mark.paxman99@gmail.com", "id": 13363360, "time": "2018-05-25T09:57:17Z"}, {"text": "I moved the glFinishObjectAPPLE calls to before composition rather than after, and my paint times for the motionmark tests went down dramatically, so I did another talos run:\n\nhttps://treeherder.mozilla.org/perf.html#/compare?originalProject=try&originalRevision=7867306bde5158bee26b76f10b3a771d69d60932&newProject=try&newRevision=5ad1e5e4b865f79e3b1c147b0d71d928f7aba159&framework=1\n\nThis is interesting because we see more green on it than before, which is good. But the red has also increased. Notably damp seems to have regressed, as well as displaylist_mutate.html, and motionmark is still having some trouble, though it seems it may be less pronounced.\n\nI couldn't reproduce the regression on displaylist_mutate.html (I did set the ASAP mode prefs), but here's the profiles anyway:\n\ndisplaylist_mutate.html (before): https://perfht.ml/2ILghbm\ndisplaylist_mutate.html (after): https://perfht.ml/2LuE7Wx\n\nI could reproduce the motionmark regressions, and I'm seeing longer than expected composites in the after profile, but nothing jumps out as me as a smoking gun:\n\nCSS_bouncing_blend_circles (before) https://perfht.ml/2xdf6vT\nCSS_bouncing_blend_circles (after) https://perfht.ml/2xkx53s\n\nI don't quite know the best way of getting detailed easy to reproduce profiles for the damp tests. Thoughts / recommendations? Just talos-test with --geckoProfile? That didn't yield anything useful for the motionmark tests, but maybe I'm getting something wrong?\n\nIn all cases I would have expected moving glFinishObjectAPPLE before composition to make glFinishObjectAPPLE show up in the profiles, which it doesn't. I'm also surprised that the GPU has finished with these textures at the beginning of the composition in which they are no longer referenced. I would have expected a bit more latency than that? But maybe my mental model of all of this is off.", "author": "dothayer@mozilla.com", "id": 13365624, "time": "2018-05-26T01:47:26Z"}, {"text": "Eh - looking at the graphs I'm thinking damp and displaylist_mutate might be due to chance on the baseline. motionmark is still not looking great though. Something like a 3-5% regression? Still not sure why.", "author": "dothayer@mozilla.com", "id": 13370309, "time": "2018-05-29T06:44:08Z"}, {"text": "Here's some profiles of the motionmark_animometer Design test, before and after:\n\nmotionmark_animometer Design (before) https://perfht.ml/2J3c3YA\nmotionmark_animometer Design (after) https://perfht.ml/2xs2SQ6\n\ntldr; the before shows a ton of time spent in the compositor in memmoves copying the textures all the way down through the driver. The second profile gets rid of this, but trades it for time spent in glFinishObject and time spent in the content process waiting on the IPC response which happens once the glFinishObject completes.\n\nMarkus, do you have any ideas for how to tackle this problem? Locally my throughput for the test is higher in my version than in the baseline, but we spend more time that I would like to blocking in the content process. I can't think of a way to solve this within the scope of this bug, but maybe I'm missing something. It seems like the GPU just has a lot of work we've given it, and so if we block on that work then we're going to spend a lot of time blocking.", "author": "dothayer@mozilla.com", "id": 13375307, "time": "2018-05-30T18:21:48Z"}, {"text": "Just responding quickly, I'd recommend trying to produce a more descriptive timeline of what things are being waited on when.\n\nWhen I was initially figuring out how to best work with client storage I used the logviz.html that I'll attach. It's super simple and you'll probably need to modify to work best, but it basically just takes the first int of a line and interprets that as a timestamp and draws the text of the line to a canvas.\n\nTry it out with the following content in the text box to get a feeling:\n\n4 First\n90000 Second\n300000 Third", "author": "jmuizelaar@mozilla.com", "id": 13376387, "time": "2018-05-31T02:51:20Z"}, {"text": "Created attachment 8982099\nlogviz.html", "author": "jmuizelaar@mozilla.com", "id": 13376389, "time": "2018-05-31T02:51:50Z"}, {"text": "Looking over these profiles, I don't think I'm going to be much help, I'm afraid. :(\n\nI will say, however, that these patches seem to address bug 1453080 for me, which I'm very excited about.", "author": "mconley@mozilla.com", "id": 13378713, "time": "2018-05-31T20:46:47Z"}, {"text": "Created attachment 8982578\nlogviz.html\n\nCreated a visualization of a log of textures locking/unlocking/etc. per Jeff's recommendation. This log is captured from a particular motionmark animometer test[1].\n\nTo explain what's going on with all the colors and layout: the two columns on the right are the logs of the parent and content process. They have colored bars to the left indicating when certain events begin and end, roughly mirroring perf.html's view. Grey is a RefreshDriverTick, red is a LayerTransaction, green is a Rasterize, blue is SyncTextures (waiting on texture IDs to be notified as unlocked by the parent process), and yellow is a glFinishObject call. Regarding the text on the left, some of the log entries have numbers after them - these numbers represent the affected texture IDs.\n\nThe view on the right is a set of per-texture timelines. Each column corresponds to a particular TextureHost/Client (with the ID of that texture at the top). The grey bar is the time that it's locked out by the parent - beginning and ending in TiledLayerBufferComposite::UseTiles. The blue is us waiting in SyncTextures in the content process for those textures, and the yellow is the glFinishObject call for that texture.\n\nEverything looked more or less as I expected it to in the 1x timescale view. However, if you look at the 100x view you'll see large periods of time with certain textures being locked, in a way that it actually creates a clear visual pattern. I suspect that this is just due to these textures finding themselves stuck behind the textures we're glFinishObject'ing, and the ordering just makes that pattern look the way it does. It's still interesting to think about.\n\nIf anyone has any thoughts about what this shows or what else I should include in the log, let me know.\n\n[1]: https://browserbench.org/MotionMark/developer.html?test-interval=15&display=minimal&tiles=big&controller=fixed&frame-rate=30&kalman-process-error=1&kalman-measurement-error=4&time-measurement=performance&suite-name=Animometer&test-name=Design&complexity=17", "author": "dothayer@mozilla.com", "id": 13380749, "time": "2018-06-01T16:42:32Z"}, {"text": "The log looks really nice. Can you include uses of the textures (both glBindTexture and glTexSubImage) and calls to glSwapBuffers in the log?", "author": "jmuizelaar@mozilla.com", "id": 13381868, "time": "2018-06-02T01:35:32Z"}, {"text": "Created attachment 8983537\nlogviz.html\n\nAdded info for glSwapBuffers / glBindTexture / glTex(Sub)Image2D. The orange lines all the way across are glSwapBuffers calls, the blue per-texture lines are glBindTexture calls, and the green lines are glTexSubImage2D calls.", "author": "dothayer@mozilla.com", "id": 13388861, "time": "2018-06-05T18:25:54Z"}, {"text": "My guess is that the finishing might be getting blocked by texture upload because we're interleaving finishObject and texSubImage2d. Can we make sure we do all of the finishing before starting any new uploads?", "author": "jmuizelaar@mozilla.com", "id": 13389121, "time": "2018-06-05T20:25:51Z"}, {"text": "Created attachment 8983574\nlogviz.html\n\nIt's a similar story with the glFinishObject calls all preceding the glTexSubImage2D calls. Attaching a log if you want to take a look for yourself - in short, the bars all look the same, but the glTexSubImage2D lines are just moved to the bottom of the cycle.", "author": "dothayer@mozilla.com", "id": 13389324, "time": "2018-06-05T21:35:12Z"}, {"text": "At the risk of sounding ignorant, it feels like the big problem here is that we're blitting so many overlapping buffers on the GPU? I don't know too much about the background behind this, but it doesn't look like that's what Chrome or Safari are doing - it looks like they're squashing the layers in this test before compositing?", "author": "dothayer@mozilla.com", "id": 13389414, "time": "2018-06-05T21:59:19Z"}, {"text": "(In reply to Doug Thayer [:dthayer] (PTO on June 4) from comment #97)\n> At the risk of sounding ignorant, it feels like the big problem here is that\n> we're blitting so many overlapping buffers on the GPU? I don't know too much\n> about the background behind this, but it doesn't look like that's what\n> Chrome or Safari are doing - it looks like they're squashing the layers in\n> this test before compositing?\n\nIt is possible that we're just running into the limits of the GPU. It would be nice if we could confirm this somehow though.\n\nYes, I Safari at least is not using separate layers for all the items.", "author": "jmuizelaar@mozilla.com", "id": 13389690, "time": "2018-06-05T23:34:21Z"}, {"text": "(In reply to Jeff Muizelaar [:jrmuizel] on parental leave until at least June 25 from comment #98)\n> It is possible that we're just running into the limits of the GPU. It would\n> be nice if we could confirm this somehow though.\n\nI'm trying to sort out a way of confirming it. The best I can come up with is that if we remove the glFinishObject calls, the framerate score remains the same. I'm attaching two more visualizations of logs with and without glFinishObject to demonstrate the similarities.\n\nThe time spent in glSwapBuffers seems to be what's really gating our score here (let me know if that seems right). The key problem with the approach though is that when the GPU is our bottleneck, we're not free with this approach to, say, run scripts, since we're blocking on this in the main thread of the content process, no?", "author": "dothayer@mozilla.com", "id": 13391870, "time": "2018-06-06T18:55:12Z"}, {"text": "Created attachment 8983900\nwithoutFinishObject.html", "author": "dothayer@mozilla.com", "id": 13391871, "time": "2018-06-06T18:55:56Z"}, {"text": "Created attachment 8983901\nwithFinishObject.html", "author": "dothayer@mozilla.com", "id": 13391873, "time": "2018-06-06T18:56:59Z"}, {"text": "If I force it all into one layer by always returning false for ActiveLayerTracker::IsStyleAnimated, our performance on the test goes up dramatically. Matt, do you have an idea of how hard it would be / what difficulties we might run into trying to implement a heuristic that would avoid the layer explosion for cases with many overlapping active layers?", "author": "dothayer@mozilla.com", "id": 13392417, "time": "2018-06-06T23:16:03Z"}, {"text": "(In reply to Doug Thayer [:dthayer] (PTO on June 4) from comment #102)\n> If I force it all into one layer by always returning false for\n> ActiveLayerTracker::IsStyleAnimated, our performance on the test goes up\n> dramatically. Matt, do you have an idea of how hard it would be / what\n> difficulties we might run into trying to implement a heuristic that would\n> avoid the layer explosion for cases with many overlapping active layers?\n\nSo it sounds like this testcase has a bunch of stacked layers that it manipulates the transform on to get the 3d effect. It also modifies the colour of each layer, so we have to repaint everything, and layerization isn't helping much.\n\nThe transform changes come from JS, so we don't get to have async animations either.\n\nIt sounds like IsStyleAnimated is returning true in the hope that we can just push the layers around without repainting, but the colour change cancels that out. \n\nI think we should be able to detect that, either by counting style changes to other properties, or checking if the frame is invalidated?\n\nJamie is the go-to guy for layerization optimizations at the moment, so ni? him too.", "author": "matt.woodrow@gmail.com", "id": 13392463, "time": "2018-06-06T23:50:15Z"}, {"text": "Aha, so it sounds like Firefox does do some work on the GPU - some kind of layer composition. I didn't know that. That might explain some of what I drone on about (and on, and on) about FF sometimes causing very high power consumption in my iGPU which then power starves my CPU. Perhaps it's this layering that you are talking about in Comment 102 etc.\n\nI think that for me the Motionmark test from Comment 92 is skewed because not only is the GPU working hard, but it is power starving the CPU. Even at default resolution my iGPU draws >15 W which power starves my CPU to ~8 W rather than the 12-15 W it would like. The CPU might be only at half \"normal\" performance. Firefox is using 200% CPU, but of a heavily throttled CPU.\n\nSo, depending on what kind of Mac you are using, your Motionmark regression might just be because you are comparing [heavily power starved CPU] with [heavily power starved CPU] which might not be particularly meaningful.\n\nAnd of course at higher scaled resolutions the MacOS compositor hits the iGPU even harder.\n\nI think this might tie in with the \"CSS animation bug\" I've been waffling on about - high GPU load during some animations. \n\nPerhaps bug 1459875 is related, here I see very high GPU load and so CPU power starving & throttling during Reddit loading and scrolling. Perhaps a similar layer issue to this bug?????\n\nSo perhaps this idea of preventing the \"layer explosion\" might help in some real circumstances not just bench tests. It could save GPU power (good for the battery and fans) but it might also prevent CPU power starving and so speed everything up????? Maybe?\n\nBut, as ever, I really don't know what I'm talking about :) Thanks for your time.", "author": "mark.paxman99@gmail.com", "id": 13393571, "time": "2018-06-07T13:32:43Z"}, {"text": "The remaining talos regressions after Bug 1467619 and Bug 1468401 seem to all be things like rasterflood_gradient which run in ASAP mode, causing us to check if textures are locked a tiny bit too early (around .15 to .3 ms locally). This incurs a small hit to the overall test score (I'm seeing about 3%). I'm not sure what to do about this. We're not actually waiting on the GPU - we're just waiting on the compositor to wake up for that frame and check the textures to unlock them. Short of scheduling the compositor to check this early, I don't know what options are open here.\n\nStill investigating, but any thoughts/opinions are welcome.", "author": "dothayer@mozilla.com", "id": 13406009, "time": "2018-06-14T22:16:41Z"}, {"text": "Hmm, I think I just need to send an async message via our SharedMemory backchannel up to the compositor to recheck its textures before flushing async paints.", "author": "dothayer@mozilla.com", "id": 13407306, "time": "2018-06-15T18:59:32Z"}], "id": 1265824, "priority": "P2", "cc": ["albert@scheiner.cc", "b56girard@gmail.com", "bas@basschouten.com", "bignose1007+bugzilla@gmail.com", "bugmail@mozilla.staktrace.com", "bugzilla@flaki.hu", "bvandyk@mozilla.com", "bwong@mozilla.com", "camden.narzt@hotmail.com", "chrislord.net@gmail.com", "dietrich@mozilla.com", "dmose@mozilla.org", "dothayer@mozilla.com", "ehsan@mozilla.com", "emilio@crisal.io", "eoger@fastmail.com", "gandalf@aviary.pl", "hikezoe@mozilla.com", "howareyou322@gmail.com", "hpradhan@gmail.com", "hujq@live.com", "jgong@mozilla.com", "jgriffiths@mozilla.com", "jnicol@mozilla.com", "josh@joshmatthews.net", "jryans@gmail.com", "kinetik@flim.org", "mark.paxman99@gmail.com", "matt.woodrow@gmail.com", "mconley@mozilla.com", "mdeboer@mozilla.com", "michaelnussbaum08@gmail.com", "milaninbugzilla@gmail.com", "mozilla-bugs@sourcefoundry.co.uk", "mozilla@metasieben.org", "mstange@themasta.com", "nfroyd@mozilla.com", "nical.bugzilla@gmail.com", "nihsanullah@invalid.bugs", "nissan4321@gmail.com", "reuben.bmo@gmail.com", "strayer@olle-orks.org", "timbugzilla@gmail.com", "tnikkel@gmail.com", "Virtual@teknik.io", "yoasif@gmail.com"], "cf_crash_signature": "", "version": "unspecified", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1261166", "https://bugzilla.mozilla.org/show_bug.cgi?id=1279131", "https://bugzilla.mozilla.org/show_bug.cgi?id=1403355", "https://bugzilla.mozilla.org/show_bug.cgi?id=629519", "https://bugzilla.mozilla.org/show_bug.cgi?id=1005441"], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1282797, 1342209, 1343558, 1347559, 1353137, 1383292, 1404047, 1427325, 1457413, 1459875, 1460264, 1461666, 1424325], "qa_contact": "", "creation_time": "2016-04-19T18:12:21Z", "cf_status_firefox_esr52": "---", "component": "Graphics: Layers", "assigned_to_detail": {"email": "dothayer@mozilla.com", "id": 582499, "name": "dothayer@mozilla.com", "real_name": "Doug Thayer [:dthayer] (PTO on June 4)"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "jmuizelaar@mozilla.com", "id": 309398, "name": "jmuizelaar@mozilla.com", "real_name": "Jeff Muizelaar [:jrmuizel] on parental leave until at least June 25"}, "whiteboard": "[gfx-noted][fxperf:p1][qf:p3:f64]", "mentors": [], "summary": "Add a ClientStorageTextureSource", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [{"requestee": "mstange@themasta.com", "status": "?", "name": "needinfo", "modification_date": "2018-05-30T18:21:48Z", "type_id": 800, "creation_date": "2018-05-30T18:21:48Z", "id": 1763731, "setter": "dothayer@mozilla.com"}, {"requestee": "jnicol@mozilla.com", "status": "?", "name": "needinfo", "modification_date": "2018-06-06T23:50:15Z", "type_id": 800, "creation_date": "2018-06-06T23:50:15Z", "id": 1766853, "setter": "matt.woodrow@gmail.com"}], "last_change_time": "2018-06-15T18:59:32Z", "assigned_to": "dothayer@mozilla.com", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "mstange@themasta.com"}], "who": "jmuizelaar@mozilla.com", "when": "2016-04-19T18:12:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bgirard@mozilla.com"}], "who": "jmuizelaar@mozilla.com", "when": "2016-04-19T18:13:40Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1261166"}], "who": "jmuizelaar@mozilla.com", "when": "2016-04-19T18:21:49Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "matt.woodrow@gmail.com"}], "who": "mstange@themasta.com", "when": "2016-04-19T18:47:36Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "chrislord.net@gmail.com"}], "who": "chrislord.net@gmail.com", "when": "2016-04-20T08:57:29Z"}, {"changes": [{"removed": "", "field_name": "whiteboard", "added": "[gfx-noted]"}], "who": "tnikkel@gmail.com", "when": "2016-04-20T20:20:42Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugmail.mozilla@staktrace.com"}], "who": "bugmail@mozilla.staktrace.com", "when": "2016-05-04T18:57:46Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1279131"}], "who": "sotaro.ikeda.g@gmail.com", "when": "2016-06-09T03:35:00Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "howareyou322@gmail.com"}], "who": "howareyou322@gmail.com", "when": "2016-06-14T11:47:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nical.bugzilla@gmail.com"}], "who": "nical.bugzilla@gmail.com", "when": "2016-06-14T16:20:53Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1282797"}], "who": "bugmail@mozilla.staktrace.com", "when": "2016-06-28T14:39:53Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(nical.bugzilla@gmail.com)"}], "who": "jmuizelaar@mozilla.com", "when": "2016-07-28T21:26:45Z"}, {"changes": [{"removed": "needinfo?(nical.bugzilla@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "nical.bugzilla@gmail.com", "when": "2016-07-29T09:09:23Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(nical.bugzilla@gmail.com)"}], "who": "jmuizelaar@mozilla.com", "when": "2016-07-31T01:07:38Z"}, {"changes": [{"removed": "needinfo?(nical.bugzilla@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "nical.bugzilla@gmail.com", "when": "2016-07-31T16:07:27Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(nical.bugzilla@gmail.com)"}], "who": "jmuizelaar@mozilla.com", "when": "2016-07-31T20:58:39Z"}, {"changes": [{"removed": "needinfo?(nical.bugzilla@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "nical.bugzilla@gmail.com", "when": "2016-08-01T09:42:04Z"}, {"changes": [{"removed": "Add a ClientStorage TextureClient/TextureHost pair", "field_name": "summary", "added": "Add a ClientStorageTextureSource"}], "who": "jmuizelaar@mozilla.com", "when": "2016-10-07T20:51:08Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8798180, "added": "1"}], "who": "jmuizelaar@mozilla.com", "when": "2016-10-07T20:54:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2016-10-26T16:59:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}], "who": "nfroyd@mozilla.com", "when": "2017-01-20T15:02:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gandalf@aviary.pl"}], "who": "gandalf@aviary.pl", "when": "2017-02-23T20:54:35Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "timbugzilla@gmail.com"}], "who": "timbugzilla@gmail.com", "when": "2017-02-24T10:51:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bruant.d@gmail.com"}], "who": "bruant.d@gmail.com", "when": "2017-02-25T15:46:27Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1342209"}], "who": "ehsan@mozilla.com", "when": "2017-02-27T17:20:53Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jgong@mozilla.com"}, {"removed": "[gfx-noted]", "field_name": "whiteboard", "added": "[gf:p1]"}], "who": "jgong@mozilla.com", "when": "2017-03-01T20:44:26Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1343558"}], "who": "ehsan@mozilla.com", "when": "2017-03-02T22:18:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ehsan@mozilla.com, nihsanullah@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(ehsan@mozilla.com)"}], "who": "nihsanullah@invalid.bugs", "when": "2017-03-03T18:28:37Z"}, {"changes": [{"removed": "[gf:p1]", "field_name": "whiteboard", "added": "[gf:p1][qf]"}], "who": "nihsanullah@invalid.bugs", "when": "2017-03-03T18:29:21Z"}, {"changes": [{"removed": "needinfo?(ehsan@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(jmuizelaar@mozilla.com)"}], "who": "ehsan@mozilla.com", "when": "2017-03-03T20:33:21Z"}, {"changes": [{"removed": "needinfo?(jmuizelaar@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jmuizelaar@mozilla.com", "when": "2017-03-03T22:10:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bas@basschouten.com"}, {"removed": "[gf:p1][qf]", "field_name": "whiteboard", "added": "[gfx-noted][qf:p1]"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(bas@basschouten.com)"}], "who": "ehsan@mozilla.com", "when": "2017-03-10T15:42:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "milan@mozilla.com"}, {"removed": "needinfo?(bas@basschouten.com)", "field_name": "flagtypes.name", "added": "needinfo?(milan@mozilla.com)"}], "who": "bas@basschouten.com", "when": "2017-03-10T15:48:40Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "tnikkel@gmail.com"}], "who": "tnikkel@gmail.com", "when": "2017-03-10T22:27:18Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1347559"}], "who": "ehsan@mozilla.com", "when": "2017-03-23T01:16:48Z"}, {"changes": [{"removed": "needinfo?(milan@mozilla.com)", "field_name": "flagtypes.name", "added": ""}, {"removed": "Unspecified", "field_name": "op_sys", "added": "Mac OS X"}], "who": "milaninbugzilla@gmail.com", "when": "2017-03-27T19:57:39Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(nihsanullah@mozilla.com)"}], "who": "milaninbugzilla@gmail.com", "when": "2017-03-27T19:57:55Z"}, {"changes": [{"removed": "needinfo?(nihsanullah@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "nihsanullah@invalid.bugs", "when": "2017-03-28T15:34:44Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8799032, "added": "1"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "jmuizelaar@mozilla.com"}], "who": "jmuizelaar@mozilla.com", "when": "2017-04-10T13:11:55Z"}, {"changes": [{"removed": "[gfx-noted][qf:p1]", "field_name": "whiteboard", "added": "[gfx-noted][qf]"}], "who": "milaninbugzilla@gmail.com", "when": "2017-04-11T09:14:22Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1355419"}], "who": "howareyou322@gmail.com", "when": "2017-04-11T09:17:53Z"}, {"changes": [{"removed": "1355419", "field_name": "blocks", "added": ""}], "who": "jmuizelaar@mozilla.com", "when": "2017-04-11T12:25:06Z"}, {"changes": [{"removed": "[gfx-noted][qf]", "field_name": "whiteboard", "added": "[gfx-noted][qf:p1]"}], "who": "nihsanullah@invalid.bugs", "when": "2017-04-11T20:51:50Z"}, {"changes": [{"removed": "jmuizelaar@mozilla.com", "field_name": "assigned_to", "added": "nobody@mozilla.org"}], "who": "milaninbugzilla@gmail.com", "when": "2017-04-11T22:03:19Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P3"}], "who": "milaninbugzilla@gmail.com", "when": "2017-04-13T04:09:59Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "milan@mozilla.com"}], "who": "milaninbugzilla@gmail.com", "when": "2017-04-26T15:36:30Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1353137"}], "who": "howareyou322@gmail.com", "when": "2017-05-02T06:46:48Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dietrich@mozilla.com"}], "who": "dietrich@mozilla.com", "when": "2017-05-29T05:53:20Z"}, {"changes": [{"removed": "[gfx-noted][qf:p1]", "field_name": "whiteboard", "added": "[gfx-noted][qf]"}], "who": "overholt@mozilla.com", "when": "2017-07-20T20:11:08Z"}, {"changes": [{"removed": "[gfx-noted][qf]", "field_name": "whiteboard", "added": "[gfx-noted][qf:p2]"}], "who": "nihsanullah@invalid.bugs", "when": "2017-07-24T22:40:02Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1404047"}], "who": "blakewu0205@gmail.com", "when": "2017-09-28T18:21:04Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "perf"}], "who": "bug-husbandry-bot@mozilla.bugs", "when": "2017-10-07T00:04:32Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "emilio@crisal.io"}], "who": "emilio@crisal.io", "when": "2017-10-10T01:41:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "yoasif@gmail.com"}], "who": "yoasif@gmail.com", "when": "2017-10-10T02:18:48Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1383292"}], "who": "milaninbugzilla@gmail.com", "when": "2017-10-11T12:31:39Z"}, {"changes": [{"removed": "P3", "field_name": "priority", "added": "P2"}], "who": "milaninbugzilla@gmail.com", "when": "2017-10-11T12:32:02Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1403355"}], "who": "milaninbugzilla@gmail.com", "when": "2017-10-11T12:34:05Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nissan4321@gmail.com"}], "who": "nissan4321@gmail.com", "when": "2017-10-13T10:52:33Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jan@ikenmeyer.eu"}], "who": "jan@ikenmeyer.eu", "when": "2017-10-18T19:16:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jgriffiths@mozilla.com"}], "who": "jgriffiths@mozilla.com", "when": "2017-10-18T19:19:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "strayer@olle-orks.org"}], "who": "strayer@olle-orks.org", "when": "2017-10-19T05:58:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Virtual@teknik.io"}], "who": "Virtual@teknik.io", "when": "2017-10-22T15:24:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mdeboer@mozilla.com"}], "who": "mdeboer@mozilla.com", "when": "2017-10-23T11:04:49Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "reuben.bmo@gmail.com"}], "who": "reuben.bmo@gmail.com", "when": "2017-11-13T21:46:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bwong@mozilla.com"}], "who": "bwong@mozilla.com", "when": "2017-11-15T17:26:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dmose@mozilla.org"}], "who": "dmose@mozilla.org", "when": "2017-11-15T17:31:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mozilla@metasieben.org"}], "who": "mozilla@metasieben.org", "when": "2017-11-17T02:16:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "hujq@live.com"}], "who": "hujq@live.com", "when": "2017-11-20T17:53:37Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "ASSIGNED"}, {"removed": "", "field_name": "cc", "added": "hshih@mozilla.com"}, {"removed": "milan@mozilla.com", "field_name": "assigned_to", "added": "hshih@mozilla.com"}], "who": "bignose1007+bugzilla@gmail.com", "when": "2017-11-21T11:06:58Z"}, {"changes": [{"removed": "[gfx-noted][qf:p2]", "field_name": "whiteboard", "added": "[gfx-noted][qf:p3]"}], "who": "nihsanullah@invalid.bugs", "when": "2017-11-21T17:11:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "hpradhan@gmail.com"}], "who": "hpradhan@gmail.com", "when": "2017-11-25T07:17:46Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mozilla-bugs@sourcefoundry.co.uk"}], "who": "mozilla-bugs@sourcefoundry.co.uk", "when": "2017-11-26T20:14:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "camden.narzt@hotmail.com"}], "who": "camden.narzt@hotmail.com", "when": "2017-11-27T05:35:41Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=629519, https://bugzilla.mozilla.org/show_bug.cgi?id=1005441"}], "who": "milaninbugzilla@gmail.com", "when": "2017-11-28T18:27:07Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(hshih@mozilla.com)"}], "who": "milaninbugzilla@gmail.com", "when": "2017-11-28T18:27:42Z"}, {"changes": [{"removed": "needinfo?(hshih@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "bignose1007+bugzilla@gmail.com", "when": "2017-11-29T10:08:49Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla@flaki.hu"}], "who": "bugzilla@flaki.hu", "when": "2017-12-10T06:11:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "eoger@fastmail.com"}], "who": "eoger@fastmail.com", "when": "2018-01-04T22:05:21Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1427325"}], "who": "ayumiqmazaky@gmail.com", "when": "2018-01-08T03:19:24Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1424325"}], "who": "erahm@mozilla.com", "when": "2018-01-24T20:16:29Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kinetik@flim.org"}], "who": "kinetik@flim.org", "when": "2018-03-22T12:26:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "valentin_bugzilla.mozilla.org_GIYDCNRQHEZDSCQ@neacsu.eu"}], "who": "valentin_bugzilla.mozilla.org_GIYDCNRQHEZDSCQ@neacsu.eu", "when": "2018-04-16T10:26:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dothayer@mozilla.com"}], "who": "dothayer@mozilla.com", "when": "2018-05-01T15:50:54Z"}, {"changes": [{"removed": "bignose1007+bugzilla@gmail.com", "field_name": "assigned_to", "added": "dothayer@mozilla.com"}, {"removed": "[gfx-noted][qf:p3]", "field_name": "whiteboard", "added": "[gfx-noted][qf:p3][fxperf:p1]"}], "who": "dothayer@mozilla.com", "when": "2018-05-03T21:15:40Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1457413"}], "who": "mconley@mozilla.com", "when": "2018-05-03T22:22:48Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mark.paxman99@gmail.com"}], "who": "mark.paxman99@gmail.com", "when": "2018-05-04T07:10:05Z"}, {"changes": [{"removed": "bruant.d@gmail.com", "field_name": "cc", "added": ""}], "who": "bruant.d@gmail.com", "when": "2018-05-05T15:45:52Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "hikezoe@mozilla.com"}], "who": "hikezoe@mozilla.com", "when": "2018-05-12T10:53:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "albert@scheiner.cc"}], "who": "albert@scheiner.cc", "when": "2018-05-14T12:14:38Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "michaelnussbaum08@gmail.com"}], "who": "michaelnussbaum08@gmail.com", "when": "2018-05-17T07:27:08Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "josh@joshmatthews.net"}], "who": "josh@joshmatthews.net", "when": "2018-05-18T16:07:16Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1460264"}], "who": "mconley@mozilla.com", "when": "2018-05-22T19:21:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mconley@mozilla.com"}, {"removed": "[gfx-noted][qf:p3][fxperf:p1]", "field_name": "whiteboard", "added": "[gfx-noted][qf:p3][fxperf:p1][qf:f64]"}], "who": "mconley@mozilla.com", "when": "2018-05-22T19:22:35Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bvandyk@mozilla.com"}], "who": "bvandyk@mozilla.com", "when": "2018-05-22T22:23:37Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jmuizelaar@mozilla.com)"}], "who": "dothayer@mozilla.com", "when": "2018-05-24T17:01:40Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(dothayer@mozilla.com)"}], "who": "jmuizelaar@mozilla.com", "when": "2018-05-24T18:55:51Z"}, {"changes": [{"removed": "needinfo?(dothayer@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "dothayer@mozilla.com", "when": "2018-05-24T20:41:24Z"}, {"changes": [{"removed": "valentin_bugzilla.mozilla.org_GIYDCNRQHEZDSCQ@neacsu.eu", "field_name": "cc", "added": ""}], "who": "valentin_bugzilla.mozilla.org_GIYDCNRQHEZDSCQ@neacsu.eu", "when": "2018-05-24T20:47:58Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mconley@mozilla.com)"}], "who": "mconley@mozilla.com", "when": "2018-05-29T16:05:04Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mstange@themasta.com)"}], "who": "dothayer@mozilla.com", "when": "2018-05-30T18:21:48Z"}, {"changes": [{"removed": "needinfo?(jmuizelaar@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jmuizelaar@mozilla.com", "when": "2018-05-31T02:51:50Z"}, {"changes": [{"removed": "needinfo?(mconley@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "mconley@mozilla.com", "when": "2018-05-31T20:46:47Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(dothayer@mozilla.com)"}], "who": "jmuizelaar@mozilla.com", "when": "2018-06-02T01:35:32Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1461666"}], "who": "bugmail@mozilla.staktrace.com", "when": "2018-06-05T13:17:55Z"}, {"changes": [{"removed": "needinfo?(dothayer@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "dothayer@mozilla.com", "when": "2018-06-05T18:25:54Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1459875"}], "who": "mconley@mozilla.com", "when": "2018-06-05T19:20:56Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(dothayer@mozilla.com)"}], "who": "jmuizelaar@mozilla.com", "when": "2018-06-05T20:25:51Z"}, {"changes": [{"removed": "needinfo?(dothayer@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "dothayer@mozilla.com", "when": "2018-06-05T21:35:12Z"}, {"changes": [{"removed": "jan@ikenmeyer.eu", "field_name": "cc", "added": ""}], "who": "jan@ikenmeyer.eu", "when": "2018-06-06T19:43:02Z"}, {"changes": [{"removed": "[gfx-noted][qf:p3][fxperf:p1][qf:f64]", "field_name": "whiteboard", "added": "[gfx-noted][fxperf:p1][qf:p3:f64]"}], "who": "jgong@mozilla.com", "when": "2018-06-06T22:08:29Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(matt.woodrow@gmail.com)"}], "who": "dothayer@mozilla.com", "when": "2018-06-06T23:16:03Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jnicol@mozilla.com"}, {"removed": "needinfo?(matt.woodrow@gmail.com)", "field_name": "flagtypes.name", "added": "needinfo?(jnicol@mozilla.com)"}], "who": "matt.woodrow@gmail.com", "when": "2018-06-06T23:50:15Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1467619"}], "who": "dothayer@mozilla.com", "when": "2018-06-07T23:24:09Z"}], "resolution": "", "op_sys": "Mac OS X", "cf_fx_points": "---", "cf_blocking_fennec": "---"}