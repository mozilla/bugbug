{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "arai.unmht@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-01-05T11:40:36Z", "type_id": 4, "creation_date": "2016-01-05T00:08:16Z", "id": 1316563, "setter": "till@tillschneidereit.net"}], "content_type": "text/plain", "id": 8703886}, {"creator": "arai.unmht@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-01-05T11:43:14Z", "type_id": 4, "creation_date": "2016-01-05T00:26:24Z", "id": 1316578, "setter": "till@tillschneidereit.net"}], "content_type": "text/plain", "id": 8703898}, {"creator": "arai.unmht@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-01-05T11:47:52Z", "type_id": 4, "creation_date": "2016-01-05T00:29:59Z", "id": 1316579, "setter": "till@tillschneidereit.net"}], "content_type": "text/plain", "id": 8703899}, {"creator": "arai.unmht@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-01-05T11:50:23Z", "type_id": 4, "creation_date": "2016-01-05T00:30:46Z", "id": 1316581, "setter": "till@tillschneidereit.net"}], "content_type": "text/plain", "id": 8703900}, {"creator": "arai.unmht@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-01-05T00:45:08Z", "type_id": 4, "creation_date": "2016-01-05T00:40:15Z", "id": 1316585, "setter": "bugs@pettay.fi"}], "content_type": "text/plain", "id": 8703903}, {"creator": "arai.unmht@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2016-01-06T02:45:16Z", "type_id": 4, "creation_date": "2016-01-06T02:45:16Z", "id": 1317580, "setter": "bzbarsky@mit.edu"}], "content_type": "text/plain", "id": 8704347}, {"creator": "arai.unmht@gmail.com", "is_obsolete": 0, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8704349}], "classification": "Components", "creator": "leonardo.balter@gmail.com", "cc": ["arai.unmht@gmail.com", "bugs@pettay.fi", "bzbarsky@mit.edu", "cam@mcc.id.au", "jwalden+bmo@mit.edu", "mike@bocoup.com", "till@tillschneidereit.net"], "depends_on": [], "creation_time": "2015-07-03T19:02:18Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Builtin accessor functions must be named 'get foo' or 'set foo' (where 'foo' is the name of the property used to access the accessor)", "id": 1180290, "assigned_to_detail": {"email": "arai.unmht@gmail.com", "id": 310076, "name": "arai.unmht@gmail.com", "real_name": "Tooru Fujisawa [:arai]"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "arai.unmht@gmail.com", "comment_count": 35, "comments": [{"text": "User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:39.0) Gecko/20100101 Firefox/39.0\nBuild ID: 20150630154324\n\nSteps to reproduce:\n\nObject.getOwnPropertyDescriptor(Map.prototype, \"size\").get.name\n\n// expected to bet \"get size\" \n\n\nActual results:\n\ncurrent value is \"size\" only.\n\n\nExpected results:\n\nObject.getOwnPropertyDescriptor(Map.prototype, \"size\").get.name === \"get size\"\n\nFrom the ES6 Spec:\n\nFunctions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.", "author": "leonardo.balter@gmail.com", "id": 10454797, "time": "2015-07-03T19:02:18Z"}, {"text": "Updating this issue to extend it to Set.prototype.size, the same issue is present there.", "author": "leonardo.balter@gmail.com", "id": 10454804, "time": "2015-07-03T19:06:22Z"}, {"text": "This generalizes to all built-in accessor properties:\n\n* the size accessors here.\n* Object.prototype.__proto__,\n* %TypedArray%.prototype.{buffer,byteLength,byteOffset,length},\n* %TypedArray%.prototype[@@toStringTag],\n* %TypedArray%[@@species],\n* Array[@@species],\n* RegExp.prototype.{flags,global,ignoreCase,multiline,source,sticky,unicode},\n* RegExp[@@species],\n\n...and then I lost interest enumerating them all.  The full list is in the spec.\n\nFairly simple changes to jsapi.cpp to fix this appear not supremely difficult, as regards any accessor that's defined in C++.  Mostly.\n\nBut some accessor functions are self-hosted.  A top-level implementation of such a function may require special treatment to get the proper name.  Intl code has a few of these, for example Intl_DateTimeFormat_format_get -- but they're defined ad-hoc and so require ad-hoc treatment.\nIf there are top-level accessors, defined systematically in the same way self-hosted builtin member functions are defined (I can't find any at a skim, but I might have missed something), they could require additional adjustment beyond that required to deal with C++-implemented accessors.\n\nAnd what if the self-hosted accessor *isn't* implemented at top level?  ES6 also gives this \"get\"/\"set\"-plus-space prefixing to accessor function names for accessors defined in object/class literal syntax, i.e. |assertEq(Object.getOwnPropertyDescriptor({ get foo(){} }, \"foo\").name, \"get foo\");|.  We might or might not need to fix this, to fix this bug.\n\nAnyway.  For someone looking to do a non-trivial first bug that's more than just mechanical changes, this is probably a pretty good one.  But it'll probably take some tracking down of all the places needing changing in the code to be absolutely sure it's fully fixt.", "author": "jwalden+bmo@mit.edu", "id": 10456735, "time": "2015-07-05T07:45:31Z"}, {"text": "(In reply to Jeff Walden [:Waldo] (remove +bmo to email) from comment #2)\n> This generalizes to all built-in accessor properties:\n> But some accessor functions are self-hosted.  A top-level implementation of\n> such a function may require special treatment to get the proper name.  Intl\n> code has a few of these, for example Intl_DateTimeFormat_format_get -- but\n> they're defined ad-hoc and so require ad-hoc treatment.\n> If there are top-level accessors, defined systematically in the same way\n> self-hosted builtin member functions are defined (I can't find any at a\n> skim, but I might have missed something), they could require additional\n> adjustment beyond that required to deal with C++-implemented accessors.\n\nI don't think self-hosted properties are much of a problem. They're installed on the target object in C++ just as native properties, in JS_DefineProperties[1]. The function actually doing the definition is DefineSelfHostedProperty, but that takes an id just as DefinePropertyById. It'll be slightly annoying to atomize two instead of one ids, but that's about it.\n\nMostly, I'd imagine lots of test breakage caused by this.\n\n> And what if the self-hosted accessor *isn't* implemented at top level?  ES6\n> also gives this \"get\"/\"set\"-plus-space prefixing to accessor function names\n> for accessors defined in object/class literal syntax, i.e.\n> |assertEq(Object.getOwnPropertyDescriptor({ get foo(){} }, \"foo\").name, \"get\n> foo\");|.  We might or might not need to fix this, to fix this bug.\n\nThis isn't really about self-hosted properties so much as about content code properties, right? I guess we have to change what we do for these in the bytecode emitter.\n\n> Anyway.  For someone looking to do a non-trivial first bug that's more than\n> just mechanical changes, this is probably a pretty good one.  But it'll\n> probably take some tracking down of all the places needing changing in the\n> code to be absolutely sure it's fully fixt.\n\nYeah, that's going to be the main thing taking time here.", "author": "till@tillschneidereit.net", "id": 10457197, "time": "2015-07-05T20:22:40Z"}, {"text": "> But it'll probably take some tracking down of all the places needing changing\n> in the code to be absolutely sure it's fully fixt.\n\nFor reference, these are the specific topics from the ES6 spec with accessor properties to have get or set prepended to it's name:\n\n21.2.4.2 get RegExp [ @@species ]\n21.2.5.3 get RegExp.prototype.flags\n21.2.5.4 get RegExp.prototype.global\n21.2.5.5 get RegExp.prototype.ignoreCase\n21.2.5.7 get RegExp.prototype.multiline\n21.2.5.10 get RegExp.prototype.source\n21.2.5.12 get RegExp.prototype.sticky\n21.2.5.15 get RegExp.prototype.unicode\n22.1.2.5 get Array [ @@species ]\n22.2.2.4 get %TypedArray% [ @@species ]\n22.2.3.1 get  %TypedArray%.prototype.buffer\n22.2.3.2 get  %TypedArray%.prototype.byteLength\n22.2.3.3 get  %TypedArray%.prototype.byteOffset\n22.2.3.17 get  %TypedArray%.prototype.length\n22.2.3.31 get %TypedArray%.prototype [ @@toStringTag ]\n23.1.2.2 get Map [ @@species ]\n23.1.3.10 get Map.prototype.size\n23.2.2.2 get Set [ @@species ]\n23.2.3.9 get Set.prototype.size\n24.1.3.3 get ArrayBuffer [ @@species ]\n24.1.4.1 get ArrayBuffer.prototype.byteLength\n24.2.4.1 get DataView.prototype.buffer\n24.2.4.2 get DataView.prototype.byteLength\n24.2.4.3 get DataView.prototype.byteOffset\n25.4.4.6 get Promise [ @@species ]\nB.2.2.1.1 get Object.prototype.__proto__\nB.2.2.1.2 set Object.prototype.__proto__", "author": "leonardo.balter@gmail.com", "id": 10459580, "time": "2015-07-06T16:07:32Z"}, {"text": "Should we also have this \"get\"/\"set\" thing on WebIDL getters setters?  Seems like we should.", "author": "bzbarsky@mit.edu", "id": 10459899, "time": "2015-07-06T17:08:50Z"}, {"text": "Maybe not, based on Function instances name (19.2.4.2 http://www.ecma-international.org/ecma-262/6.0/index.html#sec-function-instances-name) and all the calls to the abstract setFunctionName(9.2.11 http://www.ecma-international.org/ecma-262/6.0/index.html#sec-setfunctionname).\n\nThe chapter 17 specify this prefix rule is for *accessor functions of built-in properties*.\n\n> Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\"", "author": "leonardo.balter@gmail.com", "id": 10460310, "time": "2015-07-06T18:26:11Z"}, {"text": "Here's a question.  What do class getter/setter names default to in ES6?", "author": "bzbarsky@mit.edu", "id": 10460630, "time": "2015-07-06T19:32:46Z"}, {"text": "> What do class getter/setter names default to in ES6?\n\nIf I read well the spec, it's only the function name.\n\nRef: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-property-accessors-runtime-semantics-evaluation\n\nA `class C { get fn() {} }` will have a `Object.getOwnPropertyDescriptor(C.prototype, 'fn').get.name === 'fn'`\n\nAnd SpiderMonkey is still returning an empty string.", "author": "leonardo.balter@gmail.com", "id": 10461053, "time": "2015-07-06T20:41:09Z"}, {"text": "OK.  So once again we have to decide whether web idl should act more like builtins or more like classes, yay.", "author": "bzbarsky@mit.edu", "id": 10461118, "time": "2015-07-06T20:51:20Z"}, {"text": "I would say prefixing every accessor property in JS would be good.\n\nWith these definitions I wouldn't prefix or change anything else unless it's specific.", "author": "leonardo.balter@gmail.com", "id": 10461194, "time": "2015-07-06T21:03:07Z"}, {"text": "Any progress on Web IDL?\n\nI'm have draft patches but it affects accessors on DOM, like documentElement and innerHTML, which is tested in following:\nhttps://dxr.mozilla.org/mozilla-central/rev/d7a0ad85d9fb77916f9d77d62697b852f3dc63e6/dom/bindings/test/test_exception_messages.html#21\n>       [ 'Object.getOwnPropertyDescriptor(Document.prototype, \"documentElement\").get.call({})',\n>         \"'documentElement' getter called on an object that does not implement interface Document.\",\n>         \"bogus getter this object\" ],\n>       [ 'Object.getOwnPropertyDescriptor(Element.prototype, \"innerHTML\").set.call({})',\n>         \"'innerHTML' setter called on an object that does not implement interface Element.\",\n\nCan they be 'get documentElement' and 'set innerHTML' ?", "author": "arai.unmht@gmail.com", "id": 11041406, "time": "2016-01-03T17:02:54Z"}, {"text": "here's overview:\n  1. add prefix parameter to IdToFunctionName\n  2. change DefinePropertyById to use function name generetad by IdToFunctionName for native getter/setter\n     (self-hosted builtin getters are fixed in bug 1235656)\n  3. fix some specific cases for ArrayBuffer, DataView, and TypedArrays to use prefixed name directly when creating function\n\nThen, with 2, DefineProperties is also affected and CreateInterfacePrototypeObject generates getter/setter with \"get\"/\"set\" prefix for bindings.\nhttps://dxr.mozilla.org/mozilla-central/rev/d7a0ad85d9fb77916f9d77d62697b852f3dc63e6/dom/bindings/BindingUtils.cpp#768\n\nIf DOM bindings should not have \"get\"/\"set\" prefix, we should have new JSPROP_ flag to enable or disable prefixing (is there any free bit?)", "author": "arai.unmht@gmail.com", "id": 11041526, "time": "2016-01-03T21:02:44Z"}, {"text": "In terms of the Web IDL behavior, here is the current situation:\n\n1)  The Web IDL spec does not define .name for the functions it defines.  See also https://www.w3.org/Bugs/Public/show_bug.cgi?id=22392\n2)  Current behavior in browsers for accessor names for IDL attributes is as follows:\n\n  Firefox: The attribute name\n  Chrome: Empty string\n  Safari: Claims to have an undefined getter (as in, getOwnPropertyDescriptor just lies)\n  MS Edge: The attribute name\n  MS IE 11: undefined (getter is present, but has .name === undefined)\n\nDoesn't seem to me like web compat is a strong issue here, and given the discussion in that w3.org bug report I think we should probably just change Web IDL to define the .name and have it be \"get whatever\".", "author": "bzbarsky@mit.edu", "id": 11042183, "time": "2016-01-04T07:42:38Z"}, {"text": "Thank you :D\nI'll go with current patch that changes all names for getter/setter.\nWill post it after some more test.", "author": "arai.unmht@gmail.com", "id": 11043971, "time": "2016-01-04T18:51:16Z"}, {"text": "Thanks for testing, Boris.  I've made the change in the spec:\n\nhttps://github.com/heycam/webidl/commit/a275e567f07c23cde20d1c8b1dd50574355c0d74", "author": "cam@mcc.id.au", "id": 11045040, "time": "2016-01-04T23:02:09Z"}, {"text": "Created attachment 8703886\nPart 1: Add prefix parameter to IdToFunctionName.\n\nPrepared 5 patches (comment #12 + 2 tests).\n\nPart 1 adds prefix parameter to IdToFunctionName, that could be nullptr, \"get\", or \"set\" for now.\nThat was a part of bug 1235656 patch.", "author": "arai.unmht@gmail.com", "id": 11045208, "time": "2016-01-05T00:08:16Z"}, {"text": "Created attachment 8703898\nPart 2: Handle prefix in DefinePropertyById.\n\nPart 2 changes DefinePropertyById to use function name generated by IdToFunctionName, with \"get\" or \"set\" for native accessors.\n\nIt's handled only for native accessors now, as self-hosted builtin accessor already have \"get\" prefix by _SetCanonicalName.  might it be better applying same change to DefineSelfHostedProperty as well and remove _SetCanonicalName call from self-hosted accessors?\n\nWith this change, accessor name for DOM bindings are also changed, and the testcase for it is fixed in Part 5.", "author": "arai.unmht@gmail.com", "id": 11045259, "time": "2016-01-05T00:26:24Z"}, {"text": "Created attachment 8703899\nPart 3: Use canonical name in native getter.\n\nPart 3 fixes getters for ArrayBuffer, DataView, and TypedArray.  They calls NewNativeFunction directly, so added Atomize with \"get FOO\" string literal.", "author": "arai.unmht@gmail.com", "id": 11045267, "time": "2016-01-05T00:29:59Z"}, {"text": "Created attachment 8703900\nPart 4: Add tests for builtin getter name.\n\nPart 4 adds testcase for builtin getter properties, some of them are fixed in bug 1235656.\nSome testcases are commented out, as they're not available.", "author": "arai.unmht@gmail.com", "id": 11045270, "time": "2016-01-05T00:30:46Z"}, {"text": "Created attachment 8703903\nPart 5: Fix testcase for DOM accessors.\n\nPart 5 fixes testcase for DOM accessors, to check that \"get\" or \"set\" prefixed name in error message.\n\n\nAlmost green on try run: https://treeherder.mozilla.org/#/jobs?repo=try&revision=025d051bbe3f", "author": "arai.unmht@gmail.com", "id": 11045287, "time": "2016-01-05T00:40:15Z"}, {"text": "Comment on attachment 8703886\nPart 1: Add prefix parameter to IdToFunctionName.\n\nReview of attachment 8703886:\n-----------------------------------------------------------------\n\nLooks great, r=me with nits addressed.\n\n::: js/src/jsfun.cpp\n@@ +2253,4 @@\n>   * property id.\n>   *\n>   * Function names are always strings. If id is the well-known @@iterator\n>   * symbol, this returns \"[Symbol.iterator]\".\n\nAdd a paragraph below this:\n\nIf a prefix is supplied the final name is |prefix + \" \" + name|.\n\n@@ +2254,5 @@\n>   *\n>   * Function names are always strings. If id is the well-known @@iterator\n>   * symbol, this returns \"[Symbol.iterator]\".\n>   *\n>   * Implements step 4 of SetFunctionName in ES6 draft rev 27 (24 Aug 2014).\n\nPlease update this comment to say that it implements steps 4 and 5 of SetFunctionName, and that it's based on the final spec.\n\n@@ +2257,5 @@\n>   *\n>   * Implements step 4 of SetFunctionName in ES6 draft rev 27 (24 Aug 2014).\n>   */\n>  JSAtom*\n> +js::IdToFunctionName(JSContext* cx, HandleId id, const char* prefix)\n\nNit: add \" /* = nullptr */\" to the prefix parameter.\n\n@@ +2262,2 @@\n>  {\n> +    if (JSID_IS_ATOM(id)) {\n\nI think you should be able to simplify this to just\n\nif (JSID_IS_ATOM(id) && !prefix)\n   return JSID_TO_ATOM(id);\n\nAnd remove the handling of the prefix from this entirely. The general case at the end of the function should work just fine for that.\n\n::: js/src/jsfun.h\n@@ +663,5 @@\n>                       NewObjectKind newKind = GenericObject,\n>                       NewFunctionProtoHandling protoHandling = NewFunctionClassProto);\n>  \n>  extern JSAtom*\n> +IdToFunctionName(JSContext* cx, HandleId id, const char* prefix=nullptr);\n\nNit: spaces around the \"=\".", "author": "till@tillschneidereit.net", "id": 11046499, "time": "2016-01-05T11:40:36Z"}, {"text": "Comment on attachment 8703898\nPart 2: Handle prefix in DefinePropertyById.\n\nReview of attachment 8703898:\n-----------------------------------------------------------------\n\nI think you need to fold part 5 into this, otherwise the test might fail during bisecting.", "author": "till@tillschneidereit.net", "id": 11046510, "time": "2016-01-05T11:43:14Z"}, {"text": "Comment on attachment 8703899\nPart 3: Use canonical name in native getter.\n\nReview of attachment 8703899:\n-----------------------------------------------------------------\n\nr=me with feedback addressed.\n\n::: js/src/vm/ArrayBufferObject.cpp\n@@ +1444,1 @@\n>      RootedId byteLengthId(cx, NameToId(cx->names().byteLength));\n\nUse IdToFunctionName here instead of manually creating the atom.\n\n::: js/src/vm/TypedArrayObject.cpp\n@@ +2094,5 @@\n>  }\n>  \n>  template<Value ValueGetter(DataViewObject* view)>\n>  bool\n> +DataViewObject::defineGetter(JSContext* cx, PropertyName* name, HandleAtom atom, HandleNativeObject proto)\n\nCan't you create the atom inside this function by using IdToFunctionName(id) after line 2100? Then all the callsites below can stay unchanged.", "author": "till@tillschneidereit.net", "id": 11046520, "time": "2016-01-05T11:47:52Z"}, {"text": "Comment on attachment 8703900\nPart 4: Add tests for builtin getter name.\n\nReview of attachment 8703900:\n-----------------------------------------------------------------\n\nLooks great. I really hope this is web-compatible, but it seems somewhat likely.", "author": "till@tillschneidereit.net", "id": 11046525, "time": "2016-01-05T11:50:23Z"}, {"text": "So the new error message ends up looking like:\n\n  \"\"'get documentElement' getter ...\"\n\nwhich is a little silly.  It really would be better if it just said \"'documentElement' getter ...\" as it used to.  Right now this string is coming from JS_GetFunctionDisplayId on the getter function.  Is there some other API that will return the original thing?  If not, then it might make sense to use funcNameStr.get()+4 in the call to JS_ReportErrorNumberUC in ThrowInvalidThis in the getter/setter case (the caller would need to indicate when we're in it), with a comment about how we're skipping over the \"get \" or \"set \" prefix.  That's assuming that we're really 100% guaranteed the prefix is there in all the cases we care about, including aliases, Xrays, etc (would want to add tests for these if possible).  And probably a MOZ_CRASH if funcNameStr.Length() < 4...", "author": "bzbarsky@mit.edu", "id": 11047734, "time": "2016-01-05T18:01:52Z"}, {"text": "With current implementation, only \"get documentElement\" string is stored on the JSFunction, and no API to return \"documentElement\".\n\nI'll try implementing the '+4' patch.\n\nbtw, do that error message have to say \"getter\" ?\nhow about always using MSG_METHOD_THIS_DOES_NOT_IMPLEMENT_INTERFACE instead of MSG_GETTER_THIS_DOES_NOT_IMPLEMENT_INTERFACE ?\n\nhttps://dxr.mozilla.org/mozilla-central/rev/0771c5eab32f0cee4f7d12bc382298a81e0eabb2/dom/bindings/Errors.msg#30\n> MSG_DEF(MSG_METHOD_THIS_DOES_NOT_IMPLEMENT_INTERFACE, 2, JSEXN_TYPEERR, \"'{0}' called on an object that does not implement interface {1}.\")\n> MSG_DEF(MSG_METHOD_THIS_UNWRAPPING_DENIED, 1, JSEXN_TYPEERR, \"Permission to call '{0}' denied.\")\n> MSG_DEF(MSG_GETTER_THIS_DOES_NOT_IMPLEMENT_INTERFACE, 2, JSEXN_TYPEERR, \"'{0}' getter called on an object that does not implement interface {1}.\")\n> MSG_DEF(MSG_GETTER_THIS_UNWRAPPING_DENIED, 1, JSEXN_TYPEERR, \"Permission to call '{0}' getter denied.\")\n> MSG_DEF(MSG_SETTER_THIS_DOES_NOT_IMPLEMENT_INTERFACE, 2, JSEXN_TYPEERR, \"'{0}' setter called on an object that does not implement interface {1}.\")\n> MSG_DEF(MSG_SETTER_THIS_UNWRAPPING_DENIED, 1, JSEXN_TYPEERR, \"Permission to call '{0}' setter denied.\")\n\nI think that error message is not common, as the testcase uses Object.getOwnPropertyDescriptor to get raw function of the getter property.  in that case saying '\"get documentElement\" called on an object ...' will also make sense.", "author": "arai.unmht@gmail.com", "id": 11048200, "time": "2016-01-05T19:41:39Z"}, {"text": "> btw, do that error message have to say \"getter\" ?\n\nIt doesn't, really.  It can say whatever it wants, as long as a web developer will understand what it means.  Which is a pretty significant constraint, actually.\n\nIt's possible that \"'get foo' called on an object\" is good enough for that purpose, and does make for a much simpler change than the +4 approach.  In that case, we can get rid of MSG_SETTER_THIS_DOES_NOT_IMPLEMENT_INTERFACE and MSG_GETTER_THIS_DOES_NOT_IMPLEMENT_INTERFACE altogether.\n\n> as the testcase uses Object.getOwnPropertyDescriptor to get raw function of the getter property\n\nThat's just for readability of the testcase.  The way this would come up in practice is if someone sets the __proto__ of some random object to a DOM prototype or DOM object and then tries to do the get.", "author": "bzbarsky@mit.edu", "id": 11048270, "time": "2016-01-05T20:00:30Z"}, {"text": "Created attachment 8704347\nPart 6: Remove getter/setter variant for ThrowInvalidThis message.\n\nPrepared 2 patches for each plan.\n\nThis is based on previous parts 1-5 (of course part 5 and this patch will be merged into part 2 later).\n\nThis removes \"getter\"/\"setter\" from error message.\nI feel now GetInvalidThisErrorFor* functions are not needed, as there are only 2 variants, \"security error or not\", so passing that boolean value as an argument would be simpler.", "author": "arai.unmht@gmail.com", "id": 11048856, "time": "2016-01-05T22:36:01Z"}, {"text": "Created attachment 8704349\nPart 5 plan B: Skip accessor name prefix in ThrowInvalidThis.\n\nAnother plan.\nnow I think attachment 8704347 is better than this, so, attaching just in case.\n\nthis is based on previous parts 1-4, to keep the message same as before.\nthis changes ThrowInvalidThis to receive the type of the function (method/getter/setter), and the \"security error or not\" bool.\nthen, if it's getter or setter, skips first 4 chars.", "author": "arai.unmht@gmail.com", "id": 11048872, "time": "2016-01-05T22:40:38Z"}, {"text": "Comment on attachment 8704347\nPart 6: Remove getter/setter variant for ThrowInvalidThis message.\n\nHmm, given that bz feels much stronger about this stuff than I do, he should probably review this. (but he is not accepting review requests atm)", "author": "bugs@pettay.fi", "id": 11049247, "time": "2016-01-06T00:12:49Z"}, {"text": "Comment on attachment 8704347\nPart 6: Remove getter/setter variant for ThrowInvalidThis message.\n\nr=me, since I just read this over an hour or so ago....", "author": "bzbarsky@mit.edu", "id": 11049718, "time": "2016-01-06T02:45:16Z"}, {"text": "Thank you for reviewing :)\n\njust noticed that Part 6 don't have to be folded to Part 2, as folding Part 5 solves the bisect issue.\nWill renumber Part 6 to 5, for simplicity.", "author": "arai.unmht@gmail.com", "id": 11049787, "time": "2016-01-06T03:25:54Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/b51771070a8993305e2e73a31bc3e82c32de3ae4\nBug 1180290 - Part 1: Add prefix parameter to IdToFunctionName. r=till\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/44725d3301db2d4371e087076aa95801622cf8b2\nBug 1180290 - Part 2: Handle prefix in DefinePropertyById. r=till,smaug\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/dd562b7c8512ecfacb413bd901b0c1ae89a029b4\nBug 1180290 - Part 3: Use canonical name in native getter. r=till\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/a59c19e0b14d38b02ae4c12e5e39659756e2d586\nBug 1180290 - Part 4: Add tests for builtin getter name. r=till\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/7bc312c15f1fd17866f6f177dfedb7e2a96880b0\nBug 1180290 - Part 5: Remove getter/setter variant for ThrowInvalidThis message. r=bz", "author": "arai.unmht@gmail.com", "id": 11050289, "time": "2016-01-06T10:03:10Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/b51771070a89\nhttps://hg.mozilla.org/mozilla-central/rev/44725d3301db\nhttps://hg.mozilla.org/mozilla-central/rev/dd562b7c8512\nhttps://hg.mozilla.org/mozilla-central/rev/a59c19e0b14d\nhttps://hg.mozilla.org/mozilla-central/rev/7bc312c15f1f", "author": "cbook@mozilla.com", "id": 11053942, "time": "2016-01-07T11:08:34Z"}], "cf_last_resolved": "2016-01-07T11:08:34Z", "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2016-01-07T11:08:34Z", "cf_platform_rel": "---", "product": "Core", "cf_status_firefox_esr52": "---", "blocks": [], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "JavaScript Engine", "votes": 0, "groups": [], "cf_status_firefox60": "---", "cf_status_firefox41": "---", "target_milestone": "mozilla46", "is_cc_accessible": true, "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "leonardo.balter@gmail.com", "id": 429843, "name": "leonardo.balter@gmail.com", "real_name": "Leo Balter"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "arai.unmht@gmail.com", "id": 310076, "name": "arai.unmht@gmail.com", "real_name": "Tooru Fujisawa [:arai]"}, {"email": "bugs@pettay.fi", "id": 39966, "name": "bugs@pettay.fi", "real_name": "Olli Pettay [:smaug]"}, {"email": "bzbarsky@mit.edu", "id": 20209, "name": "bzbarsky@mit.edu", "real_name": "Boris Zbarsky [:bz] (no decent commit message means r-)"}, {"email": "cam@mcc.id.au", "id": 54040, "name": "cam@mcc.id.au", "real_name": "Cameron McCormack (:heycam) (away for the moment)"}, {"email": "jwalden+bmo@mit.edu", "id": 83595, "name": "jwalden+bmo@mit.edu", "real_name": "Jeff Walden [:Waldo]"}, {"email": "mike@bocoup.com", "id": 462552, "name": "mike@bocoup.com", "real_name": "Mike Pennisi [:jugglinmike]"}, {"email": "till@tillschneidereit.net", "id": 292831, "name": "till@tillschneidereit.net", "real_name": "Till Schneidereit [:till]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "mike@bocoup.com"}], "who": "leonardo.balter@gmail.com", "when": "2015-07-03T19:04:10Z"}, {"changes": [{"removed": "Map.prototype.size accessor get function name should return `get size`", "field_name": "summary", "added": "Map and Set prototype.size accessor get function name should return `get size`"}], "who": "leonardo.balter@gmail.com", "when": "2015-07-03T19:05:23Z"}, {"changes": [{"removed": "UNCONFIRMED", "field_name": "status", "added": "NEW"}, {"removed": "", "field_name": "cc", "added": "jwalden+bmo@mit.edu"}, {"removed": "Map and Set prototype.size accessor get function name should return `get size`", "field_name": "summary", "added": "Builtin accessor functions must be named 'get foo' or 'set foo' (where 'foo' is the name of the property used to access the accessor)"}, {"removed": "0", "field_name": "is_confirmed", "added": "1"}], "who": "jwalden+bmo@mit.edu", "when": "2015-07-05T07:45:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "till@tillschneidereit.net"}], "who": "till@tillschneidereit.net", "when": "2015-07-05T20:22:40Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bzbarsky@mit.edu"}], "who": "bzbarsky@mit.edu", "when": "2015-07-06T17:08:50Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "arai.unmht@gmail.com"}], "who": "arai.unmht@gmail.com", "when": "2016-01-03T17:02:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cam@mcc.id.au"}], "who": "bzbarsky@mit.edu", "when": "2016-01-04T07:42:38Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "arai.unmht@gmail.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8703886, "added": "review?(till@tillschneidereit.net)"}], "who": "arai.unmht@gmail.com", "when": "2016-01-05T00:08:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8703898, "added": "review?(till@tillschneidereit.net)"}], "who": "arai.unmht@gmail.com", "when": "2016-01-05T00:26:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8703899, "added": "review?(till@tillschneidereit.net)"}], "who": "arai.unmht@gmail.com", "when": "2016-01-05T00:29:59Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8703900, "added": "review?(till@tillschneidereit.net)"}], "who": "arai.unmht@gmail.com", "when": "2016-01-05T00:30:46Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugs@pettay.fi"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8703903, "added": "review?(bugs@pettay.fi)"}], "who": "arai.unmht@gmail.com", "when": "2016-01-05T00:40:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8703903, "added": "review+"}], "who": "bugs@pettay.fi", "when": "2016-01-05T00:45:08Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(till@tillschneidereit.net)", "attachment_id": 8703886, "added": "review+"}], "who": "till@tillschneidereit.net", "when": "2016-01-05T11:40:36Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(till@tillschneidereit.net)", "attachment_id": 8703898, "added": "review+"}], "who": "till@tillschneidereit.net", "when": "2016-01-05T11:43:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(till@tillschneidereit.net)", "attachment_id": 8703899, "added": "review+"}], "who": "till@tillschneidereit.net", "when": "2016-01-05T11:47:52Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(till@tillschneidereit.net)", "attachment_id": 8703900, "added": "review+"}], "who": "till@tillschneidereit.net", "when": "2016-01-05T11:50:23Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(arai.unmht@gmail.com)"}], "who": "bzbarsky@mit.edu", "when": "2016-01-05T18:01:52Z"}, {"changes": [{"removed": "needinfo?(arai.unmht@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "arai.unmht@gmail.com", "when": "2016-01-05T19:41:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8704347, "added": "review?(bugs@pettay.fi)"}], "who": "arai.unmht@gmail.com", "when": "2016-01-05T22:36:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(bugs@pettay.fi)", "attachment_id": 8704347, "added": ""}], "who": "bugs@pettay.fi", "when": "2016-01-06T00:12:49Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8704347, "added": "review+"}], "who": "bzbarsky@mit.edu", "when": "2016-01-06T02:45:16Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla46"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2016-01-07 03:08:34"}, {"removed": "---", "field_name": "cf_status_firefox46", "added": "fixed"}], "who": "cbook@mozilla.com", "when": "2016-01-07T11:08:34Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}