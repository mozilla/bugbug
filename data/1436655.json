{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "n.nethercote@gmail.com", "mentors_detail": [], "depends_on": [1436911, 1449143], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "bugzilla@twinql.com", "id": 396243, "name": "bugzilla@twinql.com", "real_name": "Richard Newman [:rnewman]"}, {"email": "cdenizet@mozilla.com", "id": 560431, "name": "cdenizet@mozilla.com", "real_name": "Calixte Denizet (:calixte)"}, {"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, {"email": "ehsan@mozilla.com", "id": 251051, "name": "ehsan@mozilla.com", "real_name": ":Ehsan Akhgari"}, {"email": "erahm@mozilla.com", "id": 496127, "name": "erahm@mozilla.com", "real_name": "Eric Rahm [:erahm] (please no mozreview requests)"}, {"email": "felipc@gmail.com", "id": 208747, "name": "felipc@gmail.com", "real_name": ":Felipe Gomes (needinfo me!)"}, {"email": "gandalf@aviary.pl", "id": 41270, "name": "gandalf@aviary.pl", "real_name": "Zibi Braniecki [:gandalf][:zibi]"}, {"email": "honzab.moz@firemni.cz", "id": 269762, "name": "honzab.moz@firemni.cz", "real_name": "Honza Bambas (:mayhemer)"}, {"email": "jcristau@mozilla.com", "id": 580382, "name": "jcristau@mozilla.com", "real_name": "Julien Cristau [:jcristau]"}, {"email": "mcastelluccio@mozilla.com", "id": 420453, "name": "mcastelluccio@mozilla.com", "real_name": "Marco Castelluccio [:marco]"}, {"email": "mh+mozilla@glandium.org", "id": 47192, "name": "mh+mozilla@glandium.org", "real_name": "Mike Hommey [:glandium]"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "nika@thelayzells.com", "id": 534482, "name": "nika@thelayzells.com", "real_name": ":Nika Layzell"}, {"email": "xidorn+moz@upsuper.org", "id": 373403, "name": "xidorn+moz@upsuper.org", "real_name": "Xidorn Quan [:xidorn] UTC+10"}], "cf_last_resolved": "2018-03-27T10:53:10Z", "attachments": [{"creator": "n.nethercote@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-02-13T09:33:39Z", "type_id": 4, "creation_date": "2018-02-08T05:56:17Z", "id": 1713906, "setter": "mh+mozilla@glandium.org"}], "content_type": "text/x-review-board-request", "id": 8949289}, {"creator": "n.nethercote@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-27T00:44:02Z", "type_id": 4, "creation_date": "2018-03-23T04:16:31Z", "id": 1733795, "setter": "mh+mozilla@glandium.org"}], "content_type": "text/x-review-board-request", "id": 8949290}, {"creator": "n.nethercote@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-27T00:26:52Z", "type_id": 4, "creation_date": "2018-03-23T04:16:31Z", "id": 1733793, "setter": "mh+mozilla@glandium.org"}], "content_type": "text/x-review-board-request", "id": 8961633}, {"creator": "n.nethercote@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2018-03-27T00:29:01Z", "type_id": 4, "creation_date": "2018-03-23T04:16:31Z", "id": 1733794, "setter": "mh+mozilla@glandium.org"}], "content_type": "text/x-review-board-request", "id": 8961634}], "votes": 1, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 44, "comments": [{"text": "I think this will improve things greatly.", "author": "n.nethercote@gmail.com", "id": 13026799, "time": "2018-02-08T05:51:11Z"}, {"text": "Created attachment 8949289\nBug 1436655 - Rename pref_SetPref()'s aFromFile argument as aFromInit.\n\nCurrently all pref initialization is done from file, but soon we will also be\ninitializing prefs from code compiled into the binary. The new name encompasses\nboth cases.\n\nReview commit: https://reviewboard.mozilla.org/r/218670/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/218670/", "author": "n.nethercote@gmail.com", "id": 13026809, "time": "2018-02-08T05:56:17Z"}, {"text": "Created attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\n[XXX: The draft patch implements the mechanism and converts a subset of\nrepresentative prefs to the new mechanism. For landing I will have one patch\nthat implements the mechanism, multiple patches converting prefs, and then a\nfinal clean-up patch that removes stuff no longer needed.]\n\nCurrently VarCache prefs are setup in two parts:\n\n- The vanilla pref part, installed via a data file such as all.js, or via an\n  API call.\n\n- The VarCache variable part, setup by an Add*VarCache() call.\n\nBoth parts are needed for the pref to actually operate as a proper VarCache\npref. (There are various prefs for which we do one but not the other unless a\ncertain condition is met.)\n\nThis patch introduces a new way of doing things. There is a new file,\nmodules/libpref/init/All.h, which defines prefs like this:\n\n> PRF(\"layout.accessiblecaret.width\",\n>     layout__accessiblecaret__width,\n>     float, \"34.0\");\n\nThis replaces both the existing parts.\n\nThe preprocessor is used to generate multiple things from this single\ndefinition:\n\n- A global variable (the VarCache itself).\n\n- A getter for that global variable.\n\n- A call to a registration function that unconditionally installs the pref in\n  the prefs hash table at startup.\n\nC++ files can include the new StaticPrefs.h file to access the getter.\n\nRust code cannot use the getter, but can access the global variable directly\nvia structs.rs. This is similar to how things currently work for Rust code.\n\nThe new approach has the following advantages.\n\n+ It eliminates the duplication (in all.js and the Add*VarCache() call) of the\n  pref name and default value, preventing potential mismatches. (This is a real\n  problem in practice!)\n\n+ There is now a single initialization point for these VarCache prefs.\n  + This avoids need to find a place to insert the Add*VarCache() calls, which\n    are currently spread all over the place.\n  + It also eliminates the common pattern whereby these calls are wrapped in a\n    execute-once block protected by a static boolean (see bug 1346224).\n  + And it's no longer possible to have a VarCache pref for which only one of\n    the pieces has been setup.\n\n+ It encapsulates the VarCache global variable, so there is no need to declare\n  them separately.\n\n+ VarCache reads are done via a getter (e.g. StaticPrefs::foo__bar__baz())\n  instead of a raw global variable read.\n  + This makes it clearer that you're reading a pref value.\n  + This provides a single chokepoint in the code for such accesses, which make\n    adding checking and instrumentation feasible.\n\n+ It completely replaces MediaPrefs.h.\n\n+ [XXX: not yet prototyped] It completely replaces gfxPrefs.h.\n\n+ Once all VarCache prefs are migrated to the new approach, the VarCache\n  mechanism will be better encapsulated, with fewer details publicly visible.\n\n+ (Future work) This will allow the pref names to be stored statically, saving\n  memory in every process.\n\nThe main downside of the new approach is that all of these prefs are in a\nsingle header that is included in quite a few places, so any changes to this\nheader will cause a fair amount of recompilation.\n\nReview commit: https://reviewboard.mozilla.org/r/218672/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/218672/", "author": "n.nethercote@gmail.com", "id": 13026810, "time": "2018-02-08T05:56:17Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nI'm casting a wide feedback net here because it's a big change! Thanks.", "author": "n.nethercote@gmail.com", "id": 13026814, "time": "2018-02-08T05:59:28Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nhttps://reviewboard.mozilla.org/r/218672/#review224610\n\nThis seems like a step in the right direction!\n\n::: modules/libpref/init/All.h:10\n(Diff revision 1)\n> + * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n> +\n> +// This file defines VarCache prefs.\n> +//\n> +// Prefs defined in this file should *not* be listed in a prefs data file such\n> +// as all.js.\n\nWhat happens if they are? Can we check for these named varcache prefs and err or warn appropriately if they're present when reading a prefs file?\n\n::: modules/libpref/init/All.h:22\n(Diff revision 1)\n> +// functions.\n> +//\n> +// - A direct global variable access is faster than a hash table lookup.\n> +//\n> +// - A global variable can be accessed off the main thread. If a pref *is*\n> +//   accessed off the main thread, it should use an atomic type. (But note that\n\nCan we add a debugging thread check to the generated accessor (excepting `Atomic<float>`, of course)?\n\n::: modules/libpref/init/All.h:24\n(Diff revision 1)\n> +// - A direct global variable access is faster than a hash table lookup.\n> +//\n> +// - A global variable can be accessed off the main thread. If a pref *is*\n> +//   accessed off the main thread, it should use an atomic type. (But note that\n> +//   many VarCaches that should be atomic are not, in particular because\n> +//   Atomic<float> is not available, alas.)\n\nDoes that mean we currently do cross-thread reads that can return garbage values? Can you file a bug if necessary, and point to it from here?\n\n::: modules/libpref/init/All.h:35\n(Diff revision 1)\n> +//       <c++-type>, <default-value>)\n> +//\n> +// - The macro name is PRF because then subsequent lines can be indented by 4\n> +//   spaces, which is nice.\n> +//\n> +// - <pref-name-string> is the name of the pref, as it appears in about:config,\n\nAre there any C++ users of the name?", "author": "bugzilla@twinql.com", "id": 13028735, "time": "2018-02-08T20:15:00Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\n(ReviewBoard)", "author": "bugzilla@twinql.com", "id": 13028736, "time": "2018-02-08T20:15:26Z"}, {"text": "Thank you for the comments.\n\n> > +// Prefs defined in this file should *not* be listed in a prefs data file such\n> > +// as all.js.\n> \n> What happens if they are? Can we check for these named varcache prefs and\n> err or warn appropriately if they're present when reading a prefs file?\n\nCurrently I think the value from the file will be installed normally, overwriting the value obtained from the VarCache installation. It would be possible to add a check to detect this case.\n\n\n> > +// - A global variable can be accessed off the main thread. If a pref *is*\n> > +//   accessed off the main thread, it should use an atomic type. (But note that\n> \n> Can we add a debugging thread check to the generated accessor\n\nI think so. The exception is for VarCache variables accessed via Rust code, because they do raw variable accesses instead of using the C++ getter.\n\n\n> (excepting `Atomic<float>`, of course)?\n\n(BTW, in the same way that floats are actually stored as strings in the hash table and then converted at use points, I'm wondering if float VarCache values could actually be stored as integers, in order to get atomicity.)\n\n\n> > +// - A global variable can be accessed off the main thread. If a pref *is*\n> > +//   accessed off the main thread, it should use an atomic type. (But note that\n> > +//   many VarCaches that should be atomic are not, in particular because\n> > +//   Atomic<float> is not available, alas.)\n> \n> Does that mean we currently do cross-thread reads that can return garbage\n> values? Can you file a bug if necessary, and point to it from here?\n\nCurrently: the main thread writes the global variables, and other threads can read them. If other threads do read them and the global variable is non-atomic, then the consequences are... unpredictable. Possibly garbage.\n\nI filed bug 1436916 for this.\n\n\n> > +// - <pref-name-string> is the name of the pref, as it appears in about:config,\n> \n> Are there any C++ users of the name?\n\nThe next line in the comment says \"and as is used in most libpref API functions.\" I will reword the comment to indicate this covers both C++ and JS API functions.", "author": "n.nethercote@gmail.com", "id": 13029628, "time": "2018-02-09T05:26:40Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nhttps://reviewboard.mozilla.org/r/218672/#review225358\n\n::: modules/libpref/StaticPrefs.h:53\n(Diff revision 1)\n> +private:                                                                       \\\n> +  static cpp_type sVarCache_##id;                                              \\\n> +                                                                               \\\n> +public:                                                                        \\\n> +  static StripAtomic<cpp_type> id() { return sVarCache_##id; }\n> +#include \"mozilla/All.h\"\n\nNit: can we call this something else other than `All.h`?\n\n::: modules/libpref/init/All.h:67\n(Diff revision 1)\n> +PRF(\"layout.accessiblecaret.width\",\n> +    layout__accessiblecaret__width,\n\nAre there any plans to auto-generate the C++-side names?  I can imagine that people will complain about the naming algorithm and start using some more palatable in some cases, which makes things less understandable for everybody.", "author": "nfroyd@mozilla.com", "id": 13037123, "time": "2018-02-12T20:43:14Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nThis seems reasonable.", "author": "nfroyd@mozilla.com", "id": 13037124, "time": "2018-02-12T20:43:55Z"}, {"text": "> > +#include \"mozilla/All.h\"\n> \n> Nit: can we call this something else other than `All.h`?\n\nSure. Any suggestions? Prefs.h?\n\n\n> > +PRF(\"layout.accessiblecaret.width\",\n> > +    layout__accessiblecaret__width,\n> \n> Are there any plans to auto-generate the C++-side names?\n\nAFAICT that would require switching to using a script to do the code generation instead of the C preprocessor, which I was hoping to avoid because it's a whole extra step. Unless you can think of another way?", "author": "n.nethercote@gmail.com", "id": 13037276, "time": "2018-02-12T21:34:51Z"}, {"text": "(In reply to Nathan Froyd [:froydnj] from comment #7)\n\n> Are there any plans to auto-generate the C++-side names?\n\nI also thought this would be nice, but didn't mention it in my comment for two reasons:\n\n- I didn't think it was possible without extra work, and\n- The explicit way keeps the names in the tree, right in the definition, which will help searchers.\n\nTo address the second, we'd need a macro at point of use, too. E.g., Rust:\n\n   let foo = pref!(layout.foo.bar);\n\nwhich would expand to\n\n   let foo = StaticPrefs::layout__foo__bar();", "author": "bugzilla@twinql.com", "id": 13037627, "time": "2018-02-12T23:30:26Z"}, {"text": "Comment on attachment 8949289\nBug 1436655 - Rename pref_SetPref()'s aFromFile argument as aFromInit.\n\nhttps://reviewboard.mozilla.org/r/218670/#review225508", "author": "mh+mozilla@glandium.org", "id": 13038286, "time": "2018-02-13T09:33:39Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nhttps://reviewboard.mozilla.org/r/218672/#review226312\n\n::: commit-message-de2a3:23\n(Diff revision 1)\n> +\n> +This patch introduces a new way of doing things. There is a new file,\n> +modules/libpref/init/All.h, which defines prefs like this:\n> +\n> +> PRF(\"layout.accessiblecaret.width\",\n> +>     layout__accessiblecaret__width,\n\nPlease do not use double underscores. They are always reserved for compilers.", "author": "VYV03354@nifty.ne.jp", "id": 13043511, "time": "2018-02-15T01:25:08Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nhttps://reviewboard.mozilla.org/r/218672/#review226298\n\nSome notes inline, mainly I think we should go ahead and add a script for generating the code rather than just using macros. f=me\n\n::: caps/nsScriptSecurityManager.cpp:677\n(Diff revision 1)\n>          // A null principal can target its own URI.\n>          if (sourceURI == aTargetURI) {\n>              return NS_OK;\n>          }\n>      }\n> -    else if (sViewSourceReachableFromInner &&\n> +    else if (StaticPrefs::security__view_source__reachable_from_inner_protocol() &&\n\nThe ergonomics of this aren't great, it's more verbose than before (the need to specify the full path of the pref is unfortunate) and the user can't define the var name as they've been used to.\n\nI'm not saying you shouldn't do this, but maybe ping dev-platform for alternative ideas? Or maybe this is as good as it gets.\n\nI *do* think it's nice that we're preventing direct access to var so you can't accidentally modify it and of course avoiding a lot of boilerplate is nice as well.\n\n::: modules/libpref/Preferences.cpp:4708\n(Diff revision 1)\n> +\n> +  Preferences::AddUintVarCache(aCache, aName, aDefaultValue, true);\n> +}\n> +\n> +static void\n> +RegisterStaticPref(const char* aName, float* aCache, const char* aDefaultValue)\n\nSeems like `aDefaultValue` shouldn't need to be a string. Either we could pass in just the float value and stringify via AppendFloat or we could pass in the float value *and* a macro-fu stringified value.\n\n::: modules/libpref/StaticPrefs.h:49\n(Diff revision 1)\n> +// njn: could assert in the getter that it's been initialized...\n> +// [but this would require moving it back into the .cpp file to access the\n> +// isInitialized data...]\n> +#define PRF(str, id, cpp_type, value)                                          \\\n> +private:                                                                       \\\n> +  static cpp_type sVarCache_##id;                                              \\\n\nOne argument for generating this with a script is that we could attempt to order the prefs so that the struct packs well.\n\nWe should also be able to initialize the values right?\n\n::: modules/libpref/init/All.h:44\n(Diff revision 1)\n> +//   the StaticPrefs class. For consistency, the identifier for every pref\n> +//   should be created like so:\n> +//   - start with <pref-name-string>;\n> +//   - convert any '.' chars to '__';\n> +//   - convert any '-' chars to '_'.\n> +//   For example, \"foo.bar_baz\" becomes |foo__bar_baz|. Ugly, but clear!\n\nThe ergonomics of this are rough, but I don't have a better solution. I agree with previous comments that this adding a transform step rather than just macros would help with folks not adhearing to the rules.", "author": "erahm@mozilla.com", "id": 13043519, "time": "2018-02-15T01:29:35Z"}, {"text": "> > +static void\n> > +RegisterStaticPref(const char* aName, float* aCache, const char* aDefaultValue)\n> \n> Seems like `aDefaultValue` shouldn't need to be a string.\n\nTrue. I'm planning to extend this scheme to non-VarCache prefs as well, and there's a danger case where a person may specify an integer literal for a pref that's meant to be a float and the system could install it as an int pref instead of a float-as-string pref, and then lookups won't work properly. But I think I can defend against that case if I'm careful.\n\n> We should also be able to initialize the values right?\n\nAn argument against that is that if they're all initially zero then they should end up in the .bss section, which doesn't take up any disk space.", "author": "n.nethercote@gmail.com", "id": 13043775, "time": "2018-02-15T05:32:52Z"}, {"text": "> Please do not use double underscores. They are always reserved for compilers.\n\nGood point! Thank you. I'll switch to using single underscores to replace both '.' and '-'. It's a lossy conversion (i.e. you can't get the original string back from the identifer) but I think it's good enough.", "author": "n.nethercote@gmail.com", "id": 13043778, "time": "2018-02-15T05:33:48Z"}, {"text": "> I *do* think it's nice that we're preventing direct access to var so you\n> can't accidentally modify it\n\nYes -- see bug 1438433 where I am fixing exactly such a modification :)", "author": "n.nethercote@gmail.com", "id": 13043830, "time": "2018-02-15T06:08:10Z"}, {"text": "(In reply to Nicholas Nethercote [:njn] from comment #14)\n> An argument against that is that if they're all initially zero then they\n> should end up in the .bss section, which doesn't take up any disk space.\n\nBut in that case the values are still inline in the code. They still take space. Sometimes even more.\n\n#include <stdlib.h>\n\nsize_t foo;\nchar* bar;\n\n__attribute__((constructor))\nvoid init() {\n    foo = 1;\n    bar = \"bar\";\n}\n\n\n00000000000004e0 <init>:\n 4e0:\t48 8d 05 fe 00 00 00 \tlea    0xfe(%rip),%rax        # 5e5 <_fini+0x9>\n 4e7:\t48 c7 05 3e 0b 20 00 \tmovq   $0x1,0x200b3e(%rip)        # 201030 <foo>\n 4ee:\t01 00 00 00 \n 4f2:\t48 89 05 2f 0b 20 00 \tmov    %rax,0x200b2f(%rip)        # 201028 <bar>\n 4f9:\tc3                   \tretq   \n 4fa:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n\n\nFirst instruction (7 bytes) calculates the pointer to \"bar\", and the third (7) stores it in bar. That's 14 bytes for a string literal.\nSecond instruction (11 bytes) puts 1 in foo.\n\nThat's 25 bytes of code, 4 bytes for the literal string, and 16 bytes of .bss.\n\nCompare with:\n#include <stdlib.h>\n\nsize_t foo = 1;\nchar* bar = \"bar\";\n\nNo code, still 4 bytes for the literal string, and 16 bytes of .data.\n\n... but there's also one relocation to fill the pointer that didn't exist before, and on Linux, those are not cheap in space (24 bytes on 64-bits iirc ; except with elfhack, if they're next to other relocated data).\n\nSo filling strings with a function can win in space, but not integers.", "author": "mh+mozilla@glandium.org", "id": 13043894, "time": "2018-02-15T07:34:24Z"}, {"text": "well, except if you do char bar[] = \"bar\", because then you don't get a relocation at all.", "author": "mh+mozilla@glandium.org", "id": 13043898, "time": "2018-02-15T07:36:26Z"}, {"text": "(except you can't reassign to that, obviously)", "author": "mh+mozilla@glandium.org", "id": 13043900, "time": "2018-02-15T07:37:58Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nLooks great to me too!\n\nThe one thing I disagree is about defining the default value here, instead of the existing prefs files. You say that it was to consolidate these in one place instead of two, but I believe it's the other way around: now there's one extra place to look for prefs when trying to find where a specific pref is defined, and what is its default value\n\nI believe this feature should only be about mapping (pref name) -> (variable), without including its value.\n\nWhich brings the question: what happens _if_ the pref is also defined in all.js or firefox.js?\n\n  - If all.js and firefox.js is able to correctly override the value, then in\n    reality you don't really need to have it defined here too\n\n  - If they are not able to override it, then this will break the standard\n    behavior and hierarchy of pref definitions, and it's guaranteed that this\n    will lead to bugs. E.g. when someone does a last-minute pref flip in\n    firefox.js (to disable a feature that is not ready to ship), but that\n    definition doesn't take effect because it's defined here.\n\n(just my 2 cents)", "author": "felipc@gmail.com", "id": 13059139, "time": "2018-02-21T21:01:21Z"}, {"text": ">  - If all.js and firefox.js is able to correctly override the value, then in\n>    reality you don't really need to have it defined here too\n\nFrom comment 6:\n\n> > > +// Prefs defined in this file should *not* be listed in a prefs data file such\n> > > +// as all.js.\n> > \n> > What happens if they are? Can we check for these named varcache prefs and\n> > err or warn appropriately if they're present when reading a prefs file?\n> \n> Currently I think the value from the file will be installed normally,\n> overwriting the value obtained from the VarCache installation. It would be\n> possible to add a check to detect this case.\n\nOne overarching goal is to define each pref in a single place. For C++ prefs (esp. VarCache ones) that will be in the new C++ file (All.h, or whatever name we end up using). It may be useful to allow people to override those default values via all.js -- it can saves a lot of recompiling when experimenting with different values. But that should be an exceptional case, perhaps one that triggers a warning that would be detected on automation.", "author": "n.nethercote@gmail.com", "id": 13060086, "time": "2018-02-22T03:26:00Z"}, {"text": "Created attachment 8961633\nBug 1436655 - Tweak the comment at the top of init/all.js.\n\n- The first two SYNTAX HINTS are wrong, and citing the syntax is more useful\n  than specifying a single example of what isn't allowed.\n\n- The sentence about #ifdefs is wrong. (#ifdefs appear all throughout, and\n  prefs are only specified once.)\n\n- I chose a better example file.\n\nReview commit: https://reviewboard.mozilla.org/r/230502/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/230502/", "author": "n.nethercote@gmail.com", "id": 13150494, "time": "2018-03-23T04:16:31Z"}, {"text": "Created attachment 8961634\nBug 1436655 - Tweak assertions in Add*VarCache() functions.\n\nThis avoids some repetition.\n\nReview commit: https://reviewboard.mozilla.org/r/230504/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/230504/", "author": "n.nethercote@gmail.com", "id": 13150495, "time": "2018-03-23T04:16:31Z"}, {"text": "Comment on attachment 8949289\nBug 1436655 - Rename pref_SetPref()'s aFromFile argument as aFromInit.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/218670/diff/1-2/", "author": "n.nethercote@gmail.com", "id": 13150496, "time": "2018-03-23T04:16:31Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nReview request updated; see interdiff: https://reviewboard.mozilla.org/r/218672/diff/1-2/", "author": "n.nethercote@gmail.com", "id": 13150497, "time": "2018-03-23T04:16:31Z"}, {"text": "Some notable changes from the old version, largely in response to comments:\n\n- init/All.h has been renamed init/StaticPrefList.h.\n\n- No use of double underscores in static pref identifiers.\n\n- It now NS_ERRORs if you have a pref in StaticPrefsList.h and a data file such\n  as all.js.\n\n- Float pref default values are now specified as floats in StaticPrefList.h,\n  rather than strings.\n\n- All VarCache variables for static prefs are now initialized in the binary,\n  rather than at registration time.\n\n- It still uses the preprocessor rather than code generation. It's simpler, and\n  nsCSSPropList.h is precedent for macros of this style that require both a\n  string form and an identifier form :)", "author": "n.nethercote@gmail.com", "id": 13150530, "time": "2018-03-23T05:00:57Z"}, {"text": "There are several concerns about this approach:\n1. we would not be able to access prefs from Rust code like what we currently do in stylo (via bindings of static member fields generated by bindgen), which may lead to regressed performance and code scalability\n2. any change to that list would trigger a rebuild on a much wider range than current", "author": "xidorn+moz@upsuper.org", "id": 13150566, "time": "2018-03-23T05:42:39Z"}, {"text": "(In reply to Xidorn Quan [:xidorn] UTC+10 from comment #27)\n> There are several concerns about this approach:\n> 1. we would not be able to access prefs from Rust code like what we\n> currently do in stylo (via bindings of static member fields generated by\n> bindgen), which may lead to regressed performance and code scalability\n\nPref access from Rust code will be very similar to what we already have. See bug 1448225.\n\n> 2. any change to that list would trigger a rebuild on a much wider range\n> than current\n\nYes. That's the main downside of the patch, as described in the commit message. I think it's a worthwhile trade-off given the large number of benefits.", "author": "n.nethercote@gmail.com", "id": 13150612, "time": "2018-03-23T06:37:38Z"}, {"text": "Comment on attachment 8961633\nBug 1436655 - Tweak the comment at the top of init/all.js.\n\nhttps://reviewboard.mozilla.org/r/230502/#review236850\n\n::: modules/libpref/init/all.js:8\n(Diff revision 1)\n> - * for example xpfe/bootstrap/browser-prefs.js\n> + * for example browser/defaults/preferences/firefox.js.\n>   *\n> - * Platform-specific #ifdefs at the end of this file override the generic\n> - * entries at the top.\n> + * For the syntax used by this file, consult the comments at the top of\n> + * modules/libpref/parser/src/lib.rs.\n\nnit: one of those paths is a path in the build, and the other in the source tree.", "author": "mh+mozilla@glandium.org", "id": 13157467, "time": "2018-03-27T00:26:52Z"}, {"text": "Comment on attachment 8961634\nBug 1436655 - Tweak assertions in Add*VarCache() functions.\n\nhttps://reviewboard.mozilla.org/r/230504/#review236852", "author": "mh+mozilla@glandium.org", "id": 13157472, "time": "2018-03-27T00:29:01Z"}, {"text": "Comment on attachment 8949290\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary.\n\nhttps://reviewboard.mozilla.org/r/218672/#review236860", "author": "mh+mozilla@glandium.org", "id": 13157489, "time": "2018-03-27T00:44:02Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/c34cc8156a71b1feab6cf4351b80ac60cd12cc78\nBug 1436655 - Rename pref_SetPref()'s aFromFile argument as aFromInit. r=glandium\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/8509ebf8fbb3af7e580c85aa73d5bb4a9b78c61a\nBug 1436655 - Tweak the comment at the top of init/all.js. r=glandium\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/08af6778dd6a669e896d61ef7599a75d7024d5fd\nBug 1436655 - Tweak assertions in Add*VarCache() functions. r=glandium\n\nhttps://hg.mozilla.org/integration/mozilla-inbound/rev/16ac5bd4e50c50a62316828b586c5e7a60b28e99\nBug 1436655 - Introduce a mechanism for VarCache prefs to be defined entirely in the binary. r=glandium", "author": "n.nethercote@gmail.com", "id": 13157626, "time": "2018-03-27T02:34:37Z"}, {"text": "(In reply to Nicholas Nethercote [:njn] from comment #26)\n> - It now NS_ERRORs if you have a pref in StaticPrefsList.h and a data file\n> such\n>   as all.js.\n\nCan we make a test that will fail when this situation happens?\n\n\nTwo nits I noticed when reading the documentation comments:\n\n> +// Prefs defined in this file should *not* be listed in a prefs data file such\n> +// as all.js. If they are, CheckForExistence() will issue an NS_ERROR.\n\ns/CheckForExistence/CheckForDoubleDefinition/\n\n> +// ... Note that float prefs are\n> +//   stored internally as floats.\n\nas strings", "author": "felipc@gmail.com", "id": 13157771, "time": "2018-03-27T04:49:39Z"}, {"text": "> > - It now NS_ERRORs if you have a pref in StaticPrefsList.h and a data file\n> > such\n> >   as all.js.\n> \n> Can we make a test that will fail when this situation happens?\n\nThere's no need -- if it happens the presence of the NS_ERROR will cause various tests to fail. (I did this by accident with one try push while developing the patch!)\n\n> Two nits I noticed when reading the documentation comments:\n\nThanks, I will fix.", "author": "n.nethercote@gmail.com", "id": 13157820, "time": "2018-03-27T05:28:35Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/dabcac07c6835679aaeb585b3d991f5a805a3ffb\nBug 1436655 - Fix up two minor mistakes in comments. r=me", "author": "n.nethercote@gmail.com", "id": 13157822, "time": "2018-03-27T05:32:02Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/c34cc8156a71\nhttps://hg.mozilla.org/mozilla-central/rev/8509ebf8fbb3\nhttps://hg.mozilla.org/mozilla-central/rev/08af6778dd6a\nhttps://hg.mozilla.org/mozilla-central/rev/16ac5bd4e50c\nhttps://hg.mozilla.org/mozilla-central/rev/dabcac07c683", "author": "btara@mozilla.com", "id": 13158331, "time": "2018-03-27T10:53:10Z"}, {"text": "(In reply to Nicholas Nethercote [:njn] from comment #34)\n> > > - It now NS_ERRORs if you have a pref in StaticPrefsList.h and a data file\n> > > such\n> > >   as all.js.\n> > \n> > Can we make a test that will fail when this situation happens?\n> \n> There's no need -- if it happens the presence of the NS_ERROR will cause\n> various tests to fail. (I did this by accident with one try push while\n> developing the patch!)\n\nUnfortunately, this caused bustage for Thunderbird. The prefs network.auth.subresource-img-cross-origin-http-auth-allow and network.auth.non-web-content-triggered-resources-http-auth-allow are now defined in StaticPrefList.h, but Thunderbird overrides their values in all-thunderbird.js. (See bug 1449143.)\n\nThe checking fundamentally isn't compatible with Thunderbird operating in this way. I think I'm just going to have to disable the checking :(", "author": "n.nethercote@gmail.com", "id": 13161743, "time": "2018-03-27T22:46:57Z"}, {"text": "(In reply to Nicholas Nethercote [:njn] from comment #37)\n> Unfortunately, this caused bustage for Thunderbird. The prefs\n> network.auth.subresource-img-cross-origin-http-auth-allow and\n> network.auth.non-web-content-triggered-resources-http-auth-allow are now\n> defined in StaticPrefList.h, but Thunderbird overrides their values in\n> all-thunderbird.js. (See bug 1449143.)\n> \n> The checking fundamentally isn't compatible with Thunderbird operating in\n> this way. I think I'm just going to have to disable the checking :(\n\nCould we disable the check only if we're building Thunderbird?  Set a define in moz.build based on the value of MOZ_BUILD_APP or something?", "author": "nfroyd@mozilla.com", "id": 13163020, "time": "2018-03-28T12:04:33Z"}, {"text": "> Could we disable the check only if we're building Thunderbird?  Set a define\n> in moz.build based on the value of MOZ_BUILD_APP or something?\n\nAn \"is this Firefox?\" check would be safer than \"is this Thunderbird?\", because of Seamonkey and possibly other products.\n\nEven then, it's possible that people who distribute Firefox (e.g. Linux packagers) would add their own .js files containing pref overrides. Maybe an NS_ERROR doesn't matter to them; I'm not sure.", "author": "n.nethercote@gmail.com", "id": 13164543, "time": "2018-03-28T19:29:44Z"}, {"text": "*** Bug 1346224 has been marked as a duplicate of this bug. ***", "author": "n.nethercote@gmail.com", "id": 13197258, "time": "2018-04-11T10:22:09Z"}, {"text": "Should we add a deprecation comment to Add*VarCache functions and/or post on .platform about this new way of doing things?", "author": "bzbarsky@mit.edu", "id": 13269420, "time": "2018-05-10T21:32:17Z"}, {"text": "And just to make sure I understand how this works, can we still ship pref overrides to the static prefs without shipping a new binary, via whatever mechanism we have for deploying pref flips on release if needed?", "author": "bzbarsky@mit.edu", "id": 13269426, "time": "2018-05-10T21:34:14Z"}, {"text": "(In reply to Boris Zbarsky [:bz] (no decent commit message means r-) from comment #41)\n> Should we add a deprecation comment to Add*VarCache functions and/or post on\n> .platform about this new way of doing things?\n\nProbably. I've been meaning to file a bunch of bugs about converting the existing Add*VarCache calls.\n\n> And just to make sure I understand how this works, can we still ship pref\n> overrides to the static prefs without shipping a new binary, via whatever\n> mechanism we have for deploying pref flips on release if needed?\n\nYes. If a pref value is given in one of the data files (e.g. all.js) that will override the statically-provided value.(Thunderbird relies on this.)", "author": "n.nethercote@gmail.com", "id": 13269740, "time": "2018-05-11T00:55:11Z"}], "id": 1436655, "priority": "--", "cc": ["bugzilla@twinql.com", "cdenizet@mozilla.com", "continuation@gmail.com", "ehsan@mozilla.com", "erahm@mozilla.com", "felipc@gmail.com", "gandalf@aviary.pl", "honzab.moz@firemni.cz", "jcristau@mozilla.com", "mcastelluccio@mozilla.com", "mh+mozilla@glandium.org", "nfroyd@mozilla.com", "nika@thelayzells.com", "xidorn+moz@upsuper.org"], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1437168, 1448219, 1436916, 1465852], "qa_contact": "", "creation_time": "2018-02-08T05:51:11Z", "cf_status_firefox_esr52": "---", "component": "Preferences: Backend", "assigned_to_detail": {"email": "n.nethercote@gmail.com", "id": 334849, "name": "n.nethercote@gmail.com", "real_name": "Nicholas Nethercote [:njn]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "fixed", "cf_status_firefox60": "wontfix", "target_milestone": "mozilla61", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "n.nethercote@gmail.com", "id": 334849, "name": "n.nethercote@gmail.com", "real_name": "Nicholas Nethercote [:njn]"}, "whiteboard": "", "mentors": [], "summary": "Introduce a mechanism for prefs to be defined entirely in the binary", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-31T16:38:33Z", "assigned_to": "n.nethercote@gmail.com", "is_open": false, "history": [{"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8949289, "added": "review?(mh+mozilla@glandium.org)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8949290, "added": "review?(mh+mozilla@glandium.org), review?(nfroyd@mozilla.com)"}, {"removed": "", "field_name": "cc", "added": "mh+mozilla@glandium.org, nfroyd@mozilla.com"}], "who": "n.nethercote@gmail.com", "when": "2018-02-08T05:56:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "erahm@mozilla.com, felipc@gmail.com, rnewman@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "review?(mh+mozilla@glandium.org), review?(nfroyd@mozilla.com)", "attachment_id": 8949290, "added": "feedback?(mh+mozilla@glandium.org), feedback?(nfroyd@mozilla.com), feedback?(erahm@mozilla.com), feedback?(felipc@gmail.com), feedback?(rnewman@mozilla.com)"}], "who": "n.nethercote@gmail.com", "when": "2018-02-08T05:59:28Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8949290, "added": "review+"}], "who": "bugzilla@twinql.com", "when": "2018-02-08T20:15:00Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+, feedback?(rnewman@mozilla.com)", "attachment_id": 8949290, "added": "feedback+"}], "who": "bugzilla@twinql.com", "when": "2018-02-08T20:15:26Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1436916"}], "who": "n.nethercote@gmail.com", "when": "2018-02-09T04:52:20Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gandalf@aviary.pl"}], "who": "gandalf@aviary.pl", "when": "2018-02-09T23:26:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mcastelluccio@mozilla.com"}], "who": "mcastelluccio@mozilla.com", "when": "2018-02-10T00:58:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "continuation@gmail.com"}], "who": "continuation@gmail.com", "when": "2018-02-12T18:37:50Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8949290, "added": "review?(nfroyd@mozilla.com)"}], "who": "nfroyd@mozilla.com", "when": "2018-02-12T20:43:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(nfroyd@mozilla.com), feedback?(nfroyd@mozilla.com)", "attachment_id": 8949290, "added": "feedback+"}], "who": "nfroyd@mozilla.com", "when": "2018-02-12T20:43:55Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mh+mozilla@glandium.org)", "attachment_id": 8949289, "added": "review+"}], "who": "mh+mozilla@glandium.org", "when": "2018-02-13T09:33:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(erahm@mozilla.com)", "attachment_id": 8949290, "added": "feedback+"}], "who": "erahm@mozilla.com", "when": "2018-02-15T01:30:11Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(mh+mozilla@glandium.org)", "attachment_id": 8949290, "added": "feedback+"}], "who": "mh+mozilla@glandium.org", "when": "2018-02-15T07:38:29Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1437168"}], "who": "n.nethercote@gmail.com", "when": "2018-02-15T22:04:03Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1436911"}], "who": "n.nethercote@gmail.com", "when": "2018-02-15T22:06:02Z"}, {"changes": [{"removed": "Introduce a mechanism for VarCache prefs to be defined entirely in the binary", "field_name": "summary", "added": "Introduce a mechanism for prefs to be defined entirely in the binary"}], "who": "n.nethercote@gmail.com", "when": "2018-02-16T03:45:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "feedback?(felipc@gmail.com)", "attachment_id": 8949290, "added": "feedback+"}], "who": "felipc@gmail.com", "when": "2018-02-21T21:01:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ehsan@mozilla.com"}], "who": "ehsan@mozilla.com", "when": "2018-03-08T23:39:10Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8961633, "added": "review?(mh+mozilla@glandium.org)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8961634, "added": "review?(mh+mozilla@glandium.org)"}, {"field_name": "flagtypes.name", "removed": "feedback+, feedback+, feedback+, feedback+, feedback+", "attachment_id": 8949290, "added": "review?(mh+mozilla@glandium.org)"}], "who": "n.nethercote@gmail.com", "when": "2018-03-23T04:16:31Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1448219"}], "who": "n.nethercote@gmail.com", "when": "2018-03-23T04:42:59Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "xidorn+moz@upsuper.org"}], "who": "xidorn+moz@upsuper.org", "when": "2018-03-23T05:42:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mh+mozilla@glandium.org)", "attachment_id": 8961633, "added": "review+"}], "who": "mh+mozilla@glandium.org", "when": "2018-03-27T00:26:52Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mh+mozilla@glandium.org)", "attachment_id": 8961634, "added": "review+"}], "who": "mh+mozilla@glandium.org", "when": "2018-03-27T00:29:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(mh+mozilla@glandium.org)", "attachment_id": 8949290, "added": "review+"}], "who": "mh+mozilla@glandium.org", "when": "2018-03-27T00:44:02Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-03-27 10:53:10"}, {"removed": "---", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "btara@mozilla.com", "when": "2018-03-27T10:53:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cdenizet@mozilla.com"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "n.nethercote@gmail.com"}], "who": "cdenizet@mozilla.com", "when": "2018-03-27T12:30:04Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1449143"}], "who": "n.nethercote@gmail.com", "when": "2018-03-27T22:50:54Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jcristau@mozilla.com"}, {"removed": "affected", "field_name": "cf_status_firefox60", "added": "wontfix"}], "who": "jcristau@mozilla.com", "when": "2018-04-03T14:42:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nika@thelayzells.com"}], "who": "n.nethercote@gmail.com", "when": "2018-04-11T10:22:09Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(n.nethercote@gmail.com)"}], "who": "bzbarsky@mit.edu", "when": "2018-05-10T21:34:14Z"}, {"changes": [{"removed": "needinfo?(n.nethercote@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "n.nethercote@gmail.com", "when": "2018-05-11T00:55:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "honzab.moz@firemni.cz"}], "who": "honzab.moz@firemni.cz", "when": "2018-05-11T08:40:10Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1465852"}], "who": "bzbarsky@mit.edu", "when": "2018-05-31T16:38:33Z"}], "resolution": "FIXED", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}