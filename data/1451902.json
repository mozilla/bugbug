{"cf_tracking_thunderbird_esr52": "---", "status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "classification": "Components", "creator": "mstange@themasta.com", "cc": ["ehsan@mozilla.com", "erahm@mozilla.com", "gps@mozilla.com", "jmuizelaar@mozilla.com", "jryans@gmail.com", "jseward@acm.org", "mh+mozilla@glandium.org", "mks@sinz.org", "past@mozilla.com", "rjesup@jesup.org", "ted@mielczarek.org"], "depends_on": [], "creation_time": "2018-04-05T21:05:37Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "summary": "Consider shipping release builds with frame pointers enabled on macOS", "cf_last_resolved": null, "attachments": [], "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "comments": [{"text": "On macOS, our Nightlies are built with frame pointers enabled, ever since bug 764216. However, our Beta and Release builds are not.\n\nThe only way that the Gecko Profiler is able to unwind native stacks on macOS is using frame pointers. This means that we only have working stackwalking support on Nightly, and not on release builds. If our users submit a profile that was taken on a Mac release build, that profile does not contain any native stacks; it only contains JS stacks and pseudo stacks but is otherwise rather flat and unhelpful.\n\nOn other platforms, the situation is as follows:\n - On Windows 32 bit builds, we have chosen to take the hit and have enabled frame pointers on release. This was done in bug 1322735.\n - On Windows 64 bit builds, there is no way to enable frame pointers. Stackwalking in those builds makes use of unwinding tables.\n - On Linux, 32 bit and 64 bit, the situation is the same as on Mac: We have frame pointers on Nightly but not on Beta or Release. On Beta and Release, we use lul for unwinding, which consults unwinding tables in the binary.\n\nLul does not currently support unwinding with unwinding tables on macOS. It could be extended to support it but it would be some work.\n\nThe easiest way to get useful profiles from release users would be to enable frame pointers on Beta and Release builds on macOS. This might come with a small perf impact.", "author": "mstange@themasta.com", "id": 13184536, "time": "2018-04-05T21:05:37Z"}, {"text": "Why did we disable frame pointers in the first place? To have an extra register available to the compiler? Bug 492688 seems to indicate possibly so.\n\nAssuming this is about performance, the decision to omit frame pointers was made when we used 32-bit builds pretty much everywhere. My understanding is the extra register doesn't buy you much on 64-bit processors because 64-bit processors have more registers available. I think having stack unwinding and a consistent build between Nightly and release is more important than <some> raw performance. Quantifying <some> is not something I'm comfortable answering.\n\nSo if this is about performance, let's throw some builds through our perf tests so we can make a data-informed decision?\n\nted: you live at the intersection of builds, crash handling, and are a general repository of knowledge. Anything you'd like to add?", "author": "gps@mozilla.com", "id": 13184623, "time": "2018-04-05T21:33:31Z"}, {"text": "(In reply to Markus Stange [:mstange] from comment #0)\n> The easiest way to get useful profiles from release users would be to enable\n> frame pointers on Beta and Release builds on macOS. This might come with a\n> small perf impact.\n\nOn the Win32 side there were only a couple small regressions on PGO builds (bug 1322735, comment 12) and a 0.19% increase in the size of libxul. That might be a good baseline for evaluating what we deem as okay.", "author": "erahm@mozilla.com", "id": 13184641, "time": "2018-04-05T21:37:04Z"}, {"text": "(In reply to Gregory Szorc [:gps] from comment #1)\n> Why did we disable frame pointers in the first place? To have an extra\n> register available to the compiler? Bug 492688 seems to indicate possibly so.\n\nThat sounds right, but that decision was obviously made when we were shipping x86 binaries on Mac, not x86-64. I doubt we've ever revisited that decision in light of shipping on x86-64. The odd thing is that on x86-64 the ABI spec says that frame pointers should be omitted by default despite having plenty of registers because the ABI also mandates having unwind info (like .eh_frame). Despite that, it looks like clang on Mac doesn't actually default to omitting frame pointers.\n\nBecause of the amount of available registers on x86-64 compared to x86 the perf hit should be much smaller. It would be entirely due to having the extra instructions for pushing and popping the frame pointer register in each function, and the slight codesize increase due to this.\n\n(In reply to Markus Stange [:mstange] from comment #0)\n>  - On Linux, 32 bit and 64 bit, the situation is the same as on Mac: We have\n> frame pointers on Nightly but not on Beta or Release. On Beta and Release,\n> we use lul for unwinding, which consults unwinding tables in the binary.\n> \n> Lul does not currently support unwinding with unwinding tables on macOS. It\n> could be extended to support it but it would be some work.\n\nIs there any particular reason here other than nobody did the work? Mach-O binaries use the same eh_frame data as ELF binaries, so it doesn't seem like it'd be that hard to wire this up. Presumably it's just a matter of dealing with the platform-specific bits?\n\nI would generally defer this decision to someone with better knowledge of the CPU architecture like jrmuizel. It should be easy enough to flip the setting, push to try, and get talos data for comparison.", "author": "ted@mielczarek.org", "id": 13229376, "time": "2018-04-24T12:47:25Z"}, {"text": "(In reply to Ted Mielczarek [:ted.mielczarek] from comment #3)\n> > Lul does not currently support unwinding with unwinding tables on macOS. It\n> > could be extended to support it but it would be some work.\n> \n> Is there any particular reason here other than nobody did the work? Mach-O\n> binaries use the same eh_frame data as ELF binaries, so it doesn't seem like\n> it'd be that hard to wire this up. Presumably it's just a matter of dealing\n> with the platform-specific bits?\n\nI think this didn't happen because we've never seriously considered using\nLUL to unwind on OSX (until now).  It wouldn't be a big deal to write a\nMach-O parser for LUL if we wanted.  That would, as Ted implies, find the\nrelevant Dwarf unwind info sections, which we'd just hand off to LUL as at\npresent.\n\nHowever, isn't there some complication in which Mach-O debuginfo is not\nlinked into .dsym files, but held separately?  I seem to remember some\ncomplication with this, and the use of the dsymutil program, as a workaround\nfrom Valgrind-on-OSX days.  But I'm not sure of the details and also not\nsure if this is actually relevant here.", "author": "jseward@acm.org", "id": 13229453, "time": "2018-04-24T13:26:30Z"}, {"text": "You're correct, but thankfully Apple's toolchain does put .eh_frame directly in the binary itself:\n\n$ objdump --section-headers /Applications/Firefox.app/Contents/MacOS/firefox\n\n/Applications/Firefox.app/Contents/MacOS/firefox:     file format mach-o-x86-64\n\nSections:\nIdx Name          Size      VMA               LMA               File off  Algn\n  0 .text         00000ced  0000000100000cd0  0000000100000cd0  00000cd0  2**4\n                  CONTENTS, ALLOC, LOAD, CODE\n  1 __TEXT.__stubs 000000d8  00000001000019be  00000001000019be  000019be  2**1\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  2 __TEXT.__stub_helper 00000164  0000000100001a98  0000000100001a98  00001a98  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  3 .cstring      000001c5  0000000100001bfc  0000000100001bfc  00001bfc  2**0\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  4 __TEXT.__unwind_info 00000088  0000000100001dc4  0000000100001dc4  00001dc4  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  5 .eh_frame     000001b0  0000000100001e50  0000000100001e50  00001e50  2**3\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n<...>\n\nThere's also that __unwind_info section which is unwind info in Apple's \"compact unwind encoding\":\nhttps://github.com/llvm-mirror/libunwind/blob/master/include/mach-o/compact_unwind_encoding.h\n\nI've never dug into it but it looks extremely similar to the ARM unwind tables or the Win64 unwind info.", "author": "ted@mielczarek.org", "id": 13229505, "time": "2018-04-24T13:47:55Z"}, {"text": "(In reply to Ted Mielczarek [:ted.mielczarek] from comment #5)\n> There's also that __unwind_info section which is unwind info in Apple's\n> \"compact unwind encoding\":\n\nWithout looking at it in detail .. I'd guess those could be converted into\nLUL's internal unwind records at the point LUL reads the info.  So then\nit could seamlessly unwind with any mixture of \"compact unwind\" and\ntraditional Dwarf CFI.  Some time in the past there was a similar scheme\nto read ARM32 EXIDX into LUL (it worked, but has since been removed).", "author": "jseward@acm.org", "id": 13229527, "time": "2018-04-24T13:56:00Z"}], "id": 1451902, "priority": "--", "mentors_detail": [], "comment_count": 7, "cf_status_thunderbird_esr52": "---", "cf_qa_whiteboard": "", "version": "Version 3", "cf_tracking_firefox62": "---", "cf_platform_rel": "---", "product": "Firefox Build System", "cf_fx_iteration": "---", "blocks": [1307215], "qa_contact": "", "see_also": [], "cf_status_firefox_esr52": "---", "component": "General", "votes": 0, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "is_cc_accessible": true, "cf_tracking_thunderbird_esr60": "---", "groups": [], "cf_tracking_firefox_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "mstange@themasta.com", "id": 293943, "name": "mstange@themasta.com", "real_name": "Markus Stange [:mstange]"}, "whiteboard": "[perf-tools]", "mentors": [], "cc_detail": [{"email": "ehsan@mozilla.com", "id": 251051, "name": "ehsan@mozilla.com", "real_name": ":Ehsan Akhgari"}, {"email": "erahm@mozilla.com", "id": 496127, "name": "erahm@mozilla.com", "real_name": "Eric Rahm [:erahm] (please no mozreview requests)"}, {"email": "gps@mozilla.com", "id": 420446, "name": "gps@mozilla.com", "real_name": "Gregory Szorc [:gps]"}, {"email": "jmuizelaar@mozilla.com", "id": 309398, "name": "jmuizelaar@mozilla.com", "real_name": "Jeff Muizelaar [:jrmuizel] on parental leave until at least June 25"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "jseward@acm.org", "id": 346453, "name": "jseward@acm.org", "real_name": "Julian Seward [:jseward]"}, {"email": "mh+mozilla@glandium.org", "id": 47192, "name": "mh+mozilla@glandium.org", "real_name": "Mike Hommey [:glandium]"}, {"email": "mks@sinz.org", "id": 29564, "name": "mks@sinz.org", "real_name": "Michael Sinz"}, {"email": "past@mozilla.com", "id": 363318, "name": "past@mozilla.com", "real_name": "Panos Astithas [:past] (please ni?)"}, {"email": "rjesup@jesup.org", "id": 11539, "name": "rjesup@jesup.org", "real_name": "Randell Jesup [:jesup]"}, {"email": "ted@mielczarek.org", "id": 39022, "name": "ted@mielczarek.org", "real_name": "Ted Mielczarek [:ted.mielczarek]"}], "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-04-24T13:56:00Z", "cf_status_firefox_esr60": "---", "assigned_to": "nobody@mozilla.org", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2018-04-05T21:07:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "past@mozilla.com"}], "who": "past@mozilla.com", "when": "2018-04-05T21:08:44Z"}, {"changes": [{"removed": "", "field_name": "whiteboard", "added": "[perf-tools]"}], "who": "past@mozilla.com", "when": "2018-04-05T21:27:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ehsan@mozilla.com, gps@mozilla.com, ted@mielczarek.org"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(ted@mielczarek.org)"}], "who": "gps@mozilla.com", "when": "2018-04-05T21:33:31Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "erahm@mozilla.com, jseward@acm.org, mh+mozilla@glandium.org"}], "who": "erahm@mozilla.com", "when": "2018-04-05T21:38:13Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mks@sinz.org, rjesup@jesup.org"}], "who": "rjesup@jesup.org", "when": "2018-04-06T00:52:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jmuizelaar@mozilla.com"}, {"removed": "needinfo?(ted@mielczarek.org)", "field_name": "flagtypes.name", "added": ""}], "who": "ted@mielczarek.org", "when": "2018-04-24T12:47:25Z"}], "resolution": "", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}