{"cf_tracking_thunderbird_esr52": "---", "cf_status_firefox39": "fixed", "cf_tracking_firefox60": "---", "attachments": [{"creator": "docfaraday@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2015-03-17T20:24:54Z", "type_id": 4, "creation_date": "2015-03-17T20:24:54Z", "id": 1124676, "setter": "docfaraday@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8578114}, {"creator": "docfaraday@gmail.com", "is_obsolete": 0, "is_patch": 0, "flags": [{"status": "+", "name": "review", "modification_date": "2015-06-10T15:36:19Z", "type_id": 4, "creation_date": "2015-06-10T15:36:19Z", "id": 1187983, "setter": "docfaraday@gmail.com"}], "content_type": "text/x-review-board-request", "id": 8619707}], "classification": "Components", "creator": "docfaraday@gmail.com", "mentors_detail": [], "depends_on": [], "cf_has_str": "---", "cf_user_story": "", "cf_backlog": "---", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "cc_detail": [{"email": "docfaraday@gmail.com", "id": 478411, "name": "docfaraday@gmail.com", "real_name": "Byron Campen [:bwc]"}, {"email": "jib@mozilla.com", "id": 456498, "name": "jib@mozilla.com", "real_name": "Jan-Ivar Bruaroey [:jib] (needinfo? me)"}, {"email": "mreavy@mozilla.com", "id": 74434, "name": "mreavy@mozilla.com", "real_name": "Maire Reavy [:mreavy] Plz needinfo?"}], "cf_last_resolved": "2015-03-21T19:34:56Z", "votes": 0, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 26, "comments": [{"text": "When removing a track, the track is not actually removed from the DOMMediaStream; PC merely stops using it. Unfortunately, there is checking in pc.js that uses the set of all tracks on all local streams to verify SDP and such, leading to false failures when the DOMMediaStream still has a track in use (only one of multiple tracks was removed).", "author": "docfaraday@gmail.com", "id": 10005202, "time": "2015-03-09T19:21:46Z"}, {"text": "So, to fix this \"right\" we probably want to augment expectedLocalTrackTypesById (and friends) to carry information about stream ids as well, and then use them to check things like the list of RtpSender/Receivers, msid attributes in SDP, the number of expected ICE streams, etc:\n\nhttps://dxr.mozilla.org/mozilla-central/source/dom/media/tests/mochitest/pc.js#878\n\nThe trouble is, in removeTrack() we need to modify this, but don't know the stream id (and currently have no way of knowing without tagging RtpSenders with an extra property to hold the stream id):\n\nhttps://dxr.mozilla.org/mozilla-central/source/dom/media/tests/mochitest/pc.js#896\n\nIf we assume that a track is never added to more than one stream, then we're ok (we just remove the only entry with that track id), but I'm not sure when we think we'll start supporting this. Alternately, we could add a |stream| member for the WebIDL of RtpSender, and populate it, but I'm not sure how palatable that would be (as a bonus, this would let us avoid modifying |senderReplaceTrack| to take a stream id). Or, we could just add a property to the RtpSenders from pc.js and call it a day.\n\njib, how do these options sound to you?", "author": "docfaraday@gmail.com", "id": 10023414, "time": "2015-03-12T22:14:03Z"}, {"text": "OK so I have a better understanding of remote streams now thanks to Justin [1].\n\nIn short, remote streams don't track real local streams at all, rather they track the stream arguments of pc.addTrack(), and that's it.\n\nIn other words, users can totally re-plumb their tracks and streams locally without this affecting the remote side one bit. To alter the remote picture, one would have to explicitly call pc.removeTrack(track) followed by pc.addTrack(track, newstream1, newstream2 etc.) and wait for renegotiation.\n\nSo we need to track the arguments given to pc.addTrack and use those for msids. Tests are obviously affected as well.\n\nWe need to figure out how this affects legacy getLocalStreams(), but it's probably OK to have that only work for people who call addStream rather than addTrack. \n\n[1] https://github.com/w3c/webrtc-pc/pull/195#issuecomment-78777881", "author": "jib@mozilla.com", "id": 10026941, "time": "2015-03-13T17:05:39Z"}, {"text": "Created attachment 8578114\nMozReview Request: bz://1141230/bwc\n\n/r/5439 - Bug 1141230: Stop using getLocalStreams() to drive checking of various things in the mochitest suite.\n\nPull down this commit:\n\nhg pull review -r 2e2d817ef53e5598c1247c4bd0bf859b201dcbca", "author": "docfaraday@gmail.com", "id": 10034995, "time": "2015-03-16T17:32:32Z"}, {"text": "Comment on attachment 8578114\nMozReview Request: bz://1141230/bwc\n\n/r/5439 - Bug 1141230: Stop using getLocalStreams() to drive checking of various things in the mochitest suite.\n\nPull down this commit:\n\nhg pull review -r b5171e233999bdbfdd92e38fc59d9b9deb5ae947", "author": "docfaraday@gmail.com", "id": 10035675, "time": "2015-03-16T19:34:25Z"}, {"text": "Comment on attachment 8578114\nMozReview Request: bz://1141230/bwc\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=e4ebb142bd2b", "author": "docfaraday@gmail.com", "id": 10035683, "time": "2015-03-16T19:35:20Z"}, {"text": "Comment on attachment 8578114\nMozReview Request: bz://1141230/bwc\n\nhttps://reviewboard.mozilla.org/r/5437/#review4463\n\nlgtm! Just style nits.\n\n::: dom/media/tests/mochitest/pc.js\n(Diff revision 2)\n> -    if (Object.keys(this.expectedRemoteTrackTypesById).length === 0) {\n> +    if (Object.keys(this.expectedAndNotObservedRemoteTrackInfoById).length === 0) {\n\nObject.keys().length will never be wrong type, so prefer: if(!Object.keys(...).length)\n\n::: dom/media/tests/mochitest/templates.js\n(Diff revision 2)\n> -var checkAllTrackStats = pc =>\n> -    Promise.all([0, 1, 2, 3].map(i => checkTrackStats(pc, i & 1, i & 2)));\n> +  var promises = [].concat(\n> +    pc._pc.getSenders().map(sender => checkTrackStats(pc, sender, true)),\n> +    pc._pc.getReceivers().map(receiver => checkTrackStats(pc, receiver, false)));\n> +  return Promise.all(promises);\n\nMight as well put Promise.all at the top here.\n\n::: dom/media/tests/mochitest/templates.js\n(Diff revision 2)\n> -    Object.keys(test.pcLocal.observedRemoteTrackTypesById).forEach(id => {\n> -      delete test.pcLocal.expectedRemoteTrackTypesById[id];\n> +    Object.keys(test.pcLocal.observedRemoteTrackInfoById).forEach(id => {\n> +      delete test.pcLocal.expectedAndNotObservedRemoteTrackInfoById[id];\n\nI like s/id/key/ since it's not Object.ids()\n\n::: dom/media/tests/mochitest/templates.js\n(Diff revision 2)\n>      if (test.steeplechase) {\n>        return test.getSignalingMessage(\"remote_expected_tracks\").then(\n>            message => {\n> -            test.pcLocal.expectedRemoteTrackTypesById = message.expected_tracks;\n> +            test.pcLocal.expectedRemoteTrackInfoById = message.expected_tracks;\n>            });\n>      } else {\n\nDon't need else after return.\n\n::: dom/media/tests/mochitest/templates.js\n(Diff revision 2)\n> +    test.pcLocal.expectedAndNotObservedRemoteTrackInfoById =\n> +      JSON.parse(JSON.stringify(test.pcLocal.expectedRemoteTrackInfoById));\n> +\n>      // Remove what we've already observed\n> -    Object.keys(test.pcLocal.observedRemoteTrackTypesById).forEach(id => {\n> -      delete test.pcLocal.expectedRemoteTrackTypesById[id];\n> +    Object.keys(test.pcLocal.observedRemoteTrackInfoById).forEach(id => {\n> +      delete test.pcLocal.expectedAndNotObservedRemoteTrackInfoById[id];\n>      });\n\npc.expectedAndNotObservedRemoteTrackInfoById seems like a cache. Why not make it a function:\n\npc.getExpectedAndNotObservedRemoteTrackInfoById() ?\n\n::: dom/media/tests/mochitest/test_peerConnection_capturedVideo.html\n(Diff revision 2)\n>            stream.getTracks().forEach(tr => {\n>              test.pcLocal._pc.addTrack(tr, stream);\n> -            test.pcLocal.expectedLocalTrackTypesById[tr.id] = tr.kind;\n> +            test.pcLocal.expectedLocalTrackInfoById[tr.id] = {\n> +                type: tr.kind,\n\nmaybe s/tr/track/ ?\n\n::: dom/media/tests/mochitest/pc.js\n(Diff revision 2)\n>    checkLocalMediaTracks : function() {\n> -    var observedLocalTrackTypesById = {};\n> -    // We do not want to empty out this.expectedLocalTrackTypesById, so make a\n> +    var observedLocalTrackInfoById = {};\n> +    // We do not want to empty out this.expectedLocalTrackInfoById, so make a\n>      // copy.\n> -    var expectedLocalTrackTypesById =\n> -      JSON.parse(JSON.stringify((this.expectedLocalTrackTypesById)));\n> +    var expectedLocalTrackInfoById =\n> +      JSON.parse(JSON.stringify((this.expectedLocalTrackInfoById)));\n>      info(this + \" Checking local tracks \" +\n> -         JSON.stringify(expectedLocalTrackTypesById));\n> -    this._pc.getLocalStreams().forEach(stream => {\n> -      stream.getTracks().forEach(track => {\n> -        this.checkTrackIsExpected(track,\n> -                                  expectedLocalTrackTypesById,\n> +         JSON.stringify(expectedLocalTrackInfoById));\n> +    this._pc.getSenders().forEach(sender => {\n> +      this.checkTrackIsExpected(sender.track,\n> +                                expectedLocalTrackInfoById,\n> +                                observedLocalTrackInfoById);\n> -                                  observedLocalTrackTypesById);\n> -      });\n>      });\n>  \n> -    Object.keys(expectedLocalTrackTypesById).forEach(id => {\n> +    Object.keys(expectedLocalTrackInfoById).forEach(id => {\n>        ok(false, this + \" local id \" + id + \" was observed\");\n>      });\n>    },\n\nThis function seems like it could be shorter. How about:\n\n    checkLocalMediaTracks: function() {\n      // Don't empty out this.expectedLocalTrackInfoById, so make a copy\n      var copy = JSON.parse(JSON.stringify(this.expectedLocalTrackInfoById));\n      info(this + \" Checking local tracks \" + JSON.stringify(copy));\n      this._pc.getSenders().forEach(sender =>\n        this.checkTrackIsExpected(sender.track, copy, {}));\n      Object.keys(copy).forEach(id =>\n        ok(false, this + \" localid \" + id + \" was observed\"));\n    }\n\n::: dom/media/tests/mochitest/templates.js\n(Diff revision 2)\n> -function checkTrackStats(pc, audio, outbound) {\n> +function checkTrackStats(pc, rtpSenderOrReceiver, outbound) {\n\nMaybe senderOrReceiver? (I don't see rtp prefix anywhere else).\n\n::: dom/media/tests/mochitest/templates.js\n(Diff revision 2)\n> -    }), msg + \"2\");\n> +    }), msg + \" - did not find stats with wrong direction\");\n>      ok(!pc.hasStat(stats, {\n>        mediaType: audio ? \"video\" : \"audio\"\n> -    }), msg + \"3\");\n> +    }), msg + \" - did not find stats with wrong media type\");\n\nNegation here means double-negative when they actually fail, which is hard to read. How about:\n\n\" - stats have correct direction\"\n\n\" - stats have correct media type\"", "author": "jib@mozilla.com", "id": 10037769, "time": "2015-03-17T02:55:16Z"}, {"text": "https://reviewboard.mozilla.org/r/5437/#review4469\n\nI alredy r+ed this patch because I see it as an improvement, but it does not address comment 2.\n\n::: dom/media/tests/mochitest/pc.js\n(Diff revision 2)\n> -  senderReplaceTrack : function(index, withTrack) {\n> +  senderReplaceTrack : function(index, withTrack, withStreamId) {\n>      var sender = this._pc.getSenders()[index];\n> -    delete this.expectedLocalTrackTypesById[sender.track.id];\n> -    this.expectedLocalTrackTypesById[withTrack.id] = withTrack.kind;\n> +    delete this.expectedLocalTrackInfoById[sender.track.id];\n> +    this.expectedLocalTrackInfoById[withTrack.id] = {\n> +        type: withTrack.kind,\n> +        streamId: withStreamId\n> +      };\n\nIn the spec, pc.replaceTrack(withTrack) doesn't have any stream args because it does not alter the set of streams emitted to the other side.\n\nOnce we fix msids to come from the set of stream args given to addTrack, then this test is wrong, because it replaces the expected track and later compares it against msid.\n\nBut this requires a code-change as well as a test change, so we should probably open a new bug on that.\n\n::: dom/media/tests/mochitest/pc.js\n(Diff revision 2)\n> -    checkSdpForMsids(this.localDescription, this._pc.getLocalStreams(),\n> +    checkSdpForMsids(this.localDescription, this.expectedLocalTrackInfoById,\n>                       \"local\");\n\nMsid's do not map to local tracks, but to the arguments of pc.addtrack().", "author": "jib@mozilla.com", "id": 10037801, "time": "2015-03-17T03:11:13Z"}, {"text": "s/do not/should not/", "author": "jib@mozilla.com", "id": 10037809, "time": "2015-03-17T03:13:40Z"}, {"text": "https://reviewboard.mozilla.org/r/5437/#review4509\n\n> Negation here means double-negative when they actually fail, which is hard to read. How about:\n> \n> \" - stats have correct direction\"\n> \n> \" - stats have correct media type\"\n\nUnfortunately, that's less accurate. These checks are attempting to verify that there aren't any rtp stats that we did not ask for. Maybe \" - did not find extra stats ...\" would be more clear. It would be nice if we could just validate that there was exactly one set of stats.\n\n> I like s/id/key/ since it's not Object.ids()\n\n\"Id\" here refers to the track id.\n\n> pc.expectedAndNotObservedRemoteTrackInfoById seems like a cache. Why not make it a function:\n> \n> pc.getExpectedAndNotObservedRemoteTrackInfoById() ?\n\nThat should be doable.\n\n> Maybe senderOrReceiver? (I don't see rtp prefix anywhere else).\n\nThe prefix helps make it clear (to me at least) that we're talking about RtpSender/RtpReceiver.\n\n> This function seems like it could be shorter. How about:\n> \n>     checkLocalMediaTracks: function() {\n>       // Don't empty out this.expectedLocalTrackInfoById, so make a copy\n>       var copy = JSON.parse(JSON.stringify(this.expectedLocalTrackInfoById));\n>       info(this + \" Checking local tracks \" + JSON.stringify(copy));\n>       this._pc.getSenders().forEach(sender =>\n>         this.checkTrackIsExpected(sender.track, copy, {}));\n>       Object.keys(copy).forEach(id =>\n>         ok(false, this + \" localid \" + id + \" was observed\"));\n>     }\n\nI can probably safely shorten some names. I'd prefer to not pass a literal '{}', since it is hard to tell what it means. I suppose I could make that param optional, which would keep things clean in this function.\n\n> maybe s/tr/track/ ?\n\nI guess I could fix that while I'm in here.\n\n> Object.keys().length will never be wrong type, so prefer: if(!Object.keys(...).length)\n\nWhy not.", "author": "docfaraday@gmail.com", "id": 10040561, "time": "2015-03-17T16:26:57Z"}, {"text": "https://reviewboard.mozilla.org/r/5437/#review4511\n\n> In the spec, pc.replaceTrack(withTrack) doesn't have any stream args because it does not alter the set of streams emitted to the other side.\n> \n> Once we fix msids to come from the set of stream args given to addTrack, then this test is wrong, because it replaces the expected track and later compares it against msid.\n> \n> But this requires a code-change as well as a test change, so we should probably open a new bug on that.\n\nWell, replaceTrack also doesn't allow intra-stream replacement, so the stream identifier won't be changing anyway right (once we've finished implementing)?\n\n> Msid's do not map to local tracks, but to the arguments of pc.addtrack().\n\nThe args of addTrack() are what we record in expectedLocalTrackInfoById.", "author": "docfaraday@gmail.com", "id": 10040565, "time": "2015-03-17T16:27:02Z"}, {"text": "https://reviewboard.mozilla.org/r/5437/#review4515\n\n> I can probably safely shorten some names. I'd prefer to not pass a literal '{}', since it is hard to tell what it means. I suppose I could make that param optional, which would keep things clean in this function.\n\nOk, passing '{}' here is actually incorrect; that object is filled (and checked) as the tracks are checked.", "author": "docfaraday@gmail.com", "id": 10040649, "time": "2015-03-17T16:40:56Z"}, {"text": "Comment on attachment 8578114\nMozReview Request: bz://1141230/bwc\n\n/r/5439 - Bug 1141230: Stop using getLocalStreams() to drive checking of various things in the mochitest suite. r=jib\n\nPull down this commit:\n\nhg pull review -r 5a8790c2d7e8d2336f9ae68ad76ba4253f596093", "author": "docfaraday@gmail.com", "id": 10041338, "time": "2015-03-17T18:30:11Z"}, {"text": "https://reviewboard.mozilla.org/r/5437/#review4519\n\n> That should be doable.\n\nActually, I can remove this entirely, and it will be less code.", "author": "docfaraday@gmail.com", "id": 10041341, "time": "2015-03-17T18:30:19Z"}, {"text": "Comment on attachment 8578114\nMozReview Request: bz://1141230/bwc\n\nIncorporated feedback, rebased, carry forward r=jib\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=82dafbcda55a", "author": "docfaraday@gmail.com", "id": 10041365, "time": "2015-03-17T18:33:14Z"}, {"text": "https://reviewboard.mozilla.org/r/5437/#review4539\n\n::: dom/media/tests/mochitest/pc.js\n(Diff revisions 2 - 3)\n> +  allExpectedTracksAreObserved: function(expected, observed) {\n> +    Object.keys(expected).forEach(trackId => {\n> +      if (!observed[trackId]) {\n> +        return false;\n> +      }\n> +    });\n> +\n> +    return true;\n> +  },\n\n.forEach() takes a function and ignores its return value, so this will never return false! Use:\n\nObject.keys(expected).every(id => observed[id]);", "author": "jib@mozilla.com", "id": 10041799, "time": "2015-03-17T20:03:03Z"}, {"text": "https://reviewboard.mozilla.org/r/5437/#review4537\n\n> Well, replaceTrack also doesn't allow intra-stream replacement, so the stream identifier won't be changing anyway right (once we've finished implementing)?\n\nNot sure what you mean by \"intra-stream replacement\". In my mind, if I do:\n\n1. var sender = pc.addTrack(trackA, streamA);\n2. sender.replaceTrack(trackB);\n\nthen a=msid:{streamA} {trackB}, even though trackB remains in streamB locally, until I do\n\n3. pc.removeTrack(sender);\n4. sender = pc.addTrack(trackB, streamB);\n\nWhich means, in order to not fail, the code above would then need to be:\n\n    var stream = this.expectedLocalTrackInfoById[sender.track.id].streamId;\n    delete this.expectedLocalTrackInfoById[sender.track.id];\n    this.expectedLocalTrackTypesById[withTrack.id] = withTrack.kind;\n    this.expectedLocalTrackInfoById[withTrack.id] = {\n      type: withTrack.kind,\n      streamId: stream\n    };", "author": "jib@mozilla.com", "id": 10041801, "time": "2015-03-17T20:03:19Z"}, {"text": "https://reviewboard.mozilla.org/r/5437/#review4541\n\n> Not sure what you mean by \"intra-stream replacement\". In my mind, if I do:\n> \n> 1. var sender = pc.addTrack(trackA, streamA);\n> 2. sender.replaceTrack(trackB);\n> \n> then a=msid:{streamA} {trackB}, even though trackB remains in streamB locally, until I do\n> \n> 3. pc.removeTrack(sender);\n> 4. sender = pc.addTrack(trackB, streamB);\n> \n> Which means, in order to not fail, the code above would then need to be:\n> \n>     var stream = this.expectedLocalTrackInfoById[sender.track.id].streamId;\n>     delete this.expectedLocalTrackInfoById[sender.track.id];\n>     this.expectedLocalTrackTypesById[withTrack.id] = withTrack.kind;\n>     this.expectedLocalTrackInfoById[withTrack.id] = {\n>       type: withTrack.kind,\n>       streamId: stream\n>     };\n\nBy \"doesn't allow intra-stream replacement\", I mean that replaceTrack would fail in your example, unless we're changing our proposal for replaceTrack. If we do intend to allow this kind of replacement in the spec, then yeah we'll need to update this when we update PeerConnectionImpl.", "author": "docfaraday@gmail.com", "id": 10041826, "time": "2015-03-17T20:08:59Z"}, {"text": "Comment on attachment 8578114\nMozReview Request: bz://1141230/bwc\n\n/r/5439 - Bug 1141230: Stop using getLocalStreams() to drive checking of various things in the mochitest suite. r=jib\n\nPull down this commit:\n\nhg pull review -r 4c5faa0c8fbaf9f2531ee4a0fcee99c077d2e662", "author": "docfaraday@gmail.com", "id": 10041943, "time": "2015-03-17T20:23:17Z"}, {"text": "Comment on attachment 8578114\nMozReview Request: bz://1141230/bwc\n\nMore feedback, carry forward r=jib\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=d4e0cb0c205b", "author": "docfaraday@gmail.com", "id": 10041963, "time": "2015-03-17T20:24:54Z"}, {"text": "Maybe someday I'll get to resubmit that try push and have it run on working infra...", "author": "docfaraday@gmail.com", "id": 10046628, "time": "2015-03-18T18:05:02Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=c38b4579acb5", "author": "docfaraday@gmail.com", "id": 10048049, "time": "2015-03-18T22:31:21Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/1534390c5c6e", "author": "docfaraday@gmail.com", "id": 10057612, "time": "2015-03-20T18:19:05Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/1534390c5c6e", "author": "philringnalda@gmail.com", "id": 10060896, "time": "2015-03-21T19:34:56Z"}, {"text": "Comment on attachment 8578114\nMozReview Request: bz://1141230/bwc", "author": "docfaraday@gmail.com", "id": 10368855, "time": "2015-06-10T15:36:19Z"}, {"text": "Created attachment 8619707\nMozReview Request: Bug 1141230: Stop using getLocalStreams() to drive checking of various things in the mochitest suite. r=jib", "author": "docfaraday@gmail.com", "id": 10368856, "time": "2015-06-10T15:36:19Z"}], "id": 1141230, "priority": "P1", "cc": ["docfaraday@gmail.com", "jib@mozilla.com", "mreavy@mozilla.com"], "cf_crash_signature": "", "version": "Trunk", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_firefox59": "---", "last_change_time": "2015-06-10T15:36:19Z", "status": "RESOLVED", "product": "Core", "cf_fx_iteration": "---", "blocks": [], "qa_contact": "", "creation_time": "2015-03-09T19:21:46Z", "cf_status_firefox_esr52": "---", "component": "WebRTC: Signaling", "assigned_to_detail": {"email": "docfaraday@gmail.com", "id": 478411, "name": "docfaraday@gmail.com", "real_name": "Byron Campen [:bwc]"}, "groups": [], "cf_status_firefox60": "---", "target_milestone": "mozilla39", "is_cc_accessible": true, "cf_rank": "19", "cf_status_thunderbird_esr52": "---", "url": "", "creator_detail": {"email": "docfaraday@gmail.com", "id": 478411, "name": "docfaraday@gmail.com", "real_name": "Byron Campen [:bwc]"}, "whiteboard": "", "mentors": [], "summary": "Some mochitest checks don't handle removed tracks properly", "cf_platform_rel": "---", "alias": null, "dupe_of": null, "flags": [{"status": "+", "name": "firefox-backlog", "modification_date": "2015-03-17T00:46:31Z", "type_id": 846, "creation_date": "2015-03-17T00:46:31Z", "id": 1123762, "setter": "mreavy@mozilla.com"}], "cf_tracking_firefox58": "---", "assigned_to": "docfaraday@gmail.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "jib@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(jib@mozilla.com)"}], "who": "docfaraday@gmail.com", "when": "2015-03-12T22:14:03Z"}, {"changes": [{"removed": "needinfo?(jib@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "jib@mozilla.com", "when": "2015-03-13T17:05:39Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8578114, "added": "review?(jib@mozilla.com)"}], "who": "docfaraday@gmail.com", "when": "2015-03-16T19:35:20Z"}, {"changes": [{"removed": "", "field_name": "cf_rank", "added": "19"}, {"removed": "--", "field_name": "priority", "added": "P1"}, {"removed": "", "field_name": "cc", "added": "mreavy@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "firefox-backlog+"}], "who": "mreavy@mozilla.com", "when": "2015-03-17T00:46:31Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jib@mozilla.com)", "attachment_id": 8578114, "added": "review+"}], "who": "jib@mozilla.com", "when": "2015-03-17T02:55:16Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8578114, "added": ""}], "who": "docfaraday@gmail.com", "when": "2015-03-17T18:30:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "docfaraday@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(docfaraday@gmail.com)"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8578114, "added": "review+"}], "who": "docfaraday@gmail.com", "when": "2015-03-17T18:33:14Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review+", "attachment_id": 8578114, "added": ""}], "who": "docfaraday@gmail.com", "when": "2015-03-17T20:23:17Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8578114, "added": "review+"}], "who": "docfaraday@gmail.com", "when": "2015-03-17T20:24:54Z"}, {"changes": [{"removed": "needinfo?(docfaraday@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "docfaraday@gmail.com", "when": "2015-03-20T18:19:05Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla39"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-03-21 12:34:56"}, {"removed": "---", "field_name": "cf_status_firefox39", "added": "fixed"}], "who": "philringnalda@gmail.com", "when": "2015-03-21T19:34:56Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8578114, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8619707, "added": "review+"}], "who": "docfaraday@gmail.com", "when": "2015-06-10T15:36:19Z"}], "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "cf_blocking_fennec": "---"}