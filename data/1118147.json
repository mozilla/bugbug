{"status": "RESOLVED", "cf_tracking_firefox60": "---", "attachments": [{"creator": "hikezoe@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-01-08T14:10:28Z", "type_id": 748, "creation_date": "2015-01-08T01:45:36Z", "id": 1068719, "setter": "gijskruitbosch+bugs@gmail.com"}], "content_type": "text/plain", "id": 8544411}, {"creator": "hikezoe@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "-", "name": "review", "modification_date": "2015-01-21T00:46:37Z", "type_id": 748, "creation_date": "2015-01-21T00:14:30Z", "id": 1079189, "setter": "gijskruitbosch+bugs@gmail.com"}], "content_type": "text/plain", "id": 8552095}, {"creator": "hikezoe@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "feedback", "modification_date": "2015-01-21T00:53:25Z", "type_id": 607, "creation_date": "2015-01-21T00:53:25Z", "id": 1079228, "setter": "gijskruitbosch+bugs@gmail.com"}], "content_type": "text/plain", "id": 8552097}, {"creator": "hikezoe@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-01-27T10:25:10Z", "type_id": 748, "creation_date": "2015-01-27T08:12:24Z", "id": 1084542, "setter": "gijskruitbosch+bugs@gmail.com"}], "content_type": "text/plain", "id": 8555084}, {"creator": "hikezoe@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2015-01-27T22:39:20Z", "type_id": 748, "creation_date": "2015-01-27T22:39:20Z", "id": 1085403, "setter": "hikezoe@mozilla.com"}], "content_type": "text/plain", "id": 8555504}], "classification": "Client Software", "creator": "hikezoe@mozilla.com", "cc": ["gavin.sharp@gmail.com", "gijskruitbosch+bugs@gmail.com", "hikezoe@mozilla.com", "jaws@mozilla.com", "ttaubert@mozilla.com"], "depends_on": [], "creation_time": "2015-01-06T07:34:25Z", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "All", "cf_status_firefox58": "---", "cf_status_firefox59": "---", "keywords": [], "summary": "Preferences for app.update should handle onchange event", "cf_last_resolved": "2015-01-28T13:28:11Z", "assigned_to_detail": {"email": "hikezoe@mozilla.com", "id": 131213, "name": "hikezoe@mozilla.com", "real_name": "Hiroyuki Ikezoe (:hiro)"}, "severity": "normal", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "assigned_to": "hikezoe@mozilla.com", "comment_count": 19, "comments": [{"text": "Created attachment 8544411\nHandle onchage event\n\nThe UIs for app.update on preference should be reflected when those preference values change. \n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=98649aebb154", "author": "hikezoe@mozilla.com", "id": 9756243, "time": "2015-01-06T07:34:25Z"}, {"text": "What effect does this have in practice? How would a user run into problems without this patch?", "author": "gavin.sharp@gmail.com", "id": 9757623, "time": "2015-01-06T15:48:16Z"}, {"text": "When user changes app.update.xx on about:config, the UIs on preference in content-tab never change. So the user misunderstands the UIs do not correspond to those preference values.", "author": "hikezoe@mozilla.com", "id": 9760107, "time": "2015-01-06T22:04:57Z"}, {"text": "Users updating those prefs manually (while the prefs tab is open) seems a bit unlikely to happen. Do we generally handle this for other prefs in general?", "author": "gavin.sharp@gmail.com", "id": 9760776, "time": "2015-01-07T00:44:07Z"}, {"text": "Other prefs can already correspond in preferences.xml. app.update.xxx is an exception because the UIs for app.update.xx are not one-to-one correspondence of the preferecenes.", "author": "hikezoe@mozilla.com", "id": 9760842, "time": "2015-01-07T01:04:46Z"}, {"text": "Comment on attachment 8544411\nHandle onchage event\n\nOK, one of Gijs or Jared can likely review this quicker than I can.", "author": "gavin.sharp@gmail.com", "id": 9766379, "time": "2015-01-08T01:45:36Z"}, {"text": "Comment on attachment 8544411\nHandle onchage event\n\nReview of attachment 8544411:\n-----------------------------------------------------------------\n\nPlease use event listeners from JS instead; we removed all the attributes in bug 1016300, and we shouldn't be introducing new ones.", "author": "gijskruitbosch+bugs@gmail.com", "id": 9768434, "time": "2015-01-08T14:10:28Z"}, {"text": "Created attachment 8552095\nPart 1: Fire paneunload event on descructor\n\nUnfortunately there is no trigger to remove observer when prefpane is destroyed. \nThis patch adds the trigger so that some mochi tests will not cause memory leak.", "author": "hikezoe@mozilla.com", "id": 9820366, "time": "2015-01-21T00:14:30Z"}, {"text": "Created attachment 8552097\nUIs for app.update on preference pane should be responded  whenever each value changes.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=bbdca7dd4129", "author": "hikezoe@mozilla.com", "id": 9820370, "time": "2015-01-21T00:15:31Z"}, {"text": "(In reply to Hiroyuki Ikezoe (:hiro) from comment #7)\n> Created attachment 8552095\n> Part 1: Fire paneunload event on descructor\n> \n> Unfortunately there is no trigger to remove observer when prefpane is\n> destroyed. \n> This patch adds the trigger so that some mochi tests will not cause memory\n> leak.\n\nWhy can't you use an unload event handler on the containing window?", "author": "gijskruitbosch+bugs@gmail.com", "id": 9820491, "time": "2015-01-21T00:45:01Z"}, {"text": "Comment on attachment 8552097\nUIs for app.update on preference pane should be responded  whenever each value changes.\n\nReview of attachment 8552097:\n-----------------------------------------------------------------\n\n::: browser/components/preferences/advanced.js\n@@ +16,5 @@\n> +  uninit: function ()\n> +  {\n> +#ifdef MOZ_UPDATER\n> +    try {\n> +      Services.prefs.removeObserver(\"app.update.auto\", this);\n\nYou can just add/remove one observer for \"app.update.\". See the documentation at http://mxr.mozilla.org/mozilla-central/source/modules/libpref/nsIPrefBranch.idl#320 . That also means we don't need the ifdefs for metro. :-)\n\n@@ +24,5 @@\n> +#ifdef MOZ_METRO\n> +      Services.prefs.removeObserver(\"app.update.metro.enabled\", this);\n> +#endif\n> +#endif\n> +    } catch (e) {}\n\nEmpty catch statements are evil. Why is this in a try...catch at all?\n\n::: browser/components/preferences/advanced.xul\n@@ +18,5 @@\n>           xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\">\n>  \n> +  <prefpane id=\"paneAdvanced\"\n> +            onpaneload=\"gAdvancedPane.init();\"\n> +            onpaneunload=\"gAdvancedPane.uninit();\">\n\nThis shouldn't be necessary, per my earlier comment.\n\n::: browser/components/preferences/in-content/advanced.js\n@@ +13,5 @@\n> +  uninit: function ()\n> +  {\n> +#ifdef MOZ_UPDATER\n> +    try {\n> +      Services.prefs.removeObserver(\"app.update.auto\", this);\n\nSame comments about the observer redundancy here.\n\n::: browser/components/preferences/in-content/preferences.js\n@@ +62,5 @@\n>  }\n>  \n>  window.addEventListener(\"unload\", function onUnload() {\n>    gSubDialog.uninit();\n> +  gAdvancedPane.uninit();\n\nYou can do the same in browser/components/preferences/preferences.js (although you'll need to add the event listener yourself)", "author": "gijskruitbosch+bugs@gmail.com", "id": 9820526, "time": "2015-01-21T00:53:25Z"}, {"text": "(In reply to :Gijs Kruitbosch from comment #9)\n> (In reply to Hiroyuki Ikezoe (:hiro) from comment #7)\n> > Created attachment 8552095\n> > Part 1: Fire paneunload event on descructor\n> > \n> > Unfortunately there is no trigger to remove observer when prefpane is\n> > destroyed. \n> > This patch adds the trigger so that some mochi tests will not cause memory\n> > leak.\n> \n> Why can't you use an unload event handler on the containing window?\n\nI don't know exactly but unload event could not fix memory leak in some mochitest browser chrome tests.\n\nPlease see\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=a822b6762d39\n\nI am guessing that other preference pane using unload event (e.g. sync.js) will cause memory leak if there are tests for the preference panes.", "author": "hikezoe@mozilla.com", "id": 9820537, "time": "2015-01-21T00:59:06Z"}, {"text": "(In reply to Hiroyuki Ikezoe (:hiro) from comment #11)\n> (In reply to :Gijs Kruitbosch from comment #9)\n> > (In reply to Hiroyuki Ikezoe (:hiro) from comment #7)\n> > > Created attachment 8552095\n> > > Part 1: Fire paneunload event on descructor\n> > > \n> > > Unfortunately there is no trigger to remove observer when prefpane is\n> > > destroyed. \n> > > This patch adds the trigger so that some mochi tests will not cause memory\n> > > leak.\n> > \n> > Why can't you use an unload event handler on the containing window?\n> \n> I don't know exactly but unload event could not fix memory leak in some\n> mochitest browser chrome tests.\n> \n> Please see\n> https://treeherder.mozilla.org/#/jobs?repo=try&revision=a822b6762d39\n> \n> I am guessing that other preference pane using unload event (e.g. sync.js)\n> will cause memory leak if there are tests for the preference panes.\n\nAh, but that's a different onUnload structure than the one in the in-content preferences.js.\n\nThe local let + closure seems... interesting. I would try the version used in the in-content preferences.js file to see if that helps.\n\nAfter all, if that leaks in the windowed preferences, it's quite possible we might already have a problem in the in-content preferences, which we should then fix instead of trying to work around it just for the windowed prefs and leaving a leak in the in-content prefs...\n\nRegarding sync.js, I expect normally weave:ready will fire before unload... but it might be worth investigating the case where it still leaks. Tim, can you comment as to why the patch linked above would leak and/or if the sync.js code is also potentially leaky?", "author": "gijskruitbosch+bugs@gmail.com", "id": 9820572, "time": "2015-01-21T01:13:29Z"}, {"text": "Ah, also, it looks like the code in offlineNotification.js and friends just calls window.close() and calls finish() immediately afterwards, without waiting for the window to unload, which might also explain the leaks.", "author": "gijskruitbosch+bugs@gmail.com", "id": 9820579, "time": "2015-01-21T01:15:33Z"}, {"text": "Created attachment 8555084\nUIs for app.update on preference pane should be responded  whenever each value changes.\n\nThe previous patch had a horrible mistake that 'this' was used in onUnload function without bind!\n\nNow that mistake is fixed, so there is no memory leak.\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=10d23d4a3dfa", "author": "hikezoe@mozilla.com", "id": 9846206, "time": "2015-01-27T08:12:24Z"}, {"text": "Comment on attachment 8555084\nUIs for app.update on preference pane should be responded  whenever each value changes.\n\nReview of attachment 8555084:\n-----------------------------------------------------------------\n\n(In reply to Hiroyuki Ikezoe (:hiro) from comment #14)\n> Created attachment 8555084\n> UIs for app.update on preference pane should be responded  whenever each\n> value changes.\n> \n> The previous patch had a horrible mistake that 'this' was used in onUnload\n> function without bind!\n> \n> Now that mistake is fixed, so there is no memory leak.\n> \n> https://treeherder.mozilla.org/#/jobs?repo=try&revision=10d23d4a3dfa\n\n\\o/\n\nThis looks good to me. The only thing I can think of that worries me is that if you change stuff in the preference window, that'll cause the pref to change, which will fire the notification, which will update the UI a second time... but I'm not really sure how to 'fix' that. Assuming all the relevant observers/events are sync anyway, it probably isn't a real problem.\n\nOh, and see the single nit below:\n\n::: browser/components/preferences/advanced.js\n@@ +9,5 @@\n>  Components.utils.import(\"resource://gre/modules/Services.jsm\");\n>  Components.utils.import(\"resource://gre/modules/LoadContextInfo.jsm\");\n>  Components.utils.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n>  \n> +var onUnload;\n\nThis can just be inside the MOZ_UPDATER block, right? No need for it to be a global variable. Same in the other file.", "author": "gijskruitbosch+bugs@gmail.com", "id": 9846663, "time": "2015-01-27T10:25:10Z"}, {"text": "Created attachment 8555504\nUIs for app.update on preference pane should be responded  whenever each value changes.\n\n> @@ +9,5 @@\n> >  Components.utils.import(\"resource://gre/modules/Services.jsm\");\n> >  Components.utils.import(\"resource://gre/modules/LoadContextInfo.jsm\");\n> >  Components.utils.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n> >  \n> > +var onUnload;\n> \n> This can just be inside the MOZ_UPDATER block, right? No need for it to be a\n> global variable. Same in the other file.\n\nDone.\n\nCarrying over review+.\n\nThanks gijs!", "author": "hikezoe@mozilla.com", "id": 9850095, "time": "2015-01-27T22:39:20Z"}, {"text": "https://hg.mozilla.org/integration/fx-team/rev/10bc2f59111b", "author": "MattN+bmo@mozilla.com", "id": 9851801, "time": "2015-01-28T08:09:48Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/10bc2f59111b", "author": "cbook@mozilla.com", "id": 9852589, "time": "2015-01-28T13:28:11Z"}], "id": 1118147, "priority": "--", "mentors_detail": [], "cf_crash_signature": "", "version": "unspecified", "cf_qa_whiteboard": "", "cf_tracking_firefox_esr52": "---", "cf_tracking_firefox59": "---", "last_change_time": "2015-01-28T13:28:11Z", "cf_platform_rel": "---", "product": "Firefox", "cf_status_firefox_esr52": "---", "blocks": [], "qa_contact": "", "see_also": [], "cf_fx_iteration": "---", "component": "Preferences", "votes": 0, "groups": [], "cf_status_firefox60": "---", "target_milestone": "Firefox 38", "is_cc_accessible": true, "url": "", "creator_detail": {"email": "hikezoe@mozilla.com", "id": 131213, "name": "hikezoe@mozilla.com", "real_name": "Hiroyuki Ikezoe (:hiro)"}, "whiteboard": "", "mentors": [], "cc_detail": [{"email": "gavin.sharp@gmail.com", "id": 103593, "name": "gavin.sharp@gmail.com", "real_name": ":Gavin Sharp [email: gavin@gavinsharp.com]"}, {"email": "gijskruitbosch+bugs@gmail.com", "id": 159069, "name": "gijskruitbosch+bugs@gmail.com", "real_name": ":Gijs (under the weather; responses will be slow)"}, {"email": "hikezoe@mozilla.com", "id": 131213, "name": "hikezoe@mozilla.com", "real_name": "Hiroyuki Ikezoe (:hiro)"}, {"email": "jaws@mozilla.com", "id": 409754, "name": "jaws@mozilla.com", "real_name": "Jared Wein [:jaws] (please needinfo? me)"}, {"email": "ttaubert@mozilla.com", "id": 402526, "name": "ttaubert@mozilla.com", "real_name": "Tim Taubert [:ttaubert]"}], "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "cf_tracking_firefox58": "---", "cf_rank": null, "is_open": false, "resolution": "FIXED", "op_sys": "All", "cf_fx_points": "---", "history": [{"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8544411, "added": "review?(gavin.sharp@gmail.com)"}, {"removed": "", "field_name": "cc", "added": "gavin.sharp@gmail.com"}], "who": "hikezoe@mozilla.com", "when": "2015-01-06T07:34:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "hiikezoe@mozilla-japan.org"}], "who": "hikezoe@mozilla.com", "when": "2015-01-06T22:04:57Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "gijskruitbosch+bugs@gmail.com, jaws@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "review?(gavin.sharp@gmail.com)", "attachment_id": 8544411, "added": "review?(jaws@mozilla.com), review?(gijskruitbosch+bugs@gmail.com)"}], "who": "gavin.sharp@gmail.com", "when": "2015-01-08T01:45:36Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(jaws@mozilla.com), review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8544411, "added": "review-"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2015-01-08T14:10:28Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8544411, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8552095, "added": "review?(gijskruitbosch+bugs@gmail.com)"}], "who": "hikezoe@mozilla.com", "when": "2015-01-21T00:14:30Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8552097, "added": "review?(gijskruitbosch+bugs@gmail.com)"}], "who": "hikezoe@mozilla.com", "when": "2015-01-21T00:15:31Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(hiikezoe@mozilla-japan.org)"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2015-01-21T00:45:01Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8552095, "added": "review-"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2015-01-21T00:46:37Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8552097, "added": "feedback+"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2015-01-21T00:53:25Z"}, {"changes": [{"removed": "needinfo?(hiikezoe@mozilla-japan.org)", "field_name": "flagtypes.name", "added": ""}], "who": "hikezoe@mozilla.com", "when": "2015-01-21T00:59:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ttaubert@mozilla.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(ttaubert@mozilla.com)"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2015-01-21T01:13:29Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8552095, "added": "1"}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8552097, "added": "1"}, {"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "hiikezoe@mozilla-japan.org"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8555084, "added": "review?(gijskruitbosch+bugs@gmail.com)"}], "who": "hikezoe@mozilla.com", "when": "2015-01-27T08:12:24Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(gijskruitbosch+bugs@gmail.com)", "attachment_id": 8555084, "added": "review+"}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2015-01-27T10:25:10Z"}, {"changes": [{"removed": "needinfo?(ttaubert@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "gijskruitbosch+bugs@gmail.com", "when": "2015-01-27T10:39:14Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8555084, "added": "1"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8555504, "added": "review+"}], "who": "hikezoe@mozilla.com", "when": "2015-01-27T22:39:20Z"}, {"changes": [{"removed": "", "field_name": "keywords", "added": "checkin-needed"}], "who": "hikezoe@mozilla.com", "when": "2015-01-27T22:39:28Z"}, {"changes": [{"removed": "checkin-needed", "field_name": "keywords", "added": ""}, {"removed": "", "field_name": "whiteboard", "added": "[fixed-in-fx-team]"}], "who": "MattN+bmo@mozilla.com", "when": "2015-01-28T08:09:48Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "Firefox 38"}, {"removed": "[fixed-in-fx-team]", "field_name": "whiteboard", "added": ""}, {"removed": "", "field_name": "cf_last_resolved", "added": "2015-01-28 05:28:11"}], "who": "cbook@mozilla.com", "when": "2015-01-28T13:28:11Z"}]}