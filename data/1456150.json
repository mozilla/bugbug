{"cf_tracking_thunderbird_esr52": "---", "status": "NEW", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "+", "cf_tracking_firefox62": "+", "creator": "mozillamarcia.knous@gmail.com", "mentors_detail": [], "depends_on": [], "cf_status_firefox_esr60": "unaffected", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": ["crash"], "cc_detail": [{"email": "acrichton@mozilla.com", "id": 481703, "name": "acrichton@mozilla.com", "real_name": "Alex Crichton [:acrichto]"}, {"email": "cmanchester@mozilla.com", "id": 432261, "name": "cmanchester@mozilla.com", "real_name": "Chris Manchester (:chmanchester)"}, {"email": "continuation@gmail.com", "id": 406194, "name": "continuation@gmail.com", "real_name": "Andrew McCreight [:mccr8]"}, {"email": "josh@joshmatthews.net", "id": 241497, "name": "josh@joshmatthews.net", "real_name": "Josh Matthews [:jdm]"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "jseward@acm.org", "id": 346453, "name": "jseward@acm.org", "real_name": "Julian Seward [:jseward]"}, {"email": "kmoir@mozilla.com", "id": 440359, "name": "kmoir@mozilla.com", "real_name": "Kim Moir [:kmoir] ET"}, {"email": "mh+mozilla@glandium.org", "id": 47192, "name": "mh+mozilla@glandium.org", "real_name": "Mike Hommey [:glandium]"}, {"email": "mwoerister@mozilla.com", "id": 593305, "name": "mwoerister@mozilla.com", "real_name": "Michael Woerister"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "ryanvm@gmail.com", "id": 75935, "name": "ryanvm@gmail.com", "real_name": "Ryan VanderMeulen [:RyanVM]"}, {"email": "simon.sapin@exyr.org", "id": 465026, "name": "simon.sapin@exyr.org", "real_name": "Simon Sapin (:SimonSapin)"}, {"email": "ted@mielczarek.org", "id": 39022, "name": "ted@mielczarek.org", "real_name": "Ted Mielczarek [:ted.mielczarek]"}], "cf_last_resolved": null, "attachments": [], "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 35, "comments": [{"text": "This bug was filed from the Socorro interface and is\nreport bp-ee778cd8-02e2-4c23-97e0-e5d270180331.\n=============================================================\n\nSeen while looking at nightly crash stats - this one goes back to the build from 20180331045244: https://bit.ly/2HEHhIa. All of the crashes have crash reason \"EXCEPTION_ILLEGAL_INSTRUCTION\"\n\nPossible regression range based on Build ID: https://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=b7fa9d95150ec24e3c8d11106153f76be4507356&tochange=3f9a70b125f6fb9be2b209159657fd7ae5515c01\n\nTop 4 frames of crashing thread:\n\n0 xul.dll static void alloc_system::platform::{{impl}}::oom src/liballoc_system/lib.rs:449\n1 xul.dll static void alloc_system::{{impl}}::oom src/liballoc_system/lib.rs:81\n2 xul.dll static void std::heap::__default_lib_allocator::__rdl_oom src/libstd/heap.rs:49\n3 xul.dll xul.dll@0x5b0df8 \n\n=============================================================", "author": "mozillamarcia.knous@gmail.com", "id": 13226716, "time": "2018-04-23T15:15:06Z"}, {"text": "It looks like all of the Rust OOM signatures are getting bucketed together.\n\nThe first problem I see is that Rust stack walking isn't getting past the first three frames. Maybe this is a regression from \"Bug 1447116 - Update rust builders to 1.25\"?\n\nThe second problem is that the crash stats signature should go past the first frame. I'm not sure what Rust OOM signatures looked like before so I can't tell if that's a regression or not. Ideally, we'd have one frame that would indicate that it is an OOM, and then a frame from the place that is actually causing the OOM.\n\nThe third issue then is that we're hitting an OOM in some places. I don't know if these are, separately, enough of an issue to warrant attention. Looking through the proto signatures for reports that actually have useful information after the junk xul.dll frame, I see some crashes that are OOMing in Servo media query list code like this:\n  bp-d3ddd86f-76ea-4f5f-a214-f15880180421\n\nFor some of the signatures where there are no extra frames, a lot of them seem to be on the MediaPlayback thread, so I assume that the Rust media parser thing is involved somehow.", "author": "continuation@gmail.com", "id": 13227253, "time": "2018-04-23T18:03:00Z"}, {"text": "Nathan, do you know who would look into Rust stack traces not working right? Possibly as a regression from a Rust upgrade. Thanks.", "author": "continuation@gmail.com", "id": 13227259, "time": "2018-04-23T18:04:18Z"}, {"text": "Unfortunately the Rust code is not nice enough to tell us what the OOM amount might be...but the crash dump says our smallest contiguous VM block is < 2MB, so that's an issue no matter what size we're trying to allocate.\n\nTed is the person who has handled Rust stack related things before, but perhaps he has somebody else to suggest?\n\nRust 1.25 has caused some other, performance related issues; perhaps we should revert to 1.24 for this cycle while we sort out the Rust 1.25 problems?  Chris, WDYT?", "author": "nfroyd@mozilla.com", "id": 13227279, "time": "2018-04-23T18:12:27Z"}, {"text": "Can we confirm this is a rust 1.25 regression? I guess it seems likely given the regression range.\n\nI'm trying to determine in bug 1451703 if staying on 1.24 as a result of that regression would be useful. If so we can back out and see if that helps.", "author": "cmanchester@mozilla.com", "id": 13227384, "time": "2018-04-23T18:48:17Z"}, {"text": "Sure, I can dig around in crash stats and try to figure out what OOM crashes looked like before.", "author": "continuation@gmail.com", "id": 13227404, "time": "2018-04-23T18:53:48Z"}, {"text": "* First question: what do Rust OOMs look like? For this, I looked at crashes where the protosignature contains _oom, but the signature does not contain mozalloc_abort (to try to filter out C++ crashes), from the past 3 months, across all branches.\n\nThese are the top three:\nstd::heap::__default_lib_allocator::__rdl_oom (913 crashes)\nstatic void alloc_system::platform::{{impl}}::oom (104 crashes)\n__rust_oom (49 crashes)\n\nThere are also a smattering of less-common signatures, such as:\n  OOM | large | std::heap::__default_lib_allocator::__rdl_oom (from a recent Firefox)\n  OOM | unknown | alloc::oom::default_oom_handler | alloc::oom::oom | mp4parse::skip<T>  (from Firefox 54)\nSo it looks like sometimes Rust crashes are correctly identified as OOM. I'll try to find out where the code is for that.\n\n* Second question, what do the most common Rust OOMs look like on Nightly? For this, I looked at crashes where the protosignature contains any of the top three OOM stack frames I identified above, but only for Nightly 61. I looked at the period from March 10, slightly before the first Nightly 61, to April 18. That's about a week and a half before and after March 31, when the compiler change landed. There are exactly 7 such crashes before the 3-31 build, and 88 after.\n\nSo, it looks like OOM crashes went up massively on the 3-31 build. I don't know if that is due to the Rust upgrade, or something else. (Maybe a WebRender or Stylo change landed in the same Nightly.)\n\n* What about the xul.dll frames? None of the 7 crashes before the 3-31 build (for example: bp-2369c432-2382-4384-bd06-cb37b0180320 and bp-bda1d6da-38ca-4ffa-8759-b884c0180322) have the alloc_system::platform::{{impl}}::oom signature, and their stacks look good.\n\n* alloc_system::platform::{{impl}}::oom in particular: I don't see any crashes on any branch prior to the 3-31 Nightly build that have the alloc_system::platform::{{impl}}::oom signature. All of the alloc_system::platform::{{impl}}::oom signatures seem to contain xul.dll. About half of these crashes contain more frames, but half do not.\n\nTLDR: Rust OOM crashes went up massively on the Nightly 3-31 build (though these are still not very common crashes over all), and this alloc_system::platform::{{impl}}::oom signature also appeared there, and has an unsymbolized frame (and, half the time, no more frames), whereas the handful of older Nightly crashes did not have these unsymbolized frames.", "author": "continuation@gmail.com", "id": 13227766, "time": "2018-04-23T20:58:35Z"}, {"text": "This could be related: https://github.com/rust-lang/rust/issues/50138", "author": "mh+mozilla@glandium.org", "id": 13228230, "time": "2018-04-24T01:01:36Z"}, {"text": "(the lack of stack traces)", "author": "mh+mozilla@glandium.org", "id": 13228231, "time": "2018-04-24T01:02:05Z"}, {"text": "So re: the OOM signatures being bucketed together, we already have a bunch of Rust std library frames in the prefix list:\nhttps://github.com/mozilla-services/socorro/blob/master/socorro/siglists/prefix_signature_re.txt\n\nLooking at the blame, bug 1373272 and bug 1389474 added those, but it looks like either the function names changed in the stdlib or the formatting of the names changed.", "author": "ted@mielczarek.org", "id": 13229187, "time": "2018-04-24T10:54:05Z"}, {"text": "I loaded the minidump from the crash in comment 0 in WinDBG and it was able to unwind farther:\n # Child-SP          RetAddr           Call Site\n00 00000054`d23fb4c0 00007ffa`db865442 xul!alloc_system::platform::{{impl}}::oom(void)+0x5c [C:\\projects\\rust\\src\\liballoc_system\\lib.rs @ 449]\n01 00000054`d23fb540 00007ffa`db864b42 xul!alloc_system::{{impl}}::oom(void)+0x22 [C:\\projects\\rust\\src\\liballoc_system\\lib.rs @ 81]\n02 00000054`d23fb590 00007ffa`db870df9 xul!std::heap::__default_lib_allocator::__rdl_oom(void)+0x22 [C:\\projects\\rust\\src\\libstd\\heap.rs @ 49]\n03 00000054`d23fb5e0 00000000`000005af xul!core::fmt::{{impl}}::fmt+0x39\n04 00000054`d23fb5e8 00000054`d23fb700 0x5af\n05 00000054`d23fb5f0 00000000`00000001 0x00000054`d23fb700\n06 00000054`d23fb5f8 00000054`d23fb700 0x1\n07 00000054`d23fb600 0000021d`45068240 0x00000054`d23fb700\n08 00000054`d23fb608 00007ffa`db358a9f 0x0000021d`45068240\n09 00000054`d23fb610 00007ffa`db5ed60d xul!alloc::heap::{{impl}}::oom(void)+0xf [C:\\projects\\rust\\src\\liballoc\\heap.rs @ 98]\n0a (Inline Function) --------`-------- xul!smallvec::SmallVec<[style::gecko::wrapper::GeckoElement; 128]>::push+0x82 [z:\\build\\build\\src\\third_party\\rust\\smallvec\\lib.rs @ 401]\n0b 00000054`d23fb640 00007ffa`db5ec8eb xul!style::dom_apis::{{impl}}::append_element<style::gecko::wrapper::GeckoElement>(struct smallvec::SmallVec<[style::gecko::wrapper::GeckoElement; 128]> * output = 0x00000054`d23fb700, struct style::gecko::wrapper::GeckoElement element = struct style::gecko::wrapper::GeckoElement)+0x9d [z:\\build\\build\\src\\servo\\components\\style\\dom_apis.rs @ 97]\n0c (Inline Function) --------`-------- xul!style::dom_apis::collect_all_elements+0xb [z:\\build\\build\\src\\servo\\components\\style\\dom_apis.rs @ 219]\n0d (Inline Function) --------`-------- xul!style::dom_apis::query_selector_single_query+0x199 [z:\\build\\build\\src\\servo\\components\\style\\dom_apis.rs @ 332]\n0e (Inline Function) --------`-------- xul!style::dom_apis::query_selector_fast+0x22c [z:\\build\\build\\src\\servo\\components\\style\\dom_apis.rs @ 392]\n0f (Inline Function) --------`-------- xul!style::dom_apis::query_selector+0x335 [z:\\build\\build\\src\\servo\\components\\style\\dom_apis.rs @ 551]\n10 00000054`d23fb6d0 00007ffa`dbce2cf1 xul!geckoservo::glue::Servo_SelectorList_QueryAll(struct style::gecko_bindings::structs::root::nsINode * node = <Value unavailable error>, struct style::gecko_bindings::structs::root::RawServoSelectorList * selectors = 0x0000021d`482593e0, struct style::gecko_bindings::structs::root::nsSimpleContentList * content_list = 0x0000021d`4ec37af0, bool may_use_invalidation = <Value unavailable error>)+0x36b [z:\\build\\build\\src\\servo\\ports\\geckolib\\glue.rs @ 1962]\n11 00000054`d23fc3b0 00007ffa`dbce29d7 xul!nsINode::QuerySelectorAll(class nsTSubstring<char16_t> * aSelector = 0x00000054`d23fc470, class mozilla::ErrorResult * aResult = <Value unavailable error>)+0x71 [z:\\build\\build\\src\\dom\\base\\nsinode.cpp @ 2614]\n12 00000054`d23fc3f0 00007ffa`db9bff63 xul!mozilla::dom::ElementBinding::querySelectorAll(struct JSContext * cx = 0x0000021d`3c323000, class JS::Handle<JSObject *> obj = class JS::Handle<JSObject *>, class mozilla::dom::Element * self = 0x0000021d`4705c900, class JSJitMethodCallArgs * args = 0x00000054`d23fc570)+0xbf [z:\\build\\build\\src\\obj-firefox\\dom\\bindings\\elementbinding.cpp @ 3849]\n13 00000054`d23fc550 000003c3`b490ac2b xul!mozilla::dom::GenericBindingMethod(struct JSContext * cx = 0x0000021d`3c323000, unsigned int argc = 1, union JS::Value * vp = <Value unavailable error>)+0x11b [z:\\build\\build\\src\\dom\\bindings\\bindingutils.cpp @ 3038]\n14 00000054`d23fc5e0 00000000`00000000 0x000003c3`b490ac2b\n\n\nThere are quite a few junk frames in the middle there, so perhaps something in the Rust code is not generating good unwind info?", "author": "ted@mielczarek.org", "id": 13229295, "time": "2018-04-24T12:28:23Z"}, {"text": "I don't have time to dig into this further. Perhaps mw can look at whether rustc is generating good unwind info for these frames? We previously dealt with this in bug 1302078, and acrichto landed a fix in rustc to make it always emit unwind info for win64 even when building with `-Cpanic=abort` in https://github.com/rust-lang/rust/pull/40549.", "author": "ted@mielczarek.org", "id": 13229415, "time": "2018-04-24T13:07:17Z"}, {"text": "I noticed in https://github.com/rust-lang/rust/pull/50263 that we're not actually emitting the `uwtable` thing for LLVM for *all* functions (a few allocator-related shims were accidentally exempt). I'm not sure if that'll actually fix the issue here.\n\nThe OOM handling on nightly is also slightly different than that on stable right now, so if this is purely related to the `uwtable` attribute accidentally being omitted then it may already be fixed on nightly.\n\nIs there a good way to test out a patch here? Or is it mainly a \"wait and see\" scenario?", "author": "acrichton@mozilla.com", "id": 13237177, "time": "2018-04-27T00:11:58Z"}, {"text": "(In reply to Ted Mielczarek [:ted.mielczarek] from comment #11)\n> I don't have time to dig into this further. Perhaps mw can look at whether\n> rustc is generating good unwind info for these frames? We previously dealt\n> with this in bug 1302078, and acrichto landed a fix in rustc to make it\n> always emit unwind info for win64 even when building with `-Cpanic=abort` in\n> https://github.com/rust-lang/rust/pull/40549.\n\nDoes breakpad need unwind info, though? It doesn't for DWARF, maybe it's different for pdb?", "author": "mh+mozilla@glandium.org", "id": 13237337, "time": "2018-04-27T03:00:20Z"}, {"text": "(In reply to Mike Hommey [:glandium] from comment #13)\n> Does breakpad need unwind info, though? It doesn't for DWARF, maybe it's\n> different for pdb?\n\nThese are Win64 crashes, and I don't think we have any way to reliably unwind those stacks without it. I'm not 100% sure but I would guess that the `uwtable` attribute controls whether we wind up with entries in the unwind tables in the PE.\n\n(In reply to Alex Crichton [:acrichto] from comment #12)\n> Is there a good way to test out a patch here? Or is it mainly a \"wait and\n> see\" scenario?\n\nIf there's a way to generate a Rust OOM crash for testing purposes I think we could figure something out. It's easy enough to tweak the Rust toolchain version in a try push, you can just change the arguments to repack_rust.py and we'll use that Rust version in the Firefox build:\nhttps://dxr.mozilla.org/mozilla-central/rev/63a0e2f626febb98d87d2543955ab99a653654ff/taskcluster/ci/toolchain/windows.yml#137\n\nIt does require an explicit date like `nightly-2018-04-26`.\n\nWe could tweak the internals of nsIDebug2::RustPanic to trigger an OOM in the same try push:\nhttps://dxr.mozilla.org/mozilla-central/rev/63a0e2f626febb98d87d2543955ab99a653654ff/toolkit/library/rust/shared/lib.rs#37\n\nThen download and run the resulting build, call `rustPanic()` and run minidump_stackwalk on the minidump.", "author": "ted@mielczarek.org", "id": 13237861, "time": "2018-04-27T10:36:11Z"}, {"text": "Ok cool! I'll ping this thread when the support lands in rust-lang/rust and reaches a nightly. I believe you can \"trigger an OOM\" by basically just calling std::alloc::oom (https://doc.rust-lang.org/nightly/std/alloc/fn.oom.html) on recent nightlies, as that's what collections and such will be doing anyway.", "author": "acrichton@mozilla.com", "id": 13238549, "time": "2018-04-27T16:02:49Z"}, {"text": "Ok that was a little speedier than I thought it would be! The `nightly-2018-04-28` toolchain for MSVC should have the fix in https://github.com/rust-lang/rust/pull/50263, want to try compiling with that and see if it improves the situation here?", "author": "acrichton@mozilla.com", "id": 13239600, "time": "2018-04-28T02:56:45Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=0c74764b3782049da42762da8a90fbb12f0edcc8", "author": "ted@mielczarek.org", "id": 13245907, "time": "2018-05-01T12:59:25Z"}, {"text": "I got a working build out of that, but `std::alloc::oom` now crashes the process in a way that Breakpad cannot handle, so I can't use it to verify this. :-/\n\nSpecifically it uses `rtabort!` which calls `sys_common::util::abort` which calls `abort_internal`:\nhttps://dxr.mozilla.org/rust/rev/0d8321b5e87c87aa4dbea729b4dd722740fac645/src/libstd/sys/windows/mod.rs#261\n\nThis is presumably why glandium filed bug 1458161.", "author": "ted@mielczarek.org", "id": 13246438, "time": "2018-05-01T16:11:22Z"}, {"text": "Oh we can probably change that to `intrinsics::abort()` for sure, would that help show up with the same signature as before?", "author": "acrichton@mozilla.com", "id": 13246817, "time": "2018-05-01T18:47:15Z"}, {"text": "Fx61 is fixed by backout at this point, but we should probably keep this on the radar for whenever 62 gets a newer Rust version again.", "author": "ryanvm@gmail.com", "id": 13261252, "time": "2018-05-08T01:08:51Z"}, {"text": "bug 1458161 comment 12 shows that we get slightly better stacks with glandium's patch. I'll rebase my test patch atop that and see what it looks like.", "author": "ted@mielczarek.org", "id": 13261920, "time": "2018-05-08T10:03:55Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=a94d67b738da6a1a3ccbf63e3f95b68e7b4be19b", "author": "ted@mielczarek.org", "id": 13261929, "time": "2018-05-08T10:09:19Z"}, {"text": "(In reply to Ted Mielczarek [:ted.mielczarek] from comment #21)\n> bug 1458161 comment 12 shows that we get slightly better stacks with\n> glandium's patch. I'll rebase my test patch atop that and see what it looks\n> like.\n\nThat won't work. Bug 1458161 explicitly doesn't work on 1.27, and can't be made to work without changes to libstd that I'm working on.", "author": "mh+mozilla@glandium.org", "id": 13262075, "time": "2018-05-08T11:47:16Z"}, {"text": "Is is still an issue in 1.26 (released yesterday)? Should this still block upgrading from 1.24?", "author": "simon.sapin@exyr.org", "id": 13271111, "time": "2018-05-11T16:11:37Z"}, {"text": "The speculative fix is in 1.27, so probably nothing changed in 1.26.", "author": "mh+mozilla@glandium.org", "id": 13271888, "time": "2018-05-11T21:46:09Z"}, {"text": "I don't see any crashes with this signature in 62, so far.", "author": "lhenry@mozilla.com", "id": 13294543, "time": "2018-05-21T17:08:41Z"}, {"text": "Alex, would it be possible to get https://github.com/rust-lang/rust/pull/50263 uplifted to stable rust, so we can try landing 1.26 in mozilla central?", "author": "cmanchester@mozilla.com", "id": 13362232, "time": "2018-05-24T21:21:09Z"}, {"text": "(In reply to Chris Manchester (:chmanchester) from comment #27)\n> Alex, would it be possible to get\n> https://github.com/rust-lang/rust/pull/50263 uplifted to stable rust, so we\n> can try landing 1.26 in mozilla central?\n\n1.26 still has the encoding_rs performance regression. We'll have to wait for 1.28.", "author": "mh+mozilla@glandium.org", "id": 13362236, "time": "2018-05-24T21:23:09Z"}, {"text": "(well, more precisely, we'll have to wait whatever version has https://github.com/rust-lang/rust/pull/50880 merged in)", "author": "mh+mozilla@glandium.org", "id": 13362240, "time": "2018-05-24T21:24:00Z"}, {"text": "From what glandium mentioned it sounds like 1.26 may not work well? We're doing a point release for 1.26.1 but I think we're unlikely to get all this in there. That being said though I think we can definitely make sure to get everything in 1.27, for example:\n\n* ustable on allocator shims - https://github.com/rust-lang/rust/pull/50263 - already on beta\n* fixing encoding_rs perf - https://github.com/rust-lang/rust/pull/50827 - being backported to beta\n* OOM and memory request - https://github.com/rust-lang/rust/pull/50880 - can be backported if necessary\n\nDoes that sound ok? Or do y'all otherwise have a pressing need to upgrade to 1.26?", "author": "acrichton@mozilla.com", "id": 13362345, "time": "2018-05-24T22:17:29Z"}, {"text": "(In reply to Alex Crichton [:acrichto] from comment #30)\n> * OOM and memory request - https://github.com/rust-lang/rust/pull/50880 -\n> can be backported if necessary\n\nThat would require a patch with #[cfg(stage0)] hoop-jumping, though.", "author": "mh+mozilla@glandium.org", "id": 13362354, "time": "2018-05-24T22:26:34Z"}, {"text": "Sure yeah it may not be easy, but if Gecko needs it we can get it done", "author": "acrichton@mozilla.com", "id": 13362362, "time": "2018-05-24T22:33:51Z"}, {"text": "We can wait and see how things go in early beta 62. I'll keep this tracked in the meantime.", "author": "lhenry@mozilla.com", "id": 13386568, "time": "2018-06-04T21:52:53Z"}, {"text": "(In reply to Alex Crichton [:acrichto] from comment #30)\n> From what glandium mentioned it sounds like 1.26 may not work well? We're\n> doing a point release for 1.26.1 but I think we're unlikely to get all this\n> in there. That being said though I think we can definitely make sure to get\n> everything in 1.27, for example:\n> \n> * ustable on allocator shims - https://github.com/rust-lang/rust/pull/50263\n> - already on beta\n> * fixing encoding_rs perf - https://github.com/rust-lang/rust/pull/50827 -\n> being backported to beta\n> * OOM and memory request - https://github.com/rust-lang/rust/pull/50880 -\n> can be backported if necessary\n> \n> Does that sound ok? Or do y'all otherwise have a pressing need to upgrade to\n> 1.26?\n\n1.27 is going to ship during the next soft code freeze, for that reason as well we should probably miss that train. At this point 1.28 will end up being our next rustc upgrade, which will ship in time for the September 4th merge.", "author": "cmanchester@mozilla.com", "id": 13397360, "time": "2018-06-08T22:10:45Z"}], "id": 1456150, "priority": "--", "cc": ["acrichton@mozilla.com", "cmanchester@mozilla.com", "continuation@gmail.com", "josh@joshmatthews.net", "jryans@gmail.com", "jseward@acm.org", "kmoir@mozilla.com", "mh+mozilla@glandium.org", "mwoerister@mozilla.com", "nfroyd@mozilla.com", "ryanvm@gmail.com", "simon.sapin@exyr.org", "ted@mielczarek.org"], "cf_crash_signature": "[@ static void alloc_system::platform::{{impl}}::oom]", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": [], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1447116], "qa_contact": "", "creation_time": "2018-04-23T15:15:06Z", "cf_status_firefox_esr52": "unaffected", "component": "General", "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "affected", "cf_status_firefox61": "fixed", "cf_status_firefox60": "unaffected", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "critical", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "mozillamarcia.knous@gmail.com", "id": 8519, "name": "mozillamarcia.knous@gmail.com", "real_name": "Marcia Knous [:marcia - needinfo? me]"}, "whiteboard": "", "mentors": [], "summary": "Crash in static void alloc_system::platform::{{impl}}::oom", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-06-08T22:10:45Z", "assigned_to": "nobody@mozilla.org", "is_open": true, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "continuation@gmail.com, jseward@acm.org, nfroyd@mozilla.com"}], "who": "continuation@gmail.com", "when": "2018-04-23T18:03:00Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1447116"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(nfroyd@mozilla.com)"}], "who": "continuation@gmail.com", "when": "2018-04-23T18:04:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cmanchester@mozilla.com, ted@mielczarek.org"}, {"removed": "needinfo?(nfroyd@mozilla.com)", "field_name": "flagtypes.name", "added": "needinfo?(ted@mielczarek.org), needinfo?(cmanchester@mozilla.com)"}], "who": "nfroyd@mozilla.com", "when": "2018-04-23T18:12:27Z"}, {"changes": [{"removed": "needinfo?(cmanchester@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "cmanchester@mozilla.com", "when": "2018-04-23T18:48:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ryanvm@gmail.com"}, {"removed": "---", "field_name": "cf_tracking_firefox61", "added": "+"}], "who": "ryanvm@gmail.com", "when": "2018-04-23T22:04:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mh+mozilla@glandium.org"}], "who": "mh+mozilla@glandium.org", "when": "2018-04-24T01:01:36Z"}, {"changes": [{"removed": "needinfo?(ted@mielczarek.org)", "field_name": "flagtypes.name", "added": ""}], "who": "ted@mielczarek.org", "when": "2018-04-24T12:28:23Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mwoerister@mozilla.com"}], "who": "ted@mielczarek.org", "when": "2018-04-24T13:07:17Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "acrichton@mozilla.com"}], "who": "acrichton@mozilla.com", "when": "2018-04-27T00:11:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "josh@joshmatthews.net"}], "who": "josh@joshmatthews.net", "when": "2018-05-03T16:33:13Z"}, {"changes": [{"removed": "---", "field_name": "cf_status_firefox_esr52", "added": "unaffected"}, {"removed": "---", "field_name": "cf_status_firefox_esr60", "added": "unaffected"}, {"removed": "---", "field_name": "cf_status_firefox60", "added": "unaffected"}, {"removed": "affected", "field_name": "cf_status_firefox61", "added": "fixed"}, {"removed": "---", "field_name": "cf_tracking_firefox62", "added": "+"}, {"removed": "---", "field_name": "cf_status_firefox62", "added": "affected"}], "who": "ryanvm@gmail.com", "when": "2018-05-08T01:08:51Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2018-05-11T02:30:46Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "simon.sapin@exyr.org"}], "who": "simon.sapin@exyr.org", "when": "2018-05-11T16:11:37Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(acrichton@mozilla.com)"}], "who": "cmanchester@mozilla.com", "when": "2018-05-24T21:21:09Z"}, {"changes": [{"removed": "needinfo?(acrichton@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "acrichton@mozilla.com", "when": "2018-05-24T22:17:29Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kmoir@mozilla.com"}], "who": "kmoir@mozilla.com", "when": "2018-05-31T19:31:29Z"}], "resolution": "", "op_sys": "Windows 10", "cf_fx_points": "---", "cf_blocking_fennec": "---"}