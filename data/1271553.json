{"cf_tracking_thunderbird_esr52": "---", "cf_tracking_firefox60": "---", "attachments": [{"creator": "yuki@clear-code.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "application/x-xpinstall", "id": 8751120}, {"creator": "umbecono@yahoo.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "application/x-xpinstall", "id": 8751511}, {"creator": "yuki@clear-code.com", "is_obsolete": 0, "is_patch": 0, "flags": [], "content_type": "application/x-xpinstall", "id": 8751599}, {"creator": "mixedpuppy@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8815869}, {"creator": "mixedpuppy@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8815870}, {"creator": "mixedpuppy@gmail.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8823830}, {"creator": "mixedpuppy@gmail.com", "is_obsolete": 1, "is_patch": 0, "flags": [], "content_type": "text/x-review-board-request", "id": 8825218}], "cf_tracking_firefox62": "---", "creator": "yuki@clear-code.com", "mentors_detail": [], "depends_on": [1310427, 1328695], "cf_status_firefox_esr60": "---", "cf_user_story": "", "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "yuki@clear-code.com"}, {"removed": "", "field_name": "blocks", "added": "1215059"}], "who": "yuki@clear-code.com", "when": "2016-05-10T07:54:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "amckay@mozilla.com"}, {"removed": "", "field_name": "whiteboard", "added": "[design-decision-needed]triaged"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-05-10T17:23:48Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "umbecono@yahoo.com"}], "who": "umbecono@yahoo.com", "when": "2016-05-11T02:25:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "karla.merza@softvision.ro"}, {"removed": "---", "field_name": "cf_tracking_e10s", "added": "?"}], "who": "karla.merza@softvision.ro", "when": "2016-05-11T08:18:52Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8751120, "added": "1"}], "who": "yuki@clear-code.com", "when": "2016-05-12T06:53:25Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jmathies@mozilla.com"}, {"removed": "", "field_name": "blocks", "added": "905436"}, {"removed": "?", "field_name": "cf_tracking_e10s", "added": "+"}], "who": "jmathies@mozilla.com", "when": "2016-05-12T15:01:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "honzab.moz@firemni.cz"}], "who": "honzab.moz@firemni.cz", "when": "2016-06-16T08:06:10Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "spectre@floodgap.com"}], "who": "jduell.mcbugs@gmail.com", "when": "2016-10-05T14:21:44Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jduell.mcbugs@gmail.com"}, {"removed": "WebExtensions: Untriaged", "field_name": "component", "added": "WebExtensions: Request Handling"}], "who": "jduell.mcbugs@gmail.com", "when": "2016-10-05T14:22:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugzilla-mozilla-20000923@james-ross.co.uk"}], "who": "bugzilla-mozilla-20000923@james-ross.co.uk", "when": "2016-10-11T18:55:59Z"}, {"changes": [{"removed": "nobody@mozilla.org", "field_name": "assigned_to", "added": "mixedpuppy@gmail.com"}, {"removed": "[design-decision-needed]triaged", "field_name": "whiteboard", "added": "[design-decision-approved]triaged"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-10-12T21:40:47Z"}, {"changes": [{"removed": "--", "field_name": "priority", "added": "P2"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-10-14T17:30:18Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1310316"}], "who": "mixedpuppy@gmail.com", "when": "2016-10-14T20:14:34Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "lidel@lidel.org"}], "who": "lidel@lidel.org", "when": "2016-11-03T20:20:32Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "noitidart@gmail.com"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-11-25T19:46:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kmaglione+bmo@mozilla.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8815869, "added": "feedback?(kmaglione+bmo@mozilla.com)"}], "who": "mixedpuppy@gmail.com", "when": "2016-11-30T21:09:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8815870, "added": "feedback?(kmaglione+bmo@mozilla.com)"}], "who": "mixedpuppy@gmail.com", "when": "2016-11-30T21:09:43Z"}, {"changes": [{"removed": "---", "field_name": "cf_blocking_webextensions", "added": "+"}], "who": "andy+bugzilla@mckay.pub", "when": "2016-12-20T22:49:01Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8815869, "added": "1"}, {"field_name": "flagtypes.name", "removed": "feedback?(kmaglione+bmo@mozilla.com)", "attachment_id": 8815869, "added": ""}, {"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8815870, "added": "1"}, {"field_name": "flagtypes.name", "removed": "feedback?(kmaglione+bmo@mozilla.com)", "attachment_id": 8815870, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8823830, "added": "feedback?(kmaglione+bmo@mozilla.com)"}], "who": "mixedpuppy@gmail.com", "when": "2017-01-04T22:05:44Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "", "attachment_id": 8825218, "added": "review?(kmaglione+bmo@mozilla.com)"}], "who": "mixedpuppy@gmail.com", "when": "2017-01-10T00:21:37Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8823830, "added": "1"}, {"field_name": "flagtypes.name", "removed": "feedback?(kmaglione+bmo@mozilla.com)", "attachment_id": 8823830, "added": ""}], "who": "mixedpuppy@gmail.com", "when": "2017-01-10T00:22:18Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bkelly@mozilla.com, mixedpuppy@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mixedpuppy@gmail.com)"}], "who": "bkelly@mozilla.com", "when": "2017-01-18T22:32:03Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "myk@mykzilla.org"}], "who": "myk@mykzilla.org", "when": "2017-01-18T22:37:31Z"}, {"changes": [{"removed": "needinfo?(mixedpuppy@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "mixedpuppy@gmail.com", "when": "2017-01-18T23:04:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "from_bugzilla2@ssokolow.com"}], "who": "from_bugzilla2@ssokolow.com", "when": "2017-01-19T00:31:56Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "nfroyd@mozilla.com"}], "who": "nfroyd@mozilla.com", "when": "2017-01-19T00:51:14Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "bugmail@asutherland.org"}], "who": "bugmail@asutherland.org", "when": "2017-01-19T01:09:14Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dietrich@mozilla.com"}], "who": "dietrich@mozilla.com", "when": "2017-01-19T06:35:59Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(mixedpuppy@gmail.com)"}], "who": "bkelly@mozilla.com", "when": "2017-01-19T16:46:57Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1332355"}], "who": "bkelly@mozilla.com", "when": "2017-01-19T17:22:32Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ehsan@mozilla.com"}], "who": "ehsan@mozilla.com", "when": "2017-01-19T17:40:39Z"}, {"changes": [{"removed": "needinfo?(mixedpuppy@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "bkelly@mozilla.com", "when": "2017-01-19T17:59:47Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "erdosib@gmail.com"}], "who": "erdosib@gmail.com", "when": "2017-01-24T09:03:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "arantius@gmail.com"}], "who": "arantius@gmail.com", "when": "2017-01-27T19:40:39Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jmize@mozilla.com"}], "who": "jmize@mozilla.com", "when": "2017-01-29T02:25:53Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "martin.thomson@gmail.com"}], "who": "martin.thomson@gmail.com", "when": "2017-01-29T23:11:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "flying-sheep@web.de"}], "who": "flying-sheep@web.de", "when": "2017-02-04T12:40:50Z"}, {"changes": [{"removed": "", "field_name": "depends_on", "added": "1310427"}], "who": "mixedpuppy@gmail.com", "when": "2017-02-04T19:04:12Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(kmaglione+bmo@mozilla.com)", "attachment_id": 8825218, "added": ""}], "who": "mixedpuppy@gmail.com", "when": "2017-02-05T01:25:50Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8825218, "added": "1"}], "who": "mixedpuppy@gmail.com", "when": "2017-02-05T01:26:03Z"}, {"changes": [{"removed": "+", "field_name": "cf_blocking_webextensions", "added": "---"}], "who": "mixedpuppy@gmail.com", "when": "2017-02-10T19:41:24Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "infoplus007@gmail.com"}], "who": "infoplus007@gmail.com", "when": "2017-02-24T23:53:36Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "valentin.gosu@gmail.com"}], "who": "valentin.gosu@gmail.com", "when": "2017-04-20T15:25:04Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "eric.jung@yahoo.com"}], "who": "kmaglione+bmo@mozilla.com", "when": "2017-04-21T18:31:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "brettz9@yahoo.com"}], "who": "brettz9@yahoo.com", "when": "2017-05-15T03:45:39Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "marsjaninzmarsa@gmail.com"}], "who": "marsjaninzmarsa@gmail.com", "when": "2017-08-03T06:31:00Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "kovatsch@inf.ethz.ch"}], "who": "kovatsch@inf.ethz.ch", "when": "2017-08-17T10:47:36Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "dennis.lissov@gmail.com"}], "who": "dennis.lissov@gmail.com", "when": "2017-09-11T09:44:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jakwings@gmail.com"}], "who": "jakwings@gmail.com", "when": "2017-09-26T23:11:28Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "antoine.mozilla@gmail.com"}], "who": "antoine.mozilla@gmail.com", "when": "2017-09-27T03:52:11Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "agentme49@gmail.com"}], "who": "agentme49@gmail.com", "when": "2017-10-01T04:57:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jan@ikenmeyer.eu"}], "who": "jan@ikenmeyer.eu", "when": "2017-10-02T13:44:45Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "brizzel@web.de"}], "who": "brizzel@web.de", "when": "2017-10-05T23:09:19Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "pbrobinson@gmail.com"}], "who": "pbrobinson@gmail.com", "when": "2017-10-18T11:41:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Off.Just.Off@gmail.com"}], "who": "Off.Just.Off@gmail.com", "when": "2017-10-24T21:02:59Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fdsfgs@krutt.org"}], "who": "fdsfgs@krutt.org", "when": "2017-11-06T18:53:09Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "asgraf@gmail.com"}], "who": "asgraf@gmail.com", "when": "2017-11-14T04:25:43Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(amckay@mozilla.com)"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-11-17T22:21:39Z"}, {"changes": [{"removed": "P2", "field_name": "priority", "added": "P5"}, {"removed": "mixedpuppy@gmail.com", "field_name": "assigned_to", "added": "nobody@mozilla.org"}, {"removed": "needinfo?(amckay@mozilla.com)", "field_name": "flagtypes.name", "added": ""}, {"removed": "+", "field_name": "cf_tracking_e10s", "added": "---"}], "who": "andy+bugzilla@mckay.pub", "when": "2017-11-22T22:05:36Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "rob@robwu.nl"}], "who": "rob@robwu.nl", "when": "2017-11-26T14:36:55Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mozbug@sambull.org"}], "who": "mozbug@sambull.org", "when": "2017-12-02T12:13:47Z"}, {"changes": [{"removed": "NEW", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "INCOMPLETE"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2017-12-06 00:20:56"}], "who": "bug-husbandry-bot@mozilla.bugs", "when": "2017-12-06T00:20:56Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "Virtual@teknik.io"}], "who": "Virtual@teknik.io", "when": "2017-12-28T09:47:45Z"}, {"changes": [{"removed": "RESOLVED", "field_name": "status", "added": "REOPENED"}, {"removed": "INCOMPLETE", "field_name": "resolution", "added": ""}], "who": "andy+bugzilla@mckay.pub", "when": "2018-01-03T18:03:12Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "murznn@gmail.com"}], "who": "murznn@gmail.com", "when": "2018-01-04T21:18:14Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "fabrice@desre.org"}], "who": "fabrice@desre.org", "when": "2018-01-09T20:45:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "pfrazee@gmail.com"}], "who": "pfrazee@gmail.com", "when": "2018-01-09T21:25:06Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "someuniquename@gmail.com"}], "who": "someuniquename@gmail.com", "when": "2018-01-15T11:09:06Z"}, {"changes": [{"removed": "", "field_name": "blocks", "added": "1435798"}], "who": "dietrich@mozilla.com", "when": "2018-02-05T18:36:07Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "frabrunelle@gmail.com"}], "who": "frabrunelle@gmail.com", "when": "2018-02-05T19:14:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "victorhfmag@gmail.com"}], "who": "victorhfmag@gmail.com", "when": "2018-02-05T20:36:01Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "samuel@sieb.net"}], "who": "samuel@sieb.net", "when": "2018-02-06T23:04:43Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "jryans@gmail.com"}], "who": "jryans@gmail.com", "when": "2018-02-09T01:25:26Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "mail@daviddias.me"}], "who": "mail@daviddias.me", "when": "2018-02-13T18:06:58Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "oli@tableflip.io"}], "who": "oli@tableflip.io", "when": "2018-02-15T13:01:21Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "rFobic@gmail.com"}, {"removed": "", "field_name": "depends_on", "added": "1328695"}], "who": "rFobic@gmail.com", "when": "2018-05-23T22:36:17Z"}], "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "keywords": [], "cc_detail": [{"email": "agentme49@gmail.com", "id": 443243, "name": "agentme49@gmail.com", "real_name": "Chris Cowan"}, {"email": "andy+bugzilla@mckay.pub", "id": 397635, "name": "andy+bugzilla@mckay.pub", "real_name": "Andy McKay"}, {"email": "antoine.mozilla@gmail.com", "id": 333996, "name": "antoine.mozilla@gmail.com", "real_name": "Antoine Turmel [:GeekShadow]"}, {"email": "arantius@gmail.com", "id": 150511, "name": "arantius@gmail.com", "real_name": "Anthony Lieuallen"}, {"email": "asgraf@gmail.com", "id": 389060, "name": "asgraf@gmail.com", "real_name": "Micha\u0142 Turek"}, {"email": "bkelly@mozilla.com", "id": 465500, "name": "bkelly@mozilla.com", "real_name": "Ben Kelly [:bkelly]"}, {"email": "brettz9@yahoo.com", "id": 230200, "name": "brettz9@yahoo.com", "real_name": "Brett Zamir"}, {"email": "brizzel@web.de", "id": 603407, "name": "brizzel@web.de", "real_name": "Leon"}, {"email": "bugmail@asutherland.org", "id": 151407, "name": "bugmail@asutherland.org", "real_name": "Andrew Sutherland [:asuth]"}, {"email": "bugzilla-mozilla-20000923@james-ross.co.uk", "id": 18057, "name": "bugzilla-mozilla-20000923@james-ross.co.uk", "real_name": "James Ross"}, {"email": "dennis.lissov@gmail.com", "id": 383577, "name": "dennis.lissov@gmail.com", "real_name": "Denis Lisov"}, {"email": "dietrich@mozilla.com", "id": 213632, "name": "dietrich@mozilla.com", "real_name": "Dietrich Ayala (:dietrich)"}, {"email": "ehsan@mozilla.com", "id": 251051, "name": "ehsan@mozilla.com", "real_name": ":Ehsan Akhgari"}, {"email": "erdosib@gmail.com", "id": 404107, "name": "erdosib@gmail.com", "real_name": ""}, {"email": "eric@ericjung.net", "id": 185762, "name": "eric@ericjung.net", "real_name": "Eric Jung [:ericjung]"}, {"email": "fabrice@desre.org", "id": 390071, "name": "fabrice@desre.org", "real_name": "[:fabrice] Fabrice Desr\u00e9"}, {"email": "fdsfgs@krutt.org", "id": 605028, "name": "fdsfgs@krutt.org", "real_name": "soredake"}, {"email": "flying-sheep@web.de", "id": 359880, "name": "flying-sheep@web.de", "real_name": "flying sheep"}, {"email": "frabrunelle@gmail.com", "id": 462364, "name": "frabrunelle@gmail.com", "real_name": ""}, {"email": "from_bugzilla2@ssokolow.com", "id": 305790, "name": "from_bugzilla2@ssokolow.com", "real_name": "Stephan Sokolow"}, {"email": "honzab.moz@firemni.cz", "id": 269762, "name": "honzab.moz@firemni.cz", "real_name": "Honza Bambas (:mayhemer)"}, {"email": "infoplus007@gmail.com", "id": 413468, "name": "infoplus007@gmail.com", "real_name": ""}, {"email": "jakwings@gmail.com", "id": 456048, "name": "jakwings@gmail.com", "real_name": "J.W"}, {"email": "jan@ikenmeyer.eu", "id": 580271, "name": "jan@ikenmeyer.eu", "real_name": "Jan Andre Ikenmeyer [:darkspirit]"}, {"email": "jduell.mcbugs@gmail.com", "id": 334931, "name": "jduell.mcbugs@gmail.com", "real_name": "Jason Duell [:jduell] (needinfo me)"}, {"email": "jmathies@mozilla.com", "id": 279663, "name": "jmathies@mozilla.com", "real_name": "Jim Mathies [:jimm]"}, {"email": "jmize@mozilla.com", "id": 477050, "name": "jmize@mozilla.com", "real_name": "Josh Mize [:jgmize]"}, {"email": "jryans@gmail.com", "id": 282978, "name": "jryans@gmail.com", "real_name": "J. Ryan Stinnett [:jryans] (use ni?)"}, {"email": "karla.merza@softvision.ro", "id": 558343, "name": "karla.merza@softvision.ro", "real_name": "Karla Merza [Away. Please needinfo? Brindusa Tot[:brindusat] ]"}, {"email": "kmaglione+bmo@mozilla.com", "id": 106098, "name": "kmaglione+bmo@mozilla.com", "real_name": "Kris Maglione [:kmag]"}, {"email": "kovatsch@inf.ethz.ch", "id": 444060, "name": "kovatsch@inf.ethz.ch", "real_name": "Matthias Kovatsch"}, {"email": "lidel@lidel.org", "id": 535729, "name": "lidel@lidel.org", "real_name": "Marcin Rataj"}, {"email": "mail@daviddias.me", "id": 611969, "name": "mail@daviddias.me", "real_name": "David Dias"}, {"email": "marsjaninzmarsa@gmail.com", "id": 470481, "name": "marsjaninzmarsa@gmail.com", "real_name": "Kuba Niewiarowski"}, {"email": "martin.thomson@gmail.com", "id": 438654, "name": "martin.thomson@gmail.com", "real_name": "Martin Thomson [:mt:]"}, {"email": "mixedpuppy@gmail.com", "id": 372685, "name": "mixedpuppy@gmail.com", "real_name": "Shane Caraveo (:mixedpuppy)"}, {"email": "mozbug@sambull.org", "id": 605507, "name": "mozbug@sambull.org", "real_name": "Sam Bull"}, {"email": "murznn@gmail.com", "id": 330475, "name": "murznn@gmail.com", "real_name": "Murz"}, {"email": "myk@mykzilla.org", "id": 27300, "name": "myk@mykzilla.org", "real_name": "Myk Melez [:myk] [@mykmelez]"}, {"email": "nfroyd@mozilla.com", "id": 417288, "name": "nfroyd@mozilla.com", "real_name": "Nathan Froyd [:froydnj]"}, {"email": "noitidart@gmail.com", "id": 395000, "name": "noitidart@gmail.com", "real_name": ""}, {"email": "Off.Just.Off@gmail.com", "id": 407151, "name": "Off.Just.Off@gmail.com", "real_name": "JustOff"}, {"email": "oli@tableflip.io", "id": 612094, "name": "oli@tableflip.io", "real_name": "Oli Evans"}, {"email": "pbrobinson@gmail.com", "id": 175968, "name": "pbrobinson@gmail.com", "real_name": ""}, {"email": "pfrazee@gmail.com", "id": 496392, "name": "pfrazee@gmail.com", "real_name": ""}, {"email": "rFobic@gmail.com", "id": 295373, "name": "rFobic@gmail.com", "real_name": "Irakli Gozalishvili [:irakli] [:gozala] [@gozala]"}, {"email": "rob@robwu.nl", "id": 447061, "name": "rob@robwu.nl", "real_name": "Rob Wu [:robwu]"}, {"email": "samuel@sieb.net", "id": 14762, "name": "samuel@sieb.net", "real_name": "Samuel Sieb"}, {"email": "someuniquename@gmail.com", "id": 477779, "name": "someuniquename@gmail.com", "real_name": "rwman"}, {"email": "spectre@floodgap.com", "id": 101070, "name": "spectre@floodgap.com", "real_name": "Cameron Kaiser [:spectre]"}, {"email": "umbecono@yahoo.com", "id": 558093, "name": "umbecono@yahoo.com", "real_name": "Nancy Grossman"}, {"email": "valentin.gosu@gmail.com", "id": 415378, "name": "valentin.gosu@gmail.com", "real_name": "Valentin Gosu [:valentin]"}, {"email": "victorhfmag@gmail.com", "id": 603341, "name": "victorhfmag@gmail.com", "real_name": "Victor Magalh\u00e3es"}, {"email": "Virtual@teknik.io", "id": 342842, "name": "Virtual@teknik.io", "real_name": "Virtual_ManPL [:Virtual] - (please needinfo? me - so I will see your comment/reply/question/etc.)"}, {"email": "yuki@clear-code.com", "id": 61043, "name": "yuki@clear-code.com", "real_name": "YUKI \"Piro\" Hiroshi"}], "cf_last_resolved": "2017-12-06T00:20:56Z", "cf_tracking_firefox61": "---", "votes": 18, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 64, "comments": [{"text": "My addon \"URN Supprot\" https://addons.mozilla.org/en-US/firefox/addon/urn-support/ provides ability to redirect some URN links to something related URLs. To migrate it from XUL-based to WebExtensions, I need something to alter the old method.\n\nOn Google Chrome, it seems available via `navigator.registerProtocolHandler()`.\n\nhttps://developers.google.com/web/updates/2011/06/Registering-a-custom-protocol-handler\n\nAnd it is already available on Firefox:\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler\n\nHowever, the API seems to accept only static URL pattern as the handler. On the other hand, my \"URN Support\" addon generates a URL from a URN. For example, if an URN \"urn:isbn:4-7980-1224-6\" is given, it will be redirected to \"http://www.amazon.co.jp/exec/obidos/ASIN/4798012246\" or something. To convert the given URN to a URL of the product page, we need a programmable handler.\n\nThus, we need something new WebExtensions API to provide programmable protocol handler, or extend the `navigator.registerProtocolHandler()` to accept function or something as the handler.", "author": "yuki@clear-code.com", "id": 11395636, "time": "2016-05-10T07:53:07Z"}, {"text": "You could do this in Firefox if extensions were permitted to pass a `moz-extension:` URI to `navigator.registerProtocolHandler`. In your background script then you'd `registerProtocolHandler`, listen for the handler URI, then extract the \"isbn:...\" from the URI in the listener and cancel (or redirect) the request.  \n\nnavigator.registerProtocolHandler(\"urn\", \"/urn-handler?%s\", \"A urn: handler\");\nchrome.webRequest.onBeforeRequest(\n  function (details) {\n    // extract the isbn:... from details.url, then\n    return {cancel: true};\n  },\n  {urls: [location.origin + \"/urn-handler?*\"]},\n  [\"blocking\"]\n);", "author": "umbecono@yahoo.com", "id": 11398902, "time": "2016-05-11T02:25:55Z"}, {"text": "Thank you for an advice!\n\n(In reply to Nancy Grossman from comment #1)\n> You could do this in Firefox if extensions were permitted to pass a\n> `moz-extension:` URI to `navigator.registerProtocolHandler`. In your\n> background script then you'd `registerProtocolHandler`, listen for the\n> handler URI, then extract the \"isbn:...\" from the URI in the listener and\n> cancel (or redirect) the request.  \n\nI've tried it but actually it didn't work from security errors on Nightly 49.0a1:\n\n~~~\nSecurityError: Permission denied to add http://moz-extension//1e79b00f-77ea-47c1-953a-c049021e84f1/urn-handler?%s as a content or protocol handler\ngetSecurityError()\nWebContentConverter.js:212\ncheckAndGetURI()\nWebContentConverter.js:164\nregisterProtocolHandler()\nWebContentConverter.js:393\n<anonymous>\nredirector.js:421\n~~~\n\nCodes:\n\nWebContentConverter.js:393:\n~~~\n  /**\n   * See nsIWebContentHandlerRegistrar\n   */\n  registerProtocolHandler(aProtocol, aURIString, aTitle, aBrowserOrWindow) {\n    LOG(\"registerProtocolHandler(\" + aProtocol + \",\" + aURIString + \",\" + aTitle + \")\");\n    let haveWindow = (aBrowserOrWindow instanceof Ci.nsIDOMWindow);\n    let uri;\n    if (haveWindow) {\n      uri = Utils.checkAndGetURI(aURIString, aBrowserOrWindow); // <= HERE!\n    } else {\n      // aURIString must not be a relative URI.\n      uri = Utils.makeURI(aURIString, null);\n    }\n~~~\n\nWebContentConverter.js:164:\n~~~\nconst Utils = {\n...\n  checkAndGetURI(aURIString, aContentWindow) {\n    let uri;\n    try {\n      let baseURI = aContentWindow.document.baseURIObject;\n      uri = this.makeURI(aURIString, null, baseURI);\n    } catch (ex) {\n      throw NS_ERROR_DOM_SYNTAX_ERR;\n    }\n\n    // For security reasons we reject non-http(s) urls (see bug 354316),\n    // we may need to revise this once we support more content types\n    if (uri.scheme != \"http\" && uri.scheme != \"https\") {\n      throw this.getSecurityError( // <= HERE!\n        \"Permission denied to add \" + uri.spec + \" as a content or protocol handler\",\n        aContentWindow);\n    }\n~~~\n\nAny \"moz-extensions:\" URL seems not allowed as a valid protocol handler.\n\nMoreover, even if I give a dummy URL like \"http://moz-extensions/xxxx\" as the protocol handler, it still raises an error: 'NS_ERROR_XPC_JAVASCRIPT_ERROR_WITH_DETAILS: [JavaScript Error: \"aBrowserWindow.gBrowser is undefined\" {file: \"resource://app/components/WebContentConverter.js\" line: 542}]'[JavaScript Error: \"aBrowserWindow.gBrowser is undefined\" {file: \"resource://app/components/WebContentConverter.js\" line: 542}]' when calling method: [nsIWebContentHandlerRegistrar::registerProtocolHandler]'\n\nWebContentConverter.js:542:\n~~~\n  _getBrowserForContentWindow(aBrowserWindow, aContentWindow) {\n    // This depends on pseudo APIs of browser.js and tabbrowser.xml\n    aContentWindow = aContentWindow.top;\n    return aBrowserWindow.gBrowser.browsers.find((browser) => // <= HERE!!\n      browser.contentWindow == aContentWindow);\n  },\n~~~\n\nI think that the \"aBrowserWindow.gBrowser is undefined\" error is from some codes not supported e10s.", "author": "yuki@clear-code.com", "id": 11399167, "time": "2016-05-11T05:48:08Z"}, {"text": "Created attachment 8751120\nExperimental version XPI\n\nExperimental build from https://github.com/piroor/urnsupport/tree/fb31a8400eb363e986bf8a989731d9b18d9c6052\n\nWhen I load the package experimentally, it reports some security errors like above.", "author": "yuki@clear-code.com", "id": 11399173, "time": "2016-05-11T05:52:21Z"}, {"text": "(In reply to YUKI \"Piro\" Hiroshi from comment #2)\n> SecurityError: Permission denied to add\n> http://moz-extension//1e79b00f-77ea-47c1-953a-c049021e84f1/urn-handler?%s as\n> a content or protocol handler\n> getSecurityError()\n> WebContentConverter.js:212\n> checkAndGetURI()\n> WebContentConverter.js:164\n> registerProtocolHandler()\n> WebContentConverter.js:393\n> <anonymous>\n> redirector.js:421\n\nI commented wrong error information... Here is the correct error information.\n\n~~~\nSecurityError: Permission denied to add moz-extension://1e79b00f-77ea-47c1-953a-c049021e84f1/urn-handler?%s as a content or protocol handler\ngetSecurityError()\nWebContentConverter.js:212\ncheckAndGetURI()\nWebContentConverter.js:153\nregisterProtocolHandler()\nWebContentConverter.js:393\n<anonymous>\nredirector.js:421\n~~~", "author": "yuki@clear-code.com", "id": 11399204, "time": "2016-05-11T06:15:05Z"}, {"text": "Apologies; I didn't explain myself clearly. Currently `registerProtocolHandler` only permits http: and https: handler URIs. Thus, the \"correct error\" in comment #4 is expected. So, my first thought was that `registerProtocolHandler` will also have to permit moz-extension: URIs when called from a WebExtension, because the handler URI must have the same origin as the document that registers the custom protocol.\n\nHowever, according to MDN's documentation [1], the \"same origin\" requirement doesn't apply to extensions. I see an `onBeforeRequest` event for your \"dummy URL\" when I load it from the URL bar, so your \"dummy URL\" handler URI should have worked OK. So, the \"wrong error\" in comment #4 is unexpected.\n\nIs there a way to test with e10s disabled?", "author": "umbecono@yahoo.com", "id": 11400936, "time": "2016-05-11T17:40:00Z"}, {"text": "I experimented a little in Firefox 46 (stable) with this statement:\nwindow.navigator.registerProtocolHandler(\"urn\", \"http://example.com/urn?%s\", \"URN WebExtension\");\n\n(1) Adding a custom protocol from the background script always fails:\n\nuncaught exception: Permission denied to add http://example.com/urn?%s as a content or protocol handler [background.js:43:1]\nuncaught exception: Permission denied to add http://example.com/urn?%s as a content or protocol handler [<unknown>]\n\n(2) Adding a custom protocol from a content script succeeds when the content script and the handler URI have the same origin. For example,\n\nwindow.navigator.registerProtocolHandler(\"urn\", \"http://example.com/urn?%s\", \"URN WebExtension\");\n\nsucceeds from a content script in \"http://example.com/\", but fails from the same content script in \"https://userstyles.org/\":\n\nuncaught exception: Permission denied to add http://example.com/urn?%s as a content or protocol handler [content.js:2:1]\nPermission denied to add http://example.com/urn?%s as a content or protocol handler [ExtensionUtils.jsm:30:0]\n\n(3) Adding it succeeds from the page context (via Web Console) when the page and the handler URI have the same origin.\n\nSo, WebExtensions cannot register protocol handlers targeting other sites. The documentation [1] must refer to some other sort of add-on.\n\nElectrolysis isn't enabled in my browser [2], so there may be other, e10s-related, issues. \n\nFor now, you might hack around the problem by sending users to a known page when the add-on is installed, and register a protocol handler with that origin from a content script on that page. \n\n[1] https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler (Apologies, I forgot to include this link earlier.)\n[2] https://wiki.mozilla.org/Electrolysis#Enabling_and_Disabling_Electrolysis_on_Release", "author": "umbecono@yahoo.com", "id": 11401779, "time": "2016-05-11T21:47:28Z"}, {"text": "Created attachment 8751511\nDemo WE: custom protocol test\n\nThe attached WebExtension's content script registers a custom \"urn:\" protocol when you browse to http://example.com/. In the background script, a webRequest listener reports \"urn:*\" URLs to the console. It almost works in Firefox 46, but there are issues.\n\n(1) `onBeforeRequest` isn't called when using the custom protocol. The first event is `onBeforeSendHeaders`.\n\n(2) The request can't be cancelled from `onBeforeSendHeaders`. Loading \"urn:something-something-else\" from the location bar throws an error:\n\nNS_ERROR_XPC_NOT_ENOUGH_ARGS: Not enough arguments [nsIHttpChannel.cancel] WebRequest.jsm:366:0\n\nMaybe (2) has already been fixed?", "author": "umbecono@yahoo.com", "id": 11401995, "time": "2016-05-11T23:31:59Z"}, {"text": "Thanks a lot! Finally I successfully implemented URN handler addon based on current WebExtensions APIs. It worked with e10s, thus my previous comment about e10s compatibility was from misinterpretation. I'm very sorry.\n\nHowever, I've realized that still there are some problems around user experience. I'll add comments later.", "author": "yuki@clear-code.com", "id": 11402539, "time": "2016-05-12T05:40:13Z"}, {"text": "Created attachment 8751599\nExperimental version XPI based on currently available WE APIs\n\nThe updated experimental XPI. After installed, you need to visit the website https://piro.sakura.ne.jp/ to register its custom protocol handler. The step should be done via chrome.runtime.onInstalled (bug 1252871) but you have to do it manually for now. Then, you'll try actual URN links on some demo pages:\n\nhttp://piro.sakura.ne.jp/xul/_urnsupport.html.en#what\nhttps://jsfiddle.net/piro_or/z6m5zayn/3/\n\nI think there are some user experience problems around the current experimental version:\n\n1) Internal URI like \"moz-extension://...\" should be allowed as a protocol handler, and it should be registered from a background script. As pointed at the comment #5 and the comment #6, currently we have to do something hacky workaround with a URL of an actual webpage. This limitation kills ability to install protocol handling addon in offline.\n\n(And I also know that such protocol handlers must be unregistered when the addon is disabled/uninstalled. It seems to be done via \"chrome.runtime.onSuspend\".)\n\n2) Registering of a new protocol handler by an addon should be done without any manual operation. Currently each user has to click the \"Add Application\" button on the \"Add URN Handler (www.example.com) as an application for urn links?\" info bar manually, to complete installation steps of the addon's functionality. This means that the user can skip the required installation step unintentionally. Such a confirmation for special permissions should be done through the installation process by the addon manager itself, like apps installed from Google Play on Android.\n\n3) New protocol handler added by an addon should become the default handler automatically, if there is no other existing handler. Currently you need to turn the \"Remember my choice for urn links\" checkbox on manually at the first time you clicked a URN link, otherwise the \"Launch Application\" dialog appears for every click on URN links.", "author": "yuki@clear-code.com", "id": 11402651, "time": "2016-05-12T06:53:25Z"}, {"text": "(In reply to YUKI \"Piro\" Hiroshi from comment #9)\n> The updated experimental XPI. After installed, you need to visit the website\n> https://piro.sakura.ne.jp/ to register its custom protocol handler.\n\nOops, you need to visit the page https://piro.sakura.ne.jp/xul/urnsupport/handler?urn=- instead of the top page.", "author": "yuki@clear-code.com", "id": 11402659, "time": "2016-05-12T06:55:38Z"}, {"text": "*** Bug 1296885 has been marked as a duplicate of this bug. ***", "author": "jduell.mcbugs@gmail.com", "id": 11761951, "time": "2016-10-05T14:21:44Z"}, {"text": "Note: there's a lot of relevant info for this bug in bug 1296885.", "author": "jduell.mcbugs@gmail.com", "id": 11761953, "time": "2016-10-05T14:22:47Z"}, {"text": "These seems like a good thing to do, because the content script and other workarounds whilst they work seem pretty hacky and not a great experience. As Nancy and Piro point out, we've already got navigator.registerProtocolHandler(), so the idea of changing that to allow pointing moz-extension:// URL or something sounds pretty neat to me (there might be more nuance to that in the bug comments).", "author": "andy+bugzilla@mckay.pub", "id": 11781045, "time": "2016-10-12T21:49:05Z"}, {"text": "They're more bugs than nuances. The basic approach is, (a) `navigator.registerProtocolHandler(scheme, document.origin + fake_pathname)` from the background page; (b) listen for the handler URL in a blocking `webRequest.onBeforeRequest` listener; (c) return a redirect URL. If the protocol is to be used from a content page, (d) mark the handler URL as a web-accessible resource in the manifest. \n\nCurrently in Firefox you (1) can't register a protocol from the background page, and you (2) don't get `onBeforeRequest` events for URLs with custom schemes so you can't redirect them (comment 7). Deal breakers.\n\nAlso, the Firefox documentation says that extensions can register handlers for any site [1], but (3) content scripts can only register handlers for the same origin, and maybe would be true of background scripts as well. That's OK; in fact I'd prefer that a custom protocol stop working when the WE which added it is disabled or uninstalled.\n\n(4) The scheme whitelist [2] isn't enforced in Firefox. That's convenient for e.g. 'Custom Buttons' (amo/addon/2707), which distributes code as `custombutton:` URLs. Also for users who'll grouse about typing an extra \"web+\" into the URL bar.\n\nThere are other complications if the handler generates the document instead of redirecting to an existing resource. (5) The custom URI will usually have to redirect to a `data:` URI. The alternative is a `blob:` URI, but (5a) these are same-origin, so background `blob:`s can't be linked from a content page and (5b) they don't expire, so if you pass them to a UI page you'll leak unless you explicitly revoke them (but when to do it?).\n\nThe worst is, (6) you can't use asynchronous APIs to build the response. You can use Web Storage but not IndexedDB, you can't use FileReader to make the `data:` URL, etc. That breaks e.g. 'Greasemonkey' (amo/addon/748). `runtime.onMessage` has a mechanism for responding asynchronously. Maybe `webRequest.onBeforeRequest` could too.\n\nAs an aside, (7) you can control whether other extensions or content pages can use the custom protocol. `blob:` URIs can only be used by your own UI pages, and `data:` URIs can only be used by content pages if they're marked 'web-accessible'.\n\nThere may be others. Maybe you could ask the developers of the add-ons in Honza Bambas' list [3].\n\n\nShane Caraveo, I don't find 'protocolhandler' in the 'Video Downloadhelper' xpi. How does this block bug 1310316?\n\n[1] https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler\n[2] https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler#Permitted_schemes\n[3] https://bugzilla.mozilla.org/show_bug.cgi?id=1296885#c11", "author": "umbecono@yahoo.com", "id": 11791237, "time": "2016-10-17T16:13:42Z"}, {"text": "\n> Shane Caraveo, I don't find 'protocolhandler' in the 'Video Downloadhelper'\n> xpi. How does this block bug 1310316?\n\nIt's based on a conversation with the author about functionality that would be needed/or help to implement the functionality using the WebExtensions api.  But it may not be necessary, just tracking.", "author": "mixedpuppy@gmail.com", "id": 11792006, "time": "2016-10-17T19:56:37Z"}, {"text": "I've been thinking about this quite a bit, and feel that we should not touch nav.registerProtocolHandler.  However, we can create a protocol api for webext that uses the same backend, resulting in the same functionality.  \n\n1. nav.registerProtocolHandler is a web content api and I'd rather not touch anything that may have implications across the web.  \n\n2. we may be able to design a better api than registerProtocolHandler that works better for WebExtensions.\n\n3. but starting with a straight forward re-implementation gives us a starting point for hacking and discussion.\n\nThus today's scratch my itch hack is presented:\n\nhttps://github.com/mixedpuppy/web-ext-rph\n\nIn dev edition, you can load about:debugging.  Then load the manifest in the top level, then load the manifest in the sample directory.  After that, open a new tab and type \"web-ext:foobar\" and see what happens.", "author": "mixedpuppy@gmail.com", "id": 11792544, "time": "2016-10-17T22:53:08Z"}, {"text": "Let me update comment #14: Bug 1254204 will allow the use of asynchronous APIs in `webRequest` handlers (6), and bug 1294996 will allow any origin to load `blob:` URIs created by the background script (5a).\n\n(In reply to Shane Caraveo (:mixedpuppy) from comment #16)\n> 1. nav.registerProtocolHandler is a web content api and I'd rather not touch [it]\n\nI think white-listing `moz-extension:` while keeping the 'same-origin' registration policy could suffice. I don't like the idea of duplicating an existing Web API. The heart of a Chrome extension is an HTML document in a hidden window that behaves like every other. If a Web API doesn't work in the hidden window then it should be fixed, not replaced with a nearly identical extension API.\n\n> 2. we may be able to design a better api\n\nMost of the add-ons in Honza Bambas' list are using the protocol either to kick-start the add-on from the URL bar or a web page, or to use the add-on as a database. Allowing a function instead of a URL would simplify that, and the handler wouldn't need the `webRequest` permission.\n\n> 3. but starting with a straight forward re-implementation gives us a starting point\n\nI experimented with your demo. (Thank you.) Here's what happened: \n(1) I was able to create custom protocols that redirected to the extension's UI page (its stock behaviour), to a local filesystem `file:///`, and to a `blob:moz-extension;//\" created in the background script, and could retrieve them all from a content page.\n\n(2) Most of the `chrome.*` APIs were gone, including `chrome.webRequest`.\n\n(3) The web protocol interface Firefox is awful. (3a) An origin can register 2+ handler URLs for one scheme. (3b) An origin can't remove its handlers. (3c) `http://example.com` can register a scheme for `https://example.com` and vice versa. (3d) A scheme persists in Preferences>Applications after its last handler is removed. (3e) `nsIWebHandlerApp` (but not `navigator.registerProtocolHandler`) permits static handler URLs (i.e., no '%s' in the template). (3e) The \"Launch Application\" dialog lists handlers by origin, but WebExtension origins (\"moz-extension://da0c8efb-42ea-47f3-80e0-a0a416d8ded7\") are opaque gibberish.", "author": "umbecono@yahoo.com", "id": 11804783, "time": "2016-10-21T17:51:28Z"}, {"text": "(In reply to Nancy Grossman from comment #17)\n> Let me update comment #14: Bug 1254204 will allow the use of asynchronous\n> APIs in `webRequest` handlers (6), and bug 1294996 will allow any origin to\n> load `blob:` URIs created by the background script (5a).\n> \n> (In reply to Shane Caraveo (:mixedpuppy) from comment #16)\n> > 1. nav.registerProtocolHandler is a web content api and I'd rather not touch [it]\n> \n> I think white-listing `moz-extension:` while keeping the 'same-origin'\n> registration policy could suffice. I don't like the idea of duplicating an\n> existing Web API. \n\nIf the goal were simply a 100% duplication I would lean towards agreeing.  I would rather examine what we actually need rather than falling back on an API that has relatively limited flexibility.  I think your response to the second item above is a perfect example of adding better functionality.\n\n> > 3. but starting with a straight forward re-implementation gives us a starting point\n> \n> I experimented with your demo. (Thank you.) Here's what happened: \n\nThis feels like a bug hunt on demo code, if not I need to understand better.  Otherwise I feel like it's too early for that.  But one item did stick out.\n\n> (2) Most of the `chrome.*` APIs were gone, including `chrome.webRequest`.\n\nI would assume webextension APIs should be available and working if the page is a proper moz-extension origin.  If that's failing I'll want to understand why.  I'm not clear on how you see this breaking.\n\nMoving forward:\n\nIn a way I feel like WebExtensions just needs a way to get a message for a protocol handler.\n\nbackground.js:\nchrome.protocol.addListener({ scheme: \"myprotocol\", name: \"My Protocol Handler\" }, details => {\n  // details.url contains the full url clicked on.\n  chrome.window.create({url: details.url}); // or whatever the addon needs to do\n});\n\nThe downside to that may be that the addon does nothing user-visible which also wouldn't make sense, but maybe that is not a concern of the api.", "author": "mixedpuppy@gmail.com", "id": 11804967, "time": "2016-10-21T19:07:35Z"}, {"text": "Further thinking:\n\nhandlerDetails = {\n scheme: the scheme to handle, required\n name: a name, required\n type: [url, page_action, browser_action], required\n url: url to open in tab, required if type url\n}\n\n- url specifies a url should be opened in a tab (url must be provided), must be in permissions or same-origin to extension\n- page_action specifies to open the page_action defined in manifest\n- browser_action specifies to open browser_action defined in manifest\n\nchrome.protocol.register(handlerDetails);\nchrome.protocol.onFired.addListener(details => {\n  // details.url contains the full url clicked on\n});", "author": "mixedpuppy@gmail.com", "id": 11805153, "time": "2016-10-21T20:31:24Z"}, {"text": "(In reply to Shane Caraveo (:mixedpuppy) from comment #16)\n> 1. nav.registerProtocolHandler is a web content api and I'd rather not touch [it]\n\nOnly two small changes to `Utils.checkAndGetURI` [1] are needed, one to allow extension pages as handlers and one to allow extension pages to register handlers:\n\n152    if (uri.scheme != \"http\" && uri.scheme != \"https\" && uri.scheme != \"moz-extension\") {\n...\n162        (![\"http:\", \"https:\", \"moz-extension:\"].includes(aContentWindow.location.protocol) ||\n\nURLs with custom schemes are triggering `onBeforeRequest` events in Firefox 50, so with those two changes you could be done.\n\n(In reply to Shane Caraveo (:mixedpuppy) from comment #18)\n> I would rather examine what we actually need\n\n17 of the top 29 add-ons actually use custom protocols (attachment 8783909), 22 different schemes in all. (I omit 'JavaScript Debugger' (216) which broke in FF33.) Some, such as 'x-lucidor` which reads from a zip archive, must wait on bug 1254204, but only `x-hds` ('Ant Video', 8174) can't be realized as a template URL and an `onBeforeRequest` listener. (Or maybe it can; it wasn't clear to me what `x-hds` was doing.) Seems flexible enough to me. Is there a use-case that isn't covered?\n\nThen too there's Chrome parity to consider. Let's not write `if (Firefox) else` handlers for the next five years without a very good reason.\n\n> second item above is a perfect example of adding better functionality.\n\nOnly until bug 1254204 lands. Then it's just sugar. (Mmm!) \"Better functionality\" would be, say, `unregisterProtocolHandler` or `isProtocolHandlerRegistered`. Anyway, `registerProtocolHandler` could be overloaded too.\n\n> This feels like a bug hunt on demo code, if not I need to understand better.\n\nIt's not about your code or your feels. Firefox's custom protocol handling is deficient in six important ways. The deficiencies are in the production code you wrapped, not in your Experiments demo per se. Today it doesn't matter. Around 0% of Firefox users have ever seen that bit of UI. WebExtensions will raise that above 3%. You want to avoid touching `registerProtocolHandler`, but someone's gonna have to touch it.\n\n> I would assume webextension APIs should be available and working...\n> I'm not clear on how you see this breaking.\n\nI added a `chrome.webRequest.onBeforeRequest` listener to background.js but forgot to add the permissions. Apologies; I'd forgotten how spare `chrome.*` is in a minimal extension.\n\n[1] https://dxr.mozilla.org/mozilla-central/source/browser/components/feeds/WebContentConverter.js#141", "author": "umbecono@yahoo.com", "id": 11820140, "time": "2016-10-28T05:35:28Z"}, {"text": "*** Bug 1310427 has been marked as a duplicate of this bug. ***", "author": "andy+bugzilla@mckay.pub", "id": 11888173, "time": "2016-11-25T19:46:12Z"}, {"text": "Created attachment 8815869\nprogramatic protocol hanlders", "author": "mixedpuppy@gmail.com", "id": 11898975, "time": "2016-11-30T21:09:15Z"}, {"text": "Created attachment 8815870\nnav.rph support", "author": "mixedpuppy@gmail.com", "id": 11898976, "time": "2016-11-30T21:09:43Z"}, {"text": "The two patches add support for RPH through either an even in a background page or via the old nav.rph.  \n\n- \"handlers\" may not be a great namespace\n- \"content_handler\" permission was choosen to hopefully support content handlers, though I see they are limited to rss/atom/etc feeds\n- nav.rph support relies on the \"content_handler\" permission to bypass the regular popup asking for permission.", "author": "mixedpuppy@gmail.com", "id": 11898981, "time": "2016-11-30T21:12:05Z"}, {"text": "After looking into this further, I'm am inclined to only use the second patch and drop support for programmatic handling.  While the first patch works, it is not yet complete and there are simply more hurdles with existing platform assumptions that we'd have to jump over.  I'm not convinced there is a high benefit to programmatic handlers over a page load for *this* api.", "author": "mixedpuppy@gmail.com", "id": 11901308, "time": "2016-12-01T17:17:32Z"}, {"text": "Shane, can you clarify the difference?", "author": "spectre@floodgap.com", "id": 11901339, "time": "2016-12-01T17:29:13Z"}, {"text": "(In reply to Cameron Kaiser [:spectre] from comment #26)\n> Shane, can you clarify the difference?\n\nWith the first patch you specify your protocol in manifest.json and use browser.handlers.onHandler.addListener to get a callback when the protocol is used.  The idea is that you would then open a tab, or do some preprocessing.  It also manages uninstalling the handler when the addon is uninstalled.\n\nWith the second patch you just use navigator.registerProtocolHandler, though the permission is still in the manifest, so the permission prompt would happen on install rather than when you make the call.\n\nThe problem with the first approach is that several assumptions are made in code (e.g. the tab is already opened before onHandler would be called).\n\nA third option is to [sort of] blend the two.  Define the protocol in the manifest so that we manage uninstall, there would be no need to call registerProtocolHandler.  But there would be no onHandler call, we just open the tab/frame with the urlTemplate you provide.", "author": "mixedpuppy@gmail.com", "id": 11901401, "time": "2016-12-01T17:46:57Z"}, {"text": "I'm inclined towards the 3rd option in comment 27 at this moment.  If we used nav.rph and relied on addons doing the right thing on shutdown or uninstall, a bug or forgetfulness could leave a non-working handler installed.", "author": "mixedpuppy@gmail.com", "id": 11901412, "time": "2016-12-01T17:49:54Z"}, {"text": "Created attachment 8823830\nrph\n\nThis is the approach I've settled on.  Protocol handlers are defined in the manifest, and we manage adding/removing the handler.  This avoids the potential for an addon to leave an entry behind if it is uninstalled.  I think that is important since these will be addon urls rather than web urls.  There is no \"handler\" event fired, it works just as if you used nav.registerProtocolHandler, opening the url in a tab/frame, etc.", "author": "mixedpuppy@gmail.com", "id": 11957500, "time": "2017-01-04T22:05:44Z"}, {"text": "Created attachment 8825218\nBug 1271553 support programatic protocol handlers,\n\nReview commit: https://reviewboard.mozilla.org/r/103402/diff/#index_header\nSee other reviews: https://reviewboard.mozilla.org/r/103402/", "author": "mixedpuppy@gmail.com", "id": 11968880, "time": "2017-01-10T00:21:37Z"}, {"text": "Comment on attachment 8823830\nrph\n\nobsoleted by reviewboard", "author": "mixedpuppy@gmail.com", "id": 11968882, "time": "2017-01-10T00:22:18Z"}, {"text": "Will this prevent us from making nsIURI and URL parsing in general work off main thread?  This is a MAJOR perf and developer headache for us.  I thought we were finally going to get away from this requirement with web extensions.", "author": "bkelly@mozilla.com", "id": 11992682, "time": "2017-01-18T22:32:03Z"}, {"text": "(In reply to Ben Kelly [:bkelly] from comment #32)\n> Will this prevent us from making nsIURI and URL parsing in general work off\n> main thread?  This is a MAJOR perf and developer headache for us.  I thought\n> we were finally going to get away from this requirement with web extensions.\n\nAll this (comment 30) does is add the config data for a protocol handler to nsIExternalProtocolService, the use of that handler happens elsewhere (see nsIExternalProtocolService/nsIWebHandlerApp).", "author": "mixedpuppy@gmail.com", "id": 11992792, "time": "2017-01-18T23:04:47Z"}, {"text": "(In reply to Ben Kelly [:bkelly] from comment #32)\n> Will this prevent us from making nsIURI and URL parsing in general work off\n> main thread?  This is a MAJOR perf and developer headache for us.  I thought\n> we were finally going to get away from this requirement with web extensions.\n\nThat's also an odd and vague comment.  I don't understand what you mean by \"get away from this requirement\".  Probably not the right bug in which to have that discussion.", "author": "mixedpuppy@gmail.com", "id": 11992806, "time": "2017-01-18T23:14:18Z"}, {"text": "In the past addons could register URL parsing handlers to create custom protocols.  Like \"foo://my+url+is+uses+pluses+for+separators\".  This means that currently every time we parse a URL string we have to do it on the main thread because it might run js.  As you can imagine we parse URLs *a lot*.  Requiring every subsystem to touch the main thread to parse URLs is a major drag on browser perf.\n\nIf web extensions are not going to add custom URL parsing back, then I think my concerns are addressed.  Sorry if I misunderstood this bug.\n\nDoes that all sound correct to you?", "author": "bkelly@mozilla.com", "id": 11994868, "time": "2017-01-19T16:46:57Z"}, {"text": "Yes, but the protocol handler needs to look at the URI to know where the resource being requested should be fetched from, right? How is that distinguished from the situation you mention?", "author": "spectre@floodgap.com", "id": 11994921, "time": "2017-01-19T17:02:35Z"}, {"text": "(In reply to Cameron Kaiser [:spectre] from comment #36)\n> Yes, but the protocol handler needs to look at the URI to know where the\n> resource being requested should be fetched from, right? How is that\n> distinguished from the situation you mention?\n\nLooking at the URL is fine as long as it conforms to standard parsing rules.  For example, something like:\n\n  scheme://username:password@host/some/path/?query=value#fragment\n\nIf you want web extensions to be able to define different parse schemes for urls, like:\n\n  foo://host?path?separated?by?questions!?somethingelsenonstandard\n\nThen we will be baking this long term perf penalty back into the browser.  This would be very disappointing to me since I thought one of the goals of web extensions was to avoid APIs that restricted our ability to improve the browser.", "author": "bkelly@mozilla.com", "id": 11994990, "time": "2017-01-19T17:21:30Z"}, {"text": "FWIW I wrote a separate bug for the off-main-thread URL parsing goal.  See bug 1332355.", "author": "bkelly@mozilla.com", "id": 11994996, "time": "2017-01-19T17:22:32Z"}, {"text": "(In reply to Shane Caraveo (:mixedpuppy) from comment #33)\n> (In reply to Ben Kelly [:bkelly] from comment #32)\n> > Will this prevent us from making nsIURI and URL parsing in general work off\n> > main thread?  This is a MAJOR perf and developer headache for us.  I thought\n> > we were finally going to get away from this requirement with web extensions.\n> \n> All this (comment 30) does is add the config data for a protocol handler to\n> nsIExternalProtocolService, the use of that handler happens elsewhere (see\n> nsIExternalProtocolService/nsIWebHandlerApp).\n\nI think the approach used here is the correct one.  This patch merely uses nsExternalProtocolHandler, which knows how to parse its URIs (it parses them as simple URIs).  This approach allows the extension to do custom parsing of the URI path to do what they need to without tying our hands in Gecko in terms of URI parsing.", "author": "ehsan@mozilla.com", "id": 11995153, "time": "2017-01-19T17:57:53Z"}, {"text": "Hi, Greasemonkey author here.  I'm sorry I wasn't involved sooner, and there's a lot of comments to read (which I haven't 100%... but comment #14 sounds a lot like my concerns).  However, I'd like to explain our situation.\n\n\nGreasemonkey is a user script manager, essentially we are a small extension ecosystem built into an extension.  One of the things we let scripts do is include named, resources of data, refer to them, and build URIs to serve them.  So if your script has a UI, you can include (potentially large) images, refer to them by URL, and have them work efficiently. (I.e. not by constructing giant data:base64 URLs.)\n\nFor example, in https://arantius.com/misc/greasemonkey/imgur-minimal-gallery.user.js I specify:\n\n    // @resource    spinner img/spinner.gif\n\nThen later in the code I do:\n\n    document.body.innerHTML =\n        \"<img id='spinner'\"\n        +\" style='position: fixed; top: 50%; left: 50%; margin-top: -15px; margin-left: -15px;'\"\n        +\" src='\"+GM_getResourceURL('spinner')+\"'>\";\n\nInserting that image into the page, by URL reference.  That URL is something like:\n\n    greasemonkey-script:6b21c9e9-0500-4f34-8c4a-fb99202cb663/spinner\n\nOr, functionally identical to the moz-extension: scheme, an opaque prefix identifying the script, and the name of the resource.  Internally we register an nsIProtocolHandler handler, which (conditionally) just returns a channel to the equivalent file:/// where we have previously stored those contents ( https://github.com/greasemonkey/greasemonkey/blob/master/modules/scriptProtocol.js#L128 ).\n\nNote the use case there, in that it's serving an image referred to by the DOM of a content page, or similarly for CSS.  I don't completely understand all the above, but constructing an HTML document or a redirect to some public internet URL is not what we do with this.  Perhaps in theory we could construct a data: URL for the binary content of the image and redirect to that, but ick.", "author": "arantius@gmail.com", "id": 12017293, "time": "2017-01-27T19:40:39Z"}, {"text": "So I just wanted to register the comment I made on Myk's github repo here.\n\nhttps://github.com/mozilla/moz-handler/issues/1#issuecomment-274633424\n\nSynopsis: this API is just a partial solution to the general problem, and one that has privacy shortcomings in the general case.\n\nBecause this leads to a URI being sent to the same server in every case, that server gains the ability to track the use of any resource that uses the scheme.  In the case where the target of a custom scheme handler is the site that is controlled by the addon author, this is not a problem.  Anywhere else and you are stuck.\n\nI think that the more general solution here would be to permit a web extension to install a service worker.  That service worker would be exempt from the usual same-origin restrictions and could be installed for any protocol.  I realize that's probably a considerable amount of work to achieve, but it would neatly avoid a bunch of the concerns raised in this thread.  I think that it covers Ben's threading concerns and Anthony's resource aliasing concern.\n\nWhether we ALSO want a simpler API is not a question that I have much of an opinion on.  If there's a general view that a simple API is still valuable then maybe having both isn't disastrous.  I think that it probably isn't that useful if a SW can be implemented in a reasonable time frame.", "author": "martin.thomson@gmail.com", "id": 12019767, "time": "2017-01-29T23:11:24Z"}, {"text": "Why necessarily would a WebExtension need a host to have the URI string sent to? Wouldn't it do that processing locally?", "author": "spectre@floodgap.com", "id": 12019797, "time": "2017-01-29T23:59:07Z"}, {"text": "No, you are right, this could be handled by a chrome:// resource.", "author": "martin.thomson@gmail.com", "id": 12019822, "time": "2017-01-30T00:33:36Z"}, {"text": "(In reply to Martin Thomson [:mt:] from comment #41)\n> I think that the more general solution here would be to permit a web\n> extension to install a service worker.\n\nYour comment 43 may moot your point about this, but I think it's worth addressing because it's a tempting notion that I expect to come up again in the future, so speaking as a Gecko ServiceWorker dev:\n\nThe abstract concept makes sense, but this would need to be be its own distinct idea and implementation.  Something like a \"WebExtVirtualServer\" API that dispatches \"webext-fetch\" events at the extension's background page.\n\nThe ServiceWorker implementation and related logic (necko http channels, fetch, etc.) would be massively complicated by attempting to also address web-extensions use cases.  Of particular concern is that ServiceWorkers and their interaction with fetch are well-specified but also tremendously complex (and currently are moving targets).  Unless there's cross-browser interest to augment the specs to explicitly provide webext support for synthetic origins/protocols, Gecko would effectively end up with a massive complicated fork of the specs, forever.", "author": "bugmail@asutherland.org", "id": 12019832, "time": "2017-01-30T00:57:35Z"}, {"text": "ah nice that this is in prograss, this functionality is required to get my man:// protocol working :D", "author": "flying-sheep@web.de", "id": 12038599, "time": "2017-02-04T12:40:50Z"}, {"text": "FYI: I'm continuing to research how/whether Greasemonkey can be re-written as a WebExtension.\n\nWhat we'd really want, as simple as I can write it without skipping key detail:\n\nA) The ability to download arbitrary content at run time (user scripts and their resorces),\nB) Stored into some place with a simple key,\nC) A custom-protocol-like handler we can register, so that\nD) Whenever _any part_ of the browser accesses a URL in that protocol,\nE) We can quickly and efficiently return the key from step B, to serve the previously stored content.  (This means, e.g., no giant data: URIs encoding large piles of data, and human-readable URLs.)\n\nThis came up again today as I started working on actually evaluating user scripts.  If I don't do things carefully, I get invalid URLs (in the console, in case of log/error) like \"mycontentscript.js%20line%203%20%3E%20eval:2:7\" or \"ExtensionContent.jsm:283:22\" (which happens to be the `Cu.evalInSandbox()` line, for tabs.executeScript()).  They're both clickable, but the target of the click is unhelpful.\n\nI can use `//# sourceURL=...` to help make these readable, but I can't point it at something that makes clicking it actually show which line was the problem.  But if I had a custom protocol to serve, then I _could_.\n\nAnd as mentioned before, I'd like to also be able to serve (content accessible) things like CSS and images from this handler as well.", "author": "arantius@gmail.com", "id": 12096201, "time": "2017-02-24T17:44:42Z"}, {"text": "The IPFS Add-On [1] I created has a bit different use for custom protocol handlers than examples mentioned so far, but I feel the use case is generic enough to be described here.  \n                                                                                                                                                                                                                      \nDistilled needs are:                                                                                                                                                                               \n                                                                                                                                                                                                                      \nA) Ability to register custom protocol handler (to make this example generic let's call it \"foo://\")\n\nB) Opening \"foo://origin/path/to/resource\" loads HTTP(S) resource\n   from \"https://httpgateway/foo/origin/path/to/resource\" but with two caveats:\n\n    B.1) \"origin\" as the Origin (this is crucial, so that cookies, local storage\n         etc is the same no matter which \"httpgateway\" is used).\n\n         Ideally, it would be great if we could specify which URL segments\n         are used for Origin computation, for example:\n\n         Opening \"bar://originprefix/origin/path/to/resource\" loads HTTP(S) resource\n         from \"https://httpgateway/bar/originprefix/origin/path/to/resource\"\n         with \"originprefix/origin\" as Origin.\n\n    B.2) Keeping canonical \"foo://origin/path/to/resource\" in Location Bar\n         (hiding underlying HTTP transport for improved user experience)\n\n\nIn short, keeping canonical address in Location Bar together with programmable Origin calculation would enable us to extend Firefox with new protocols in a way that provides great UX and is compatible with Origin-based security model.\n\nI hope this is an useful data point for this discussion.\n                                                                                                                                                                                                                      \n[1] https://addons.mozilla.org/en-US/firefox/addon/ipfs-gateway-redirect/", "author": "lidel@lidel.org", "id": 12098476, "time": "2017-02-26T10:41:30Z"}, {"text": "Although bug 1310427 has landed, that doesn't fix the general case.", "author": "spectre@floodgap.com", "id": 12250361, "time": "2017-04-20T09:51:56Z"}, {"text": "*** Bug 1358334 has been marked as a duplicate of this bug. ***", "author": "kmaglione+bmo@mozilla.com", "id": 12255444, "time": "2017-04-21T18:31:21Z"}, {"text": "Will the current solution allow for user interaction?\n\nThe FoxyProxy legacy addon installs a protocol handler for proxy:// using nsIProtocolHandler. Such URLs are used to self-configure the addon. No web page is ever loaded for such URLs although they can be hosted on websites, allowing the publication of massive proxy lists and an easy point-and-click way to switch between them.\n\nHowever, user interaction is required -- the user must confirm/deny that his proxy settings are about to change. Otherwise, we'd have a massive privacy problem.", "author": "eric@ericjung.net", "id": 12256404, "time": "2017-04-22T03:03:29Z"}, {"text": "(In reply to Marcin Rataj from comment #47)\n> In short, keeping canonical address in Location Bar together with\n> programmable Origin calculation would enable us to extend Firefox with new\n> protocols in a way that provides great UX and is compatible with\n> Origin-based security model.\n\nthat\u2019s not generic enough. i want to provide the responses myself, not by creating a online service that does that for me.", "author": "flying-sheep@web.de", "id": 12518732, "time": "2017-07-30T19:26:13Z"}, {"text": "(In reply to flying sheep from comment #51)\n> i want to provide the responses myself, not by\n> creating a online service that does that for me.\n\nI agree. When using a custom protocol it should be possible to (for example) modify `webRequest.BlockingResponse` to provide byte array with response payload. Right now one can only provide `redirectUrl` which introduces a need for 3rd party service.", "author": "lidel@lidel.org", "id": 12518741, "time": "2017-07-30T19:41:24Z"}, {"text": "I think the most Web Extensions-like solution would be to allow the handler to reference a background script, but this would need a formal API, which would likely be dependent on whatever solution is developed for TCP sockets.", "author": "spectre@floodgap.com", "id": 12518842, "time": "2017-07-30T22:54:24Z"}, {"text": "+1 for a way to register extensions to handle arbitrary protocols identified by the URI scheme. This includes:\n\n- original URI remains in the location bar\n- extension handles communication (i.e., the protocol defined by the URI scheme and not some Web application)\n- an extension UI can be shown to enable user interaction\n\nGetting a TCP/UDP transport directly from the browser would be nice. Currently, I think only 'nativeMessaging' with a native application providing the transport is possible. (No idea how this should be better for security.)\n\nHaving this is the main point for browser _extensions_. I really don't understand why Firefox is becoming just a bad version of Chrome by killing all its features for developers that made Firefox better... :(\n\n(I need this for https://addons.mozilla.org/de/firefox/addon/copper-270430/. Open Mobile Alliance would need it for https://addons.mozilla.org/de/firefox/addon/oma-lwm2m-devkit/)", "author": "kovatsch@inf.ethz.ch", "id": 12574612, "time": "2017-08-17T10:47:36Z"}, {"text": "+1 for handling arbitrary protocols. At least supporting all \"web+\" prefixed ones...", "author": "brettz9@yahoo.com", "id": 12575177, "time": "2017-08-17T14:53:45Z"}, {"text": "FWIW Greasemonkey has obsoleted a need for this by using BLOBs, which have URLs we can efficiently pass from background->content.\n\nIf we were to still get anything out of this bug, it might be: given a custom protocol handler, that we could bless it to always match same origin/always pass CSP, so that we could use it to inject (image, style sheet, script, etc.) reliably into any content page.\n\nSome of the things mentioned above (the ability to register a fake source URL, which points to something meaningful when e.g. the browser console links the source of an error) would be icing.", "author": "arantius@gmail.com", "id": 12869438, "time": "2017-11-23T18:06:33Z"}, {"text": "you\u2019re missing the bigger picture, there\u2019s more to get out of this.\n\n1. permanent, bookmarkable URLs\n2. typable URLs\n3. pretty URLs\n\ne.g. my man: protocol handler extension used to work by typing \u201cman:somemanpage\u201d or \u201cman:foo/3\u201d into the address bar. that\u2019s impossible without this requested feature.", "author": "flying-sheep@web.de", "id": 12871110, "time": "2017-11-24T13:34:06Z"}, {"text": "I'd like a reliable way to trigger the handler (e.g. GoldenDict) for the dict: protocol on the operating system.", "author": "jakwings@gmail.com", "id": 12872112, "time": "2017-11-24T21:54:09Z"}, {"text": "Another part of the bigger picture as I see it are the potential for:\n\n1. Users being given choice\n2. Authors being able to have their works be less subject to site failures/disappearances\n3. Authors being able to convey genuine neutrality\n\n#1 is akin to how Windows PCs offered the revolutionary ability for users to choose which application could open their data. Users get the freedom to decide how they view (or, especially if custom content handlers are supported as well, possibly edit) data pointed out by others. (Custom protocols would also be boosted by standard support for fallback to a particular URL, so that their use did not irritate users who didn't have a particular handler designated.) For free, public uses in particular, many of the arguments for open formats are the same for allowing custom protocols: users are not locked in.\n\nFor #2, authors who pointed to neutral (and popularized) protocols would have greater assurances that if a site they linked to went bankrupt (e.g., having referenced a particular ISBN at say Borders books), their content would not need revision.\n\nFor #3, while most people have opinions and are happy to express them by referring people to particular URLs, there are plenty of cases where authors prefer to be or be seen as more neutral. For example:\n\nA. University lecturers, rather than linking to Wikipedia or Britannica, could link to \"encyclopedia:<article name>\" to encourage further study of a topic without necessarily supporting the content currently at these sites. (While naming might differ, redirects could ensure articles wouldn't typically go dead.)\n\nB. Sites advertising an event at a location, could reference a protocol of geolocation coordinates without committing users to say Google Maps.\n\nC. Other areas popular enough to justify a protocol and where neutrality would be seen as important include the ability of authors to reference religious texts--referring users to say \"Bible:Matthew:11\" rather than to a particular site host or a particular translation.", "author": "brettz9@yahoo.com", "id": 12872278, "time": "2017-11-25T01:12:40Z"}, {"text": "With Firefox 57 only WebExtensions are permitted and are, by default, e10s compatible.", "author": "bug-husbandry-bot@mozilla.bugs", "id": 12900410, "time": "2017-12-06T00:20:56Z"}, {"text": "What needs to be done to get this reopened?\n\nIt looks like the bug is reported as WebExtensions, so unclear why it was closed...", "author": "brettz9@yahoo.com", "id": 12941473, "time": "2018-01-03T14:39:05Z"}, {"text": "In order to be able to proved protocol handler that has secureContext we'd need Bug 1328695 to be fixed as currently isSecureContext is only true if channel owner has system principal or if url scheme is in the hard-coded list https://github.com/mozilla/gecko-dev/blob/3511d14f465640a6990e9629ef97dfcadc32e484/dom/security/nsContentSecurityManager.cpp#L848-L942", "author": "rFobic@gmail.com", "id": 13301761, "time": "2018-05-23T22:36:17Z"}, {"text": "I've being working on Experimental WebExtension API to provide custom protocol handler\nhttps://github.com/mozilla/libdweb/issues/2", "author": "rFobic@gmail.com", "id": 13301829, "time": "2018-05-23T22:37:34Z"}], "id": 1271553, "priority": "P5", "cc": ["agentme49@gmail.com", "andy+bugzilla@mckay.pub", "antoine.mozilla@gmail.com", "arantius@gmail.com", "asgraf@gmail.com", "bkelly@mozilla.com", "brettz9@yahoo.com", "brizzel@web.de", "bugmail@asutherland.org", "bugzilla-mozilla-20000923@james-ross.co.uk", "dennis.lissov@gmail.com", "dietrich@mozilla.com", "ehsan@mozilla.com", "erdosib@gmail.com", "eric@ericjung.net", "fabrice@desre.org", "fdsfgs@krutt.org", "flying-sheep@web.de", "frabrunelle@gmail.com", "from_bugzilla2@ssokolow.com", "honzab.moz@firemni.cz", "infoplus007@gmail.com", "jakwings@gmail.com", "jan@ikenmeyer.eu", "jduell.mcbugs@gmail.com", "jmathies@mozilla.com", "jmize@mozilla.com", "jryans@gmail.com", "karla.merza@softvision.ro", "kmaglione+bmo@mozilla.com", "kovatsch@inf.ethz.ch", "lidel@lidel.org", "mail@daviddias.me", "marsjaninzmarsa@gmail.com", "martin.thomson@gmail.com", "mixedpuppy@gmail.com", "mozbug@sambull.org", "murznn@gmail.com", "myk@mykzilla.org", "nfroyd@mozilla.com", "noitidart@gmail.com", "Off.Just.Off@gmail.com", "oli@tableflip.io", "pbrobinson@gmail.com", "pfrazee@gmail.com", "rFobic@gmail.com", "rob@robwu.nl", "samuel@sieb.net", "someuniquename@gmail.com", "spectre@floodgap.com", "umbecono@yahoo.com", "valentin.gosu@gmail.com", "victorhfmag@gmail.com", "Virtual@teknik.io", "yuki@clear-code.com"], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1332355"], "cf_tracking_thunderbird_esr60": "---", "status": "REOPENED", "product": "Toolkit", "cf_fx_iteration": "---", "blocks": [1215059, 1435798, 905436, 1310316], "qa_contact": "", "creation_time": "2016-05-10T07:53:07Z", "cf_status_firefox_esr52": "---", "component": "WebExtensions: Request Handling", "assigned_to_detail": {"email": "nobody@mozilla.org", "id": 1, "name": "nobody@mozilla.org", "real_name": "Nobody; OK to take it and work on it"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "---", "cf_status_firefox60": "---", "target_milestone": "---", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "yuki@clear-code.com", "id": 61043, "name": "yuki@clear-code.com", "real_name": "YUKI \"Piro\" Hiroshi"}, "whiteboard": "[design-decision-approved]triaged", "mentors": [], "summary": "Add ability to implement programmable custom protocol handler", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [], "last_change_time": "2018-05-23T22:37:34Z", "assigned_to": "nobody@mozilla.org", "is_open": true, "cf_blocking_webextensions": "---", "resolution": "", "op_sys": "Unspecified", "cf_fx_points": "---", "cf_blocking_fennec": "---"}