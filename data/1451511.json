{"cf_tracking_thunderbird_esr52": "---", "status": "RESOLVED", "cf_tracking_firefox60": "---", "cf_tracking_firefox61": "---", "cf_tracking_firefox62": "---", "creator": "aklotz@mozilla.com", "mentors_detail": [], "depends_on": [1432653], "cf_status_firefox_esr60": "---", "cf_user_story": "", "cf_tracking_firefox_relnote": "---", "platform": "Unspecified", "cf_status_firefox59": "---", "keywords": [], "cc_detail": [{"email": "cornel.ionce@softvision.ro", "id": 458186, "name": "cornel.ionce@softvision.ro", "real_name": "Cornel Ionce [:cornel_ionce], Desktop Release QA"}, {"email": "davidp99@gmail.com", "id": 506442, "name": "davidp99@gmail.com", "real_name": "David Parks (dparks) [:handyman]"}, {"email": "ryanvm@gmail.com", "id": 75935, "name": "ryanvm@gmail.com", "real_name": "Ryan VanderMeulen [:RyanVM]"}], "cf_last_resolved": "2018-05-01T10:22:30Z", "attachments": [{"creator": "aklotz@mozilla.com", "is_obsolete": 1, "is_patch": 1, "flags": [], "content_type": "text/plain", "id": 8967179}, {"creator": "aklotz@mozilla.com", "is_obsolete": 0, "is_patch": 1, "flags": [{"status": "+", "name": "review", "modification_date": "2018-04-19T17:47:50Z", "type_id": 4, "creation_date": "2018-04-17T19:04:15Z", "id": 1745209, "setter": "davidp99@gmail.com"}], "content_type": "text/plain", "id": 8968634}], "votes": 0, "classification": "Components", "is_confirmed": true, "is_creator_accessible": true, "cf_has_regression_range": "---", "comment_count": 17, "comments": [{"text": "Once the interceptor refactoring is done, write a memory access policy that allows us to set up hooks from our process into a child process.\n\nWrite a unit test too.", "author": "aklotz@mozilla.com", "id": 13181429, "time": "2018-04-04T21:53:04Z"}, {"text": "Created attachment 8967179\nAdd cross-process function hooking to the DLL interceptor\n\nThis patch relies on the (current) implementation of ASLR on Windows:\n\nIn particular, though module base addresses are randomized, the same module always has the same load address across all processes until the system reboots.\n\nie, I can safely assume that ntdll.dll will be present at the same address in another process as it is in my own process.\n\nOf course, this isn't set in stone: If I allocated a block of VM, followed by a DLL load that was intended for the same address, the loader would have to move the DLL.\n\nThis is actually a hard problem to solve definitively: If I create a child process in the suspended state, the child process's loader is not initialized yet, so I can't query anything to verify that we're safe.\n\nI take solace in the fact that, for our purposes, we only plan to use cross-process interceptors while the child process is in a newly created and suspended state, so it should be pretty safe to manipulate ntdll.dll and the executable binary without worrying about other stuff.", "author": "aklotz@mozilla.com", "id": 13199355, "time": "2018-04-11T21:07:48Z"}, {"text": "Created attachment 8968634\nAdd cross-process function hooking to the DLL interceptor (r2)\n\nRebased atop latest revision of bug 1432653", "author": "aklotz@mozilla.com", "id": 13213380, "time": "2018-04-17T19:04:15Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=2dd13a1371c4a9770c0586e5276d3aca6f733bf5", "author": "aklotz@mozilla.com", "id": 13216317, "time": "2018-04-18T18:49:48Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=84ff74612588f04c06c3ad50edacdeacc9c6998e", "author": "aklotz@mozilla.com", "id": 13216672, "time": "2018-04-18T20:37:34Z"}, {"text": "Comment on attachment 8968634\nAdd cross-process function hooking to the DLL interceptor (r2)\n\nReview of attachment 8968634:\n-----------------------------------------------------------------\n\nKeeping the pointer logic straight was difficult but I think its just a think that people will have to trudge through.  (For future reference, you use both Remote and Absolute to mean essentially the same thing and consolidating might help clarify... a _little_ -- but I'm not suggesting that for now.)  In the end, tho, I found almost nothing to gripe about.\n\n::: mozglue/misc/interceptor/TargetFunction.h\n@@ +365,5 @@\n> +      return;\n> +    }\n> +\n> +    size_t newSize = aDesiredLimit + 1;\n> +    if (newSize < kInlineStorage) {\n\nI'm missing the point on the kInlineStorage stuff.  Can you fill me in on why we want to read that much -- ie where did the values for kInlineStorage come from (16 in 32b, 32 in 64b)?\n\n@@ +382,5 @@\n> +    // We couldn't pull more bytes than needed (which may happen if those extra\n> +    // bytes are not accessible). In this case, we try just to get the bare\n> +    // minimum.\n> +    newSize = aDesiredLimit + 1;\n> +    MOZ_RELEASE_ASSERT(mLocalBytes.resize(newSize));\n\nnit: ASSERTs that do work make me nervous.  Can this be split into two lines?", "author": "davidp99@gmail.com", "id": 13219214, "time": "2018-04-19T17:47:50Z"}, {"text": "(In reply to David Parks (dparks) [:handyman] from comment #5)\n> Comment on attachment 8968634\n> Add cross-process function hooking to the DLL interceptor (r2)\n> \n> Review of attachment 8968634:\n> -----------------------------------------------------------------\n> \n> I'm missing the point on the kInlineStorage stuff.  Can you fill me in on\n> why we want to read that much -- ie where did the values for kInlineStorage\n> come from (16 in 32b, 32 in 64b)?\n> \n\nIn an ideal world, we'd only read 5 bytes on 32-bit and 13 bytes on 64-bit, to match the minimum bytes that we need to see in in order to patch the target function. Since the actual opcodes will often require us to pull in extra bytes above that minimum, I wanted to set the inline storage to be larger in an effort to give us extra wiggle room in the Vector before we need to touch the heap.\n\n16 and 32 were kind of arbitrary, but that's what I settled on as reasonably-sized values.\n\nni? to make sure that makes sense and you're okay with that.\n\n> @@ +382,5 @@\n> > +    // We couldn't pull more bytes than needed (which may happen if those extra\n> > +    // bytes are not accessible). In this case, we try just to get the bare\n> > +    // minimum.\n> > +    newSize = aDesiredLimit + 1;\n> > +    MOZ_RELEASE_ASSERT(mLocalBytes.resize(newSize));\n> \n> nit: ASSERTs that do work make me nervous.  Can this be split into two lines?\n\nSure, done.", "author": "aklotz@mozilla.com", "id": 13244745, "time": "2018-04-30T21:14:27Z"}, {"text": "https://treeherder.mozilla.org/#/jobs?repo=try&revision=3f705dd723a99f1c9b8f3c922075d9f3dde718e7", "author": "aklotz@mozilla.com", "id": 13244795, "time": "2018-04-30T21:26:47Z"}, {"text": "Makes sense to me.  nit - can you add a comment to kInlineStorage to that effect?  Beyond that, its all good.", "author": "davidp99@gmail.com", "id": 13245030, "time": "2018-04-30T22:55:03Z"}, {"text": "Will do.", "author": "aklotz@mozilla.com", "id": 13245031, "time": "2018-04-30T22:55:29Z"}, {"text": "https://hg.mozilla.org/integration/mozilla-inbound/rev/eea27e04c541c8f3f1221764b00a4f95de23ef78\nBug 1451511: Add cross-process function hooking to DLL interceptor; r=handyman", "author": "aklotz@mozilla.com", "id": 13245081, "time": "2018-04-30T23:45:43Z"}, {"text": "https://hg.mozilla.org/mozilla-central/rev/eea27e04c541", "author": "apavel@mozilla.com", "id": 13245742, "time": "2018-05-01T10:22:30Z"}, {"text": "This has been known to be pretty regression-prone code in the past and we're in the middle of a soft code freeze for 61. Can this wait until after the version bump? Also, should SoftVision be adding TestDllInterceptorCrossProcess to their periodic DLL Interceptor testing?", "author": "ryanvm@gmail.com", "id": 13248508, "time": "2018-05-02T13:00:03Z"}, {"text": "This adds the code but does not activate it within Firefox.\n\nIt's in the tree but compiled and used nowhere but TestDllInterceptorCrossProcess itself, hence my decision to land during soft freeze.\n\nBut yes, I'd say that SV should add the new test to their repertoire.", "author": "aklotz@mozilla.com", "id": 13249660, "time": "2018-05-02T17:51:29Z"}, {"text": "Thanks for the info, Aaron, that helps a lot. NI Cornel so Release QA knows about the new test for 61+.", "author": "ryanvm@gmail.com", "id": 13249691, "time": "2018-05-02T17:55:37Z"}, {"text": "Thanks for the heads`up, Ryan.\nFor now, this is our Test Plan for DLL Interceptor: https://docs.google.com/document/d/1I5IMsG7ORzbGUWfZ9VRrHEiroq2VwGia5mHbZgQAXXc/edit#\n\nAaron, could you please give us some test instructions / guidance in what we should add/focus on for the TestDllInterceptorCrossProcess so we can update our testing plan?", "author": "cornel.ionce@softvision.ro", "id": 13275758, "time": "2018-05-14T14:08:10Z"}, {"text": "TestDllInterceptorCrossProcess is a command line program that should be run for both 32-bit and 64-bit builds, on each supported tier-1 Windows plaform. It does not use any special command line flags or anything, just run it.\n\nIf you see one or more TEST-UNEXPECTED-FAIL messages in its output, then the test should be considered to have failed, the failures logged, and a bug reported.\n\nOtherwise there will only be TEST-PASS messages.", "author": "aklotz@mozilla.com", "id": 13372125, "time": "2018-05-29T19:08:47Z"}], "id": 1451511, "priority": "P1", "cc": ["cornel.ionce@softvision.ro", "davidp99@gmail.com", "ryanvm@gmail.com"], "cf_crash_signature": "", "version": "Trunk", "is_cc_accessible": true, "cf_tracking_firefox_esr52": "---", "see_also": ["https://bugzilla.mozilla.org/show_bug.cgi?id=1467798"], "cf_tracking_thunderbird_esr60": "---", "cf_platform_rel": "---", "product": "Core", "cf_fx_iteration": "---", "blocks": [1435780], "qa_contact": "", "creation_time": "2018-04-04T21:53:04Z", "cf_status_firefox_esr52": "---", "component": "General", "assigned_to_detail": {"email": "aklotz@mozilla.com", "id": 454100, "name": "aklotz@mozilla.com", "real_name": "Aaron Klotz [:aklotz]"}, "cf_tracking_firefox_esr60": "---", "cf_status_firefox62": "---", "cf_status_firefox61": "fixed", "cf_status_firefox60": "---", "target_milestone": "mozilla61", "cf_rank": null, "cf_qa_whiteboard": "", "severity": "normal", "groups": [], "cf_status_thunderbird_esr52": "---", "url": "", "cf_status_thunderbird_esr60": "---", "creator_detail": {"email": "aklotz@mozilla.com", "id": 454100, "name": "aklotz@mozilla.com", "real_name": "Aaron Klotz [:aklotz]"}, "whiteboard": "inj+", "mentors": [], "summary": "Add out-of-process memory access policies to DLL interceptor", "cf_has_str": "---", "alias": null, "dupe_of": null, "flags": [{"status": "+", "name": "in-testsuite", "modification_date": "2018-05-02T13:00:03Z", "type_id": 37, "creation_date": "2018-05-02T13:00:03Z", "id": 1751606, "setter": "ryanvm@gmail.com"}], "last_change_time": "2018-06-08T14:36:03Z", "assigned_to": "aklotz@mozilla.com", "is_open": false, "history": [{"changes": [{"removed": "", "field_name": "cc", "added": "davidp99@gmail.com"}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8967179, "added": "review?(davidp99@gmail.com)"}], "who": "aklotz@mozilla.com", "when": "2018-04-11T21:07:48Z"}, {"changes": [{"field_name": "attachments.isobsolete", "removed": "0", "attachment_id": 8967179, "added": "1"}, {"field_name": "flagtypes.name", "removed": "review?(davidp99@gmail.com)", "attachment_id": 8967179, "added": ""}, {"field_name": "flagtypes.name", "removed": "", "attachment_id": 8968634, "added": "review?(davidp99@gmail.com)"}], "who": "aklotz@mozilla.com", "when": "2018-04-17T19:04:15Z"}, {"changes": [{"field_name": "flagtypes.name", "removed": "review?(davidp99@gmail.com)", "attachment_id": 8968634, "added": "review+"}], "who": "davidp99@gmail.com", "when": "2018-04-19T17:47:50Z"}, {"changes": [{"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(davidp99@gmail.com)"}], "who": "aklotz@mozilla.com", "when": "2018-04-30T21:14:27Z"}, {"changes": [{"removed": "needinfo?(davidp99@gmail.com)", "field_name": "flagtypes.name", "added": ""}], "who": "davidp99@gmail.com", "when": "2018-04-30T22:55:03Z"}, {"changes": [{"removed": "ASSIGNED", "field_name": "status", "added": "RESOLVED"}, {"removed": "", "field_name": "resolution", "added": "FIXED"}, {"removed": "---", "field_name": "target_milestone", "added": "mozilla61"}, {"removed": "", "field_name": "cf_last_resolved", "added": "2018-05-01 10:22:30"}, {"removed": "affected", "field_name": "cf_status_firefox61", "added": "fixed"}], "who": "apavel@mozilla.com", "when": "2018-05-01T10:22:30Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "ryanvm@gmail.com"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(aklotz@mozilla.com), in-testsuite+"}], "who": "ryanvm@gmail.com", "when": "2018-05-02T13:00:03Z"}, {"changes": [{"removed": "needinfo?(aklotz@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "aklotz@mozilla.com", "when": "2018-05-02T17:51:29Z"}, {"changes": [{"removed": "", "field_name": "cc", "added": "cornel.ionce@softvision.ro"}, {"removed": "", "field_name": "flagtypes.name", "added": "needinfo?(cornel.ionce@softvision.ro)"}], "who": "ryanvm@gmail.com", "when": "2018-05-02T17:55:37Z"}, {"changes": [{"removed": "needinfo?(cornel.ionce@softvision.ro)", "field_name": "flagtypes.name", "added": "needinfo?(aklotz@mozilla.com)"}], "who": "cornel.ionce@softvision.ro", "when": "2018-05-14T14:08:10Z"}, {"changes": [{"removed": "needinfo?(aklotz@mozilla.com)", "field_name": "flagtypes.name", "added": ""}], "who": "aklotz@mozilla.com", "when": "2018-05-29T19:08:47Z"}, {"changes": [{"removed": "", "field_name": "see_also", "added": "https://bugzilla.mozilla.org/show_bug.cgi?id=1467798"}], "who": "iulia.cristescu@softvision.ro", "when": "2018-06-08T14:36:03Z"}], "resolution": "FIXED", "op_sys": "Windows", "cf_fx_points": "---", "cf_blocking_fennec": "---"}